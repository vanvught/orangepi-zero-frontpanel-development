In archive lib_linux/libconfigstore.a:

config_delay.o:     file format elf64-x86-64


Disassembly of section .text._ZN11ConfigStore3GetEv:

0000000000000000 <ConfigStore::Get()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 22 <ConfigStore::Get()+0x22>
  22:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  26:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  2d:	00 00 
  2f:	74 05                	je     36 <ConfigStore::Get()+0x36>
  31:	e8 00 00 00 00       	call   36 <ConfigStore::Get()+0x36>
  36:	c9                   	leave  
  37:	c3                   	ret    

Disassembly of section .text._ZN11configstore5delayEv:

0000000000000000 <configstore::delay()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	e8 00 00 00 00       	call   20 <configstore::delay()+0x20>
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	call   28 <configstore::delay()+0x28>
  28:	90                   	nop
  29:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2d:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  34:	00 00 
  36:	74 05                	je     3d <configstore::delay()+0x3d>
  38:	e8 00 00 00 00       	call   3d <configstore::delay()+0x3d>
  3d:	c9                   	leave  
  3e:	c3                   	ret    

configstore.o:     file format elf64-x86-64


Disassembly of section .text._ZNK11StoreDevice10IsDetectedEv:

0000000000000000 <StoreDevice::IsDetected() const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	0f b6 00             	movzbl (%rax),%eax
  26:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  2a:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  31:	00 00 
  33:	74 05                	je     3a <StoreDevice::IsDetected() const+0x3a>
  35:	e8 00 00 00 00       	call   3a <StoreDevice::IsDetected() const+0x3a>
  3a:	c9                   	leave  
  3b:	c3                   	ret    

Disassembly of section .text._ZN11ConfigStore6UpdateEN11configstore5StoreEPKvj:

0000000000000000 <ConfigStore::Update(configstore::Store, void const*, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  13:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  17:	89 4d e0             	mov    %ecx,-0x20(%rbp)
  1a:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  21:	00 00 
  23:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  27:	31 c0                	xor    %eax,%eax
  29:	8b 4d e0             	mov    -0x20(%rbp),%ecx
  2c:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  30:	8b 75 e4             	mov    -0x1c(%rbp),%esi
  33:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  37:	48 83 ec 08          	sub    $0x8,%rsp
  3b:	6a 00                	push   $0x0
  3d:	41 b9 00 00 00 00    	mov    $0x0,%r9d
  43:	41 89 c8             	mov    %ecx,%r8d
  46:	48 89 d1             	mov    %rdx,%rcx
  49:	ba 00 00 00 00       	mov    $0x0,%edx
  4e:	48 89 c7             	mov    %rax,%rdi
  51:	e8 00 00 00 00       	call   56 <ConfigStore::Update(configstore::Store, void const*, unsigned int)+0x56>
  56:	48 83 c4 10          	add    $0x10,%rsp
  5a:	90                   	nop
  5b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  5f:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  66:	00 00 
  68:	74 05                	je     6f <ConfigStore::Update(configstore::Store, void const*, unsigned int)+0x6f>
  6a:	e8 00 00 00 00       	call   6f <ConfigStore::Update(configstore::Store, void const*, unsigned int)+0x6f>
  6f:	c9                   	leave  
  70:	c3                   	ret    

Disassembly of section .text._ZN8Hardware3GetEv:

0000000000000000 <Hardware::Get()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 22 <Hardware::Get()+0x22>
  22:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  26:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  2d:	00 00 
  2f:	74 05                	je     36 <Hardware::Get()+0x36>
  31:	e8 00 00 00 00       	call   36 <Hardware::Get()+0x36>
  36:	c9                   	leave  
  37:	c3                   	ret    

Disassembly of section .text._ZN11ConfigStoreC2Ev:

0000000000000000 <ConfigStore::ConfigStore()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	call   2b <ConfigStore::ConfigStore()+0x2b>
  2b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  2f:	48 89 05 00 00 00 00 	mov    %rax,0x0(%rip)        # 36 <ConfigStore::ConfigStore()+0x36>
  36:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  3a:	48 89 c7             	mov    %rax,%rdi
  3d:	e8 00 00 00 00       	call   42 <ConfigStore::ConfigStore()+0x42>
  42:	88 05 00 00 00 00    	mov    %al,0x0(%rip)        # 48 <ConfigStore::ConfigStore()+0x48>
  48:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4c:	48 89 c7             	mov    %rax,%rdi
  4f:	e8 00 00 00 00       	call   54 <ConfigStore::ConfigStore()+0x54>
  54:	89 45 f0             	mov    %eax,-0x10(%rbp)
  57:	b8 00 10 00 00       	mov    $0x1000,%eax
  5c:	ba 00 00 00 00       	mov    $0x0,%edx
  61:	f7 75 f0             	divl   -0x10(%rbp)
  64:	89 45 f4             	mov    %eax,-0xc(%rbp)
  67:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  6b:	48 89 c7             	mov    %rax,%rdi
  6e:	e8 00 00 00 00       	call   73 <ConfigStore::ConfigStore()+0x73>
  73:	8b 55 f4             	mov    -0xc(%rbp),%edx
  76:	0f af 55 f0          	imul   -0x10(%rbp),%edx
  7a:	29 d0                	sub    %edx,%eax
  7c:	89 05 00 00 00 00    	mov    %eax,0x0(%rip)        # 82 <ConfigStore::ConfigStore()+0x82>
  82:	0f b6 05 00 00 00 00 	movzbl 0x0(%rip),%eax        # 89 <ConfigStore::ConfigStore()+0x89>
  89:	84 c0                	test   %al,%al
  8b:	74 28                	je     b5 <ConfigStore::ConfigStore()+0xb5>
  8d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  91:	8b 35 00 00 00 00    	mov    0x0(%rip),%esi        # 97 <ConfigStore::ConfigStore()+0x97>
  97:	48 8d 55 e4          	lea    -0x1c(%rbp),%rdx
  9b:	49 89 d0             	mov    %rdx,%r8
  9e:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # a5 <ConfigStore::ConfigStore()+0xa5>
  a5:	48 89 d1             	mov    %rdx,%rcx
  a8:	ba 00 10 00 00       	mov    $0x1000,%edx
  ad:	48 89 c7             	mov    %rax,%rdi
  b0:	e8 00 00 00 00       	call   b5 <ConfigStore::ConfigStore()+0xb5>
  b5:	c6 45 e3 01          	movb   $0x1,-0x1d(%rbp)
  b9:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%rbp)
  c0:	eb 43                	jmp    105 <ConfigStore::ConfigStore()+0x105>
  c2:	8b 45 e8             	mov    -0x18(%rbp),%eax
  c5:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # cc <ConfigStore::ConfigStore()+0xcc>
  cc:	0f b6 14 10          	movzbl (%rax,%rdx,1),%edx
  d0:	8b 45 e8             	mov    -0x18(%rbp),%eax
  d3:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # da <ConfigStore::ConfigStore()+0xda>
  da:	0f b6 04 08          	movzbl (%rax,%rcx,1),%eax
  de:	38 c2                	cmp    %al,%dl
  e0:	74 1f                	je     101 <ConfigStore::ConfigStore()+0x101>
  e2:	8b 45 e8             	mov    -0x18(%rbp),%eax
  e5:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # ec <ConfigStore::ConfigStore()+0xec>
  ec:	0f b6 14 10          	movzbl (%rax,%rdx,1),%edx
  f0:	8b 45 e8             	mov    -0x18(%rbp),%eax
  f3:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # fa <ConfigStore::ConfigStore()+0xfa>
  fa:	88 14 08             	mov    %dl,(%rax,%rcx,1)
  fd:	c6 45 e3 00          	movb   $0x0,-0x1d(%rbp)
 101:	83 45 e8 01          	addl   $0x1,-0x18(%rbp)
 105:	83 7d e8 03          	cmpl   $0x3,-0x18(%rbp)
 109:	76 b7                	jbe    c2 <ConfigStore::ConfigStore()+0xc2>
 10b:	0f b6 45 e3          	movzbl -0x1d(%rbp),%eax
 10f:	83 f0 01             	xor    $0x1,%eax
 112:	84 c0                	test   %al,%al
 114:	74 23                	je     139 <ConfigStore::ConfigStore()+0x139>
 116:	ba e0 0f 00 00       	mov    $0xfe0,%edx
 11b:	be 00 00 00 00       	mov    $0x0,%esi
 120:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 127 <ConfigStore::ConfigStore()+0x127>
 127:	48 89 c7             	mov    %rax,%rdi
 12a:	e8 00 00 00 00       	call   12f <ConfigStore::ConfigStore()+0x12f>
 12f:	c7 05 00 00 00 00 01 	movl   $0x1,0x0(%rip)        # 139 <ConfigStore::ConfigStore()+0x139>
 136:	00 00 00 
 139:	c7 05 00 00 00 00 20 	movl   $0x20,0x0(%rip)        # 143 <ConfigStore::ConfigStore()+0x143>
 140:	00 00 00 
 143:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
 14a:	eb 27                	jmp    173 <ConfigStore::ConfigStore()+0x173>
 14c:	8b 45 ec             	mov    -0x14(%rbp),%eax
 14f:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
 156:	00 
 157:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 15e <ConfigStore::ConfigStore()+0x15e>
 15e:	8b 14 02             	mov    (%rdx,%rax,1),%edx
 161:	8b 05 00 00 00 00    	mov    0x0(%rip),%eax        # 167 <ConfigStore::ConfigStore()+0x167>
 167:	01 d0                	add    %edx,%eax
 169:	89 05 00 00 00 00    	mov    %eax,0x0(%rip)        # 16f <ConfigStore::ConfigStore()+0x16f>
 16f:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
 173:	83 7d ec 19          	cmpl   $0x19,-0x14(%rbp)
 177:	76 d3                	jbe    14c <ConfigStore::ConfigStore()+0x14c>
 179:	90                   	nop
 17a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 17e:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 185:	00 00 
 187:	74 05                	je     18e <ConfigStore::ConfigStore()+0x18e>
 189:	e8 00 00 00 00       	call   18e <ConfigStore::ConfigStore()+0x18e>
 18e:	c9                   	leave  
 18f:	c3                   	ret    

Disassembly of section .text._ZN11ConfigStore14GetStoreOffsetEN11configstore5StoreE:

0000000000000000 <ConfigStore::GetStoreOffset(configstore::Store)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  13:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1a:	00 00 
  1c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  20:	31 c0                	xor    %eax,%eax
  22:	c7 45 f0 20 00 00 00 	movl   $0x20,-0x10(%rbp)
  29:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  30:	eb 1c                	jmp    4e <ConfigStore::GetStoreOffset(configstore::Store)+0x4e>
  32:	8b 45 f4             	mov    -0xc(%rbp),%eax
  35:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
  3c:	00 
  3d:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 44 <ConfigStore::GetStoreOffset(configstore::Store)+0x44>
  44:	8b 04 02             	mov    (%rdx,%rax,1),%eax
  47:	01 45 f0             	add    %eax,-0x10(%rbp)
  4a:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  4e:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  51:	39 45 f4             	cmp    %eax,-0xc(%rbp)
  54:	72 dc                	jb     32 <ConfigStore::GetStoreOffset(configstore::Store)+0x32>
  56:	8b 45 f0             	mov    -0x10(%rbp),%eax
  59:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  5d:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  64:	00 00 
  66:	74 05                	je     6d <ConfigStore::GetStoreOffset(configstore::Store)+0x6d>
  68:	e8 00 00 00 00       	call   6d <ConfigStore::GetStoreOffset(configstore::Store)+0x6d>
  6d:	c9                   	leave  
  6e:	c3                   	ret    

Disassembly of section .text._ZN11ConfigStore12ResetSetListEN11configstore5StoreE:

0000000000000000 <ConfigStore::ResetSetList(configstore::Store)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  13:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1a:	00 00 
  1c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  20:	31 c0                	xor    %eax,%eax
  22:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  25:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  29:	89 d6                	mov    %edx,%esi
  2b:	48 89 c7             	mov    %rax,%rdi
  2e:	e8 00 00 00 00       	call   33 <ConfigStore::ResetSetList(configstore::Store)+0x33>
  33:	89 c2                	mov    %eax,%edx
  35:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 3c <ConfigStore::ResetSetList(configstore::Store)+0x3c>
  3c:	48 01 d0             	add    %rdx,%rax
  3f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  43:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  47:	48 8d 50 01          	lea    0x1(%rax),%rdx
  4b:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
  4f:	c6 00 00             	movb   $0x0,(%rax)
  52:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  56:	48 8d 50 01          	lea    0x1(%rax),%rdx
  5a:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
  5e:	c6 00 00             	movb   $0x0,(%rax)
  61:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  65:	48 8d 50 01          	lea    0x1(%rax),%rdx
  69:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
  6d:	c6 00 00             	movb   $0x0,(%rax)
  70:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  74:	c6 00 00             	movb   $0x0,(%rax)
  77:	c7 05 00 00 00 00 01 	movl   $0x1,0x0(%rip)        # 81 <ConfigStore::ResetSetList(configstore::Store)+0x81>
  7e:	00 00 00 
  81:	90                   	nop
  82:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  86:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  8d:	00 00 
  8f:	74 05                	je     96 <ConfigStore::ResetSetList(configstore::Store)+0x96>
  91:	e8 00 00 00 00       	call   96 <ConfigStore::ResetSetList(configstore::Store)+0x96>
  96:	c9                   	leave  
  97:	c3                   	ret    

Disassembly of section .text._ZN11ConfigStore6UpdateEN11configstore5StoreEjPKvjjj:

0000000000000000 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 60          	sub    $0x60,%rsp
   c:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  10:	89 75 c4             	mov    %esi,-0x3c(%rbp)
  13:	89 55 c0             	mov    %edx,-0x40(%rbp)
  16:	48 89 4d b8          	mov    %rcx,-0x48(%rbp)
  1a:	44 89 45 b4          	mov    %r8d,-0x4c(%rbp)
  1e:	44 89 4d b0          	mov    %r9d,-0x50(%rbp)
  22:	8b 45 10             	mov    0x10(%rbp),%eax
  25:	89 45 ac             	mov    %eax,-0x54(%rbp)
  28:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  2f:	00 00 
  31:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  35:	31 c0                	xor    %eax,%eax
  37:	c6 45 d7 00          	movb   $0x0,-0x29(%rbp)
  3b:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  3e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  42:	89 d6                	mov    %edx,%esi
  44:	48 89 c7             	mov    %rax,%rdi
  47:	e8 00 00 00 00       	call   4c <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x4c>
  4c:	8b 55 c0             	mov    -0x40(%rbp),%edx
  4f:	01 d0                	add    %edx,%eax
  51:	89 45 dc             	mov    %eax,-0x24(%rbp)
  54:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  58:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  5c:	8b 45 dc             	mov    -0x24(%rbp),%eax
  5f:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 66 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x66>
  66:	48 01 d0             	add    %rdx,%rax
  69:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  6d:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%rbp)
  74:	eb 31                	jmp    a7 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0xa7>
  76:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  7a:	0f b6 10             	movzbl (%rax),%edx
  7d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  81:	0f b6 00             	movzbl (%rax),%eax
  84:	38 c2                	cmp    %al,%dl
  86:	74 11                	je     99 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x99>
  88:	c6 45 d7 01          	movb   $0x1,-0x29(%rbp)
  8c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  90:	0f b6 10             	movzbl (%rax),%edx
  93:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  97:	88 10                	mov    %dl,(%rax)
  99:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
  9e:	48 83 45 e0 01       	addq   $0x1,-0x20(%rbp)
  a3:	83 45 d8 01          	addl   $0x1,-0x28(%rbp)
  a7:	8b 45 d8             	mov    -0x28(%rbp),%eax
  aa:	3b 45 b4             	cmp    -0x4c(%rbp),%eax
  ad:	72 c7                	jb     76 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x76>
  af:	83 7d c0 00          	cmpl   $0x0,-0x40(%rbp)
  b3:	74 44                	je     f9 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0xf9>
  b5:	80 7d d7 00          	cmpb   $0x0,-0x29(%rbp)
  b9:	74 3e                	je     f9 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0xf9>
  bb:	83 7d b0 00          	cmpl   $0x0,-0x50(%rbp)
  bf:	74 38                	je     f9 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0xf9>
  c1:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  c4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  c8:	89 d6                	mov    %edx,%esi
  ca:	48 89 c7             	mov    %rax,%rdi
  cd:	e8 00 00 00 00       	call   d2 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0xd2>
  d2:	89 c2                	mov    %eax,%edx
  d4:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # db <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0xdb>
  db:	48 01 c2             	add    %rax,%rdx
  de:	8b 45 ac             	mov    -0x54(%rbp),%eax
  e1:	48 01 d0             	add    %rdx,%rax
  e4:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  e8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  ec:	8b 00                	mov    (%rax),%eax
  ee:	0b 45 b0             	or     -0x50(%rbp),%eax
  f1:	89 c2                	mov    %eax,%edx
  f3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  f7:	89 10                	mov    %edx,(%rax)
  f9:	80 7d d7 00          	cmpb   $0x0,-0x29(%rbp)
  fd:	74 0a                	je     109 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x109>
  ff:	c7 05 00 00 00 00 01 	movl   $0x1,0x0(%rip)        # 109 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x109>
 106:	00 00 00 
 109:	90                   	nop
 10a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 10e:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 115:	00 00 
 117:	74 05                	je     11e <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x11e>
 119:	e8 00 00 00 00       	call   11e <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x11e>
 11e:	c9                   	leave  
 11f:	c3                   	ret    

Disassembly of section .text._ZN11ConfigStore4CopyEN11configstore5StoreEPvjj:

0000000000000000 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 40          	sub    $0x40,%rsp
   c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10:	89 75 d4             	mov    %esi,-0x2c(%rbp)
  13:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  17:	89 4d d0             	mov    %ecx,-0x30(%rbp)
  1a:	44 89 45 c4          	mov    %r8d,-0x3c(%rbp)
  1e:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  25:	00 00 
  27:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  2b:	31 c0                	xor    %eax,%eax
  2d:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  30:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  34:	89 d6                	mov    %edx,%esi
  36:	48 89 c7             	mov    %rax,%rdi
  39:	e8 00 00 00 00       	call   3e <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int)+0x3e>
  3e:	89 c2                	mov    %eax,%edx
  40:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 47 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int)+0x47>
  47:	48 01 c2             	add    %rax,%rdx
  4a:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  4d:	48 01 d0             	add    %rdx,%rax
  50:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  54:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  58:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  5c:	c6 45 e3 01          	movb   $0x1,-0x1d(%rbp)
  60:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  67:	eb 1b                	jmp    84 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int)+0x84>
  69:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  6c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  70:	48 01 d0             	add    %rdx,%rax
  73:	0f b6 00             	movzbl (%rax),%eax
  76:	84 c0                	test   %al,%al
  78:	74 06                	je     80 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int)+0x80>
  7a:	c6 45 e3 00          	movb   $0x0,-0x1d(%rbp)
  7e:	eb 0c                	jmp    8c <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int)+0x8c>
  80:	83 45 e4 01          	addl   $0x1,-0x1c(%rbp)
  84:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  87:	3b 45 d0             	cmp    -0x30(%rbp),%eax
  8a:	72 dd                	jb     69 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int)+0x69>
  8c:	0f b6 45 e3          	movzbl -0x1d(%rbp),%eax
  90:	83 f0 01             	xor    $0x1,%eax
  93:	84 c0                	test   %al,%al
  95:	74 18                	je     af <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int)+0xaf>
  97:	8b 55 d0             	mov    -0x30(%rbp),%edx
  9a:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  9e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  a2:	48 89 ce             	mov    %rcx,%rsi
  a5:	48 89 c7             	mov    %rax,%rdi
  a8:	e8 00 00 00 00       	call   ad <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int)+0xad>
  ad:	eb 16                	jmp    c5 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int)+0xc5>
  af:	8b 4d d0             	mov    -0x30(%rbp),%ecx
  b2:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  b6:	8b 75 d4             	mov    -0x2c(%rbp),%esi
  b9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  bd:	48 89 c7             	mov    %rax,%rdi
  c0:	e8 00 00 00 00       	call   c5 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int)+0xc5>
  c5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  c9:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  d0:	00 00 
  d2:	74 05                	je     d9 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int)+0xd9>
  d4:	e8 00 00 00 00       	call   d9 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int)+0xd9>
  d9:	c9                   	leave  
  da:	c3                   	ret    

Disassembly of section .text._ZN11ConfigStore5DelayEv:

0000000000000000 <ConfigStore::Delay()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	8b 05 00 00 00 00    	mov    0x0(%rip),%eax        # 25 <ConfigStore::Delay()+0x25>
  25:	85 c0                	test   %eax,%eax
  27:	74 0a                	je     33 <ConfigStore::Delay()+0x33>
  29:	c7 05 00 00 00 00 01 	movl   $0x1,0x0(%rip)        # 33 <ConfigStore::Delay()+0x33>
  30:	00 00 00 
  33:	90                   	nop
  34:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  38:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  3f:	00 00 
  41:	74 05                	je     48 <ConfigStore::Delay()+0x48>
  43:	e8 00 00 00 00       	call   48 <ConfigStore::Delay()+0x48>
  48:	c9                   	leave  
  49:	c3                   	ret    

Disassembly of section .text._ZN11ConfigStore5FlashEv:

0000000000000000 <ConfigStore::Flash()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	8b 05 00 00 00 00    	mov    0x0(%rip),%eax        # 25 <ConfigStore::Flash()+0x25>
  25:	85 c0                	test   %eax,%eax
  27:	0f 94 c0             	sete   %al
  2a:	0f b6 c0             	movzbl %al,%eax
  2d:	48 85 c0             	test   %rax,%rax
  30:	74 0a                	je     3c <ConfigStore::Flash()+0x3c>
  32:	b8 00 00 00 00       	mov    $0x0,%eax
  37:	e9 5e 01 00 00       	jmp    19a <ConfigStore::Flash()+0x19a>
  3c:	8b 05 00 00 00 00    	mov    0x0(%rip),%eax        # 42 <ConfigStore::Flash()+0x42>
  42:	89 c0                	mov    %eax,%eax
  44:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
  4b:	00 
  4c:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 53 <ConfigStore::Flash()+0x53>
  53:	8b 04 02             	mov    (%rdx,%rax,1),%eax
  56:	48 98                	cltq   
  58:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 5f <ConfigStore::Flash()+0x5f>
  5f:	48 01 d0             	add    %rdx,%rax
  62:	3e ff e0             	notrack jmp *%rax
  65:	e8 00 00 00 00       	call   6a <ConfigStore::Flash()+0x6a>
  6a:	48 89 c7             	mov    %rax,%rdi
  6d:	e8 00 00 00 00       	call   72 <ConfigStore::Flash()+0x72>
  72:	89 05 00 00 00 00    	mov    %eax,0x0(%rip)        # 78 <ConfigStore::Flash()+0x78>
  78:	c7 05 00 00 00 00 02 	movl   $0x2,0x0(%rip)        # 82 <ConfigStore::Flash()+0x82>
  7f:	00 00 00 
  82:	b8 01 00 00 00       	mov    $0x1,%eax
  87:	e9 0e 01 00 00       	jmp    19a <ConfigStore::Flash()+0x19a>
  8c:	e8 00 00 00 00       	call   91 <ConfigStore::Flash()+0x91>
  91:	48 89 c7             	mov    %rax,%rdi
  94:	e8 00 00 00 00       	call   99 <ConfigStore::Flash()+0x99>
  99:	8b 15 00 00 00 00    	mov    0x0(%rip),%edx        # 9f <ConfigStore::Flash()+0x9f>
  9f:	29 d0                	sub    %edx,%eax
  a1:	83 f8 63             	cmp    $0x63,%eax
  a4:	0f 96 c0             	setbe  %al
  a7:	84 c0                	test   %al,%al
  a9:	74 0a                	je     b5 <ConfigStore::Flash()+0xb5>
  ab:	b8 01 00 00 00       	mov    $0x1,%eax
  b0:	e9 e5 00 00 00       	jmp    19a <ConfigStore::Flash()+0x19a>
  b5:	c7 05 00 00 00 00 03 	movl   $0x3,0x0(%rip)        # bf <ConfigStore::Flash()+0xbf>
  bc:	00 00 00 
  bf:	b8 01 00 00 00       	mov    $0x1,%eax
  c4:	e9 d1 00 00 00       	jmp    19a <ConfigStore::Flash()+0x19a>
  c9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  cd:	8b 35 00 00 00 00    	mov    0x0(%rip),%esi        # d3 <ConfigStore::Flash()+0xd3>
  d3:	48 8d 55 f4          	lea    -0xc(%rbp),%rdx
  d7:	48 89 d1             	mov    %rdx,%rcx
  da:	ba 00 10 00 00       	mov    $0x1000,%edx
  df:	48 89 c7             	mov    %rax,%rdi
  e2:	e8 00 00 00 00       	call   e7 <ConfigStore::Flash()+0xe7>
  e7:	84 c0                	test   %al,%al
  e9:	74 1d                	je     108 <ConfigStore::Flash()+0x108>
  eb:	e8 00 00 00 00       	call   f0 <ConfigStore::Flash()+0xf0>
  f0:	48 89 c7             	mov    %rax,%rdi
  f3:	e8 00 00 00 00       	call   f8 <ConfigStore::Flash()+0xf8>
  f8:	89 05 00 00 00 00    	mov    %eax,0x0(%rip)        # fe <ConfigStore::Flash()+0xfe>
  fe:	c7 05 00 00 00 00 05 	movl   $0x5,0x0(%rip)        # 108 <ConfigStore::Flash()+0x108>
 105:	00 00 00 
 108:	b8 01 00 00 00       	mov    $0x1,%eax
 10d:	e9 88 00 00 00       	jmp    19a <ConfigStore::Flash()+0x19a>
 112:	e8 00 00 00 00       	call   117 <ConfigStore::Flash()+0x117>
 117:	48 89 c7             	mov    %rax,%rdi
 11a:	e8 00 00 00 00       	call   11f <ConfigStore::Flash()+0x11f>
 11f:	8b 15 00 00 00 00    	mov    0x0(%rip),%edx        # 125 <ConfigStore::Flash()+0x125>
 125:	29 d0                	sub    %edx,%eax
 127:	83 f8 63             	cmp    $0x63,%eax
 12a:	0f 96 c0             	setbe  %al
 12d:	84 c0                	test   %al,%al
 12f:	74 07                	je     138 <ConfigStore::Flash()+0x138>
 131:	b8 01 00 00 00       	mov    $0x1,%eax
 136:	eb 62                	jmp    19a <ConfigStore::Flash()+0x19a>
 138:	c7 05 00 00 00 00 04 	movl   $0x4,0x0(%rip)        # 142 <ConfigStore::Flash()+0x142>
 13f:	00 00 00 
 142:	b8 01 00 00 00       	mov    $0x1,%eax
 147:	eb 51                	jmp    19a <ConfigStore::Flash()+0x19a>
 149:	c7 05 00 00 00 00 06 	movl   $0x6,0x0(%rip)        # 153 <ConfigStore::Flash()+0x153>
 150:	00 00 00 
 153:	b8 01 00 00 00       	mov    $0x1,%eax
 158:	eb 40                	jmp    19a <ConfigStore::Flash()+0x19a>
 15a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 15e:	8b 15 00 00 00 00    	mov    0x0(%rip),%edx        # 164 <ConfigStore::Flash()+0x164>
 164:	8b 35 00 00 00 00    	mov    0x0(%rip),%esi        # 16a <ConfigStore::Flash()+0x16a>
 16a:	48 8d 4d f4          	lea    -0xc(%rbp),%rcx
 16e:	49 89 c8             	mov    %rcx,%r8
 171:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 178 <ConfigStore::Flash()+0x178>
 178:	48 89 c7             	mov    %rax,%rdi
 17b:	e8 00 00 00 00       	call   180 <ConfigStore::Flash()+0x180>
 180:	84 c0                	test   %al,%al
 182:	74 11                	je     195 <ConfigStore::Flash()+0x195>
 184:	c7 05 00 00 00 00 00 	movl   $0x0,0x0(%rip)        # 18e <ConfigStore::Flash()+0x18e>
 18b:	00 00 00 
 18e:	b8 00 00 00 00       	mov    $0x0,%eax
 193:	eb 05                	jmp    19a <ConfigStore::Flash()+0x19a>
 195:	b8 01 00 00 00       	mov    $0x1,%eax
 19a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
 19e:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
 1a5:	00 00 
 1a7:	74 05                	je     1ae <ConfigStore::Flash()+0x1ae>
 1a9:	e8 00 00 00 00       	call   1ae <ConfigStore::Flash()+0x1ae>
 1ae:	c9                   	leave  
 1af:	c3                   	ret    

Disassembly of section .text._ZN11ConfigStore4DumpEv:

0000000000000000 <ConfigStore::Dump()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	90                   	nop
  20:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  24:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  2b:	00 00 
  2d:	74 05                	je     34 <ConfigStore::Dump()+0x34>
  2f:	e8 00 00 00 00       	call   34 <ConfigStore::Dump()+0x34>
  34:	c9                   	leave  
  35:	c3                   	ret    

storemidi.o:     file format elf64-x86-64


Disassembly of section .text._ZN15MidiParamsStoreD2Ev:

0000000000000000 <MidiParamsStore::~MidiParamsStore()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 26 <MidiParamsStore::~MidiParamsStore()+0x26>
  26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2a:	48 89 10             	mov    %rdx,(%rax)
  2d:	90                   	nop
  2e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  32:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  39:	00 00 
  3b:	74 05                	je     42 <MidiParamsStore::~MidiParamsStore()+0x42>
  3d:	e8 00 00 00 00       	call   42 <MidiParamsStore::~MidiParamsStore()+0x42>
  42:	c9                   	leave  
  43:	c3                   	ret    

Disassembly of section .text._ZN15MidiParamsStoreD0Ev:

0000000000000000 <MidiParamsStore::~MidiParamsStore()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	call   2b <MidiParamsStore::~MidiParamsStore()+0x2b>
  2b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	call   37 <MidiParamsStore::~MidiParamsStore()+0x37>
  37:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3b:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  42:	00 00 
  44:	74 05                	je     4b <MidiParamsStore::~MidiParamsStore()+0x4b>
  46:	e8 00 00 00 00       	call   4b <MidiParamsStore::~MidiParamsStore()+0x4b>
  4b:	c9                   	leave  
  4c:	c3                   	ret    

Disassembly of section .text._ZN11ConfigStore6UpdateEN11configstore5StoreEPKvj:

0000000000000000 <ConfigStore::Update(configstore::Store, void const*, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  13:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  17:	89 4d e0             	mov    %ecx,-0x20(%rbp)
  1a:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  21:	00 00 
  23:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  27:	31 c0                	xor    %eax,%eax
  29:	8b 4d e0             	mov    -0x20(%rbp),%ecx
  2c:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  30:	8b 75 e4             	mov    -0x1c(%rbp),%esi
  33:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  37:	48 83 ec 08          	sub    $0x8,%rsp
  3b:	6a 00                	push   $0x0
  3d:	41 b9 00 00 00 00    	mov    $0x0,%r9d
  43:	41 89 c8             	mov    %ecx,%r8d
  46:	48 89 d1             	mov    %rdx,%rcx
  49:	ba 00 00 00 00       	mov    $0x0,%edx
  4e:	48 89 c7             	mov    %rax,%rdi
  51:	e8 00 00 00 00       	call   56 <ConfigStore::Update(configstore::Store, void const*, unsigned int)+0x56>
  56:	48 83 c4 10          	add    $0x10,%rsp
  5a:	90                   	nop
  5b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  5f:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  66:	00 00 
  68:	74 05                	je     6f <ConfigStore::Update(configstore::Store, void const*, unsigned int)+0x6f>
  6a:	e8 00 00 00 00       	call   6f <ConfigStore::Update(configstore::Store, void const*, unsigned int)+0x6f>
  6f:	c9                   	leave  
  70:	c3                   	ret    

Disassembly of section .text._ZN11ConfigStore3GetEv:

0000000000000000 <ConfigStore::Get()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 22 <ConfigStore::Get()+0x22>
  22:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  26:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  2d:	00 00 
  2f:	74 05                	je     36 <ConfigStore::Get()+0x36>
  31:	e8 00 00 00 00       	call   36 <ConfigStore::Get()+0x36>
  36:	c9                   	leave  
  37:	c3                   	ret    

Disassembly of section .text._ZN9StoreMidi6UpdateEPK11TMidiParams:

0000000000000000 <StoreMidi::Update(TMidiParams const*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	e8 00 00 00 00       	call   28 <StoreMidi::Update(TMidiParams const*)+0x28>
  28:	48 89 c7             	mov    %rax,%rdi
  2b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  2f:	b9 08 00 00 00       	mov    $0x8,%ecx
  34:	48 89 c2             	mov    %rax,%rdx
  37:	be 04 00 00 00       	mov    $0x4,%esi
  3c:	e8 00 00 00 00       	call   41 <StoreMidi::Update(TMidiParams const*)+0x41>
  41:	90                   	nop
  42:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  46:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  4d:	00 00 
  4f:	74 05                	je     56 <StoreMidi::Update(TMidiParams const*)+0x56>
  51:	e8 00 00 00 00       	call   56 <StoreMidi::Update(TMidiParams const*)+0x56>
  56:	c9                   	leave  
  57:	c3                   	ret    

Disassembly of section .text._ZN9StoreMidi4CopyEP11TMidiParams:

0000000000000000 <StoreMidi::Copy(TMidiParams*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	e8 00 00 00 00       	call   28 <StoreMidi::Copy(TMidiParams*)+0x28>
  28:	48 89 c7             	mov    %rax,%rdi
  2b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  2f:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  35:	b9 08 00 00 00       	mov    $0x8,%ecx
  3a:	48 89 c2             	mov    %rax,%rdx
  3d:	be 04 00 00 00       	mov    $0x4,%esi
  42:	e8 00 00 00 00       	call   47 <StoreMidi::Copy(TMidiParams*)+0x47>
  47:	90                   	nop
  48:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4c:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  53:	00 00 
  55:	74 05                	je     5c <StoreMidi::Copy(TMidiParams*)+0x5c>
  57:	e8 00 00 00 00       	call   5c <StoreMidi::Copy(TMidiParams*)+0x5c>
  5c:	c9                   	leave  
  5d:	c3                   	ret    

Disassembly of section .text._ZN15MidiParamsStoreC2Ev:

0000000000000000 <MidiParamsStore::MidiParamsStore()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 26 <MidiParamsStore::MidiParamsStore()+0x26>
  26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2a:	48 89 10             	mov    %rdx,(%rax)
  2d:	90                   	nop
  2e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  32:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  39:	00 00 
  3b:	74 05                	je     42 <MidiParamsStore::MidiParamsStore()+0x42>
  3d:	e8 00 00 00 00       	call   42 <MidiParamsStore::MidiParamsStore()+0x42>
  42:	c9                   	leave  
  43:	c3                   	ret    

Disassembly of section .text._ZN9StoreMidiC2Ev:

0000000000000000 <StoreMidi::StoreMidi()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	call   2b <StoreMidi::StoreMidi()+0x2b>
  2b:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 32 <StoreMidi::StoreMidi()+0x32>
  32:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  36:	48 89 10             	mov    %rdx,(%rax)
  39:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3d:	48 89 05 00 00 00 00 	mov    %rax,0x0(%rip)        # 44 <StoreMidi::StoreMidi()+0x44>
  44:	90                   	nop
  45:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  49:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  50:	00 00 
  52:	74 05                	je     59 <StoreMidi::StoreMidi()+0x59>
  54:	e8 00 00 00 00       	call   59 <StoreMidi::StoreMidi()+0x59>
  59:	c9                   	leave  
  5a:	c3                   	ret    

Disassembly of section .text._ZN9StoreMidiD2Ev:

0000000000000000 <StoreMidi::~StoreMidi()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 26 <StoreMidi::~StoreMidi()+0x26>
  26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2a:	48 89 10             	mov    %rdx,(%rax)
  2d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  31:	48 89 c7             	mov    %rax,%rdi
  34:	e8 00 00 00 00       	call   39 <StoreMidi::~StoreMidi()+0x39>
  39:	90                   	nop
  3a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3e:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  45:	00 00 
  47:	74 05                	je     4e <StoreMidi::~StoreMidi()+0x4e>
  49:	e8 00 00 00 00       	call   4e <StoreMidi::~StoreMidi()+0x4e>
  4e:	c9                   	leave  
  4f:	c3                   	ret    

Disassembly of section .text._ZN9StoreMidiD0Ev:

0000000000000000 <StoreMidi::~StoreMidi()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	call   2b <StoreMidi::~StoreMidi()+0x2b>
  2b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	call   37 <StoreMidi::~StoreMidi()+0x37>
  37:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3b:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  42:	00 00 
  44:	74 05                	je     4b <StoreMidi::~StoreMidi()+0x4b>
  46:	e8 00 00 00 00       	call   4b <StoreMidi::~StoreMidi()+0x4b>
  4b:	c9                   	leave  
  4c:	c3                   	ret    

storemonitor.o:     file format elf64-x86-64


Disassembly of section .text._ZN15DmxMonitorStoreD2Ev:

0000000000000000 <DmxMonitorStore::~DmxMonitorStore()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 26 <DmxMonitorStore::~DmxMonitorStore()+0x26>
  26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2a:	48 89 10             	mov    %rdx,(%rax)
  2d:	90                   	nop
  2e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  32:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  39:	00 00 
  3b:	74 05                	je     42 <DmxMonitorStore::~DmxMonitorStore()+0x42>
  3d:	e8 00 00 00 00       	call   42 <DmxMonitorStore::~DmxMonitorStore()+0x42>
  42:	c9                   	leave  
  43:	c3                   	ret    

Disassembly of section .text._ZN15DmxMonitorStoreD0Ev:

0000000000000000 <DmxMonitorStore::~DmxMonitorStore()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	call   2b <DmxMonitorStore::~DmxMonitorStore()+0x2b>
  2b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	call   37 <DmxMonitorStore::~DmxMonitorStore()+0x37>
  37:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3b:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  42:	00 00 
  44:	74 05                	je     4b <DmxMonitorStore::~DmxMonitorStore()+0x4b>
  46:	e8 00 00 00 00       	call   4b <DmxMonitorStore::~DmxMonitorStore()+0x4b>
  4b:	c9                   	leave  
  4c:	c3                   	ret    

Disassembly of section .text._ZN21DMXMonitorParamsStoreD2Ev:

0000000000000000 <DMXMonitorParamsStore::~DMXMonitorParamsStore()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 26 <DMXMonitorParamsStore::~DMXMonitorParamsStore()+0x26>
  26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2a:	48 89 10             	mov    %rdx,(%rax)
  2d:	90                   	nop
  2e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  32:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  39:	00 00 
  3b:	74 05                	je     42 <DMXMonitorParamsStore::~DMXMonitorParamsStore()+0x42>
  3d:	e8 00 00 00 00       	call   42 <DMXMonitorParamsStore::~DMXMonitorParamsStore()+0x42>
  42:	c9                   	leave  
  43:	c3                   	ret    

Disassembly of section .text._ZN21DMXMonitorParamsStoreD0Ev:

0000000000000000 <DMXMonitorParamsStore::~DMXMonitorParamsStore()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	call   2b <DMXMonitorParamsStore::~DMXMonitorParamsStore()+0x2b>
  2b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	call   37 <DMXMonitorParamsStore::~DMXMonitorParamsStore()+0x37>
  37:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3b:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  42:	00 00 
  44:	74 05                	je     4b <DMXMonitorParamsStore::~DMXMonitorParamsStore()+0x4b>
  46:	e8 00 00 00 00       	call   4b <DMXMonitorParamsStore::~DMXMonitorParamsStore()+0x4b>
  4b:	c9                   	leave  
  4c:	c3                   	ret    

Disassembly of section .text._ZN11ConfigStore6UpdateEN11configstore5StoreEPKvj:

0000000000000000 <ConfigStore::Update(configstore::Store, void const*, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  13:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  17:	89 4d e0             	mov    %ecx,-0x20(%rbp)
  1a:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  21:	00 00 
  23:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  27:	31 c0                	xor    %eax,%eax
  29:	8b 4d e0             	mov    -0x20(%rbp),%ecx
  2c:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  30:	8b 75 e4             	mov    -0x1c(%rbp),%esi
  33:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  37:	48 83 ec 08          	sub    $0x8,%rsp
  3b:	6a 00                	push   $0x0
  3d:	41 b9 00 00 00 00    	mov    $0x0,%r9d
  43:	41 89 c8             	mov    %ecx,%r8d
  46:	48 89 d1             	mov    %rdx,%rcx
  49:	ba 00 00 00 00       	mov    $0x0,%edx
  4e:	48 89 c7             	mov    %rax,%rdi
  51:	e8 00 00 00 00       	call   56 <ConfigStore::Update(configstore::Store, void const*, unsigned int)+0x56>
  56:	48 83 c4 10          	add    $0x10,%rsp
  5a:	90                   	nop
  5b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  5f:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  66:	00 00 
  68:	74 05                	je     6f <ConfigStore::Update(configstore::Store, void const*, unsigned int)+0x6f>
  6a:	e8 00 00 00 00       	call   6f <ConfigStore::Update(configstore::Store, void const*, unsigned int)+0x6f>
  6f:	c9                   	leave  
  70:	c3                   	ret    

Disassembly of section .text._ZN11ConfigStore3GetEv:

0000000000000000 <ConfigStore::Get()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 22 <ConfigStore::Get()+0x22>
  22:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  26:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  2d:	00 00 
  2f:	74 05                	je     36 <ConfigStore::Get()+0x36>
  31:	e8 00 00 00 00       	call   36 <ConfigStore::Get()+0x36>
  36:	c9                   	leave  
  37:	c3                   	ret    

Disassembly of section .text._ZN12StoreMonitor6UpdateEPK17TDMXMonitorParams:

0000000000000000 <StoreMonitor::Update(TDMXMonitorParams const*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	e8 00 00 00 00       	call   28 <StoreMonitor::Update(TDMXMonitorParams const*)+0x28>
  28:	48 89 c7             	mov    %rax,%rdi
  2b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  2f:	b9 09 00 00 00       	mov    $0x9,%ecx
  34:	48 89 c2             	mov    %rax,%rdx
  37:	be 0f 00 00 00       	mov    $0xf,%esi
  3c:	e8 00 00 00 00       	call   41 <StoreMonitor::Update(TDMXMonitorParams const*)+0x41>
  41:	90                   	nop
  42:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  46:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  4d:	00 00 
  4f:	74 05                	je     56 <StoreMonitor::Update(TDMXMonitorParams const*)+0x56>
  51:	e8 00 00 00 00       	call   56 <StoreMonitor::Update(TDMXMonitorParams const*)+0x56>
  56:	c9                   	leave  
  57:	c3                   	ret    

Disassembly of section .text._ZN12StoreMonitor4CopyEP17TDMXMonitorParams:

0000000000000000 <StoreMonitor::Copy(TDMXMonitorParams*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	e8 00 00 00 00       	call   28 <StoreMonitor::Copy(TDMXMonitorParams*)+0x28>
  28:	48 89 c7             	mov    %rax,%rdi
  2b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  2f:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  35:	b9 09 00 00 00       	mov    $0x9,%ecx
  3a:	48 89 c2             	mov    %rax,%rdx
  3d:	be 0f 00 00 00       	mov    $0xf,%esi
  42:	e8 00 00 00 00       	call   47 <StoreMonitor::Copy(TDMXMonitorParams*)+0x47>
  47:	90                   	nop
  48:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4c:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  53:	00 00 
  55:	74 05                	je     5c <StoreMonitor::Copy(TDMXMonitorParams*)+0x5c>
  57:	e8 00 00 00 00       	call   5c <StoreMonitor::Copy(TDMXMonitorParams*)+0x5c>
  5c:	c9                   	leave  
  5d:	c3                   	ret    

Disassembly of section .text._ZN12StoreMonitor19SaveDmxStartAddressEt:

0000000000000000 <StoreMonitor::SaveDmxStartAddress(unsigned short)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	66 89 45 e4          	mov    %ax,-0x1c(%rbp)
  16:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1d:	00 00 
  1f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  23:	31 c0                	xor    %eax,%eax
  25:	e8 00 00 00 00       	call   2a <StoreMonitor::SaveDmxStartAddress(unsigned short)+0x2a>
  2a:	48 89 c7             	mov    %rax,%rdi
  2d:	48 8d 45 e4          	lea    -0x1c(%rbp),%rax
  31:	48 83 ec 08          	sub    $0x8,%rsp
  35:	6a 00                	push   $0x0
  37:	41 b9 01 00 00 00    	mov    $0x1,%r9d
  3d:	41 b8 02 00 00 00    	mov    $0x2,%r8d
  43:	48 89 c1             	mov    %rax,%rcx
  46:	ba 04 00 00 00       	mov    $0x4,%edx
  4b:	be 0f 00 00 00       	mov    $0xf,%esi
  50:	e8 00 00 00 00       	call   55 <StoreMonitor::SaveDmxStartAddress(unsigned short)+0x55>
  55:	48 83 c4 10          	add    $0x10,%rsp
  59:	90                   	nop
  5a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  5e:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  65:	00 00 
  67:	74 05                	je     6e <StoreMonitor::SaveDmxStartAddress(unsigned short)+0x6e>
  69:	e8 00 00 00 00       	call   6e <StoreMonitor::SaveDmxStartAddress(unsigned short)+0x6e>
  6e:	c9                   	leave  
  6f:	c3                   	ret    

0000000000000070 <non-virtual thunk to StoreMonitor::SaveDmxStartAddress(unsigned short)>:
  70:	f3 0f 1e fa          	endbr64 
  74:	48 83 ef 08          	sub    $0x8,%rdi
  78:	eb 86                	jmp    0 <StoreMonitor::SaveDmxStartAddress(unsigned short)>

Disassembly of section .text._ZN21DMXMonitorParamsStoreC2Ev:

0000000000000000 <DMXMonitorParamsStore::DMXMonitorParamsStore()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 26 <DMXMonitorParamsStore::DMXMonitorParamsStore()+0x26>
  26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2a:	48 89 10             	mov    %rdx,(%rax)
  2d:	90                   	nop
  2e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  32:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  39:	00 00 
  3b:	74 05                	je     42 <DMXMonitorParamsStore::DMXMonitorParamsStore()+0x42>
  3d:	e8 00 00 00 00       	call   42 <DMXMonitorParamsStore::DMXMonitorParamsStore()+0x42>
  42:	c9                   	leave  
  43:	c3                   	ret    

Disassembly of section .text._ZN15DmxMonitorStoreC2Ev:

0000000000000000 <DmxMonitorStore::DmxMonitorStore()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 26 <DmxMonitorStore::DmxMonitorStore()+0x26>
  26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2a:	48 89 10             	mov    %rdx,(%rax)
  2d:	90                   	nop
  2e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  32:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  39:	00 00 
  3b:	74 05                	je     42 <DmxMonitorStore::DmxMonitorStore()+0x42>
  3d:	e8 00 00 00 00       	call   42 <DmxMonitorStore::DmxMonitorStore()+0x42>
  42:	c9                   	leave  
  43:	c3                   	ret    

Disassembly of section .text._ZN12StoreMonitorC2Ev:

0000000000000000 <StoreMonitor::StoreMonitor()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	call   2b <StoreMonitor::StoreMonitor()+0x2b>
  2b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2f:	48 83 c0 08          	add    $0x8,%rax
  33:	48 89 c7             	mov    %rax,%rdi
  36:	e8 00 00 00 00       	call   3b <StoreMonitor::StoreMonitor()+0x3b>
  3b:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 42 <StoreMonitor::StoreMonitor()+0x42>
  42:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  46:	48 89 10             	mov    %rdx,(%rax)
  49:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 50 <StoreMonitor::StoreMonitor()+0x50>
  50:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  54:	48 89 50 08          	mov    %rdx,0x8(%rax)
  58:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5c:	48 89 05 00 00 00 00 	mov    %rax,0x0(%rip)        # 63 <StoreMonitor::StoreMonitor()+0x63>
  63:	90                   	nop
  64:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  68:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  6f:	00 00 
  71:	74 05                	je     78 <StoreMonitor::StoreMonitor()+0x78>
  73:	e8 00 00 00 00       	call   78 <StoreMonitor::StoreMonitor()+0x78>
  78:	c9                   	leave  
  79:	c3                   	ret    

Disassembly of section .text._ZN12StoreMonitorD2Ev:

0000000000000000 <StoreMonitor::~StoreMonitor()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 26 <StoreMonitor::~StoreMonitor()+0x26>
  26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2a:	48 89 10             	mov    %rdx,(%rax)
  2d:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 34 <StoreMonitor::~StoreMonitor()+0x34>
  34:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  38:	48 89 50 08          	mov    %rdx,0x8(%rax)
  3c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40:	48 83 c0 08          	add    $0x8,%rax
  44:	48 89 c7             	mov    %rax,%rdi
  47:	e8 00 00 00 00       	call   4c <StoreMonitor::~StoreMonitor()+0x4c>
  4c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  50:	48 89 c7             	mov    %rax,%rdi
  53:	e8 00 00 00 00       	call   58 <StoreMonitor::~StoreMonitor()+0x58>
  58:	90                   	nop
  59:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  5d:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  64:	00 00 
  66:	74 05                	je     6d <StoreMonitor::~StoreMonitor()+0x6d>
  68:	e8 00 00 00 00       	call   6d <StoreMonitor::~StoreMonitor()+0x6d>
  6d:	c9                   	leave  
  6e:	c3                   	ret    

000000000000006f <non-virtual thunk to StoreMonitor::~StoreMonitor()>:
  6f:	f3 0f 1e fa          	endbr64 
  73:	48 83 ef 08          	sub    $0x8,%rdi
  77:	eb 87                	jmp    0 <StoreMonitor::~StoreMonitor()>

Disassembly of section .text._ZN12StoreMonitorD0Ev:

0000000000000000 <StoreMonitor::~StoreMonitor()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	call   2b <StoreMonitor::~StoreMonitor()+0x2b>
  2b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	call   37 <StoreMonitor::~StoreMonitor()+0x37>
  37:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3b:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  42:	00 00 
  44:	74 05                	je     4b <StoreMonitor::~StoreMonitor()+0x4b>
  46:	e8 00 00 00 00       	call   4b <StoreMonitor::~StoreMonitor()+0x4b>
  4b:	c9                   	leave  
  4c:	c3                   	ret    

000000000000004d <non-virtual thunk to StoreMonitor::~StoreMonitor()>:
  4d:	f3 0f 1e fa          	endbr64 
  51:	48 83 ef 08          	sub    $0x8,%rdi
  55:	eb a9                	jmp    0 <StoreMonitor::~StoreMonitor()>

storeoscserver.o:     file format elf64-x86-64


Disassembly of section .text._ZN20OSCServerParamsStoreD2Ev:

0000000000000000 <OSCServerParamsStore::~OSCServerParamsStore()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 26 <OSCServerParamsStore::~OSCServerParamsStore()+0x26>
  26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2a:	48 89 10             	mov    %rdx,(%rax)
  2d:	90                   	nop
  2e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  32:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  39:	00 00 
  3b:	74 05                	je     42 <OSCServerParamsStore::~OSCServerParamsStore()+0x42>
  3d:	e8 00 00 00 00       	call   42 <OSCServerParamsStore::~OSCServerParamsStore()+0x42>
  42:	c9                   	leave  
  43:	c3                   	ret    

Disassembly of section .text._ZN20OSCServerParamsStoreD0Ev:

0000000000000000 <OSCServerParamsStore::~OSCServerParamsStore()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	call   2b <OSCServerParamsStore::~OSCServerParamsStore()+0x2b>
  2b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	call   37 <OSCServerParamsStore::~OSCServerParamsStore()+0x37>
  37:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3b:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  42:	00 00 
  44:	74 05                	je     4b <OSCServerParamsStore::~OSCServerParamsStore()+0x4b>
  46:	e8 00 00 00 00       	call   4b <OSCServerParamsStore::~OSCServerParamsStore()+0x4b>
  4b:	c9                   	leave  
  4c:	c3                   	ret    

Disassembly of section .text._ZN11ConfigStore6UpdateEN11configstore5StoreEPKvj:

0000000000000000 <ConfigStore::Update(configstore::Store, void const*, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  13:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  17:	89 4d e0             	mov    %ecx,-0x20(%rbp)
  1a:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  21:	00 00 
  23:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  27:	31 c0                	xor    %eax,%eax
  29:	8b 4d e0             	mov    -0x20(%rbp),%ecx
  2c:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  30:	8b 75 e4             	mov    -0x1c(%rbp),%esi
  33:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  37:	48 83 ec 08          	sub    $0x8,%rsp
  3b:	6a 00                	push   $0x0
  3d:	41 b9 00 00 00 00    	mov    $0x0,%r9d
  43:	41 89 c8             	mov    %ecx,%r8d
  46:	48 89 d1             	mov    %rdx,%rcx
  49:	ba 00 00 00 00       	mov    $0x0,%edx
  4e:	48 89 c7             	mov    %rax,%rdi
  51:	e8 00 00 00 00       	call   56 <ConfigStore::Update(configstore::Store, void const*, unsigned int)+0x56>
  56:	48 83 c4 10          	add    $0x10,%rsp
  5a:	90                   	nop
  5b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  5f:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  66:	00 00 
  68:	74 05                	je     6f <ConfigStore::Update(configstore::Store, void const*, unsigned int)+0x6f>
  6a:	e8 00 00 00 00       	call   6f <ConfigStore::Update(configstore::Store, void const*, unsigned int)+0x6f>
  6f:	c9                   	leave  
  70:	c3                   	ret    

Disassembly of section .text._ZN11ConfigStore3GetEv:

0000000000000000 <ConfigStore::Get()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 22 <ConfigStore::Get()+0x22>
  22:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  26:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  2d:	00 00 
  2f:	74 05                	je     36 <ConfigStore::Get()+0x36>
  31:	e8 00 00 00 00       	call   36 <ConfigStore::Get()+0x36>
  36:	c9                   	leave  
  37:	c3                   	ret    

Disassembly of section .text._ZN14StoreOscServer6UpdateEPKN3osc6server6ParamsE:

0000000000000000 <StoreOscServer::Update(osc::server::Params const*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	e8 00 00 00 00       	call   28 <StoreOscServer::Update(osc::server::Params const*)+0x28>
  28:	48 89 c7             	mov    %rax,%rdi
  2b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  2f:	b9 8a 01 00 00       	mov    $0x18a,%ecx
  34:	48 89 c2             	mov    %rax,%rdx
  37:	be 06 00 00 00       	mov    $0x6,%esi
  3c:	e8 00 00 00 00       	call   41 <StoreOscServer::Update(osc::server::Params const*)+0x41>
  41:	90                   	nop
  42:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  46:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  4d:	00 00 
  4f:	74 05                	je     56 <StoreOscServer::Update(osc::server::Params const*)+0x56>
  51:	e8 00 00 00 00       	call   56 <StoreOscServer::Update(osc::server::Params const*)+0x56>
  56:	c9                   	leave  
  57:	c3                   	ret    

Disassembly of section .text._ZN14StoreOscServer4CopyEPN3osc6server6ParamsE:

0000000000000000 <StoreOscServer::Copy(osc::server::Params*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	e8 00 00 00 00       	call   28 <StoreOscServer::Copy(osc::server::Params*)+0x28>
  28:	48 89 c7             	mov    %rax,%rdi
  2b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  2f:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  35:	b9 8a 01 00 00       	mov    $0x18a,%ecx
  3a:	48 89 c2             	mov    %rax,%rdx
  3d:	be 06 00 00 00       	mov    $0x6,%esi
  42:	e8 00 00 00 00       	call   47 <StoreOscServer::Copy(osc::server::Params*)+0x47>
  47:	90                   	nop
  48:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4c:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  53:	00 00 
  55:	74 05                	je     5c <StoreOscServer::Copy(osc::server::Params*)+0x5c>
  57:	e8 00 00 00 00       	call   5c <StoreOscServer::Copy(osc::server::Params*)+0x5c>
  5c:	c9                   	leave  
  5d:	c3                   	ret    

Disassembly of section .text._ZN20OSCServerParamsStoreC2Ev:

0000000000000000 <OSCServerParamsStore::OSCServerParamsStore()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 26 <OSCServerParamsStore::OSCServerParamsStore()+0x26>
  26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2a:	48 89 10             	mov    %rdx,(%rax)
  2d:	90                   	nop
  2e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  32:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  39:	00 00 
  3b:	74 05                	je     42 <OSCServerParamsStore::OSCServerParamsStore()+0x42>
  3d:	e8 00 00 00 00       	call   42 <OSCServerParamsStore::OSCServerParamsStore()+0x42>
  42:	c9                   	leave  
  43:	c3                   	ret    

Disassembly of section .text._ZN14StoreOscServerC2Ev:

0000000000000000 <StoreOscServer::StoreOscServer()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	call   2b <StoreOscServer::StoreOscServer()+0x2b>
  2b:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 32 <StoreOscServer::StoreOscServer()+0x32>
  32:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  36:	48 89 10             	mov    %rdx,(%rax)
  39:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3d:	48 89 05 00 00 00 00 	mov    %rax,0x0(%rip)        # 44 <StoreOscServer::StoreOscServer()+0x44>
  44:	90                   	nop
  45:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  49:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  50:	00 00 
  52:	74 05                	je     59 <StoreOscServer::StoreOscServer()+0x59>
  54:	e8 00 00 00 00       	call   59 <StoreOscServer::StoreOscServer()+0x59>
  59:	c9                   	leave  
  5a:	c3                   	ret    

Disassembly of section .text._ZN14StoreOscServerD2Ev:

0000000000000000 <StoreOscServer::~StoreOscServer()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 26 <StoreOscServer::~StoreOscServer()+0x26>
  26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2a:	48 89 10             	mov    %rdx,(%rax)
  2d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  31:	48 89 c7             	mov    %rax,%rdi
  34:	e8 00 00 00 00       	call   39 <StoreOscServer::~StoreOscServer()+0x39>
  39:	90                   	nop
  3a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3e:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  45:	00 00 
  47:	74 05                	je     4e <StoreOscServer::~StoreOscServer()+0x4e>
  49:	e8 00 00 00 00       	call   4e <StoreOscServer::~StoreOscServer()+0x4e>
  4e:	c9                   	leave  
  4f:	c3                   	ret    

Disassembly of section .text._ZN14StoreOscServerD0Ev:

0000000000000000 <StoreOscServer::~StoreOscServer()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	call   2b <StoreOscServer::~StoreOscServer()+0x2b>
  2b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	call   37 <StoreOscServer::~StoreOscServer()+0x37>
  37:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3b:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  42:	00 00 
  44:	74 05                	je     4b <StoreOscServer::~StoreOscServer()+0x4b>
  46:	e8 00 00 00 00       	call   4b <StoreOscServer::~StoreOscServer()+0x4b>
  4b:	c9                   	leave  
  4c:	c3                   	ret    

storedevice.o:     file format elf64-x86-64


Disassembly of section .text._ZN11StoreDeviceC2Ev:

0000000000000000 <StoreDevice::StoreDevice()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	c6 00 00             	movb   $0x0,(%rax)
  26:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 2d <StoreDevice::StoreDevice()+0x2d>
  2d:	48 89 c6             	mov    %rax,%rsi
  30:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 37 <StoreDevice::StoreDevice()+0x37>
  37:	48 89 c7             	mov    %rax,%rdi
  3a:	e8 00 00 00 00       	call   3f <StoreDevice::StoreDevice()+0x3f>
  3f:	48 89 05 00 00 00 00 	mov    %rax,0x0(%rip)        # 46 <StoreDevice::StoreDevice()+0x46>
  46:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 4d <StoreDevice::StoreDevice()+0x4d>
  4d:	48 85 c0             	test   %rax,%rax
  50:	0f 94 c0             	sete   %al
  53:	84 c0                	test   %al,%al
  55:	0f 84 9b 00 00 00    	je     f6 <StoreDevice::StoreDevice()+0xf6>
  5b:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 62 <StoreDevice::StoreDevice()+0x62>
  62:	48 89 c7             	mov    %rax,%rdi
  65:	e8 00 00 00 00       	call   6a <StoreDevice::StoreDevice()+0x6a>
  6a:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 71 <StoreDevice::StoreDevice()+0x71>
  71:	48 89 c6             	mov    %rax,%rsi
  74:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 7b <StoreDevice::StoreDevice()+0x7b>
  7b:	48 89 c7             	mov    %rax,%rdi
  7e:	e8 00 00 00 00       	call   83 <StoreDevice::StoreDevice()+0x83>
  83:	48 89 05 00 00 00 00 	mov    %rax,0x0(%rip)        # 8a <StoreDevice::StoreDevice()+0x8a>
  8a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  91:	eb 33                	jmp    c6 <StoreDevice::StoreDevice()+0xc6>
  93:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 9a <StoreDevice::StoreDevice()+0x9a>
  9a:	48 89 c6             	mov    %rax,%rsi
  9d:	bf ff 00 00 00       	mov    $0xff,%edi
  a2:	e8 00 00 00 00       	call   a7 <StoreDevice::StoreDevice()+0xa7>
  a7:	83 f8 ff             	cmp    $0xffffffff,%eax
  aa:	0f 94 c0             	sete   %al
  ad:	84 c0                	test   %al,%al
  af:	74 11                	je     c2 <StoreDevice::StoreDevice()+0xc2>
  b1:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # b8 <StoreDevice::StoreDevice()+0xb8>
  b8:	48 89 c7             	mov    %rax,%rdi
  bb:	e8 00 00 00 00       	call   c0 <StoreDevice::StoreDevice()+0xc0>
  c0:	eb 3b                	jmp    fd <StoreDevice::StoreDevice()+0xfd>
  c2:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  c6:	81 7d f4 ff ff 1f 00 	cmpl   $0x1fffff,-0xc(%rbp)
  cd:	76 c4                	jbe    93 <StoreDevice::StoreDevice()+0x93>
  cf:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # d6 <StoreDevice::StoreDevice()+0xd6>
  d6:	48 89 c7             	mov    %rax,%rdi
  d9:	e8 00 00 00 00       	call   de <StoreDevice::StoreDevice()+0xde>
  de:	85 c0                	test   %eax,%eax
  e0:	0f 95 c0             	setne  %al
  e3:	84 c0                	test   %al,%al
  e5:	74 0f                	je     f6 <StoreDevice::StoreDevice()+0xf6>
  e7:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # ee <StoreDevice::StoreDevice()+0xee>
  ee:	48 89 c7             	mov    %rax,%rdi
  f1:	e8 00 00 00 00       	call   f6 <StoreDevice::StoreDevice()+0xf6>
  f6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  fa:	c6 00 01             	movb   $0x1,(%rax)
  fd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 101:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 108:	00 00 
 10a:	74 05                	je     111 <StoreDevice::StoreDevice()+0x111>
 10c:	e8 00 00 00 00       	call   111 <StoreDevice::StoreDevice()+0x111>
 111:	c9                   	leave  
 112:	c3                   	ret    

Disassembly of section .text._ZN11StoreDeviceD2Ev:

0000000000000000 <StoreDevice::~StoreDevice()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 26 <StoreDevice::~StoreDevice()+0x26>
  26:	48 85 c0             	test   %rax,%rax
  29:	74 1a                	je     45 <StoreDevice::~StoreDevice()+0x45>
  2b:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 32 <StoreDevice::~StoreDevice()+0x32>
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	call   3a <StoreDevice::~StoreDevice()+0x3a>
  3a:	48 c7 05 00 00 00 00 	movq   $0x0,0x0(%rip)        # 45 <StoreDevice::~StoreDevice()+0x45>
  41:	00 00 00 00 
  45:	90                   	nop
  46:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4a:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  51:	00 00 
  53:	74 05                	je     5a <StoreDevice::~StoreDevice()+0x5a>
  55:	e8 00 00 00 00       	call   5a <StoreDevice::~StoreDevice()+0x5a>
  5a:	c9                   	leave  
  5b:	c3                   	ret    

Disassembly of section .text._ZNK11StoreDevice7GetSizeEv:

0000000000000000 <StoreDevice::GetSize() const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	b8 00 00 20 00       	mov    $0x200000,%eax
  24:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  28:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  2f:	00 00 
  31:	74 05                	je     38 <StoreDevice::GetSize() const+0x38>
  33:	e8 00 00 00 00       	call   38 <StoreDevice::GetSize() const+0x38>
  38:	c9                   	leave  
  39:	c3                   	ret    

Disassembly of section .text._ZNK11StoreDevice13GetSectorSizeEv:

0000000000000000 <StoreDevice::GetSectorSize() const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	b8 00 10 00 00       	mov    $0x1000,%eax
  24:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  28:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  2f:	00 00 
  31:	74 05                	je     38 <StoreDevice::GetSectorSize() const+0x38>
  33:	e8 00 00 00 00       	call   38 <StoreDevice::GetSectorSize() const+0x38>
  38:	c9                   	leave  
  39:	c3                   	ret    

Disassembly of section .text._ZN11StoreDevice4ReadEjjPhRN11storedevice6resultE:

0000000000000000 <StoreDevice::Read(unsigned int, unsigned int, unsigned char*, storedevice::result&)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  13:	89 55 e0             	mov    %edx,-0x20(%rbp)
  16:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
  1a:	4c 89 45 d0          	mov    %r8,-0x30(%rbp)
  1e:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  25:	00 00 
  27:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  2b:	31 c0                	xor    %eax,%eax
  2d:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
  30:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 37 <StoreDevice::Read(unsigned int, unsigned int, unsigned char*, storedevice::result&)+0x37>
  37:	ba 00 00 00 00       	mov    $0x0,%edx
  3c:	48 89 ce             	mov    %rcx,%rsi
  3f:	48 89 c7             	mov    %rax,%rdi
  42:	e8 00 00 00 00       	call   47 <StoreDevice::Read(unsigned int, unsigned int, unsigned char*, storedevice::result&)+0x47>
  47:	85 c0                	test   %eax,%eax
  49:	0f 95 c0             	setne  %al
  4c:	84 c0                	test   %al,%al
  4e:	74 20                	je     70 <StoreDevice::Read(unsigned int, unsigned int, unsigned char*, storedevice::result&)+0x70>
  50:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  54:	c7 00 01 00 00 00    	movl   $0x1,(%rax)
  5a:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 61 <StoreDevice::Read(unsigned int, unsigned int, unsigned char*, storedevice::result&)+0x61>
  61:	48 89 c7             	mov    %rax,%rdi
  64:	e8 00 00 00 00       	call   69 <StoreDevice::Read(unsigned int, unsigned int, unsigned char*, storedevice::result&)+0x69>
  69:	b8 01 00 00 00       	mov    $0x1,%eax
  6e:	eb 57                	jmp    c7 <StoreDevice::Read(unsigned int, unsigned int, unsigned char*, storedevice::result&)+0xc7>
  70:	48 8b 0d 00 00 00 00 	mov    0x0(%rip),%rcx        # 77 <StoreDevice::Read(unsigned int, unsigned int, unsigned char*, storedevice::result&)+0x77>
  77:	8b 55 e0             	mov    -0x20(%rbp),%edx
  7a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  7e:	be 01 00 00 00       	mov    $0x1,%esi
  83:	48 89 c7             	mov    %rax,%rdi
  86:	e8 00 00 00 00       	call   8b <StoreDevice::Read(unsigned int, unsigned int, unsigned char*, storedevice::result&)+0x8b>
  8b:	8b 55 e0             	mov    -0x20(%rbp),%edx
  8e:	48 39 d0             	cmp    %rdx,%rax
  91:	0f 95 c0             	setne  %al
  94:	84 c0                	test   %al,%al
  96:	74 20                	je     b8 <StoreDevice::Read(unsigned int, unsigned int, unsigned char*, storedevice::result&)+0xb8>
  98:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  9c:	c7 00 01 00 00 00    	movl   $0x1,(%rax)
  a2:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # a9 <StoreDevice::Read(unsigned int, unsigned int, unsigned char*, storedevice::result&)+0xa9>
  a9:	48 89 c7             	mov    %rax,%rdi
  ac:	e8 00 00 00 00       	call   b1 <StoreDevice::Read(unsigned int, unsigned int, unsigned char*, storedevice::result&)+0xb1>
  b1:	b8 01 00 00 00       	mov    $0x1,%eax
  b6:	eb 0f                	jmp    c7 <StoreDevice::Read(unsigned int, unsigned int, unsigned char*, storedevice::result&)+0xc7>
  b8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  bc:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
  c2:	b8 01 00 00 00       	mov    $0x1,%eax
  c7:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  cb:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  d2:	00 00 
  d4:	74 05                	je     db <StoreDevice::Read(unsigned int, unsigned int, unsigned char*, storedevice::result&)+0xdb>
  d6:	e8 00 00 00 00       	call   db <StoreDevice::Read(unsigned int, unsigned int, unsigned char*, storedevice::result&)+0xdb>
  db:	c9                   	leave  
  dc:	c3                   	ret    

Disassembly of section .text._ZN11StoreDevice5EraseEjjRN11storedevice6resultE:

0000000000000000 <StoreDevice::Erase(unsigned int, unsigned int, storedevice::result&)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  13:	89 55 e0             	mov    %edx,-0x20(%rbp)
  16:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
  1a:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  21:	00 00 
  23:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  27:	31 c0                	xor    %eax,%eax
  29:	8b 05 00 00 00 00    	mov    0x0(%rip),%eax        # 2f <StoreDevice::Erase(unsigned int, unsigned int, storedevice::result&)+0x2f>
  2f:	85 c0                	test   %eax,%eax
  31:	0f 85 ae 00 00 00    	jne    e5 <StoreDevice::Erase(unsigned int, unsigned int, storedevice::result&)+0xe5>
  37:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  3a:	25 ff 0f 00 00       	and    $0xfff,%eax
  3f:	85 c0                	test   %eax,%eax
  41:	75 0c                	jne    4f <StoreDevice::Erase(unsigned int, unsigned int, storedevice::result&)+0x4f>
  43:	8b 45 e0             	mov    -0x20(%rbp),%eax
  46:	25 ff 0f 00 00       	and    $0xfff,%eax
  4b:	85 c0                	test   %eax,%eax
  4d:	74 1e                	je     6d <StoreDevice::Erase(unsigned int, unsigned int, storedevice::result&)+0x6d>
  4f:	c7 05 00 00 00 00 02 	movl   $0x2,0x0(%rip)        # 59 <StoreDevice::Erase(unsigned int, unsigned int, storedevice::result&)+0x59>
  56:	00 00 00 
  59:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  5d:	c7 00 01 00 00 00    	movl   $0x1,(%rax)
  63:	b8 01 00 00 00       	mov    $0x1,%eax
  68:	e9 30 01 00 00       	jmp    19d <StoreDevice::Erase(unsigned int, unsigned int, storedevice::result&)+0x19d>
  6d:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
  70:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 77 <StoreDevice::Erase(unsigned int, unsigned int, storedevice::result&)+0x77>
  77:	ba 00 00 00 00       	mov    $0x0,%edx
  7c:	48 89 ce             	mov    %rcx,%rsi
  7f:	48 89 c7             	mov    %rax,%rdi
  82:	e8 00 00 00 00       	call   87 <StoreDevice::Erase(unsigned int, unsigned int, storedevice::result&)+0x87>
  87:	85 c0                	test   %eax,%eax
  89:	0f 95 c0             	setne  %al
  8c:	84 c0                	test   %al,%al
  8e:	74 2d                	je     bd <StoreDevice::Erase(unsigned int, unsigned int, storedevice::result&)+0xbd>
  90:	c7 05 00 00 00 00 02 	movl   $0x2,0x0(%rip)        # 9a <StoreDevice::Erase(unsigned int, unsigned int, storedevice::result&)+0x9a>
  97:	00 00 00 
  9a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  9e:	c7 00 01 00 00 00    	movl   $0x1,(%rax)
  a4:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # ab <StoreDevice::Erase(unsigned int, unsigned int, storedevice::result&)+0xab>
  ab:	48 89 c7             	mov    %rax,%rdi
  ae:	e8 00 00 00 00       	call   b3 <StoreDevice::Erase(unsigned int, unsigned int, storedevice::result&)+0xb3>
  b3:	b8 01 00 00 00       	mov    $0x1,%eax
  b8:	e9 e0 00 00 00       	jmp    19d <StoreDevice::Erase(unsigned int, unsigned int, storedevice::result&)+0x19d>
  bd:	c7 05 00 00 00 00 00 	movl   $0x0,0x0(%rip)        # c7 <StoreDevice::Erase(unsigned int, unsigned int, storedevice::result&)+0xc7>
  c4:	00 00 00 
  c7:	c7 05 00 00 00 00 01 	movl   $0x1,0x0(%rip)        # d1 <StoreDevice::Erase(unsigned int, unsigned int, storedevice::result&)+0xd1>
  ce:	00 00 00 
  d1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  d5:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
  db:	b8 00 00 00 00       	mov    $0x0,%eax
  e0:	e9 b8 00 00 00       	jmp    19d <StoreDevice::Erase(unsigned int, unsigned int, storedevice::result&)+0x19d>
  e5:	8b 05 00 00 00 00    	mov    0x0(%rip),%eax        # eb <StoreDevice::Erase(unsigned int, unsigned int, storedevice::result&)+0xeb>
  eb:	83 f8 01             	cmp    $0x1,%eax
  ee:	0f 85 a4 00 00 00    	jne    198 <StoreDevice::Erase(unsigned int, unsigned int, storedevice::result&)+0x198>
  f4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  fb:	eb 4c                	jmp    149 <StoreDevice::Erase(unsigned int, unsigned int, storedevice::result&)+0x149>
  fd:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 104 <StoreDevice::Erase(unsigned int, unsigned int, storedevice::result&)+0x104>
 104:	48 89 c6             	mov    %rax,%rsi
 107:	bf ff 00 00 00       	mov    $0xff,%edi
 10c:	e8 00 00 00 00       	call   111 <StoreDevice::Erase(unsigned int, unsigned int, storedevice::result&)+0x111>
 111:	83 f8 ff             	cmp    $0xffffffff,%eax
 114:	0f 94 c0             	sete   %al
 117:	84 c0                	test   %al,%al
 119:	74 2a                	je     145 <StoreDevice::Erase(unsigned int, unsigned int, storedevice::result&)+0x145>
 11b:	c7 05 00 00 00 00 02 	movl   $0x2,0x0(%rip)        # 125 <StoreDevice::Erase(unsigned int, unsigned int, storedevice::result&)+0x125>
 122:	00 00 00 
 125:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 129:	c7 00 01 00 00 00    	movl   $0x1,(%rax)
 12f:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 136 <StoreDevice::Erase(unsigned int, unsigned int, storedevice::result&)+0x136>
 136:	48 89 c7             	mov    %rax,%rdi
 139:	e8 00 00 00 00       	call   13e <StoreDevice::Erase(unsigned int, unsigned int, storedevice::result&)+0x13e>
 13e:	b8 01 00 00 00       	mov    $0x1,%eax
 143:	eb 58                	jmp    19d <StoreDevice::Erase(unsigned int, unsigned int, storedevice::result&)+0x19d>
 145:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
 149:	8b 45 f4             	mov    -0xc(%rbp),%eax
 14c:	3b 45 e0             	cmp    -0x20(%rbp),%eax
 14f:	72 ac                	jb     fd <StoreDevice::Erase(unsigned int, unsigned int, storedevice::result&)+0xfd>
 151:	c7 05 00 00 00 00 00 	movl   $0x0,0x0(%rip)        # 15b <StoreDevice::Erase(unsigned int, unsigned int, storedevice::result&)+0x15b>
 158:	00 00 00 
 15b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 15f:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
 165:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 16c <StoreDevice::Erase(unsigned int, unsigned int, storedevice::result&)+0x16c>
 16c:	48 89 c7             	mov    %rax,%rdi
 16f:	e8 00 00 00 00       	call   174 <StoreDevice::Erase(unsigned int, unsigned int, storedevice::result&)+0x174>
 174:	85 c0                	test   %eax,%eax
 176:	0f 95 c0             	setne  %al
 179:	84 c0                	test   %al,%al
 17b:	74 0f                	je     18c <StoreDevice::Erase(unsigned int, unsigned int, storedevice::result&)+0x18c>
 17d:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 184 <StoreDevice::Erase(unsigned int, unsigned int, storedevice::result&)+0x184>
 184:	48 89 c7             	mov    %rax,%rdi
 187:	e8 00 00 00 00       	call   18c <StoreDevice::Erase(unsigned int, unsigned int, storedevice::result&)+0x18c>
 18c:	e8 00 00 00 00       	call   191 <StoreDevice::Erase(unsigned int, unsigned int, storedevice::result&)+0x191>
 191:	b8 01 00 00 00       	mov    $0x1,%eax
 196:	eb 05                	jmp    19d <StoreDevice::Erase(unsigned int, unsigned int, storedevice::result&)+0x19d>
 198:	b8 01 00 00 00       	mov    $0x1,%eax
 19d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
 1a1:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
 1a8:	00 00 
 1aa:	74 05                	je     1b1 <StoreDevice::Erase(unsigned int, unsigned int, storedevice::result&)+0x1b1>
 1ac:	e8 00 00 00 00       	call   1b1 <StoreDevice::Erase(unsigned int, unsigned int, storedevice::result&)+0x1b1>
 1b1:	c9                   	leave  
 1b2:	c3                   	ret    

Disassembly of section .text._ZN11StoreDevice5WriteEjjPKhRN11storedevice6resultE:

0000000000000000 <StoreDevice::Write(unsigned int, unsigned int, unsigned char const*, storedevice::result&)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  13:	89 55 e0             	mov    %edx,-0x20(%rbp)
  16:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
  1a:	4c 89 45 d0          	mov    %r8,-0x30(%rbp)
  1e:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  25:	00 00 
  27:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  2b:	31 c0                	xor    %eax,%eax
  2d:	8b 05 00 00 00 00    	mov    0x0(%rip),%eax        # 33 <StoreDevice::Write(unsigned int, unsigned int, unsigned char const*, storedevice::result&)+0x33>
  33:	85 c0                	test   %eax,%eax
  35:	75 78                	jne    af <StoreDevice::Write(unsigned int, unsigned int, unsigned char const*, storedevice::result&)+0xaf>
  37:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
  3a:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 41 <StoreDevice::Write(unsigned int, unsigned int, unsigned char const*, storedevice::result&)+0x41>
  41:	ba 00 00 00 00       	mov    $0x0,%edx
  46:	48 89 ce             	mov    %rcx,%rsi
  49:	48 89 c7             	mov    %rax,%rdi
  4c:	e8 00 00 00 00       	call   51 <StoreDevice::Write(unsigned int, unsigned int, unsigned char const*, storedevice::result&)+0x51>
  51:	85 c0                	test   %eax,%eax
  53:	0f 95 c0             	setne  %al
  56:	84 c0                	test   %al,%al
  58:	74 2d                	je     87 <StoreDevice::Write(unsigned int, unsigned int, unsigned char const*, storedevice::result&)+0x87>
  5a:	c7 05 00 00 00 00 02 	movl   $0x2,0x0(%rip)        # 64 <StoreDevice::Write(unsigned int, unsigned int, unsigned char const*, storedevice::result&)+0x64>
  61:	00 00 00 
  64:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  68:	c7 00 01 00 00 00    	movl   $0x1,(%rax)
  6e:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 75 <StoreDevice::Write(unsigned int, unsigned int, unsigned char const*, storedevice::result&)+0x75>
  75:	48 89 c7             	mov    %rax,%rdi
  78:	e8 00 00 00 00       	call   7d <StoreDevice::Write(unsigned int, unsigned int, unsigned char const*, storedevice::result&)+0x7d>
  7d:	b8 01 00 00 00       	mov    $0x1,%eax
  82:	e9 25 01 00 00       	jmp    1ac <StoreDevice::Write(unsigned int, unsigned int, unsigned char const*, storedevice::result&)+0x1ac>
  87:	c7 05 00 00 00 00 00 	movl   $0x0,0x0(%rip)        # 91 <StoreDevice::Write(unsigned int, unsigned int, unsigned char const*, storedevice::result&)+0x91>
  8e:	00 00 00 
  91:	c7 05 00 00 00 00 01 	movl   $0x1,0x0(%rip)        # 9b <StoreDevice::Write(unsigned int, unsigned int, unsigned char const*, storedevice::result&)+0x9b>
  98:	00 00 00 
  9b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  9f:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
  a5:	b8 00 00 00 00       	mov    $0x0,%eax
  aa:	e9 fd 00 00 00       	jmp    1ac <StoreDevice::Write(unsigned int, unsigned int, unsigned char const*, storedevice::result&)+0x1ac>
  af:	8b 05 00 00 00 00    	mov    0x0(%rip),%eax        # b5 <StoreDevice::Write(unsigned int, unsigned int, unsigned char const*, storedevice::result&)+0xb5>
  b5:	83 f8 01             	cmp    $0x1,%eax
  b8:	0f 85 e9 00 00 00    	jne    1a7 <StoreDevice::Write(unsigned int, unsigned int, unsigned char const*, storedevice::result&)+0x1a7>
  be:	8b 15 00 00 00 00    	mov    0x0(%rip),%edx        # c4 <StoreDevice::Write(unsigned int, unsigned int, unsigned char const*, storedevice::result&)+0xc4>
  c4:	8b 45 e0             	mov    -0x20(%rbp),%eax
  c7:	29 d0                	sub    %edx,%eax
  c9:	89 45 f4             	mov    %eax,-0xc(%rbp)
  cc:	81 7d f4 00 04 00 00 	cmpl   $0x400,-0xc(%rbp)
  d3:	76 07                	jbe    dc <StoreDevice::Write(unsigned int, unsigned int, unsigned char const*, storedevice::result&)+0xdc>
  d5:	c7 45 f4 00 04 00 00 	movl   $0x400,-0xc(%rbp)
  dc:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # e3 <StoreDevice::Write(unsigned int, unsigned int, unsigned char const*, storedevice::result&)+0xe3>
  e3:	8b 45 f4             	mov    -0xc(%rbp),%eax
  e6:	8b 0d 00 00 00 00    	mov    0x0(%rip),%ecx        # ec <StoreDevice::Write(unsigned int, unsigned int, unsigned char const*, storedevice::result&)+0xec>
  ec:	89 ce                	mov    %ecx,%esi
  ee:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  f2:	48 8d 3c 0e          	lea    (%rsi,%rcx,1),%rdi
  f6:	48 89 d1             	mov    %rdx,%rcx
  f9:	48 89 c2             	mov    %rax,%rdx
  fc:	be 01 00 00 00       	mov    $0x1,%esi
 101:	e8 00 00 00 00       	call   106 <StoreDevice::Write(unsigned int, unsigned int, unsigned char const*, storedevice::result&)+0x106>
 106:	8b 55 f4             	mov    -0xc(%rbp),%edx
 109:	48 39 d0             	cmp    %rdx,%rax
 10c:	0f 95 c0             	setne  %al
 10f:	84 c0                	test   %al,%al
 111:	74 2a                	je     13d <StoreDevice::Write(unsigned int, unsigned int, unsigned char const*, storedevice::result&)+0x13d>
 113:	c7 05 00 00 00 00 02 	movl   $0x2,0x0(%rip)        # 11d <StoreDevice::Write(unsigned int, unsigned int, unsigned char const*, storedevice::result&)+0x11d>
 11a:	00 00 00 
 11d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 121:	c7 00 01 00 00 00    	movl   $0x1,(%rax)
 127:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 12e <StoreDevice::Write(unsigned int, unsigned int, unsigned char const*, storedevice::result&)+0x12e>
 12e:	48 89 c7             	mov    %rax,%rdi
 131:	e8 00 00 00 00       	call   136 <StoreDevice::Write(unsigned int, unsigned int, unsigned char const*, storedevice::result&)+0x136>
 136:	b8 01 00 00 00       	mov    $0x1,%eax
 13b:	eb 6f                	jmp    1ac <StoreDevice::Write(unsigned int, unsigned int, unsigned char const*, storedevice::result&)+0x1ac>
 13d:	8b 15 00 00 00 00    	mov    0x0(%rip),%edx        # 143 <StoreDevice::Write(unsigned int, unsigned int, unsigned char const*, storedevice::result&)+0x143>
 143:	8b 45 f4             	mov    -0xc(%rbp),%eax
 146:	01 d0                	add    %edx,%eax
 148:	89 05 00 00 00 00    	mov    %eax,0x0(%rip)        # 14e <StoreDevice::Write(unsigned int, unsigned int, unsigned char const*, storedevice::result&)+0x14e>
 14e:	8b 05 00 00 00 00    	mov    0x0(%rip),%eax        # 154 <StoreDevice::Write(unsigned int, unsigned int, unsigned char const*, storedevice::result&)+0x154>
 154:	39 45 e0             	cmp    %eax,-0x20(%rbp)
 157:	75 3d                	jne    196 <StoreDevice::Write(unsigned int, unsigned int, unsigned char const*, storedevice::result&)+0x196>
 159:	c7 05 00 00 00 00 00 	movl   $0x0,0x0(%rip)        # 163 <StoreDevice::Write(unsigned int, unsigned int, unsigned char const*, storedevice::result&)+0x163>
 160:	00 00 00 
 163:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 16a <StoreDevice::Write(unsigned int, unsigned int, unsigned char const*, storedevice::result&)+0x16a>
 16a:	48 89 c7             	mov    %rax,%rdi
 16d:	e8 00 00 00 00       	call   172 <StoreDevice::Write(unsigned int, unsigned int, unsigned char const*, storedevice::result&)+0x172>
 172:	85 c0                	test   %eax,%eax
 174:	0f 95 c0             	setne  %al
 177:	84 c0                	test   %al,%al
 179:	74 0f                	je     18a <StoreDevice::Write(unsigned int, unsigned int, unsigned char const*, storedevice::result&)+0x18a>
 17b:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 182 <StoreDevice::Write(unsigned int, unsigned int, unsigned char const*, storedevice::result&)+0x182>
 182:	48 89 c7             	mov    %rax,%rdi
 185:	e8 00 00 00 00       	call   18a <StoreDevice::Write(unsigned int, unsigned int, unsigned char const*, storedevice::result&)+0x18a>
 18a:	e8 00 00 00 00       	call   18f <StoreDevice::Write(unsigned int, unsigned int, unsigned char const*, storedevice::result&)+0x18f>
 18f:	b8 01 00 00 00       	mov    $0x1,%eax
 194:	eb 16                	jmp    1ac <StoreDevice::Write(unsigned int, unsigned int, unsigned char const*, storedevice::result&)+0x1ac>
 196:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 19a:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
 1a0:	b8 00 00 00 00       	mov    $0x0,%eax
 1a5:	eb 05                	jmp    1ac <StoreDevice::Write(unsigned int, unsigned int, unsigned char const*, storedevice::result&)+0x1ac>
 1a7:	b8 01 00 00 00       	mov    $0x1,%eax
 1ac:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
 1b0:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
 1b7:	00 00 
 1b9:	74 05                	je     1c0 <StoreDevice::Write(unsigned int, unsigned int, unsigned char const*, storedevice::result&)+0x1c0>
 1bb:	e8 00 00 00 00       	call   1c0 <StoreDevice::Write(unsigned int, unsigned int, unsigned char const*, storedevice::result&)+0x1c0>
 1c0:	c9                   	leave  
 1c1:	c3                   	ret    

storenetwork.o:     file format elf64-x86-64


Disassembly of section .text._ZN12NetworkStoreD2Ev:

0000000000000000 <NetworkStore::~NetworkStore()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 26 <NetworkStore::~NetworkStore()+0x26>
  26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2a:	48 89 10             	mov    %rdx,(%rax)
  2d:	90                   	nop
  2e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  32:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  39:	00 00 
  3b:	74 05                	je     42 <NetworkStore::~NetworkStore()+0x42>
  3d:	e8 00 00 00 00       	call   42 <NetworkStore::~NetworkStore()+0x42>
  42:	c9                   	leave  
  43:	c3                   	ret    

Disassembly of section .text._ZN12NetworkStoreD0Ev:

0000000000000000 <NetworkStore::~NetworkStore()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	call   2b <NetworkStore::~NetworkStore()+0x2b>
  2b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	call   37 <NetworkStore::~NetworkStore()+0x37>
  37:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3b:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  42:	00 00 
  44:	74 05                	je     4b <NetworkStore::~NetworkStore()+0x4b>
  46:	e8 00 00 00 00       	call   4b <NetworkStore::~NetworkStore()+0x4b>
  4b:	c9                   	leave  
  4c:	c3                   	ret    

Disassembly of section .text._ZN18NetworkParamsStoreD2Ev:

0000000000000000 <NetworkParamsStore::~NetworkParamsStore()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 26 <NetworkParamsStore::~NetworkParamsStore()+0x26>
  26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2a:	48 89 10             	mov    %rdx,(%rax)
  2d:	90                   	nop
  2e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  32:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  39:	00 00 
  3b:	74 05                	je     42 <NetworkParamsStore::~NetworkParamsStore()+0x42>
  3d:	e8 00 00 00 00       	call   42 <NetworkParamsStore::~NetworkParamsStore()+0x42>
  42:	c9                   	leave  
  43:	c3                   	ret    

Disassembly of section .text._ZN18NetworkParamsStoreD0Ev:

0000000000000000 <NetworkParamsStore::~NetworkParamsStore()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	call   2b <NetworkParamsStore::~NetworkParamsStore()+0x2b>
  2b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	call   37 <NetworkParamsStore::~NetworkParamsStore()+0x37>
  37:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3b:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  42:	00 00 
  44:	74 05                	je     4b <NetworkParamsStore::~NetworkParamsStore()+0x4b>
  46:	e8 00 00 00 00       	call   4b <NetworkParamsStore::~NetworkParamsStore()+0x4b>
  4b:	c9                   	leave  
  4c:	c3                   	ret    

Disassembly of section .text._ZN11ConfigStore6UpdateEN11configstore5StoreEPKvj:

0000000000000000 <ConfigStore::Update(configstore::Store, void const*, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  13:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  17:	89 4d e0             	mov    %ecx,-0x20(%rbp)
  1a:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  21:	00 00 
  23:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  27:	31 c0                	xor    %eax,%eax
  29:	8b 4d e0             	mov    -0x20(%rbp),%ecx
  2c:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  30:	8b 75 e4             	mov    -0x1c(%rbp),%esi
  33:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  37:	48 83 ec 08          	sub    $0x8,%rsp
  3b:	6a 00                	push   $0x0
  3d:	41 b9 00 00 00 00    	mov    $0x0,%r9d
  43:	41 89 c8             	mov    %ecx,%r8d
  46:	48 89 d1             	mov    %rdx,%rcx
  49:	ba 00 00 00 00       	mov    $0x0,%edx
  4e:	48 89 c7             	mov    %rax,%rdi
  51:	e8 00 00 00 00       	call   56 <ConfigStore::Update(configstore::Store, void const*, unsigned int)+0x56>
  56:	48 83 c4 10          	add    $0x10,%rsp
  5a:	90                   	nop
  5b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  5f:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  66:	00 00 
  68:	74 05                	je     6f <ConfigStore::Update(configstore::Store, void const*, unsigned int)+0x6f>
  6a:	e8 00 00 00 00       	call   6f <ConfigStore::Update(configstore::Store, void const*, unsigned int)+0x6f>
  6f:	c9                   	leave  
  70:	c3                   	ret    

Disassembly of section .text._ZN11ConfigStore3GetEv:

0000000000000000 <ConfigStore::Get()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 22 <ConfigStore::Get()+0x22>
  22:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  26:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  2d:	00 00 
  2f:	74 05                	je     36 <ConfigStore::Get()+0x36>
  31:	e8 00 00 00 00       	call   36 <ConfigStore::Get()+0x36>
  36:	c9                   	leave  
  37:	c3                   	ret    

Disassembly of section .text._ZN12StoreNetwork6UpdateEPKN13networkparams6ParamsE:

0000000000000000 <StoreNetwork::Update(networkparams::Params const*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	e8 00 00 00 00       	call   28 <StoreNetwork::Update(networkparams::Params const*)+0x28>
  28:	48 89 c7             	mov    %rax,%rdi
  2b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  2f:	b9 5e 00 00 00       	mov    $0x5e,%ecx
  34:	48 89 c2             	mov    %rax,%rdx
  37:	be 00 00 00 00       	mov    $0x0,%esi
  3c:	e8 00 00 00 00       	call   41 <StoreNetwork::Update(networkparams::Params const*)+0x41>
  41:	90                   	nop
  42:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  46:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  4d:	00 00 
  4f:	74 05                	je     56 <StoreNetwork::Update(networkparams::Params const*)+0x56>
  51:	e8 00 00 00 00       	call   56 <StoreNetwork::Update(networkparams::Params const*)+0x56>
  56:	c9                   	leave  
  57:	c3                   	ret    

Disassembly of section .text._ZN12StoreNetwork4CopyEPN13networkparams6ParamsE:

0000000000000000 <StoreNetwork::Copy(networkparams::Params*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	e8 00 00 00 00       	call   28 <StoreNetwork::Copy(networkparams::Params*)+0x28>
  28:	48 89 c7             	mov    %rax,%rdi
  2b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  2f:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  35:	b9 5e 00 00 00       	mov    $0x5e,%ecx
  3a:	48 89 c2             	mov    %rax,%rdx
  3d:	be 00 00 00 00       	mov    $0x0,%esi
  42:	e8 00 00 00 00       	call   47 <StoreNetwork::Copy(networkparams::Params*)+0x47>
  47:	90                   	nop
  48:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4c:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  53:	00 00 
  55:	74 05                	je     5c <StoreNetwork::Copy(networkparams::Params*)+0x5c>
  57:	e8 00 00 00 00       	call   5c <StoreNetwork::Copy(networkparams::Params*)+0x5c>
  5c:	c9                   	leave  
  5d:	c3                   	ret    

Disassembly of section .text._ZN12StoreNetwork6SaveIpEj:

0000000000000000 <StoreNetwork::SaveIp(unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  13:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1a:	00 00 
  1c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  20:	31 c0                	xor    %eax,%eax
  22:	e8 00 00 00 00       	call   27 <StoreNetwork::SaveIp(unsigned int)+0x27>
  27:	48 89 c7             	mov    %rax,%rdi
  2a:	48 8d 45 e4          	lea    -0x1c(%rbp),%rax
  2e:	48 83 ec 08          	sub    $0x8,%rsp
  32:	6a 00                	push   $0x0
  34:	41 b9 02 00 00 00    	mov    $0x2,%r9d
  3a:	41 b8 04 00 00 00    	mov    $0x4,%r8d
  40:	48 89 c1             	mov    %rax,%rcx
  43:	ba 04 00 00 00       	mov    $0x4,%edx
  48:	be 00 00 00 00       	mov    $0x0,%esi
  4d:	e8 00 00 00 00       	call   52 <StoreNetwork::SaveIp(unsigned int)+0x52>
  52:	48 83 c4 10          	add    $0x10,%rsp
  56:	90                   	nop
  57:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  5b:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  62:	00 00 
  64:	74 05                	je     6b <StoreNetwork::SaveIp(unsigned int)+0x6b>
  66:	e8 00 00 00 00       	call   6b <StoreNetwork::SaveIp(unsigned int)+0x6b>
  6b:	c9                   	leave  
  6c:	c3                   	ret    

000000000000006d <non-virtual thunk to StoreNetwork::SaveIp(unsigned int)>:
  6d:	f3 0f 1e fa          	endbr64 
  71:	48 83 ef 08          	sub    $0x8,%rdi
  75:	eb 89                	jmp    0 <StoreNetwork::SaveIp(unsigned int)>

Disassembly of section .text._ZN12StoreNetwork11SaveNetMaskEj:

0000000000000000 <StoreNetwork::SaveNetMask(unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  13:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1a:	00 00 
  1c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  20:	31 c0                	xor    %eax,%eax
  22:	e8 00 00 00 00       	call   27 <StoreNetwork::SaveNetMask(unsigned int)+0x27>
  27:	48 89 c7             	mov    %rax,%rdi
  2a:	48 8d 45 e4          	lea    -0x1c(%rbp),%rax
  2e:	48 83 ec 08          	sub    $0x8,%rsp
  32:	6a 00                	push   $0x0
  34:	41 b9 04 00 00 00    	mov    $0x4,%r9d
  3a:	41 b8 04 00 00 00    	mov    $0x4,%r8d
  40:	48 89 c1             	mov    %rax,%rcx
  43:	ba 08 00 00 00       	mov    $0x8,%edx
  48:	be 00 00 00 00       	mov    $0x0,%esi
  4d:	e8 00 00 00 00       	call   52 <StoreNetwork::SaveNetMask(unsigned int)+0x52>
  52:	48 83 c4 10          	add    $0x10,%rsp
  56:	90                   	nop
  57:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  5b:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  62:	00 00 
  64:	74 05                	je     6b <StoreNetwork::SaveNetMask(unsigned int)+0x6b>
  66:	e8 00 00 00 00       	call   6b <StoreNetwork::SaveNetMask(unsigned int)+0x6b>
  6b:	c9                   	leave  
  6c:	c3                   	ret    

000000000000006d <non-virtual thunk to StoreNetwork::SaveNetMask(unsigned int)>:
  6d:	f3 0f 1e fa          	endbr64 
  71:	48 83 ef 08          	sub    $0x8,%rdi
  75:	eb 89                	jmp    0 <StoreNetwork::SaveNetMask(unsigned int)>

Disassembly of section .text._ZN12StoreNetwork13SaveGatewayIpEj:

0000000000000000 <StoreNetwork::SaveGatewayIp(unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  13:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1a:	00 00 
  1c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  20:	31 c0                	xor    %eax,%eax
  22:	e8 00 00 00 00       	call   27 <StoreNetwork::SaveGatewayIp(unsigned int)+0x27>
  27:	48 89 c7             	mov    %rax,%rdi
  2a:	48 8d 45 e4          	lea    -0x1c(%rbp),%rax
  2e:	48 83 ec 08          	sub    $0x8,%rsp
  32:	6a 00                	push   $0x0
  34:	41 b9 08 00 00 00    	mov    $0x8,%r9d
  3a:	41 b8 04 00 00 00    	mov    $0x4,%r8d
  40:	48 89 c1             	mov    %rax,%rcx
  43:	ba 0c 00 00 00       	mov    $0xc,%edx
  48:	be 00 00 00 00       	mov    $0x0,%esi
  4d:	e8 00 00 00 00       	call   52 <StoreNetwork::SaveGatewayIp(unsigned int)+0x52>
  52:	48 83 c4 10          	add    $0x10,%rsp
  56:	90                   	nop
  57:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  5b:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  62:	00 00 
  64:	74 05                	je     6b <StoreNetwork::SaveGatewayIp(unsigned int)+0x6b>
  66:	e8 00 00 00 00       	call   6b <StoreNetwork::SaveGatewayIp(unsigned int)+0x6b>
  6b:	c9                   	leave  
  6c:	c3                   	ret    

000000000000006d <non-virtual thunk to StoreNetwork::SaveGatewayIp(unsigned int)>:
  6d:	f3 0f 1e fa          	endbr64 
  71:	48 83 ef 08          	sub    $0x8,%rdi
  75:	eb 89                	jmp    0 <StoreNetwork::SaveGatewayIp(unsigned int)>

Disassembly of section .text._ZN12StoreNetwork12SaveHostNameEPKcj:

0000000000000000 <StoreNetwork::SaveHostName(char const*, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  14:	89 55 dc             	mov    %edx,-0x24(%rbp)
  17:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1e:	00 00 
  20:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  24:	31 c0                	xor    %eax,%eax
  26:	c7 45 f4 40 00 00 00 	movl   $0x40,-0xc(%rbp)
  2d:	48 8d 55 f4          	lea    -0xc(%rbp),%rdx
  31:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
  35:	48 89 d6             	mov    %rdx,%rsi
  38:	48 89 c7             	mov    %rax,%rdi
  3b:	e8 00 00 00 00       	call   40 <StoreNetwork::SaveHostName(char const*, unsigned int)+0x40>
  40:	8b 00                	mov    (%rax),%eax
  42:	89 45 dc             	mov    %eax,-0x24(%rbp)
  45:	e8 00 00 00 00       	call   4a <StoreNetwork::SaveHostName(char const*, unsigned int)+0x4a>
  4a:	48 89 c7             	mov    %rax,%rdi
  4d:	8b 55 dc             	mov    -0x24(%rbp),%edx
  50:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  54:	48 83 ec 08          	sub    $0x8,%rsp
  58:	6a 00                	push   $0x0
  5a:	41 b9 20 00 00 00    	mov    $0x20,%r9d
  60:	41 89 d0             	mov    %edx,%r8d
  63:	48 89 c1             	mov    %rax,%rcx
  66:	ba 15 00 00 00       	mov    $0x15,%edx
  6b:	be 00 00 00 00       	mov    $0x0,%esi
  70:	e8 00 00 00 00       	call   75 <StoreNetwork::SaveHostName(char const*, unsigned int)+0x75>
  75:	48 83 c4 10          	add    $0x10,%rsp
  79:	90                   	nop
  7a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  7e:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  85:	00 00 
  87:	74 05                	je     8e <StoreNetwork::SaveHostName(char const*, unsigned int)+0x8e>
  89:	e8 00 00 00 00       	call   8e <StoreNetwork::SaveHostName(char const*, unsigned int)+0x8e>
  8e:	c9                   	leave  
  8f:	c3                   	ret    

0000000000000090 <non-virtual thunk to StoreNetwork::SaveHostName(char const*, unsigned int)>:
  90:	f3 0f 1e fa          	endbr64 
  94:	48 83 ef 08          	sub    $0x8,%rdi
  98:	e9 63 ff ff ff       	jmp    0 <StoreNetwork::SaveHostName(char const*, unsigned int)>

Disassembly of section .text._ZN12StoreNetwork8SaveDhcpEb:

0000000000000000 <StoreNetwork::SaveDhcp(bool)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	88 45 e4             	mov    %al,-0x1c(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	e8 00 00 00 00       	call   29 <StoreNetwork::SaveDhcp(bool)+0x29>
  29:	48 89 c7             	mov    %rax,%rdi
  2c:	48 8d 45 e4          	lea    -0x1c(%rbp),%rax
  30:	48 83 ec 08          	sub    $0x8,%rsp
  34:	6a 00                	push   $0x0
  36:	41 b9 01 00 00 00    	mov    $0x1,%r9d
  3c:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  42:	48 89 c1             	mov    %rax,%rcx
  45:	ba 14 00 00 00       	mov    $0x14,%edx
  4a:	be 00 00 00 00       	mov    $0x0,%esi
  4f:	e8 00 00 00 00       	call   54 <StoreNetwork::SaveDhcp(bool)+0x54>
  54:	48 83 c4 10          	add    $0x10,%rsp
  58:	90                   	nop
  59:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  5d:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  64:	00 00 
  66:	74 05                	je     6d <StoreNetwork::SaveDhcp(bool)+0x6d>
  68:	e8 00 00 00 00       	call   6d <StoreNetwork::SaveDhcp(bool)+0x6d>
  6d:	c9                   	leave  
  6e:	c3                   	ret    

000000000000006f <non-virtual thunk to StoreNetwork::SaveDhcp(bool)>:
  6f:	f3 0f 1e fa          	endbr64 
  73:	48 83 ef 08          	sub    $0x8,%rdi
  77:	eb 87                	jmp    0 <StoreNetwork::SaveDhcp(bool)>

Disassembly of section .text._ZN18NetworkParamsStoreC2Ev:

0000000000000000 <NetworkParamsStore::NetworkParamsStore()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 26 <NetworkParamsStore::NetworkParamsStore()+0x26>
  26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2a:	48 89 10             	mov    %rdx,(%rax)
  2d:	90                   	nop
  2e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  32:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  39:	00 00 
  3b:	74 05                	je     42 <NetworkParamsStore::NetworkParamsStore()+0x42>
  3d:	e8 00 00 00 00       	call   42 <NetworkParamsStore::NetworkParamsStore()+0x42>
  42:	c9                   	leave  
  43:	c3                   	ret    

Disassembly of section .text._ZN12NetworkStoreC2Ev:

0000000000000000 <NetworkStore::NetworkStore()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 26 <NetworkStore::NetworkStore()+0x26>
  26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2a:	48 89 10             	mov    %rdx,(%rax)
  2d:	90                   	nop
  2e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  32:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  39:	00 00 
  3b:	74 05                	je     42 <NetworkStore::NetworkStore()+0x42>
  3d:	e8 00 00 00 00       	call   42 <NetworkStore::NetworkStore()+0x42>
  42:	c9                   	leave  
  43:	c3                   	ret    

Disassembly of section .text._ZN12StoreNetworkC2Ev:

0000000000000000 <StoreNetwork::StoreNetwork()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	call   2b <StoreNetwork::StoreNetwork()+0x2b>
  2b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2f:	48 83 c0 08          	add    $0x8,%rax
  33:	48 89 c7             	mov    %rax,%rdi
  36:	e8 00 00 00 00       	call   3b <StoreNetwork::StoreNetwork()+0x3b>
  3b:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 42 <StoreNetwork::StoreNetwork()+0x42>
  42:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  46:	48 89 10             	mov    %rdx,(%rax)
  49:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 50 <StoreNetwork::StoreNetwork()+0x50>
  50:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  54:	48 89 50 08          	mov    %rdx,0x8(%rax)
  58:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5c:	48 89 05 00 00 00 00 	mov    %rax,0x0(%rip)        # 63 <StoreNetwork::StoreNetwork()+0x63>
  63:	90                   	nop
  64:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  68:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  6f:	00 00 
  71:	74 05                	je     78 <StoreNetwork::StoreNetwork()+0x78>
  73:	e8 00 00 00 00       	call   78 <StoreNetwork::StoreNetwork()+0x78>
  78:	c9                   	leave  
  79:	c3                   	ret    

Disassembly of section .text._ZSt3minIjERKT_S2_S2_:

0000000000000000 <unsigned int const& std::min<unsigned int>(unsigned int const&, unsigned int const&)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  27:	8b 10                	mov    (%rax),%edx
  29:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2d:	8b 00                	mov    (%rax),%eax
  2f:	39 c2                	cmp    %eax,%edx
  31:	73 06                	jae    39 <unsigned int const& std::min<unsigned int>(unsigned int const&, unsigned int const&)+0x39>
  33:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  37:	eb 04                	jmp    3d <unsigned int const& std::min<unsigned int>(unsigned int const&, unsigned int const&)+0x3d>
  39:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  41:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  48:	00 00 
  4a:	74 05                	je     51 <unsigned int const& std::min<unsigned int>(unsigned int const&, unsigned int const&)+0x51>
  4c:	e8 00 00 00 00       	call   51 <unsigned int const& std::min<unsigned int>(unsigned int const&, unsigned int const&)+0x51>
  51:	c9                   	leave  
  52:	c3                   	ret    

Disassembly of section .text._ZN12StoreNetworkD2Ev:

0000000000000000 <StoreNetwork::~StoreNetwork()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 26 <StoreNetwork::~StoreNetwork()+0x26>
  26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2a:	48 89 10             	mov    %rdx,(%rax)
  2d:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 34 <StoreNetwork::~StoreNetwork()+0x34>
  34:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  38:	48 89 50 08          	mov    %rdx,0x8(%rax)
  3c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40:	48 83 c0 08          	add    $0x8,%rax
  44:	48 89 c7             	mov    %rax,%rdi
  47:	e8 00 00 00 00       	call   4c <StoreNetwork::~StoreNetwork()+0x4c>
  4c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  50:	48 89 c7             	mov    %rax,%rdi
  53:	e8 00 00 00 00       	call   58 <StoreNetwork::~StoreNetwork()+0x58>
  58:	90                   	nop
  59:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  5d:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  64:	00 00 
  66:	74 05                	je     6d <StoreNetwork::~StoreNetwork()+0x6d>
  68:	e8 00 00 00 00       	call   6d <StoreNetwork::~StoreNetwork()+0x6d>
  6d:	c9                   	leave  
  6e:	c3                   	ret    

000000000000006f <non-virtual thunk to StoreNetwork::~StoreNetwork()>:
  6f:	f3 0f 1e fa          	endbr64 
  73:	48 83 ef 08          	sub    $0x8,%rdi
  77:	eb 87                	jmp    0 <StoreNetwork::~StoreNetwork()>

Disassembly of section .text._ZN12StoreNetworkD0Ev:

0000000000000000 <StoreNetwork::~StoreNetwork()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	call   2b <StoreNetwork::~StoreNetwork()+0x2b>
  2b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	call   37 <StoreNetwork::~StoreNetwork()+0x37>
  37:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3b:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  42:	00 00 
  44:	74 05                	je     4b <StoreNetwork::~StoreNetwork()+0x4b>
  46:	e8 00 00 00 00       	call   4b <StoreNetwork::~StoreNetwork()+0x4b>
  4b:	c9                   	leave  
  4c:	c3                   	ret    

000000000000004d <non-virtual thunk to StoreNetwork::~StoreNetwork()>:
  4d:	f3 0f 1e fa          	endbr64 
  51:	48 83 ef 08          	sub    $0x8,%rdi
  55:	eb a9                	jmp    0 <StoreNetwork::~StoreNetwork()>

storeremoteconfig.o:     file format elf64-x86-64


Disassembly of section .text._ZN11ConfigStore6UpdateEN11configstore5StoreEPKvj:

0000000000000000 <ConfigStore::Update(configstore::Store, void const*, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  13:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  17:	89 4d e0             	mov    %ecx,-0x20(%rbp)
  1a:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  21:	00 00 
  23:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  27:	31 c0                	xor    %eax,%eax
  29:	8b 4d e0             	mov    -0x20(%rbp),%ecx
  2c:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  30:	8b 75 e4             	mov    -0x1c(%rbp),%esi
  33:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  37:	48 83 ec 08          	sub    $0x8,%rsp
  3b:	6a 00                	push   $0x0
  3d:	41 b9 00 00 00 00    	mov    $0x0,%r9d
  43:	41 89 c8             	mov    %ecx,%r8d
  46:	48 89 d1             	mov    %rdx,%rcx
  49:	ba 00 00 00 00       	mov    $0x0,%edx
  4e:	48 89 c7             	mov    %rax,%rdi
  51:	e8 00 00 00 00       	call   56 <ConfigStore::Update(configstore::Store, void const*, unsigned int)+0x56>
  56:	48 83 c4 10          	add    $0x10,%rsp
  5a:	90                   	nop
  5b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  5f:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  66:	00 00 
  68:	74 05                	je     6f <ConfigStore::Update(configstore::Store, void const*, unsigned int)+0x6f>
  6a:	e8 00 00 00 00       	call   6f <ConfigStore::Update(configstore::Store, void const*, unsigned int)+0x6f>
  6f:	c9                   	leave  
  70:	c3                   	ret    

Disassembly of section .text._ZN11ConfigStore3GetEv:

0000000000000000 <ConfigStore::Get()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 22 <ConfigStore::Get()+0x22>
  22:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  26:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  2d:	00 00 
  2f:	74 05                	je     36 <ConfigStore::Get()+0x36>
  31:	e8 00 00 00 00       	call   36 <ConfigStore::Get()+0x36>
  36:	c9                   	leave  
  37:	c3                   	ret    

Disassembly of section .text._ZN23RemoteConfigParamsStoreD2Ev:

0000000000000000 <RemoteConfigParamsStore::~RemoteConfigParamsStore()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 26 <RemoteConfigParamsStore::~RemoteConfigParamsStore()+0x26>
  26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2a:	48 89 10             	mov    %rdx,(%rax)
  2d:	90                   	nop
  2e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  32:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  39:	00 00 
  3b:	74 05                	je     42 <RemoteConfigParamsStore::~RemoteConfigParamsStore()+0x42>
  3d:	e8 00 00 00 00       	call   42 <RemoteConfigParamsStore::~RemoteConfigParamsStore()+0x42>
  42:	c9                   	leave  
  43:	c3                   	ret    

Disassembly of section .text._ZN23RemoteConfigParamsStoreD0Ev:

0000000000000000 <RemoteConfigParamsStore::~RemoteConfigParamsStore()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	call   2b <RemoteConfigParamsStore::~RemoteConfigParamsStore()+0x2b>
  2b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	call   37 <RemoteConfigParamsStore::~RemoteConfigParamsStore()+0x37>
  37:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3b:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  42:	00 00 
  44:	74 05                	je     4b <RemoteConfigParamsStore::~RemoteConfigParamsStore()+0x4b>
  46:	e8 00 00 00 00       	call   4b <RemoteConfigParamsStore::~RemoteConfigParamsStore()+0x4b>
  4b:	c9                   	leave  
  4c:	c3                   	ret    

Disassembly of section .text._ZN17StoreRemoteConfig6UpdateEPK19TRemoteConfigParams:

0000000000000000 <StoreRemoteConfig::Update(TRemoteConfigParams const*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	e8 00 00 00 00       	call   28 <StoreRemoteConfig::Update(TRemoteConfigParams const*)+0x28>
  28:	48 89 c7             	mov    %rax,%rdi
  2b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  2f:	b9 20 00 00 00       	mov    $0x20,%ecx
  34:	48 89 c2             	mov    %rax,%rdx
  37:	be 0a 00 00 00       	mov    $0xa,%esi
  3c:	e8 00 00 00 00       	call   41 <StoreRemoteConfig::Update(TRemoteConfigParams const*)+0x41>
  41:	90                   	nop
  42:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  46:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  4d:	00 00 
  4f:	74 05                	je     56 <StoreRemoteConfig::Update(TRemoteConfigParams const*)+0x56>
  51:	e8 00 00 00 00       	call   56 <StoreRemoteConfig::Update(TRemoteConfigParams const*)+0x56>
  56:	c9                   	leave  
  57:	c3                   	ret    

Disassembly of section .text._ZN17StoreRemoteConfig4CopyEP19TRemoteConfigParams:

0000000000000000 <StoreRemoteConfig::Copy(TRemoteConfigParams*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	e8 00 00 00 00       	call   28 <StoreRemoteConfig::Copy(TRemoteConfigParams*)+0x28>
  28:	48 89 c7             	mov    %rax,%rdi
  2b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  2f:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  35:	b9 20 00 00 00       	mov    $0x20,%ecx
  3a:	48 89 c2             	mov    %rax,%rdx
  3d:	be 0a 00 00 00       	mov    $0xa,%esi
  42:	e8 00 00 00 00       	call   47 <StoreRemoteConfig::Copy(TRemoteConfigParams*)+0x47>
  47:	90                   	nop
  48:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4c:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  53:	00 00 
  55:	74 05                	je     5c <StoreRemoteConfig::Copy(TRemoteConfigParams*)+0x5c>
  57:	e8 00 00 00 00       	call   5c <StoreRemoteConfig::Copy(TRemoteConfigParams*)+0x5c>
  5c:	c9                   	leave  
  5d:	c3                   	ret    

Disassembly of section .text._ZN23RemoteConfigParamsStoreC2Ev:

0000000000000000 <RemoteConfigParamsStore::RemoteConfigParamsStore()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 26 <RemoteConfigParamsStore::RemoteConfigParamsStore()+0x26>
  26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2a:	48 89 10             	mov    %rdx,(%rax)
  2d:	90                   	nop
  2e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  32:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  39:	00 00 
  3b:	74 05                	je     42 <RemoteConfigParamsStore::RemoteConfigParamsStore()+0x42>
  3d:	e8 00 00 00 00       	call   42 <RemoteConfigParamsStore::RemoteConfigParamsStore()+0x42>
  42:	c9                   	leave  
  43:	c3                   	ret    

Disassembly of section .text._ZN17StoreRemoteConfigC2Ev:

0000000000000000 <StoreRemoteConfig::StoreRemoteConfig()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	call   2b <StoreRemoteConfig::StoreRemoteConfig()+0x2b>
  2b:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 32 <StoreRemoteConfig::StoreRemoteConfig()+0x32>
  32:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  36:	48 89 10             	mov    %rdx,(%rax)
  39:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3d:	48 89 05 00 00 00 00 	mov    %rax,0x0(%rip)        # 44 <StoreRemoteConfig::StoreRemoteConfig()+0x44>
  44:	90                   	nop
  45:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  49:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  50:	00 00 
  52:	74 05                	je     59 <StoreRemoteConfig::StoreRemoteConfig()+0x59>
  54:	e8 00 00 00 00       	call   59 <StoreRemoteConfig::StoreRemoteConfig()+0x59>
  59:	c9                   	leave  
  5a:	c3                   	ret    

Disassembly of section .text._ZN17StoreRemoteConfigD2Ev:

0000000000000000 <StoreRemoteConfig::~StoreRemoteConfig()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 26 <StoreRemoteConfig::~StoreRemoteConfig()+0x26>
  26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2a:	48 89 10             	mov    %rdx,(%rax)
  2d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  31:	48 89 c7             	mov    %rax,%rdi
  34:	e8 00 00 00 00       	call   39 <StoreRemoteConfig::~StoreRemoteConfig()+0x39>
  39:	90                   	nop
  3a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3e:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  45:	00 00 
  47:	74 05                	je     4e <StoreRemoteConfig::~StoreRemoteConfig()+0x4e>
  49:	e8 00 00 00 00       	call   4e <StoreRemoteConfig::~StoreRemoteConfig()+0x4e>
  4e:	c9                   	leave  
  4f:	c3                   	ret    

Disassembly of section .text._ZN17StoreRemoteConfigD0Ev:

0000000000000000 <StoreRemoteConfig::~StoreRemoteConfig()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	call   2b <StoreRemoteConfig::~StoreRemoteConfig()+0x2b>
  2b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	call   37 <StoreRemoteConfig::~StoreRemoteConfig()+0x37>
  37:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3b:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  42:	00 00 
  44:	74 05                	je     4b <StoreRemoteConfig::~StoreRemoteConfig()+0x4b>
  46:	e8 00 00 00 00       	call   4b <StoreRemoteConfig::~StoreRemoteConfig()+0x4b>
  4b:	c9                   	leave  
  4c:	c3                   	ret    

storerdmdevice.o:     file format elf64-x86-64


Disassembly of section .text._ZN14RDMDeviceStoreD2Ev:

0000000000000000 <RDMDeviceStore::~RDMDeviceStore()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 26 <RDMDeviceStore::~RDMDeviceStore()+0x26>
  26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2a:	48 89 10             	mov    %rdx,(%rax)
  2d:	90                   	nop
  2e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  32:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  39:	00 00 
  3b:	74 05                	je     42 <RDMDeviceStore::~RDMDeviceStore()+0x42>
  3d:	e8 00 00 00 00       	call   42 <RDMDeviceStore::~RDMDeviceStore()+0x42>
  42:	c9                   	leave  
  43:	c3                   	ret    

Disassembly of section .text._ZN14RDMDeviceStoreD0Ev:

0000000000000000 <RDMDeviceStore::~RDMDeviceStore()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	call   2b <RDMDeviceStore::~RDMDeviceStore()+0x2b>
  2b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	call   37 <RDMDeviceStore::~RDMDeviceStore()+0x37>
  37:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3b:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  42:	00 00 
  44:	74 05                	je     4b <RDMDeviceStore::~RDMDeviceStore()+0x4b>
  46:	e8 00 00 00 00       	call   4b <RDMDeviceStore::~RDMDeviceStore()+0x4b>
  4b:	c9                   	leave  
  4c:	c3                   	ret    

Disassembly of section .text._ZN20RDMDeviceParamsStoreD2Ev:

0000000000000000 <RDMDeviceParamsStore::~RDMDeviceParamsStore()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 26 <RDMDeviceParamsStore::~RDMDeviceParamsStore()+0x26>
  26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2a:	48 89 10             	mov    %rdx,(%rax)
  2d:	90                   	nop
  2e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  32:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  39:	00 00 
  3b:	74 05                	je     42 <RDMDeviceParamsStore::~RDMDeviceParamsStore()+0x42>
  3d:	e8 00 00 00 00       	call   42 <RDMDeviceParamsStore::~RDMDeviceParamsStore()+0x42>
  42:	c9                   	leave  
  43:	c3                   	ret    

Disassembly of section .text._ZN20RDMDeviceParamsStoreD0Ev:

0000000000000000 <RDMDeviceParamsStore::~RDMDeviceParamsStore()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	call   2b <RDMDeviceParamsStore::~RDMDeviceParamsStore()+0x2b>
  2b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	call   37 <RDMDeviceParamsStore::~RDMDeviceParamsStore()+0x37>
  37:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3b:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  42:	00 00 
  44:	74 05                	je     4b <RDMDeviceParamsStore::~RDMDeviceParamsStore()+0x4b>
  46:	e8 00 00 00 00       	call   4b <RDMDeviceParamsStore::~RDMDeviceParamsStore()+0x4b>
  4b:	c9                   	leave  
  4c:	c3                   	ret    

Disassembly of section .text._ZN11ConfigStore6UpdateEN11configstore5StoreEPKvj:

0000000000000000 <ConfigStore::Update(configstore::Store, void const*, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  13:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  17:	89 4d e0             	mov    %ecx,-0x20(%rbp)
  1a:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  21:	00 00 
  23:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  27:	31 c0                	xor    %eax,%eax
  29:	8b 4d e0             	mov    -0x20(%rbp),%ecx
  2c:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  30:	8b 75 e4             	mov    -0x1c(%rbp),%esi
  33:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  37:	48 83 ec 08          	sub    $0x8,%rsp
  3b:	6a 00                	push   $0x0
  3d:	41 b9 00 00 00 00    	mov    $0x0,%r9d
  43:	41 89 c8             	mov    %ecx,%r8d
  46:	48 89 d1             	mov    %rdx,%rcx
  49:	ba 00 00 00 00       	mov    $0x0,%edx
  4e:	48 89 c7             	mov    %rax,%rdi
  51:	e8 00 00 00 00       	call   56 <ConfigStore::Update(configstore::Store, void const*, unsigned int)+0x56>
  56:	48 83 c4 10          	add    $0x10,%rsp
  5a:	90                   	nop
  5b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  5f:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  66:	00 00 
  68:	74 05                	je     6f <ConfigStore::Update(configstore::Store, void const*, unsigned int)+0x6f>
  6a:	e8 00 00 00 00       	call   6f <ConfigStore::Update(configstore::Store, void const*, unsigned int)+0x6f>
  6f:	c9                   	leave  
  70:	c3                   	ret    

Disassembly of section .text._ZN11ConfigStore3GetEv:

0000000000000000 <ConfigStore::Get()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 22 <ConfigStore::Get()+0x22>
  22:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  26:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  2d:	00 00 
  2f:	74 05                	je     36 <ConfigStore::Get()+0x36>
  31:	e8 00 00 00 00       	call   36 <ConfigStore::Get()+0x36>
  36:	c9                   	leave  
  37:	c3                   	ret    

Disassembly of section .text._ZN14StoreRDMDevice6UpdateEPKN3rdm12deviceparams6ParamsE:

0000000000000000 <StoreRDMDevice::Update(rdm::deviceparams::Params const*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	e8 00 00 00 00       	call   28 <StoreRDMDevice::Update(rdm::deviceparams::Params const*)+0x28>
  28:	48 89 c7             	mov    %rax,%rdi
  2b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  2f:	b9 29 00 00 00       	mov    $0x29,%ecx
  34:	48 89 c2             	mov    %rax,%rdx
  37:	be 09 00 00 00       	mov    $0x9,%esi
  3c:	e8 00 00 00 00       	call   41 <StoreRDMDevice::Update(rdm::deviceparams::Params const*)+0x41>
  41:	90                   	nop
  42:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  46:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  4d:	00 00 
  4f:	74 05                	je     56 <StoreRDMDevice::Update(rdm::deviceparams::Params const*)+0x56>
  51:	e8 00 00 00 00       	call   56 <StoreRDMDevice::Update(rdm::deviceparams::Params const*)+0x56>
  56:	c9                   	leave  
  57:	c3                   	ret    

Disassembly of section .text._ZN14StoreRDMDevice4CopyEPN3rdm12deviceparams6ParamsE:

0000000000000000 <StoreRDMDevice::Copy(rdm::deviceparams::Params*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	e8 00 00 00 00       	call   28 <StoreRDMDevice::Copy(rdm::deviceparams::Params*)+0x28>
  28:	48 89 c7             	mov    %rax,%rdi
  2b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  2f:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  35:	b9 29 00 00 00       	mov    $0x29,%ecx
  3a:	48 89 c2             	mov    %rax,%rdx
  3d:	be 09 00 00 00       	mov    $0x9,%esi
  42:	e8 00 00 00 00       	call   47 <StoreRDMDevice::Copy(rdm::deviceparams::Params*)+0x47>
  47:	90                   	nop
  48:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4c:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  53:	00 00 
  55:	74 05                	je     5c <StoreRDMDevice::Copy(rdm::deviceparams::Params*)+0x5c>
  57:	e8 00 00 00 00       	call   5c <StoreRDMDevice::Copy(rdm::deviceparams::Params*)+0x5c>
  5c:	c9                   	leave  
  5d:	c3                   	ret    

Disassembly of section .text._ZN14StoreRDMDevice9SaveLabelEPKch:

0000000000000000 <StoreRDMDevice::SaveLabel(char const*, unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  14:	89 d0                	mov    %edx,%eax
  16:	88 45 dc             	mov    %al,-0x24(%rbp)
  19:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  20:	00 00 
  22:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  26:	31 c0                	xor    %eax,%eax
  28:	e8 00 00 00 00       	call   2d <StoreRDMDevice::SaveLabel(char const*, unsigned char)+0x2d>
  2d:	48 89 c7             	mov    %rax,%rdi
  30:	0f b6 45 dc          	movzbl -0x24(%rbp),%eax
  34:	0f b6 d0             	movzbl %al,%edx
  37:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  3b:	48 83 ec 08          	sub    $0x8,%rsp
  3f:	6a 00                	push   $0x0
  41:	41 b9 01 00 00 00    	mov    $0x1,%r9d
  47:	41 89 d0             	mov    %edx,%r8d
  4a:	48 89 c1             	mov    %rax,%rcx
  4d:	ba 04 00 00 00       	mov    $0x4,%edx
  52:	be 09 00 00 00       	mov    $0x9,%esi
  57:	e8 00 00 00 00       	call   5c <StoreRDMDevice::SaveLabel(char const*, unsigned char)+0x5c>
  5c:	48 83 c4 10          	add    $0x10,%rsp
  60:	e8 00 00 00 00       	call   65 <StoreRDMDevice::SaveLabel(char const*, unsigned char)+0x65>
  65:	48 89 c7             	mov    %rax,%rdi
  68:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
  6c:	48 83 ec 08          	sub    $0x8,%rsp
  70:	6a 00                	push   $0x0
  72:	41 b9 01 00 00 00    	mov    $0x1,%r9d
  78:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  7e:	48 89 c1             	mov    %rax,%rcx
  81:	ba 24 00 00 00       	mov    $0x24,%edx
  86:	be 09 00 00 00       	mov    $0x9,%esi
  8b:	e8 00 00 00 00       	call   90 <StoreRDMDevice::SaveLabel(char const*, unsigned char)+0x90>
  90:	48 83 c4 10          	add    $0x10,%rsp
  94:	90                   	nop
  95:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  99:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  a0:	00 00 
  a2:	74 05                	je     a9 <StoreRDMDevice::SaveLabel(char const*, unsigned char)+0xa9>
  a4:	e8 00 00 00 00       	call   a9 <StoreRDMDevice::SaveLabel(char const*, unsigned char)+0xa9>
  a9:	c9                   	leave  
  aa:	c3                   	ret    

00000000000000ab <non-virtual thunk to StoreRDMDevice::SaveLabel(char const*, unsigned char)>:
  ab:	f3 0f 1e fa          	endbr64 
  af:	48 83 ef 08          	sub    $0x8,%rdi
  b3:	e9 48 ff ff ff       	jmp    0 <StoreRDMDevice::SaveLabel(char const*, unsigned char)>

Disassembly of section .text._ZN20RDMDeviceParamsStoreC2Ev:

0000000000000000 <RDMDeviceParamsStore::RDMDeviceParamsStore()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 26 <RDMDeviceParamsStore::RDMDeviceParamsStore()+0x26>
  26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2a:	48 89 10             	mov    %rdx,(%rax)
  2d:	90                   	nop
  2e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  32:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  39:	00 00 
  3b:	74 05                	je     42 <RDMDeviceParamsStore::RDMDeviceParamsStore()+0x42>
  3d:	e8 00 00 00 00       	call   42 <RDMDeviceParamsStore::RDMDeviceParamsStore()+0x42>
  42:	c9                   	leave  
  43:	c3                   	ret    

Disassembly of section .text._ZN14RDMDeviceStoreC2Ev:

0000000000000000 <RDMDeviceStore::RDMDeviceStore()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 26 <RDMDeviceStore::RDMDeviceStore()+0x26>
  26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2a:	48 89 10             	mov    %rdx,(%rax)
  2d:	90                   	nop
  2e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  32:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  39:	00 00 
  3b:	74 05                	je     42 <RDMDeviceStore::RDMDeviceStore()+0x42>
  3d:	e8 00 00 00 00       	call   42 <RDMDeviceStore::RDMDeviceStore()+0x42>
  42:	c9                   	leave  
  43:	c3                   	ret    

Disassembly of section .text._ZN14StoreRDMDeviceC2Ev:

0000000000000000 <StoreRDMDevice::StoreRDMDevice()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	call   2b <StoreRDMDevice::StoreRDMDevice()+0x2b>
  2b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2f:	48 83 c0 08          	add    $0x8,%rax
  33:	48 89 c7             	mov    %rax,%rdi
  36:	e8 00 00 00 00       	call   3b <StoreRDMDevice::StoreRDMDevice()+0x3b>
  3b:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 42 <StoreRDMDevice::StoreRDMDevice()+0x42>
  42:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  46:	48 89 10             	mov    %rdx,(%rax)
  49:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 50 <StoreRDMDevice::StoreRDMDevice()+0x50>
  50:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  54:	48 89 50 08          	mov    %rdx,0x8(%rax)
  58:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5c:	48 89 05 00 00 00 00 	mov    %rax,0x0(%rip)        # 63 <StoreRDMDevice::StoreRDMDevice()+0x63>
  63:	90                   	nop
  64:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  68:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  6f:	00 00 
  71:	74 05                	je     78 <StoreRDMDevice::StoreRDMDevice()+0x78>
  73:	e8 00 00 00 00       	call   78 <StoreRDMDevice::StoreRDMDevice()+0x78>
  78:	c9                   	leave  
  79:	c3                   	ret    

Disassembly of section .text._ZN14StoreRDMDeviceD2Ev:

0000000000000000 <StoreRDMDevice::~StoreRDMDevice()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 26 <StoreRDMDevice::~StoreRDMDevice()+0x26>
  26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2a:	48 89 10             	mov    %rdx,(%rax)
  2d:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 34 <StoreRDMDevice::~StoreRDMDevice()+0x34>
  34:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  38:	48 89 50 08          	mov    %rdx,0x8(%rax)
  3c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40:	48 83 c0 08          	add    $0x8,%rax
  44:	48 89 c7             	mov    %rax,%rdi
  47:	e8 00 00 00 00       	call   4c <StoreRDMDevice::~StoreRDMDevice()+0x4c>
  4c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  50:	48 89 c7             	mov    %rax,%rdi
  53:	e8 00 00 00 00       	call   58 <StoreRDMDevice::~StoreRDMDevice()+0x58>
  58:	90                   	nop
  59:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  5d:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  64:	00 00 
  66:	74 05                	je     6d <StoreRDMDevice::~StoreRDMDevice()+0x6d>
  68:	e8 00 00 00 00       	call   6d <StoreRDMDevice::~StoreRDMDevice()+0x6d>
  6d:	c9                   	leave  
  6e:	c3                   	ret    

000000000000006f <non-virtual thunk to StoreRDMDevice::~StoreRDMDevice()>:
  6f:	f3 0f 1e fa          	endbr64 
  73:	48 83 ef 08          	sub    $0x8,%rdi
  77:	eb 87                	jmp    0 <StoreRDMDevice::~StoreRDMDevice()>

Disassembly of section .text._ZN14StoreRDMDeviceD0Ev:

0000000000000000 <StoreRDMDevice::~StoreRDMDevice()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	call   2b <StoreRDMDevice::~StoreRDMDevice()+0x2b>
  2b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	call   37 <StoreRDMDevice::~StoreRDMDevice()+0x37>
  37:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3b:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  42:	00 00 
  44:	74 05                	je     4b <StoreRDMDevice::~StoreRDMDevice()+0x4b>
  46:	e8 00 00 00 00       	call   4b <StoreRDMDevice::~StoreRDMDevice()+0x4b>
  4b:	c9                   	leave  
  4c:	c3                   	ret    

000000000000004d <non-virtual thunk to StoreRDMDevice::~StoreRDMDevice()>:
  4d:	f3 0f 1e fa          	endbr64 
  51:	48 83 ef 08          	sub    $0x8,%rdi
  55:	eb a9                	jmp    0 <StoreRDMDevice::~StoreRDMDevice()>

storerdmsensors.o:     file format elf64-x86-64


Disassembly of section .text._ZN14RDMSensorStoreD2Ev:

0000000000000000 <RDMSensorStore::~RDMSensorStore()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 26 <RDMSensorStore::~RDMSensorStore()+0x26>
  26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2a:	48 89 10             	mov    %rdx,(%rax)
  2d:	90                   	nop
  2e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  32:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  39:	00 00 
  3b:	74 05                	je     42 <RDMSensorStore::~RDMSensorStore()+0x42>
  3d:	e8 00 00 00 00       	call   42 <RDMSensorStore::~RDMSensorStore()+0x42>
  42:	c9                   	leave  
  43:	c3                   	ret    

Disassembly of section .text._ZN14RDMSensorStoreD0Ev:

0000000000000000 <RDMSensorStore::~RDMSensorStore()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	call   2b <RDMSensorStore::~RDMSensorStore()+0x2b>
  2b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	call   37 <RDMSensorStore::~RDMSensorStore()+0x37>
  37:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3b:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  42:	00 00 
  44:	74 05                	je     4b <RDMSensorStore::~RDMSensorStore()+0x4b>
  46:	e8 00 00 00 00       	call   4b <RDMSensorStore::~RDMSensorStore()+0x4b>
  4b:	c9                   	leave  
  4c:	c3                   	ret    

Disassembly of section .text._ZN21RDMSensorsParamsStoreD2Ev:

0000000000000000 <RDMSensorsParamsStore::~RDMSensorsParamsStore()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 26 <RDMSensorsParamsStore::~RDMSensorsParamsStore()+0x26>
  26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2a:	48 89 10             	mov    %rdx,(%rax)
  2d:	90                   	nop
  2e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  32:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  39:	00 00 
  3b:	74 05                	je     42 <RDMSensorsParamsStore::~RDMSensorsParamsStore()+0x42>
  3d:	e8 00 00 00 00       	call   42 <RDMSensorsParamsStore::~RDMSensorsParamsStore()+0x42>
  42:	c9                   	leave  
  43:	c3                   	ret    

Disassembly of section .text._ZN21RDMSensorsParamsStoreD0Ev:

0000000000000000 <RDMSensorsParamsStore::~RDMSensorsParamsStore()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	call   2b <RDMSensorsParamsStore::~RDMSensorsParamsStore()+0x2b>
  2b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	call   37 <RDMSensorsParamsStore::~RDMSensorsParamsStore()+0x37>
  37:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3b:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  42:	00 00 
  44:	74 05                	je     4b <RDMSensorsParamsStore::~RDMSensorsParamsStore()+0x4b>
  46:	e8 00 00 00 00       	call   4b <RDMSensorsParamsStore::~RDMSensorsParamsStore()+0x4b>
  4b:	c9                   	leave  
  4c:	c3                   	ret    

Disassembly of section .text._ZN11ConfigStore6UpdateEN11configstore5StoreEPKvj:

0000000000000000 <ConfigStore::Update(configstore::Store, void const*, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  13:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  17:	89 4d e0             	mov    %ecx,-0x20(%rbp)
  1a:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  21:	00 00 
  23:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  27:	31 c0                	xor    %eax,%eax
  29:	8b 4d e0             	mov    -0x20(%rbp),%ecx
  2c:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  30:	8b 75 e4             	mov    -0x1c(%rbp),%esi
  33:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  37:	48 83 ec 08          	sub    $0x8,%rsp
  3b:	6a 00                	push   $0x0
  3d:	41 b9 00 00 00 00    	mov    $0x0,%r9d
  43:	41 89 c8             	mov    %ecx,%r8d
  46:	48 89 d1             	mov    %rdx,%rcx
  49:	ba 00 00 00 00       	mov    $0x0,%edx
  4e:	48 89 c7             	mov    %rax,%rdi
  51:	e8 00 00 00 00       	call   56 <ConfigStore::Update(configstore::Store, void const*, unsigned int)+0x56>
  56:	48 83 c4 10          	add    $0x10,%rsp
  5a:	90                   	nop
  5b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  5f:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  66:	00 00 
  68:	74 05                	je     6f <ConfigStore::Update(configstore::Store, void const*, unsigned int)+0x6f>
  6a:	e8 00 00 00 00       	call   6f <ConfigStore::Update(configstore::Store, void const*, unsigned int)+0x6f>
  6f:	c9                   	leave  
  70:	c3                   	ret    

Disassembly of section .text._ZN11ConfigStore3GetEv:

0000000000000000 <ConfigStore::Get()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 22 <ConfigStore::Get()+0x22>
  22:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  26:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  2d:	00 00 
  2f:	74 05                	je     36 <ConfigStore::Get()+0x36>
  31:	e8 00 00 00 00       	call   36 <ConfigStore::Get()+0x36>
  36:	c9                   	leave  
  37:	c3                   	ret    

Disassembly of section .text._ZN15StoreRDMSensors6UpdateEPKN3rdm13sensorsparams6ParamsE:

0000000000000000 <StoreRDMSensors::Update(rdm::sensorsparams::Params const*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	e8 00 00 00 00       	call   28 <StoreRDMSensors::Update(rdm::sensorsparams::Params const*)+0x28>
  28:	48 89 c7             	mov    %rax,%rdi
  2b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  2f:	b9 3c 00 00 00       	mov    $0x3c,%ecx
  34:	48 89 c2             	mov    %rax,%rdx
  37:	be 15 00 00 00       	mov    $0x15,%esi
  3c:	e8 00 00 00 00       	call   41 <StoreRDMSensors::Update(rdm::sensorsparams::Params const*)+0x41>
  41:	90                   	nop
  42:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  46:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  4d:	00 00 
  4f:	74 05                	je     56 <StoreRDMSensors::Update(rdm::sensorsparams::Params const*)+0x56>
  51:	e8 00 00 00 00       	call   56 <StoreRDMSensors::Update(rdm::sensorsparams::Params const*)+0x56>
  56:	c9                   	leave  
  57:	c3                   	ret    

Disassembly of section .text._ZN15StoreRDMSensors4CopyEPN3rdm13sensorsparams6ParamsE:

0000000000000000 <StoreRDMSensors::Copy(rdm::sensorsparams::Params*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	e8 00 00 00 00       	call   28 <StoreRDMSensors::Copy(rdm::sensorsparams::Params*)+0x28>
  28:	48 89 c7             	mov    %rax,%rdi
  2b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  2f:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  35:	b9 3c 00 00 00       	mov    $0x3c,%ecx
  3a:	48 89 c2             	mov    %rax,%rdx
  3d:	be 15 00 00 00       	mov    $0x15,%esi
  42:	e8 00 00 00 00       	call   47 <StoreRDMSensors::Copy(rdm::sensorsparams::Params*)+0x47>
  47:	90                   	nop
  48:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4c:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  53:	00 00 
  55:	74 05                	je     5c <StoreRDMSensors::Copy(rdm::sensorsparams::Params*)+0x5c>
  57:	e8 00 00 00 00       	call   5c <StoreRDMSensors::Copy(rdm::sensorsparams::Params*)+0x5c>
  5c:	c9                   	leave  
  5d:	c3                   	ret    

Disassembly of section .text._ZN15StoreRDMSensors15SaveCalibrationEji:

0000000000000000 <StoreRDMSensors::SaveCalibration(unsigned int, int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  13:	89 55 e0             	mov    %edx,-0x20(%rbp)
  16:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1d:	00 00 
  1f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  23:	31 c0                	xor    %eax,%eax
  25:	8b 45 e0             	mov    -0x20(%rbp),%eax
  28:	66 89 45 f6          	mov    %ax,-0xa(%rbp)
  2c:	e8 00 00 00 00       	call   31 <StoreRDMSensors::SaveCalibration(unsigned int, int)+0x31>
  31:	48 89 c7             	mov    %rax,%rdi
  34:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  37:	83 c0 0e             	add    $0xe,%eax
  3a:	8d 14 00             	lea    (%rax,%rax,1),%edx
  3d:	48 8d 45 f6          	lea    -0xa(%rbp),%rax
  41:	48 83 ec 08          	sub    $0x8,%rsp
  45:	6a 00                	push   $0x0
  47:	41 b9 00 00 00 00    	mov    $0x0,%r9d
  4d:	41 b8 02 00 00 00    	mov    $0x2,%r8d
  53:	48 89 c1             	mov    %rax,%rcx
  56:	be 15 00 00 00       	mov    $0x15,%esi
  5b:	e8 00 00 00 00       	call   60 <StoreRDMSensors::SaveCalibration(unsigned int, int)+0x60>
  60:	48 83 c4 10          	add    $0x10,%rsp
  64:	90                   	nop
  65:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  69:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  70:	00 00 
  72:	74 05                	je     79 <StoreRDMSensors::SaveCalibration(unsigned int, int)+0x79>
  74:	e8 00 00 00 00       	call   79 <StoreRDMSensors::SaveCalibration(unsigned int, int)+0x79>
  79:	c9                   	leave  
  7a:	c3                   	ret    

000000000000007b <non-virtual thunk to StoreRDMSensors::SaveCalibration(unsigned int, int)>:
  7b:	f3 0f 1e fa          	endbr64 
  7f:	48 83 ef 08          	sub    $0x8,%rdi
  83:	e9 78 ff ff ff       	jmp    0 <StoreRDMSensors::SaveCalibration(unsigned int, int)>

Disassembly of section .text._ZN21RDMSensorsParamsStoreC2Ev:

0000000000000000 <RDMSensorsParamsStore::RDMSensorsParamsStore()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 26 <RDMSensorsParamsStore::RDMSensorsParamsStore()+0x26>
  26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2a:	48 89 10             	mov    %rdx,(%rax)
  2d:	90                   	nop
  2e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  32:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  39:	00 00 
  3b:	74 05                	je     42 <RDMSensorsParamsStore::RDMSensorsParamsStore()+0x42>
  3d:	e8 00 00 00 00       	call   42 <RDMSensorsParamsStore::RDMSensorsParamsStore()+0x42>
  42:	c9                   	leave  
  43:	c3                   	ret    

Disassembly of section .text._ZN14RDMSensorStoreC2Ev:

0000000000000000 <RDMSensorStore::RDMSensorStore()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 26 <RDMSensorStore::RDMSensorStore()+0x26>
  26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2a:	48 89 10             	mov    %rdx,(%rax)
  2d:	90                   	nop
  2e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  32:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  39:	00 00 
  3b:	74 05                	je     42 <RDMSensorStore::RDMSensorStore()+0x42>
  3d:	e8 00 00 00 00       	call   42 <RDMSensorStore::RDMSensorStore()+0x42>
  42:	c9                   	leave  
  43:	c3                   	ret    

Disassembly of section .text._ZN15StoreRDMSensorsC2Ev:

0000000000000000 <StoreRDMSensors::StoreRDMSensors()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	call   2b <StoreRDMSensors::StoreRDMSensors()+0x2b>
  2b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2f:	48 83 c0 08          	add    $0x8,%rax
  33:	48 89 c7             	mov    %rax,%rdi
  36:	e8 00 00 00 00       	call   3b <StoreRDMSensors::StoreRDMSensors()+0x3b>
  3b:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 42 <StoreRDMSensors::StoreRDMSensors()+0x42>
  42:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  46:	48 89 10             	mov    %rdx,(%rax)
  49:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 50 <StoreRDMSensors::StoreRDMSensors()+0x50>
  50:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  54:	48 89 50 08          	mov    %rdx,0x8(%rax)
  58:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5c:	48 89 05 00 00 00 00 	mov    %rax,0x0(%rip)        # 63 <StoreRDMSensors::StoreRDMSensors()+0x63>
  63:	90                   	nop
  64:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  68:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  6f:	00 00 
  71:	74 05                	je     78 <StoreRDMSensors::StoreRDMSensors()+0x78>
  73:	e8 00 00 00 00       	call   78 <StoreRDMSensors::StoreRDMSensors()+0x78>
  78:	c9                   	leave  
  79:	c3                   	ret    

Disassembly of section .text._ZN15StoreRDMSensorsD2Ev:

0000000000000000 <StoreRDMSensors::~StoreRDMSensors()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 26 <StoreRDMSensors::~StoreRDMSensors()+0x26>
  26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2a:	48 89 10             	mov    %rdx,(%rax)
  2d:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 34 <StoreRDMSensors::~StoreRDMSensors()+0x34>
  34:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  38:	48 89 50 08          	mov    %rdx,0x8(%rax)
  3c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40:	48 83 c0 08          	add    $0x8,%rax
  44:	48 89 c7             	mov    %rax,%rdi
  47:	e8 00 00 00 00       	call   4c <StoreRDMSensors::~StoreRDMSensors()+0x4c>
  4c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  50:	48 89 c7             	mov    %rax,%rdi
  53:	e8 00 00 00 00       	call   58 <StoreRDMSensors::~StoreRDMSensors()+0x58>
  58:	90                   	nop
  59:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  5d:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  64:	00 00 
  66:	74 05                	je     6d <StoreRDMSensors::~StoreRDMSensors()+0x6d>
  68:	e8 00 00 00 00       	call   6d <StoreRDMSensors::~StoreRDMSensors()+0x6d>
  6d:	c9                   	leave  
  6e:	c3                   	ret    

000000000000006f <non-virtual thunk to StoreRDMSensors::~StoreRDMSensors()>:
  6f:	f3 0f 1e fa          	endbr64 
  73:	48 83 ef 08          	sub    $0x8,%rdi
  77:	eb 87                	jmp    0 <StoreRDMSensors::~StoreRDMSensors()>

Disassembly of section .text._ZN15StoreRDMSensorsD0Ev:

0000000000000000 <StoreRDMSensors::~StoreRDMSensors()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	call   2b <StoreRDMSensors::~StoreRDMSensors()+0x2b>
  2b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	call   37 <StoreRDMSensors::~StoreRDMSensors()+0x37>
  37:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3b:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  42:	00 00 
  44:	74 05                	je     4b <StoreRDMSensors::~StoreRDMSensors()+0x4b>
  46:	e8 00 00 00 00       	call   4b <StoreRDMSensors::~StoreRDMSensors()+0x4b>
  4b:	c9                   	leave  
  4c:	c3                   	ret    

000000000000004d <non-virtual thunk to StoreRDMSensors::~StoreRDMSensors()>:
  4d:	f3 0f 1e fa          	endbr64 
  51:	48 83 ef 08          	sub    $0x8,%rdi
  55:	eb a9                	jmp    0 <StoreRDMSensors::~StoreRDMSensors()>

storerdmsubdevices.o:     file format elf64-x86-64


Disassembly of section .text._ZN24RDMSubDevicesParamsStoreD2Ev:

0000000000000000 <RDMSubDevicesParamsStore::~RDMSubDevicesParamsStore()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 26 <RDMSubDevicesParamsStore::~RDMSubDevicesParamsStore()+0x26>
  26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2a:	48 89 10             	mov    %rdx,(%rax)
  2d:	90                   	nop
  2e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  32:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  39:	00 00 
  3b:	74 05                	je     42 <RDMSubDevicesParamsStore::~RDMSubDevicesParamsStore()+0x42>
  3d:	e8 00 00 00 00       	call   42 <RDMSubDevicesParamsStore::~RDMSubDevicesParamsStore()+0x42>
  42:	c9                   	leave  
  43:	c3                   	ret    

Disassembly of section .text._ZN24RDMSubDevicesParamsStoreD0Ev:

0000000000000000 <RDMSubDevicesParamsStore::~RDMSubDevicesParamsStore()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	call   2b <RDMSubDevicesParamsStore::~RDMSubDevicesParamsStore()+0x2b>
  2b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	call   37 <RDMSubDevicesParamsStore::~RDMSubDevicesParamsStore()+0x37>
  37:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3b:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  42:	00 00 
  44:	74 05                	je     4b <RDMSubDevicesParamsStore::~RDMSubDevicesParamsStore()+0x4b>
  46:	e8 00 00 00 00       	call   4b <RDMSubDevicesParamsStore::~RDMSubDevicesParamsStore()+0x4b>
  4b:	c9                   	leave  
  4c:	c3                   	ret    

Disassembly of section .text._ZN11ConfigStore6UpdateEN11configstore5StoreEPKvj:

0000000000000000 <ConfigStore::Update(configstore::Store, void const*, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  13:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  17:	89 4d e0             	mov    %ecx,-0x20(%rbp)
  1a:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  21:	00 00 
  23:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  27:	31 c0                	xor    %eax,%eax
  29:	8b 4d e0             	mov    -0x20(%rbp),%ecx
  2c:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  30:	8b 75 e4             	mov    -0x1c(%rbp),%esi
  33:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  37:	48 83 ec 08          	sub    $0x8,%rsp
  3b:	6a 00                	push   $0x0
  3d:	41 b9 00 00 00 00    	mov    $0x0,%r9d
  43:	41 89 c8             	mov    %ecx,%r8d
  46:	48 89 d1             	mov    %rdx,%rcx
  49:	ba 00 00 00 00       	mov    $0x0,%edx
  4e:	48 89 c7             	mov    %rax,%rdi
  51:	e8 00 00 00 00       	call   56 <ConfigStore::Update(configstore::Store, void const*, unsigned int)+0x56>
  56:	48 83 c4 10          	add    $0x10,%rsp
  5a:	90                   	nop
  5b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  5f:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  66:	00 00 
  68:	74 05                	je     6f <ConfigStore::Update(configstore::Store, void const*, unsigned int)+0x6f>
  6a:	e8 00 00 00 00       	call   6f <ConfigStore::Update(configstore::Store, void const*, unsigned int)+0x6f>
  6f:	c9                   	leave  
  70:	c3                   	ret    

Disassembly of section .text._ZN11ConfigStore3GetEv:

0000000000000000 <ConfigStore::Get()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 22 <ConfigStore::Get()+0x22>
  22:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  26:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  2d:	00 00 
  2f:	74 05                	je     36 <ConfigStore::Get()+0x36>
  31:	e8 00 00 00 00       	call   36 <ConfigStore::Get()+0x36>
  36:	c9                   	leave  
  37:	c3                   	ret    

Disassembly of section .text._ZN18StoreRDMSubDevices6UpdateEPKN3rdm16subdevicesparams6ParamsE:

0000000000000000 <StoreRDMSubDevices::Update(rdm::subdevicesparams::Params const*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	e8 00 00 00 00       	call   28 <StoreRDMSubDevices::Update(rdm::subdevicesparams::Params const*)+0x28>
  28:	48 89 c7             	mov    %rax,%rdi
  2b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  2f:	b9 4c 00 00 00       	mov    $0x4c,%ecx
  34:	48 89 c2             	mov    %rax,%rdx
  37:	be 16 00 00 00       	mov    $0x16,%esi
  3c:	e8 00 00 00 00       	call   41 <StoreRDMSubDevices::Update(rdm::subdevicesparams::Params const*)+0x41>
  41:	90                   	nop
  42:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  46:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  4d:	00 00 
  4f:	74 05                	je     56 <StoreRDMSubDevices::Update(rdm::subdevicesparams::Params const*)+0x56>
  51:	e8 00 00 00 00       	call   56 <StoreRDMSubDevices::Update(rdm::subdevicesparams::Params const*)+0x56>
  56:	c9                   	leave  
  57:	c3                   	ret    

Disassembly of section .text._ZN18StoreRDMSubDevices4CopyEPN3rdm16subdevicesparams6ParamsE:

0000000000000000 <StoreRDMSubDevices::Copy(rdm::subdevicesparams::Params*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	e8 00 00 00 00       	call   28 <StoreRDMSubDevices::Copy(rdm::subdevicesparams::Params*)+0x28>
  28:	48 89 c7             	mov    %rax,%rdi
  2b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  2f:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  35:	b9 4c 00 00 00       	mov    $0x4c,%ecx
  3a:	48 89 c2             	mov    %rax,%rdx
  3d:	be 16 00 00 00       	mov    $0x16,%esi
  42:	e8 00 00 00 00       	call   47 <StoreRDMSubDevices::Copy(rdm::subdevicesparams::Params*)+0x47>
  47:	90                   	nop
  48:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4c:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  53:	00 00 
  55:	74 05                	je     5c <StoreRDMSubDevices::Copy(rdm::subdevicesparams::Params*)+0x5c>
  57:	e8 00 00 00 00       	call   5c <StoreRDMSubDevices::Copy(rdm::subdevicesparams::Params*)+0x5c>
  5c:	c9                   	leave  
  5d:	c3                   	ret    

Disassembly of section .text._ZN24RDMSubDevicesParamsStoreC2Ev:

0000000000000000 <RDMSubDevicesParamsStore::RDMSubDevicesParamsStore()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 26 <RDMSubDevicesParamsStore::RDMSubDevicesParamsStore()+0x26>
  26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2a:	48 89 10             	mov    %rdx,(%rax)
  2d:	90                   	nop
  2e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  32:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  39:	00 00 
  3b:	74 05                	je     42 <RDMSubDevicesParamsStore::RDMSubDevicesParamsStore()+0x42>
  3d:	e8 00 00 00 00       	call   42 <RDMSubDevicesParamsStore::RDMSubDevicesParamsStore()+0x42>
  42:	c9                   	leave  
  43:	c3                   	ret    

Disassembly of section .text._ZN18StoreRDMSubDevicesC2Ev:

0000000000000000 <StoreRDMSubDevices::StoreRDMSubDevices()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	call   2b <StoreRDMSubDevices::StoreRDMSubDevices()+0x2b>
  2b:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 32 <StoreRDMSubDevices::StoreRDMSubDevices()+0x32>
  32:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  36:	48 89 10             	mov    %rdx,(%rax)
  39:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3d:	48 89 05 00 00 00 00 	mov    %rax,0x0(%rip)        # 44 <StoreRDMSubDevices::StoreRDMSubDevices()+0x44>
  44:	90                   	nop
  45:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  49:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  50:	00 00 
  52:	74 05                	je     59 <StoreRDMSubDevices::StoreRDMSubDevices()+0x59>
  54:	e8 00 00 00 00       	call   59 <StoreRDMSubDevices::StoreRDMSubDevices()+0x59>
  59:	c9                   	leave  
  5a:	c3                   	ret    

Disassembly of section .text._ZN18StoreRDMSubDevicesD2Ev:

0000000000000000 <StoreRDMSubDevices::~StoreRDMSubDevices()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 26 <StoreRDMSubDevices::~StoreRDMSubDevices()+0x26>
  26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2a:	48 89 10             	mov    %rdx,(%rax)
  2d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  31:	48 89 c7             	mov    %rax,%rdi
  34:	e8 00 00 00 00       	call   39 <StoreRDMSubDevices::~StoreRDMSubDevices()+0x39>
  39:	90                   	nop
  3a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3e:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  45:	00 00 
  47:	74 05                	je     4e <StoreRDMSubDevices::~StoreRDMSubDevices()+0x4e>
  49:	e8 00 00 00 00       	call   4e <StoreRDMSubDevices::~StoreRDMSubDevices()+0x4e>
  4e:	c9                   	leave  
  4f:	c3                   	ret    

Disassembly of section .text._ZN18StoreRDMSubDevicesD0Ev:

0000000000000000 <StoreRDMSubDevices::~StoreRDMSubDevices()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	call   2b <StoreRDMSubDevices::~StoreRDMSubDevices()+0x2b>
  2b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	call   37 <StoreRDMSubDevices::~StoreRDMSubDevices()+0x37>
  37:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3b:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  42:	00 00 
  44:	74 05                	je     4b <StoreRDMSubDevices::~StoreRDMSubDevices()+0x4b>
  46:	e8 00 00 00 00       	call   4b <StoreRDMSubDevices::~StoreRDMSubDevices()+0x4b>
  4b:	c9                   	leave  
  4c:	c3                   	ret    

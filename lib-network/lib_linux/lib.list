In archive lib_linux/libnetwork.a:

networkconst.o:     file format elf64-x86-64


networkparamsconst.o:     file format elf64-x86-64


json_get_phystatus.o:     file format elf64-x86-64


Disassembly of section .text._ZN12remoteconfig3net18json_get_phystatusEPct:

0000000000000000 <remoteconfig::net::json_get_phystatus(char*, unsigned short)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	41 55                	push   %r13
   a:	41 54                	push   %r12
   c:	53                   	push   %rbx
   d:	48 83 ec 48          	sub    $0x48,%rsp
  11:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  15:	89 f0                	mov    %esi,%eax
  17:	66 89 45 a4          	mov    %ax,-0x5c(%rbp)
  1b:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  22:	00 00 
  24:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  28:	31 c0                	xor    %eax,%eax
  2a:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	call   36 <remoteconfig::net::json_get_phystatus(char*, unsigned short)+0x36>
  36:	0f b6 45 cc          	movzbl -0x34(%rbp),%eax
  3a:	0f b6 c0             	movzbl %al,%eax
  3d:	89 c7                	mov    %eax,%edi
  3f:	e8 00 00 00 00       	call   44 <remoteconfig::net::json_get_phystatus(char*, unsigned short)+0x44>
  44:	48 89 c3             	mov    %rax,%rbx
  47:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  4a:	89 c7                	mov    %eax,%edi
  4c:	e8 00 00 00 00       	call   51 <remoteconfig::net::json_get_phystatus(char*, unsigned short)+0x51>
  51:	49 89 c5             	mov    %rax,%r13
  54:	8b 45 c8             	mov    -0x38(%rbp),%eax
  57:	89 c7                	mov    %eax,%edi
  59:	e8 00 00 00 00       	call   5e <remoteconfig::net::json_get_phystatus(char*, unsigned short)+0x5e>
  5e:	49 89 c4             	mov    %rax,%r12
  61:	8b 45 c0             	mov    -0x40(%rbp),%eax
  64:	89 c7                	mov    %eax,%edi
  66:	e8 00 00 00 00       	call   6b <remoteconfig::net::json_get_phystatus(char*, unsigned short)+0x6b>
  6b:	48 89 c2             	mov    %rax,%rdx
  6e:	0f b7 75 a4          	movzwl -0x5c(%rbp),%esi
  72:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  76:	48 83 ec 08          	sub    $0x8,%rsp
  7a:	53                   	push   %rbx
  7b:	4d 89 e9             	mov    %r13,%r9
  7e:	4d 89 e0             	mov    %r12,%r8
  81:	48 89 d1             	mov    %rdx,%rcx
  84:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 8b <remoteconfig::net::json_get_phystatus(char*, unsigned short)+0x8b>
  8b:	48 89 c7             	mov    %rax,%rdi
  8e:	b8 00 00 00 00       	mov    $0x0,%eax
  93:	e8 00 00 00 00       	call   98 <remoteconfig::net::json_get_phystatus(char*, unsigned short)+0x98>
  98:	48 83 c4 10          	add    $0x10,%rsp
  9c:	66 89 45 be          	mov    %ax,-0x42(%rbp)
  a0:	0f b7 45 be          	movzwl -0x42(%rbp),%eax
  a4:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  a8:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  af:	00 00 
  b1:	74 05                	je     b8 <remoteconfig::net::json_get_phystatus(char*, unsigned short)+0xb8>
  b3:	e8 00 00 00 00       	call   b8 <remoteconfig::net::json_get_phystatus(char*, unsigned short)+0xb8>
  b8:	48 8d 65 e8          	lea    -0x18(%rbp),%rsp
  bc:	5b                   	pop    %rbx
  bd:	41 5c                	pop    %r12
  bf:	41 5d                	pop    %r13
  c1:	5d                   	pop    %rbp
  c2:	c3                   	ret    

net_phy.o:     file format elf64-x86-64


Disassembly of section .text._ZNK7Network9GetIfNameEv:

0000000000000000 <Network::GetIfName() const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	48 05 a2 00 00 00    	add    $0xa2,%rax
  29:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  2d:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  34:	00 00 
  36:	74 05                	je     3d <Network::GetIfName() const+0x3d>
  38:	e8 00 00 00 00       	call   3d <Network::GetIfName() const+0x3d>
  3d:	c9                   	leave  
  3e:	c3                   	ret    

Disassembly of section .text._ZN7Network3GetEv:

0000000000000000 <Network::Get()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 22 <Network::Get()+0x22>
  22:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  26:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  2d:	00 00 
  2f:	74 05                	je     36 <Network::Get()+0x36>
  31:	e8 00 00 00 00       	call   36 <Network::Get()+0x36>
  36:	c9                   	leave  
  37:	c3                   	ret    

Disassembly of section .text._ZL22_phy_customized_statusv:

0000000000000000 <_phy_customized_status()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 81 ec 80 06 00 00 	sub    $0x680,%rsp
   f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  16:	00 00 
  18:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1c:	31 c0                	xor    %eax,%eax
  1e:	ba 00 00 00 00       	mov    $0x0,%edx
  23:	be 02 00 00 00       	mov    $0x2,%esi
  28:	bf 02 00 00 00       	mov    $0x2,%edi
  2d:	e8 00 00 00 00       	call   32 <_phy_customized_status()+0x32>
  32:	89 85 8c f9 ff ff    	mov    %eax,-0x674(%rbp)
  38:	83 bd 8c f9 ff ff 00 	cmpl   $0x0,-0x674(%rbp)
  3f:	79 19                	jns    5a <_phy_customized_status()+0x5a>
  41:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 48 <_phy_customized_status()+0x48>
  48:	48 89 c7             	mov    %rax,%rdi
  4b:	e8 00 00 00 00       	call   50 <_phy_customized_status()+0x50>
  50:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  55:	e9 74 01 00 00       	jmp    1ce <_phy_customized_status()+0x1ce>
  5a:	48 8d 85 90 f9 ff ff 	lea    -0x670(%rbp),%rax
  61:	ba 28 00 00 00       	mov    $0x28,%edx
  66:	be 00 00 00 00       	mov    $0x0,%esi
  6b:	48 89 c7             	mov    %rax,%rdi
  6e:	e8 00 00 00 00       	call   73 <_phy_customized_status()+0x73>
  73:	e8 00 00 00 00       	call   78 <_phy_customized_status()+0x78>
  78:	48 89 c7             	mov    %rax,%rdi
  7b:	e8 00 00 00 00       	call   80 <_phy_customized_status()+0x80>
  80:	48 89 c2             	mov    %rax,%rdx
  83:	48 8d 85 90 f9 ff ff 	lea    -0x670(%rbp),%rax
  8a:	48 89 d6             	mov    %rdx,%rsi
  8d:	48 89 c7             	mov    %rax,%rdi
  90:	e8 00 00 00 00       	call   95 <_phy_customized_status()+0x95>
  95:	48 8d 85 c0 f9 ff ff 	lea    -0x640(%rbp),%rax
  9c:	48 89 05 00 00 00 00 	mov    %rax,0x0(%rip)        # a3 <_phy_customized_status()+0xa3>
  a3:	48 8d 85 c0 f9 ff ff 	lea    -0x640(%rbp),%rax
  aa:	ba 30 06 00 00       	mov    $0x630,%edx
  af:	be 00 00 00 00       	mov    $0x0,%esi
  b4:	48 89 c7             	mov    %rax,%rdi
  b7:	e8 00 00 00 00       	call   bc <_phy_customized_status()+0xbc>
  bc:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # c3 <_phy_customized_status()+0xc3>
  c3:	c7 00 4c 00 00 00    	movl   $0x4c,(%rax)
  c9:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # d0 <_phy_customized_status()+0xd0>
  d0:	48 89 85 a0 f9 ff ff 	mov    %rax,-0x660(%rbp)
  d7:	48 8d 95 90 f9 ff ff 	lea    -0x670(%rbp),%rdx
  de:	8b 85 8c f9 ff ff    	mov    -0x674(%rbp),%eax
  e4:	be 46 89 00 00       	mov    $0x8946,%esi
  e9:	89 c7                	mov    %eax,%edi
  eb:	b8 00 00 00 00       	mov    $0x0,%eax
  f0:	e8 00 00 00 00       	call   f5 <_phy_customized_status()+0xf5>
  f5:	83 f8 ff             	cmp    $0xffffffff,%eax
  f8:	0f 94 c0             	sete   %al
  fb:	84 c0                	test   %al,%al
  fd:	74 26                	je     125 <_phy_customized_status()+0x125>
  ff:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 106 <_phy_customized_status()+0x106>
 106:	48 89 c7             	mov    %rax,%rdi
 109:	e8 00 00 00 00       	call   10e <_phy_customized_status()+0x10e>
 10e:	8b 85 8c f9 ff ff    	mov    -0x674(%rbp),%eax
 114:	89 c7                	mov    %eax,%edi
 116:	e8 00 00 00 00       	call   11b <_phy_customized_status()+0x11b>
 11b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 120:	e9 a9 00 00 00       	jmp    1ce <_phy_customized_status()+0x1ce>
 125:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 12c <_phy_customized_status()+0x12c>
 12c:	0f b6 40 0f          	movzbl 0xf(%rax),%eax
 130:	84 c0                	test   %al,%al
 132:	78 17                	js     14b <_phy_customized_status()+0x14b>
 134:	8b 85 8c f9 ff ff    	mov    -0x674(%rbp),%eax
 13a:	89 c7                	mov    %eax,%edi
 13c:	e8 00 00 00 00       	call   141 <_phy_customized_status()+0x141>
 141:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 146:	e9 83 00 00 00       	jmp    1ce <_phy_customized_status()+0x1ce>
 14b:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 152 <_phy_customized_status()+0x152>
 152:	c7 00 4c 00 00 00    	movl   $0x4c,(%rax)
 158:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 15f <_phy_customized_status()+0x15f>
 15f:	0f b6 40 0f          	movzbl 0xf(%rax),%eax
 163:	f7 d8                	neg    %eax
 165:	89 c2                	mov    %eax,%edx
 167:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 16e <_phy_customized_status()+0x16e>
 16e:	88 50 0f             	mov    %dl,0xf(%rax)
 171:	48 8d 95 90 f9 ff ff 	lea    -0x670(%rbp),%rdx
 178:	8b 85 8c f9 ff ff    	mov    -0x674(%rbp),%eax
 17e:	be 46 89 00 00       	mov    $0x8946,%esi
 183:	89 c7                	mov    %eax,%edi
 185:	b8 00 00 00 00       	mov    $0x0,%eax
 18a:	e8 00 00 00 00       	call   18f <_phy_customized_status()+0x18f>
 18f:	83 f8 ff             	cmp    $0xffffffff,%eax
 192:	0f 94 c0             	sete   %al
 195:	84 c0                	test   %al,%al
 197:	74 23                	je     1bc <_phy_customized_status()+0x1bc>
 199:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 1a0 <_phy_customized_status()+0x1a0>
 1a0:	48 89 c7             	mov    %rax,%rdi
 1a3:	e8 00 00 00 00       	call   1a8 <_phy_customized_status()+0x1a8>
 1a8:	8b 85 8c f9 ff ff    	mov    -0x674(%rbp),%eax
 1ae:	89 c7                	mov    %eax,%edi
 1b0:	e8 00 00 00 00       	call   1b5 <_phy_customized_status()+0x1b5>
 1b5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 1ba:	eb 12                	jmp    1ce <_phy_customized_status()+0x1ce>
 1bc:	8b 85 8c f9 ff ff    	mov    -0x674(%rbp),%eax
 1c2:	89 c7                	mov    %eax,%edi
 1c4:	e8 00 00 00 00       	call   1c9 <_phy_customized_status()+0x1c9>
 1c9:	b8 00 00 00 00       	mov    $0x0,%eax
 1ce:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
 1d2:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
 1d9:	00 00 
 1db:	74 05                	je     1e2 <_phy_customized_status()+0x1e2>
 1dd:	e8 00 00 00 00       	call   1e2 <_phy_customized_status()+0x1e2>
 1e2:	c9                   	leave  
 1e3:	c3                   	ret    

Disassembly of section .text._ZN3net21phy_customized_statusERNS_9PhyStatusE:

0000000000000000 <net::phy_customized_status(net::PhyStatus&)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
  29:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2d:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%rax)
  34:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  38:	c7 40 08 02 00 00 00 	movl   $0x2,0x8(%rax)
  3f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43:	c6 40 0c 01          	movb   $0x1,0xc(%rax)
  47:	e8 00 00 00 00       	call   4c <net::phy_customized_status(net::PhyStatus&)+0x4c>
  4c:	c1 e8 1f             	shr    $0x1f,%eax
  4f:	84 c0                	test   %al,%al
  51:	0f 85 87 00 00 00    	jne    de <net::phy_customized_status(net::PhyStatus&)+0xde>
  57:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 5e <net::phy_customized_status(net::PhyStatus&)+0x5e>
  5e:	8b 40 04             	mov    0x4(%rax),%eax
  61:	3d e8 03 00 00       	cmp    $0x3e8,%eax
  66:	74 2d                	je     95 <net::phy_customized_status(net::PhyStatus&)+0x95>
  68:	3d e8 03 00 00       	cmp    $0x3e8,%eax
  6d:	77 33                	ja     a2 <net::phy_customized_status(net::PhyStatus&)+0xa2>
  6f:	83 f8 0a             	cmp    $0xa,%eax
  72:	74 07                	je     7b <net::phy_customized_status(net::PhyStatus&)+0x7b>
  74:	83 f8 64             	cmp    $0x64,%eax
  77:	74 0f                	je     88 <net::phy_customized_status(net::PhyStatus&)+0x88>
  79:	eb 27                	jmp    a2 <net::phy_customized_status(net::PhyStatus&)+0xa2>
  7b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7f:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)
  86:	eb 1b                	jmp    a3 <net::phy_customized_status(net::PhyStatus&)+0xa3>
  88:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8c:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%rax)
  93:	eb 0e                	jmp    a3 <net::phy_customized_status(net::PhyStatus&)+0xa3>
  95:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  99:	c7 40 08 02 00 00 00 	movl   $0x2,0x8(%rax)
  a0:	eb 01                	jmp    a3 <net::phy_customized_status(net::PhyStatus&)+0xa3>
  a2:	90                   	nop
  a3:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # aa <net::phy_customized_status(net::PhyStatus&)+0xaa>
  aa:	0f b6 40 08          	movzbl 0x8(%rax),%eax
  ae:	3c 01                	cmp    $0x1,%al
  b0:	75 07                	jne    b9 <net::phy_customized_status(net::PhyStatus&)+0xb9>
  b2:	ba 01 00 00 00       	mov    $0x1,%edx
  b7:	eb 05                	jmp    be <net::phy_customized_status(net::PhyStatus&)+0xbe>
  b9:	ba 00 00 00 00       	mov    $0x0,%edx
  be:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  c2:	89 50 04             	mov    %edx,0x4(%rax)
  c5:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # cc <net::phy_customized_status(net::PhyStatus&)+0xcc>
  cc:	0f b6 40 0b          	movzbl 0xb(%rax),%eax
  d0:	3c 01                	cmp    $0x1,%al
  d2:	0f 94 c2             	sete   %dl
  d5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  d9:	88 50 0c             	mov    %dl,0xc(%rax)
  dc:	eb 01                	jmp    df <net::phy_customized_status(net::PhyStatus&)+0xdf>
  de:	90                   	nop
  df:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  e3:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  ea:	00 00 
  ec:	74 05                	je     f3 <net::phy_customized_status(net::PhyStatus&)+0xf3>
  ee:	e8 00 00 00 00       	call   f3 <net::phy_customized_status(net::PhyStatus&)+0xf3>
  f3:	c9                   	leave  
  f4:	c3                   	ret    

Disassembly of section .text._ZN12remoteconfig3dsa18json_get_phystatusEPct:

0000000000000000 <remoteconfig::dsa::json_get_phystatus(char*, unsigned short)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	66 89 45 e4          	mov    %ax,-0x1c(%rbp)
  16:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1d:	00 00 
  1f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  23:	31 c0                	xor    %eax,%eax
  25:	0f b7 4d e4          	movzwl -0x1c(%rbp),%ecx
  29:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2d:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 34 <remoteconfig::dsa::json_get_phystatus(char*, unsigned short)+0x34>
  34:	48 89 ce             	mov    %rcx,%rsi
  37:	48 89 c7             	mov    %rax,%rdi
  3a:	b8 00 00 00 00       	mov    $0x0,%eax
  3f:	e8 00 00 00 00       	call   44 <remoteconfig::dsa::json_get_phystatus(char*, unsigned short)+0x44>
  44:	66 89 45 f6          	mov    %ax,-0xa(%rbp)
  48:	0f b7 45 f6          	movzwl -0xa(%rbp),%eax
  4c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  50:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  57:	00 00 
  59:	74 05                	je     60 <remoteconfig::dsa::json_get_phystatus(char*, unsigned short)+0x60>
  5b:	e8 00 00 00 00       	call   60 <remoteconfig::dsa::json_get_phystatus(char*, unsigned short)+0x60>
  60:	c9                   	leave  
  61:	c3                   	ret    

Disassembly of section .text._ZN12remoteconfig3dsa19json_get_portstatusEPct:

0000000000000000 <remoteconfig::dsa::json_get_portstatus(char*, unsigned short)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	66 89 45 e4          	mov    %ax,-0x1c(%rbp)
  16:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1d:	00 00 
  1f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  23:	31 c0                	xor    %eax,%eax
  25:	0f b7 4d e4          	movzwl -0x1c(%rbp),%ecx
  29:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2d:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 34 <remoteconfig::dsa::json_get_portstatus(char*, unsigned short)+0x34>
  34:	48 89 ce             	mov    %rcx,%rsi
  37:	48 89 c7             	mov    %rax,%rdi
  3a:	b8 00 00 00 00       	mov    $0x0,%eax
  3f:	e8 00 00 00 00       	call   44 <remoteconfig::dsa::json_get_portstatus(char*, unsigned short)+0x44>
  44:	66 89 45 f6          	mov    %ax,-0xa(%rbp)
  48:	0f b7 45 f6          	movzwl -0xa(%rbp),%eax
  4c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  50:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  57:	00 00 
  59:	74 05                	je     60 <remoteconfig::dsa::json_get_portstatus(char*, unsigned short)+0x60>
  5b:	e8 00 00 00 00       	call   60 <remoteconfig::dsa::json_get_portstatus(char*, unsigned short)+0x60>
  60:	c9                   	leave  
  61:	c3                   	ret    

net_phy_string.o:     file format elf64-x86-64


Disassembly of section .text._ZN3net19phy_string_get_linkENS_4LinkE:

0000000000000000 <net::phy_string_get_link(net::Link)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	89 7d ec             	mov    %edi,-0x14(%rbp)
   f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  16:	00 00 
  18:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1c:	31 c0                	xor    %eax,%eax
  1e:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  22:	75 09                	jne    2d <net::phy_string_get_link(net::Link)+0x2d>
  24:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 2b <net::phy_string_get_link(net::Link)+0x2b>
  2b:	eb 07                	jmp    34 <net::phy_string_get_link(net::Link)+0x34>
  2d:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 34 <net::phy_string_get_link(net::Link)+0x34>
  34:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  38:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  3f:	00 00 
  41:	74 05                	je     48 <net::phy_string_get_link(net::Link)+0x48>
  43:	e8 00 00 00 00       	call   48 <net::phy_string_get_link(net::Link)+0x48>
  48:	c9                   	leave  
  49:	c3                   	ret    

Disassembly of section .text._ZN3net21phy_string_get_duplexENS_6DuplexE:

0000000000000000 <net::phy_string_get_duplex(net::Duplex)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	89 7d ec             	mov    %edi,-0x14(%rbp)
   f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  16:	00 00 
  18:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1c:	31 c0                	xor    %eax,%eax
  1e:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  22:	75 09                	jne    2d <net::phy_string_get_duplex(net::Duplex)+0x2d>
  24:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 2b <net::phy_string_get_duplex(net::Duplex)+0x2b>
  2b:	eb 07                	jmp    34 <net::phy_string_get_duplex(net::Duplex)+0x34>
  2d:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 34 <net::phy_string_get_duplex(net::Duplex)+0x34>
  34:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  38:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  3f:	00 00 
  41:	74 05                	je     48 <net::phy_string_get_duplex(net::Duplex)+0x48>
  43:	e8 00 00 00 00       	call   48 <net::phy_string_get_duplex(net::Duplex)+0x48>
  48:	c9                   	leave  
  49:	c3                   	ret    

Disassembly of section .text._ZN3net20phy_string_get_speedENS_5SpeedE:

0000000000000000 <net::phy_string_get_speed(net::Speed)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	89 7d ec             	mov    %edi,-0x14(%rbp)
   f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  16:	00 00 
  18:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1c:	31 c0                	xor    %eax,%eax
  1e:	8b 45 ec             	mov    -0x14(%rbp),%eax
  21:	89 45 f4             	mov    %eax,-0xc(%rbp)
  24:	8b 55 f4             	mov    -0xc(%rbp),%edx
  27:	48 89 d0             	mov    %rdx,%rax
  2a:	48 c1 e0 02          	shl    $0x2,%rax
  2e:	48 01 d0             	add    %rdx,%rax
  31:	48 01 c0             	add    %rax,%rax
  34:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 3b <net::phy_string_get_speed(net::Speed)+0x3b>
  3b:	48 01 d0             	add    %rdx,%rax
  3e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  42:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  49:	00 00 
  4b:	74 05                	je     52 <net::phy_string_get_speed(net::Speed)+0x52>
  4d:	e8 00 00 00 00       	call   52 <net::phy_string_get_speed(net::Speed)+0x52>
  52:	c9                   	leave  
  53:	c3                   	ret    

Disassembly of section .text._ZN3net30phy_string_get_autonegotiationEb:

0000000000000000 <net::phy_string_get_autonegotiation(bool)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	89 f8                	mov    %edi,%eax
   e:	88 45 ec             	mov    %al,-0x14(%rbp)
  11:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  18:	00 00 
  1a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1e:	31 c0                	xor    %eax,%eax
  20:	80 7d ec 00          	cmpb   $0x0,-0x14(%rbp)
  24:	74 09                	je     2f <net::phy_string_get_autonegotiation(bool)+0x2f>
  26:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 2d <net::phy_string_get_autonegotiation(bool)+0x2d>
  2d:	eb 07                	jmp    36 <net::phy_string_get_autonegotiation(bool)+0x36>
  2f:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 36 <net::phy_string_get_autonegotiation(bool)+0x36>
  36:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  3a:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  41:	00 00 
  43:	74 05                	je     4a <net::phy_string_get_autonegotiation(bool)+0x4a>
  45:	e8 00 00 00 00       	call   4a <net::phy_string_get_autonegotiation(bool)+0x4a>
  4a:	c9                   	leave  
  4b:	c3                   	ret    

network.o:     file format elf64-x86-64


Disassembly of section .text._ZNK13NetworkParams12GetNtpServerEv:

0000000000000000 <NetworkParams::GetNtpServer() const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	be 40 00 00 00       	mov    $0x40,%esi
  28:	48 89 c7             	mov    %rax,%rdi
  2b:	e8 00 00 00 00       	call   30 <NetworkParams::GetNtpServer() const+0x30>
  30:	83 f0 01             	xor    $0x1,%eax
  33:	84 c0                	test   %al,%al
  35:	74 07                	je     3e <NetworkParams::GetNtpServer() const+0x3e>
  37:	b8 00 00 00 00       	mov    $0x0,%eax
  3c:	eb 07                	jmp    45 <NetworkParams::GetNtpServer() const+0x45>
  3e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  42:	8b 40 5d             	mov    0x5d(%rax),%eax
  45:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  49:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  50:	00 00 
  52:	74 05                	je     59 <NetworkParams::GetNtpServer() const+0x59>
  54:	e8 00 00 00 00       	call   59 <NetworkParams::GetNtpServer() const+0x59>
  59:	c9                   	leave  
  5a:	c3                   	ret    

Disassembly of section .text._ZNK13NetworkParams9isMaskSetEj:

0000000000000000 <NetworkParams::isMaskSet(unsigned int) const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  13:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1a:	00 00 
  1c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  20:	31 c0                	xor    %eax,%eax
  22:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  26:	8b 40 08             	mov    0x8(%rax),%eax
  29:	23 45 e4             	and    -0x1c(%rbp),%eax
  2c:	39 45 e4             	cmp    %eax,-0x1c(%rbp)
  2f:	0f 94 c0             	sete   %al
  32:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  36:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  3d:	00 00 
  3f:	74 05                	je     46 <NetworkParams::isMaskSet(unsigned int) const+0x46>
  41:	e8 00 00 00 00       	call   46 <NetworkParams::isMaskSet(unsigned int) const+0x46>
  46:	c9                   	leave  
  47:	c3                   	ret    

Disassembly of section .text._ZN7Network11SetZeroconfEv:

0000000000000000 <Network::SetZeroconf()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	b8 00 00 00 00       	mov    $0x0,%eax
  24:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  28:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  2f:	00 00 
  31:	74 05                	je     38 <Network::SetZeroconf()+0x38>
  33:	e8 00 00 00 00       	call   38 <Network::SetZeroconf()+0x38>
  38:	c9                   	leave  
  39:	c3                   	ret    

Disassembly of section .text._ZN7Network10EnableDhcpEv:

0000000000000000 <Network::EnableDhcp()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	b8 00 00 00 00       	mov    $0x0,%eax
  24:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  28:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  2f:	00 00 
  31:	74 05                	je     38 <Network::EnableDhcp()+0x38>
  33:	e8 00 00 00 00       	call   38 <Network::EnableDhcp()+0x38>
  38:	c9                   	leave  
  39:	c3                   	ret    

Disassembly of section .text._ZNK7Network14GetNetmaskCIDREv:

0000000000000000 <Network::GetNetmaskCIDR() const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	8b 40 18             	mov    0x18(%rax),%eax
  26:	89 c0                	mov    %eax,%eax
  28:	48 89 c7             	mov    %rax,%rdi
  2b:	e8 00 00 00 00       	call   30 <Network::GetNetmaskCIDR() const+0x30>
  30:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  34:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  3b:	00 00 
  3d:	74 05                	je     44 <Network::GetNetmaskCIDR() const+0x44>
  3f:	e8 00 00 00 00       	call   44 <Network::GetNetmaskCIDR() const+0x44>
  44:	c9                   	leave  
  45:	c3                   	ret    

Disassembly of section .text._ZNK7Network14GetBroadcastIpEv:

0000000000000000 <Network::GetBroadcastIp() const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	8b 50 10             	mov    0x10(%rax),%edx
  26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2a:	8b 40 18             	mov    0x18(%rax),%eax
  2d:	f7 d0                	not    %eax
  2f:	09 d0                	or     %edx,%eax
  31:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  35:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  3c:	00 00 
  3e:	74 05                	je     45 <Network::GetBroadcastIp() const+0x45>
  40:	e8 00 00 00 00       	call   45 <Network::GetBroadcastIp() const+0x45>
  45:	c9                   	leave  
  46:	c3                   	ret    

Disassembly of section .text._ZNK7Network10IsDhcpUsedEv:

0000000000000000 <Network::IsDhcpUsed() const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  27:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  2b:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  32:	00 00 
  34:	74 05                	je     3b <Network::IsDhcpUsed() const+0x3b>
  36:	e8 00 00 00 00       	call   3b <Network::IsDhcpUsed() const+0x3b>
  3b:	c9                   	leave  
  3c:	c3                   	ret    

Disassembly of section .text._ZNK7Network14IsZeroconfUsedEv:

0000000000000000 <Network::IsZeroconfUsed() const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	0f b6 40 03          	movzbl 0x3(%rax),%eax
  27:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  2b:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  32:	00 00 
  34:	74 05                	je     3b <Network::IsZeroconfUsed() const+0x3b>
  36:	e8 00 00 00 00       	call   3b <Network::IsZeroconfUsed() const+0x3b>
  3b:	c9                   	leave  
  3c:	c3                   	ret    

Disassembly of section .text._ZN7Network17GetAddressingModeEv:

0000000000000000 <Network::GetAddressingMode()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	e8 00 00 00 00       	call   24 <Network::GetAddressingMode()+0x24>
  24:	48 89 c7             	mov    %rax,%rdi
  27:	e8 00 00 00 00       	call   2c <Network::GetAddressingMode()+0x2c>
  2c:	84 c0                	test   %al,%al
  2e:	74 07                	je     37 <Network::GetAddressingMode()+0x37>
  30:	b8 5a 00 00 00       	mov    $0x5a,%eax
  35:	eb 35                	jmp    6c <Network::GetAddressingMode()+0x6c>
  37:	e8 00 00 00 00       	call   3c <Network::GetAddressingMode()+0x3c>
  3c:	48 89 c7             	mov    %rax,%rdi
  3f:	e8 00 00 00 00       	call   44 <Network::GetAddressingMode()+0x44>
  44:	84 c0                	test   %al,%al
  46:	74 1f                	je     67 <Network::GetAddressingMode()+0x67>
  48:	e8 00 00 00 00       	call   4d <Network::GetAddressingMode()+0x4d>
  4d:	48 89 c7             	mov    %rax,%rdi
  50:	e8 00 00 00 00       	call   55 <Network::GetAddressingMode()+0x55>
  55:	84 c0                	test   %al,%al
  57:	74 07                	je     60 <Network::GetAddressingMode()+0x60>
  59:	b8 44 00 00 00       	mov    $0x44,%eax
  5e:	eb 0c                	jmp    6c <Network::GetAddressingMode()+0x6c>
  60:	b8 53 00 00 00       	mov    $0x53,%eax
  65:	eb 05                	jmp    6c <Network::GetAddressingMode()+0x6c>
  67:	b8 55 00 00 00       	mov    $0x55,%eax
  6c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  70:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  77:	00 00 
  79:	74 05                	je     80 <Network::GetAddressingMode()+0x80>
  7b:	e8 00 00 00 00       	call   80 <Network::GetAddressingMode()+0x80>
  80:	c9                   	leave  
  81:	c3                   	ret    

Disassembly of section .text._ZNK7Network11IsDhcpKnownEv:

0000000000000000 <Network::IsDhcpKnown() const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	b8 01 00 00 00       	mov    $0x1,%eax
  24:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  28:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  2f:	00 00 
  31:	74 05                	je     38 <Network::IsDhcpKnown() const+0x38>
  33:	e8 00 00 00 00       	call   38 <Network::IsDhcpKnown() const+0x38>
  38:	c9                   	leave  
  39:	c3                   	ret    

Disassembly of section .text._ZN7Network3GetEv:

0000000000000000 <Network::Get()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 22 <Network::Get()+0x22>
  22:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  26:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  2d:	00 00 
  2f:	74 05                	je     36 <Network::Get()+0x36>
  31:	e8 00 00 00 00       	call   36 <Network::Get()+0x36>
  36:	c9                   	leave  
  37:	c3                   	ret    

Disassembly of section .text._ZN7Network15isQueuedMaskSetEj:

0000000000000000 <Network::isQueuedMaskSet(unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  13:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1a:	00 00 
  1c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  20:	31 c0                	xor    %eax,%eax
  22:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  26:	8b 80 c0 00 00 00    	mov    0xc0(%rax),%eax
  2c:	23 45 e4             	and    -0x1c(%rbp),%eax
  2f:	39 45 e4             	cmp    %eax,-0x1c(%rbp)
  32:	0f 94 c0             	sete   %al
  35:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  39:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  40:	00 00 
  42:	74 05                	je     49 <Network::isQueuedMaskSet(unsigned int)+0x49>
  44:	e8 00 00 00 00       	call   49 <Network::isQueuedMaskSet(unsigned int)+0x49>
  49:	c9                   	leave  
  4a:	c3                   	ret    

Disassembly of section .text._ZN7Network12QueuedConfigC2Ev:

0000000000000000 <Network::QueuedConfig::QueuedConfig()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
  29:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2d:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%rax)
  34:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  38:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)
  3f:	90                   	nop
  40:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  44:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  4b:	00 00 
  4d:	74 05                	je     54 <Network::QueuedConfig::QueuedConfig()+0x54>
  4f:	e8 00 00 00 00       	call   54 <Network::QueuedConfig::QueuedConfig()+0x54>
  54:	c9                   	leave  
  55:	c3                   	ret    

Disassembly of section .text._ZN7NetworkC2EiPPcP18NetworkParamsStore:

0000000000000000 <Network::Network(int, char**, NetworkParamsStore*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 81 ec a0 00 00 00 	sub    $0xa0,%rsp
   f:	48 89 bd 78 ff ff ff 	mov    %rdi,-0x88(%rbp)
  16:	89 b5 74 ff ff ff    	mov    %esi,-0x8c(%rbp)
  1c:	48 89 95 68 ff ff ff 	mov    %rdx,-0x98(%rbp)
  23:	48 89 8d 60 ff ff ff 	mov    %rcx,-0xa0(%rbp)
  2a:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  31:	00 00 
  33:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  37:	31 c0                	xor    %eax,%eax
  39:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  40:	c6 00 01             	movb   $0x1,(%rax)
  43:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  4a:	c6 40 01 00          	movb   $0x0,0x1(%rax)
  4e:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  55:	c6 40 02 01          	movb   $0x1,0x2(%rax)
  59:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  60:	c6 40 03 00          	movb   $0x0,0x3(%rax)
  64:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  6b:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%rax)
  72:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  79:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)
  80:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  87:	66 0f ef c0          	pxor   %xmm0,%xmm0
  8b:	f3 0f 11 40 0c       	movss  %xmm0,0xc(%rax)
  90:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  97:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%rax)
  9e:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  a5:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%rax)
  ac:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  b3:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%rax)
  ba:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  c1:	48 c7 80 b8 00 00 00 	movq   $0x0,0xb8(%rax)
  c8:	00 00 00 00 
  cc:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  d3:	48 05 c0 00 00 00    	add    $0xc0,%rax
  d9:	48 89 c7             	mov    %rax,%rdi
  dc:	e8 00 00 00 00       	call   e1 <Network::Network(int, char**, NetworkParamsStore*)+0xe1>
  e1:	83 bd 74 ff ff ff 01 	cmpl   $0x1,-0x8c(%rbp)
  e8:	7f 2b                	jg     115 <Network::Network(int, char**, NetworkParamsStore*)+0x115>
  ea:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  f1:	48 8b 00             	mov    (%rax),%rax
  f4:	48 89 c6             	mov    %rax,%rsi
  f7:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # fe <Network::Network(int, char**, NetworkParamsStore*)+0xfe>
  fe:	48 89 c7             	mov    %rax,%rdi
 101:	b8 00 00 00 00       	mov    $0x0,%eax
 106:	e8 00 00 00 00       	call   10b <Network::Network(int, char**, NetworkParamsStore*)+0x10b>
 10b:	bf 01 00 00 00       	mov    $0x1,%edi
 110:	e8 00 00 00 00       	call   115 <Network::Network(int, char**, NetworkParamsStore*)+0x115>
 115:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
 11c:	48 89 05 00 00 00 00 	mov    %rax,0x0(%rip)        # 123 <Network::Network(int, char**, NetworkParamsStore*)+0x123>
 123:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
 12a:	c6 80 9c 00 00 00 00 	movb   $0x0,0x9c(%rax)
 131:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
 138:	c6 40 1c 00          	movb   $0x0,0x1c(%rax)
 13c:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
 143:	c6 40 5c 00          	movb   $0x0,0x5c(%rax)
 147:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
 14e:	c6 80 a2 00 00 00 00 	movb   $0x0,0xa2(%rax)
 155:	c7 45 84 00 00 00 00 	movl   $0x0,-0x7c(%rbp)
 15c:	eb 36                	jmp    194 <Network::Network(int, char**, NetworkParamsStore*)+0x194>
 15e:	8b 45 84             	mov    -0x7c(%rbp),%eax
 161:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
 168:	00 
 169:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 170 <Network::Network(int, char**, NetworkParamsStore*)+0x170>
 170:	c7 04 02 00 00 00 00 	movl   $0x0,(%rdx,%rax,1)
 177:	8b 45 84             	mov    -0x7c(%rbp),%eax
 17a:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
 181:	00 
 182:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 189 <Network::Network(int, char**, NetworkParamsStore*)+0x189>
 189:	c7 04 02 ff ff ff ff 	movl   $0xffffffff,(%rdx,%rax,1)
 190:	83 45 84 01          	addl   $0x1,-0x7c(%rbp)
 194:	83 7d 84 1f          	cmpl   $0x1f,-0x7c(%rbp)
 198:	76 c4                	jbe    15e <Network::Network(int, char**, NetworkParamsStore*)+0x15e>
 19a:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
 1a1:	48 8d 45 90          	lea    -0x70(%rbp),%rax
 1a5:	48 89 d6             	mov    %rdx,%rsi
 1a8:	48 89 c7             	mov    %rax,%rdi
 1ab:	e8 00 00 00 00       	call   1b0 <Network::Network(int, char**, NetworkParamsStore*)+0x1b0>
 1b0:	48 8d 45 90          	lea    -0x70(%rbp),%rax
 1b4:	48 89 c7             	mov    %rax,%rdi
 1b7:	e8 00 00 00 00       	call   1bc <Network::Network(int, char**, NetworkParamsStore*)+0x1bc>
 1bc:	48 8d 45 90          	lea    -0x70(%rbp),%rax
 1c0:	48 89 c7             	mov    %rax,%rdi
 1c3:	e8 00 00 00 00       	call   1c8 <Network::Network(int, char**, NetworkParamsStore*)+0x1c8>
 1c8:	48 8d 45 90          	lea    -0x70(%rbp),%rax
 1cc:	48 89 c7             	mov    %rax,%rdi
 1cf:	e8 00 00 00 00       	call   1d4 <Network::Network(int, char**, NetworkParamsStore*)+0x1d4>
 1d4:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
 1db:	89 42 08             	mov    %eax,0x8(%rdx)
 1de:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
 1e5:	48 8d 90 a2 00 00 00 	lea    0xa2(%rax),%rdx
 1ec:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
 1f3:	48 83 c0 08          	add    $0x8,%rax
 1f7:	48 8b 30             	mov    (%rax),%rsi
 1fa:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
 201:	b9 10 00 00 00       	mov    $0x10,%ecx
 206:	48 89 c7             	mov    %rax,%rdi
 209:	e8 00 00 00 00       	call   20e <Network::Network(int, char**, NetworkParamsStore*)+0x20e>
 20e:	85 c0                	test   %eax,%eax
 210:	0f 94 c0             	sete   %al
 213:	84 c0                	test   %al,%al
 215:	75 2c                	jne    243 <Network::Network(int, char**, NetworkParamsStore*)+0x243>
 217:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
 21e:	48 83 c0 08          	add    $0x8,%rax
 222:	48 8b 00             	mov    (%rax),%rax
 225:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
 22c:	48 8d 8a a2 00 00 00 	lea    0xa2(%rdx),%rcx
 233:	ba 0f 00 00 00       	mov    $0xf,%edx
 238:	48 89 c6             	mov    %rax,%rsi
 23b:	48 89 cf             	mov    %rcx,%rdi
 23e:	e8 00 00 00 00       	call   243 <Network::Network(int, char**, NetworkParamsStore*)+0x243>
 243:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
 24a:	48 8d 90 a2 00 00 00 	lea    0xa2(%rax),%rdx
 251:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
 258:	48 89 d6             	mov    %rdx,%rsi
 25b:	48 89 c7             	mov    %rax,%rdi
 25e:	e8 00 00 00 00       	call   263 <Network::Network(int, char**, NetworkParamsStore*)+0x263>
 263:	89 45 8c             	mov    %eax,-0x74(%rbp)
 266:	83 7d 8c 00          	cmpl   $0x0,-0x74(%rbp)
 26a:	79 36                	jns    2a2 <Network::Network(int, char**, NetworkParamsStore*)+0x2a2>
 26c:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
 273:	48 83 c0 08          	add    $0x8,%rax
 277:	48 8b 10             	mov    (%rax),%rdx
 27a:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 281 <Network::Network(int, char**, NetworkParamsStore*)+0x281>
 281:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 288 <Network::Network(int, char**, NetworkParamsStore*)+0x288>
 288:	48 89 ce             	mov    %rcx,%rsi
 28b:	48 89 c7             	mov    %rax,%rdi
 28e:	b8 00 00 00 00       	mov    $0x0,%eax
 293:	e8 00 00 00 00       	call   298 <Network::Network(int, char**, NetworkParamsStore*)+0x298>
 298:	bf 01 00 00 00       	mov    $0x1,%edi
 29d:	e8 00 00 00 00       	call   2a2 <Network::Network(int, char**, NetworkParamsStore*)+0x2a2>
 2a2:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
 2a9:	48 8d 90 a2 00 00 00 	lea    0xa2(%rax),%rdx
 2b0:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
 2b7:	48 89 d6             	mov    %rdx,%rsi
 2ba:	48 89 c7             	mov    %rax,%rdi
 2bd:	e8 00 00 00 00       	call   2c2 <Network::Network(int, char**, NetworkParamsStore*)+0x2c2>
 2c2:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
 2c9:	88 42 01             	mov    %al,0x1(%rdx)
 2cc:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
 2d3:	48 05 a2 00 00 00    	add    $0xa2,%rax
 2d9:	48 89 c7             	mov    %rax,%rdi
 2dc:	e8 00 00 00 00       	call   2e1 <Network::Network(int, char**, NetworkParamsStore*)+0x2e1>
 2e1:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
 2e8:	89 42 04             	mov    %eax,0x4(%rdx)
 2eb:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
 2f2:	8b 40 04             	mov    0x4(%rax),%eax
 2f5:	85 c0                	test   %eax,%eax
 2f7:	75 19                	jne    312 <Network::Network(int, char**, NetworkParamsStore*)+0x312>
 2f9:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 300 <Network::Network(int, char**, NetworkParamsStore*)+0x300>
 300:	48 89 c7             	mov    %rax,%rdi
 303:	e8 00 00 00 00       	call   308 <Network::Network(int, char**, NetworkParamsStore*)+0x308>
 308:	bf 01 00 00 00       	mov    $0x1,%edi
 30d:	e8 00 00 00 00       	call   312 <Network::Network(int, char**, NetworkParamsStore*)+0x312>
 312:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
 319:	48 83 c0 1c          	add    $0x1c,%rax
 31d:	ba 40 00 00 00       	mov    $0x40,%edx
 322:	be 00 00 00 00       	mov    $0x0,%esi
 327:	48 89 c7             	mov    %rax,%rdi
 32a:	e8 00 00 00 00       	call   32f <Network::Network(int, char**, NetworkParamsStore*)+0x32f>
 32f:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
 336:	48 83 c0 1c          	add    $0x1c,%rax
 33a:	be 40 00 00 00       	mov    $0x40,%esi
 33f:	48 89 c7             	mov    %rax,%rdi
 342:	e8 00 00 00 00       	call   347 <Network::Network(int, char**, NetworkParamsStore*)+0x347>
 347:	c1 e8 1f             	shr    $0x1f,%eax
 34a:	84 c0                	test   %al,%al
 34c:	74 0f                	je     35d <Network::Network(int, char**, NetworkParamsStore*)+0x35d>
 34e:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 355 <Network::Network(int, char**, NetworkParamsStore*)+0x355>
 355:	48 89 c7             	mov    %rax,%rdi
 358:	e8 00 00 00 00       	call   35d <Network::Network(int, char**, NetworkParamsStore*)+0x35d>
 35d:	c7 45 84 00 00 00 00 	movl   $0x0,-0x7c(%rbp)
 364:	eb 04                	jmp    36a <Network::Network(int, char**, NetworkParamsStore*)+0x36a>
 366:	83 45 84 01          	addl   $0x1,-0x7c(%rbp)
 36a:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
 371:	8b 45 84             	mov    -0x7c(%rbp),%eax
 374:	0f b6 44 02 1c       	movzbl 0x1c(%rdx,%rax,1),%eax
 379:	84 c0                	test   %al,%al
 37b:	74 19                	je     396 <Network::Network(int, char**, NetworkParamsStore*)+0x396>
 37d:	83 7d 84 3f          	cmpl   $0x3f,-0x7c(%rbp)
 381:	77 13                	ja     396 <Network::Network(int, char**, NetworkParamsStore*)+0x396>
 383:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
 38a:	8b 45 84             	mov    -0x7c(%rbp),%eax
 38d:	0f b6 44 02 1c       	movzbl 0x1c(%rdx,%rax,1),%eax
 392:	3c 2e                	cmp    $0x2e,%al
 394:	75 d0                	jne    366 <Network::Network(int, char**, NetworkParamsStore*)+0x366>
 396:	8b 55 84             	mov    -0x7c(%rbp),%edx
 399:	8d 42 01             	lea    0x1(%rdx),%eax
 39c:	89 45 84             	mov    %eax,-0x7c(%rbp)
 39f:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
 3a6:	89 d2                	mov    %edx,%edx
 3a8:	c6 44 10 1c 00       	movb   $0x0,0x1c(%rax,%rdx,1)
 3ad:	c7 45 88 00 00 00 00 	movl   $0x0,-0x78(%rbp)
 3b4:	eb 2d                	jmp    3e3 <Network::Network(int, char**, NetworkParamsStore*)+0x3e3>
 3b6:	8b 55 84             	mov    -0x7c(%rbp),%edx
 3b9:	8d 42 01             	lea    0x1(%rdx),%eax
 3bc:	89 45 84             	mov    %eax,-0x7c(%rbp)
 3bf:	8b 4d 88             	mov    -0x78(%rbp),%ecx
 3c2:	8d 41 01             	lea    0x1(%rcx),%eax
 3c5:	89 45 88             	mov    %eax,-0x78(%rbp)
 3c8:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
 3cf:	89 d2                	mov    %edx,%edx
 3d1:	0f b6 54 10 1c       	movzbl 0x1c(%rax,%rdx,1),%edx
 3d6:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
 3dd:	89 c9                	mov    %ecx,%ecx
 3df:	88 54 08 5c          	mov    %dl,0x5c(%rax,%rcx,1)
 3e3:	83 7d 88 3f          	cmpl   $0x3f,-0x78(%rbp)
 3e7:	77 19                	ja     402 <Network::Network(int, char**, NetworkParamsStore*)+0x402>
 3e9:	83 7d 84 3f          	cmpl   $0x3f,-0x7c(%rbp)
 3ed:	77 13                	ja     402 <Network::Network(int, char**, NetworkParamsStore*)+0x402>
 3ef:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
 3f6:	8b 45 84             	mov    -0x7c(%rbp),%eax
 3f9:	0f b6 44 02 1c       	movzbl 0x1c(%rdx,%rax,1),%eax
 3fe:	84 c0                	test   %al,%al
 400:	75 b4                	jne    3b6 <Network::Network(int, char**, NetworkParamsStore*)+0x3b6>
 402:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
 409:	8b 45 88             	mov    -0x78(%rbp),%eax
 40c:	c6 44 02 5c 00       	movb   $0x0,0x5c(%rdx,%rax,1)
 411:	90                   	nop
 412:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 416:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 41d:	00 00 
 41f:	74 05                	je     426 <Network::Network(int, char**, NetworkParamsStore*)+0x426>
 421:	e8 00 00 00 00       	call   426 <Network::Network(int, char**, NetworkParamsStore*)+0x426>
 426:	c9                   	leave  
 427:	c3                   	ret    

Disassembly of section .text._ZN7NetworkD2Ev:

0000000000000000 <Network::~Network()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  26:	eb 43                	jmp    6b <Network::~Network()+0x6b>
  28:	8b 45 f4             	mov    -0xc(%rbp),%eax
  2b:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
  32:	00 
  33:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 3a <Network::~Network()+0x3a>
  3a:	8b 04 02             	mov    (%rdx,%rax,1),%eax
  3d:	85 c0                	test   %eax,%eax
  3f:	74 26                	je     67 <Network::~Network()+0x67>
  41:	8b 45 f4             	mov    -0xc(%rbp),%eax
  44:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
  4b:	00 
  4c:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 53 <Network::~Network()+0x53>
  53:	8b 04 02             	mov    (%rdx,%rax,1),%eax
  56:	0f b7 d0             	movzwl %ax,%edx
  59:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5d:	89 d6                	mov    %edx,%esi
  5f:	48 89 c7             	mov    %rax,%rdi
  62:	e8 00 00 00 00       	call   67 <Network::~Network()+0x67>
  67:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  6b:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%rbp)
  6f:	76 b7                	jbe    28 <Network::~Network()+0x28>
  71:	90                   	nop
  72:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  76:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  7d:	00 00 
  7f:	74 05                	je     86 <Network::~Network()+0x86>
  81:	e8 00 00 00 00       	call   86 <Network::~Network()+0x86>
  86:	c9                   	leave  
  87:	c3                   	ret    

Disassembly of section .text._ZN7Network5BeginEt:

0000000000000000 <Network::Begin(unsigned short)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 60          	sub    $0x60,%rsp
   c:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	66 89 45 a4          	mov    %ax,-0x5c(%rbp)
  16:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1d:	00 00 
  1f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  23:	31 c0                	xor    %eax,%eax
  25:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%rbp)
  2c:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%rbp)
  33:	eb 46                	jmp    7b <Network::Begin(unsigned short)+0x7b>
  35:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  38:	48 98                	cltq   
  3a:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
  41:	00 
  42:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 49 <Network::Begin(unsigned short)+0x49>
  49:	8b 14 02             	mov    (%rdx,%rax,1),%edx
  4c:	0f b7 45 a4          	movzwl -0x5c(%rbp),%eax
  50:	39 c2                	cmp    %eax,%edx
  52:	75 08                	jne    5c <Network::Begin(unsigned short)+0x5c>
  54:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  57:	e9 ad 02 00 00       	jmp    309 <Network::Begin(unsigned short)+0x309>
  5c:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  5f:	48 98                	cltq   
  61:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
  68:	00 
  69:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 70 <Network::Begin(unsigned short)+0x70>
  70:	8b 04 02             	mov    (%rdx,%rax,1),%eax
  73:	85 c0                	test   %eax,%eax
  75:	74 0c                	je     83 <Network::Begin(unsigned short)+0x83>
  77:	83 45 c4 01          	addl   $0x1,-0x3c(%rbp)
  7b:	83 7d c4 1f          	cmpl   $0x1f,-0x3c(%rbp)
  7f:	7e b4                	jle    35 <Network::Begin(unsigned short)+0x35>
  81:	eb 01                	jmp    84 <Network::Begin(unsigned short)+0x84>
  83:	90                   	nop
  84:	83 7d c4 20          	cmpl   $0x20,-0x3c(%rbp)
  88:	75 19                	jne    a3 <Network::Begin(unsigned short)+0xa3>
  8a:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 91 <Network::Begin(unsigned short)+0x91>
  91:	48 89 c7             	mov    %rax,%rdi
  94:	e8 00 00 00 00       	call   99 <Network::Begin(unsigned short)+0x99>
  99:	bf 01 00 00 00       	mov    $0x1,%edi
  9e:	e8 00 00 00 00       	call   a3 <Network::Begin(unsigned short)+0xa3>
  a3:	ba 11 00 00 00       	mov    $0x11,%edx
  a8:	be 02 00 00 00       	mov    $0x2,%esi
  ad:	bf 02 00 00 00       	mov    $0x2,%edi
  b2:	e8 00 00 00 00       	call   b7 <Network::Begin(unsigned short)+0xb7>
  b7:	89 45 cc             	mov    %eax,-0x34(%rbp)
  ba:	83 7d cc ff          	cmpl   $0xffffffff,-0x34(%rbp)
  be:	0f 94 c0             	sete   %al
  c1:	84 c0                	test   %al,%al
  c3:	74 19                	je     de <Network::Begin(unsigned short)+0xde>
  c5:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # cc <Network::Begin(unsigned short)+0xcc>
  cc:	48 89 c7             	mov    %rax,%rdi
  cf:	e8 00 00 00 00       	call   d4 <Network::Begin(unsigned short)+0xd4>
  d4:	bf 01 00 00 00       	mov    $0x1,%edi
  d9:	e8 00 00 00 00       	call   de <Network::Begin(unsigned short)+0xde>
  de:	48 8d 55 bc          	lea    -0x44(%rbp),%rdx
  e2:	8b 45 cc             	mov    -0x34(%rbp),%eax
  e5:	41 b8 04 00 00 00    	mov    $0x4,%r8d
  eb:	48 89 d1             	mov    %rdx,%rcx
  ee:	ba 06 00 00 00       	mov    $0x6,%edx
  f3:	be 01 00 00 00       	mov    $0x1,%esi
  f8:	89 c7                	mov    %eax,%edi
  fa:	e8 00 00 00 00       	call   ff <Network::Begin(unsigned short)+0xff>
  ff:	83 f8 ff             	cmp    $0xffffffff,%eax
 102:	0f 94 c0             	sete   %al
 105:	84 c0                	test   %al,%al
 107:	74 19                	je     122 <Network::Begin(unsigned short)+0x122>
 109:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 110 <Network::Begin(unsigned short)+0x110>
 110:	48 89 c7             	mov    %rax,%rdi
 113:	e8 00 00 00 00       	call   118 <Network::Begin(unsigned short)+0x118>
 118:	bf 01 00 00 00       	mov    $0x1,%edi
 11d:	e8 00 00 00 00       	call   122 <Network::Begin(unsigned short)+0x122>
 122:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
 129:	00 
 12a:	48 c7 45 d8 0a 00 00 	movq   $0xa,-0x28(%rbp)
 131:	00 
 132:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
 136:	8b 45 cc             	mov    -0x34(%rbp),%eax
 139:	41 b8 10 00 00 00    	mov    $0x10,%r8d
 13f:	48 89 d1             	mov    %rdx,%rcx
 142:	ba 14 00 00 00       	mov    $0x14,%edx
 147:	be 01 00 00 00       	mov    $0x1,%esi
 14c:	89 c7                	mov    %eax,%edi
 14e:	e8 00 00 00 00       	call   153 <Network::Begin(unsigned short)+0x153>
 153:	83 f8 ff             	cmp    $0xffffffff,%eax
 156:	0f 94 c0             	sete   %al
 159:	84 c0                	test   %al,%al
 15b:	74 19                	je     176 <Network::Begin(unsigned short)+0x176>
 15d:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 164 <Network::Begin(unsigned short)+0x164>
 164:	48 89 c7             	mov    %rax,%rdi
 167:	e8 00 00 00 00       	call   16c <Network::Begin(unsigned short)+0x16c>
 16c:	bf 01 00 00 00       	mov    $0x1,%edi
 171:	e8 00 00 00 00       	call   176 <Network::Begin(unsigned short)+0x176>
 176:	c7 45 c0 01 00 00 00 	movl   $0x1,-0x40(%rbp)
 17d:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
 181:	8b 45 cc             	mov    -0x34(%rbp),%eax
 184:	41 b8 04 00 00 00    	mov    $0x4,%r8d
 18a:	48 89 d1             	mov    %rdx,%rcx
 18d:	ba 02 00 00 00       	mov    $0x2,%edx
 192:	be 01 00 00 00       	mov    $0x1,%esi
 197:	89 c7                	mov    %eax,%edi
 199:	e8 00 00 00 00       	call   19e <Network::Begin(unsigned short)+0x19e>
 19e:	83 f8 ff             	cmp    $0xffffffff,%eax
 1a1:	0f 94 c0             	sete   %al
 1a4:	84 c0                	test   %al,%al
 1a6:	74 19                	je     1c1 <Network::Begin(unsigned short)+0x1c1>
 1a8:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 1af <Network::Begin(unsigned short)+0x1af>
 1af:	48 89 c7             	mov    %rax,%rdi
 1b2:	e8 00 00 00 00       	call   1b7 <Network::Begin(unsigned short)+0x1b7>
 1b7:	bf 01 00 00 00       	mov    $0x1,%edi
 1bc:	e8 00 00 00 00       	call   1c1 <Network::Begin(unsigned short)+0x1c1>
 1c1:	c7 45 c0 01 00 00 00 	movl   $0x1,-0x40(%rbp)
 1c8:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
 1cc:	8b 45 cc             	mov    -0x34(%rbp),%eax
 1cf:	41 b8 04 00 00 00    	mov    $0x4,%r8d
 1d5:	48 89 d1             	mov    %rdx,%rcx
 1d8:	ba 0f 00 00 00       	mov    $0xf,%edx
 1dd:	be 01 00 00 00       	mov    $0x1,%esi
 1e2:	89 c7                	mov    %eax,%edi
 1e4:	e8 00 00 00 00       	call   1e9 <Network::Begin(unsigned short)+0x1e9>
 1e9:	83 f8 ff             	cmp    $0xffffffff,%eax
 1ec:	0f 94 c0             	sete   %al
 1ef:	84 c0                	test   %al,%al
 1f1:	74 19                	je     20c <Network::Begin(unsigned short)+0x20c>
 1f3:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 1fa <Network::Begin(unsigned short)+0x1fa>
 1fa:	48 89 c7             	mov    %rax,%rdi
 1fd:	e8 00 00 00 00       	call   202 <Network::Begin(unsigned short)+0x202>
 202:	bf 01 00 00 00       	mov    $0x1,%edi
 207:	e8 00 00 00 00       	call   20c <Network::Begin(unsigned short)+0x20c>
 20c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
 210:	ba 10 00 00 00       	mov    $0x10,%edx
 215:	be 00 00 00 00       	mov    $0x0,%esi
 21a:	48 89 c7             	mov    %rax,%rdi
 21d:	e8 00 00 00 00       	call   222 <Network::Begin(unsigned short)+0x222>
 222:	66 c7 45 e0 02 00    	movw   $0x2,-0x20(%rbp)
 228:	0f b7 45 a4          	movzwl -0x5c(%rbp),%eax
 22c:	89 c7                	mov    %eax,%edi
 22e:	e8 00 00 00 00       	call   233 <Network::Begin(unsigned short)+0x233>
 233:	66 89 45 e2          	mov    %ax,-0x1e(%rbp)
 237:	bf 00 00 00 00       	mov    $0x0,%edi
 23c:	e8 00 00 00 00       	call   241 <Network::Begin(unsigned short)+0x241>
 241:	89 45 e4             	mov    %eax,-0x1c(%rbp)
 244:	48 8d 4d e0          	lea    -0x20(%rbp),%rcx
 248:	8b 45 cc             	mov    -0x34(%rbp),%eax
 24b:	ba 10 00 00 00       	mov    $0x10,%edx
 250:	48 89 ce             	mov    %rcx,%rsi
 253:	89 c7                	mov    %eax,%edi
 255:	e8 00 00 00 00       	call   25a <Network::Begin(unsigned short)+0x25a>
 25a:	83 f8 ff             	cmp    $0xffffffff,%eax
 25d:	0f 94 c0             	sete   %al
 260:	84 c0                	test   %al,%al
 262:	74 59                	je     2bd <Network::Begin(unsigned short)+0x2bd>
 264:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 26b <Network::Begin(unsigned short)+0x26b>
 26b:	48 89 c7             	mov    %rax,%rdi
 26e:	e8 00 00 00 00       	call   273 <Network::Begin(unsigned short)+0x273>
 273:	0f b7 75 a4          	movzwl -0x5c(%rbp),%esi
 277:	8b 45 e4             	mov    -0x1c(%rbp),%eax
 27a:	c1 e8 18             	shr    $0x18,%eax
 27d:	89 c7                	mov    %eax,%edi
 27f:	8b 45 e4             	mov    -0x1c(%rbp),%eax
 282:	c1 e8 10             	shr    $0x10,%eax
 285:	0f b6 c8             	movzbl %al,%ecx
 288:	8b 45 e4             	mov    -0x1c(%rbp),%eax
 28b:	c1 e8 08             	shr    $0x8,%eax
 28e:	0f b6 d0             	movzbl %al,%edx
 291:	8b 45 e4             	mov    -0x1c(%rbp),%eax
 294:	0f b6 c0             	movzbl %al,%eax
 297:	41 89 f1             	mov    %esi,%r9d
 29a:	41 89 f8             	mov    %edi,%r8d
 29d:	89 c6                	mov    %eax,%esi
 29f:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 2a6 <Network::Begin(unsigned short)+0x2a6>
 2a6:	48 89 c7             	mov    %rax,%rdi
 2a9:	b8 00 00 00 00       	mov    $0x0,%eax
 2ae:	e8 00 00 00 00       	call   2b3 <Network::Begin(unsigned short)+0x2b3>
 2b3:	bf 01 00 00 00       	mov    $0x1,%edi
 2b8:	e8 00 00 00 00       	call   2bd <Network::Begin(unsigned short)+0x2bd>
 2bd:	0f b7 45 a4          	movzwl -0x5c(%rbp),%eax
 2c1:	8b 55 c4             	mov    -0x3c(%rbp),%edx
 2c4:	48 63 d2             	movslq %edx,%rdx
 2c7:	48 8d 0c 95 00 00 00 	lea    0x0(,%rdx,4),%rcx
 2ce:	00 
 2cf:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 2d6 <Network::Begin(unsigned short)+0x2d6>
 2d6:	89 04 11             	mov    %eax,(%rcx,%rdx,1)
 2d9:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%rbp)
 2e0:	eb 04                	jmp    2e6 <Network::Begin(unsigned short)+0x2e6>
 2e2:	83 45 c8 01          	addl   $0x1,-0x38(%rbp)
 2e6:	83 7d c8 1f          	cmpl   $0x1f,-0x38(%rbp)
 2ea:	76 f6                	jbe    2e2 <Network::Begin(unsigned short)+0x2e2>
 2ec:	8b 45 c4             	mov    -0x3c(%rbp),%eax
 2ef:	48 98                	cltq   
 2f1:	48 8d 0c 85 00 00 00 	lea    0x0(,%rax,4),%rcx
 2f8:	00 
 2f9:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 300 <Network::Begin(unsigned short)+0x300>
 300:	8b 45 cc             	mov    -0x34(%rbp),%eax
 303:	89 04 11             	mov    %eax,(%rcx,%rdx,1)
 306:	8b 45 cc             	mov    -0x34(%rbp),%eax
 309:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
 30d:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
 314:	00 00 
 316:	74 05                	je     31d <Network::Begin(unsigned short)+0x31d>
 318:	e8 00 00 00 00       	call   31d <Network::Begin(unsigned short)+0x31d>
 31d:	c9                   	leave  
 31e:	c3                   	ret    

Disassembly of section .text._ZN7Network16MacAddressCopyToEPh:

0000000000000000 <Network::MacAddressCopyTo(unsigned char*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  2a:	eb 20                	jmp    4c <Network::MacAddressCopyTo(unsigned char*)+0x4c>
  2c:	8b 55 f4             	mov    -0xc(%rbp),%edx
  2f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  33:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  37:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  3b:	8b 45 f4             	mov    -0xc(%rbp),%eax
  3e:	0f b6 84 02 9c 00 00 	movzbl 0x9c(%rdx,%rax,1),%eax
  45:	00 
  46:	88 01                	mov    %al,(%rcx)
  48:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  4c:	83 7d f4 05          	cmpl   $0x5,-0xc(%rbp)
  50:	76 da                	jbe    2c <Network::MacAddressCopyTo(unsigned char*)+0x2c>
  52:	90                   	nop
  53:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  57:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  5e:	00 00 
  60:	74 05                	je     67 <Network::MacAddressCopyTo(unsigned char*)+0x67>
  62:	e8 00 00 00 00       	call   67 <Network::MacAddressCopyTo(unsigned char*)+0x67>
  67:	c9                   	leave  
  68:	c3                   	ret    

Disassembly of section .text._ZN7Network3EndEt:

0000000000000000 <Network::End(unsigned short)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	66 89 45 e4          	mov    %ax,-0x1c(%rbp)
  16:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1d:	00 00 
  1f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  23:	31 c0                	xor    %eax,%eax
  25:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
  2c:	eb 04                	jmp    32 <Network::End(unsigned short)+0x32>
  2e:	83 45 f0 01          	addl   $0x1,-0x10(%rbp)
  32:	83 7d f0 1f          	cmpl   $0x1f,-0x10(%rbp)
  36:	76 f6                	jbe    2e <Network::End(unsigned short)+0x2e>
  38:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  3f:	e9 ac 00 00 00       	jmp    f0 <Network::End(unsigned short)+0xf0>
  44:	8b 45 f4             	mov    -0xc(%rbp),%eax
  47:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
  4e:	00 
  4f:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 56 <Network::End(unsigned short)+0x56>
  56:	8b 14 02             	mov    (%rdx,%rax,1),%edx
  59:	0f b7 45 e4          	movzwl -0x1c(%rbp),%eax
  5d:	39 c2                	cmp    %eax,%edx
  5f:	0f 85 87 00 00 00    	jne    ec <Network::End(unsigned short)+0xec>
  65:	8b 45 f4             	mov    -0xc(%rbp),%eax
  68:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
  6f:	00 
  70:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 77 <Network::End(unsigned short)+0x77>
  77:	c7 04 02 00 00 00 00 	movl   $0x0,(%rdx,%rax,1)
  7e:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 85 <Network::End(unsigned short)+0x85>
  85:	48 89 c7             	mov    %rax,%rdi
  88:	e8 00 00 00 00       	call   8d <Network::End(unsigned short)+0x8d>
  8d:	8b 45 f4             	mov    -0xc(%rbp),%eax
  90:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
  97:	00 
  98:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 9f <Network::End(unsigned short)+0x9f>
  9f:	8b 04 02             	mov    (%rdx,%rax,1),%eax
  a2:	89 c7                	mov    %eax,%edi
  a4:	e8 00 00 00 00       	call   a9 <Network::End(unsigned short)+0xa9>
  a9:	83 f8 ff             	cmp    $0xffffffff,%eax
  ac:	0f 94 c0             	sete   %al
  af:	84 c0                	test   %al,%al
  b1:	74 19                	je     cc <Network::End(unsigned short)+0xcc>
  b3:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # ba <Network::End(unsigned short)+0xba>
  ba:	48 89 c7             	mov    %rax,%rdi
  bd:	e8 00 00 00 00       	call   c2 <Network::End(unsigned short)+0xc2>
  c2:	bf 01 00 00 00       	mov    $0x1,%edi
  c7:	e8 00 00 00 00       	call   cc <Network::End(unsigned short)+0xcc>
  cc:	8b 45 f4             	mov    -0xc(%rbp),%eax
  cf:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
  d6:	00 
  d7:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # de <Network::End(unsigned short)+0xde>
  de:	c7 04 02 ff ff ff ff 	movl   $0xffffffff,(%rdx,%rax,1)
  e5:	b8 00 00 00 00       	mov    $0x0,%eax
  ea:	eb 22                	jmp    10e <Network::End(unsigned short)+0x10e>
  ec:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  f0:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%rbp)
  f4:	0f 86 4a ff ff ff    	jbe    44 <Network::End(unsigned short)+0x44>
  fa:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 101 <Network::End(unsigned short)+0x101>
 101:	48 89 c7             	mov    %rax,%rdi
 104:	e8 00 00 00 00       	call   109 <Network::End(unsigned short)+0x109>
 109:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 10e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
 112:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
 119:	00 00 
 11b:	74 05                	je     122 <Network::End(unsigned short)+0x122>
 11d:	e8 00 00 00 00       	call   122 <Network::End(unsigned short)+0x122>
 122:	c9                   	leave  
 123:	c3                   	ret    

Disassembly of section .text._ZN7Network5SetIpEj:

0000000000000000 <Network::SetIp(unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 50          	sub    $0x50,%rsp
   c:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  10:	89 75 b4             	mov    %esi,-0x4c(%rbp)
  13:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1a:	00 00 
  1c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  20:	31 c0                	xor    %eax,%eax
  22:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  26:	8b 40 10             	mov    0x10(%rax),%eax
  29:	39 45 b4             	cmp    %eax,-0x4c(%rbp)
  2c:	0f 84 50 01 00 00    	je     182 <Network::SetIp(unsigned int)+0x182>
  32:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  36:	48 83 c0 10          	add    $0x10,%rax
  3a:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  3e:	ba 00 00 00 00       	mov    $0x0,%edx
  43:	be 02 00 00 00       	mov    $0x2,%esi
  48:	bf 02 00 00 00       	mov    $0x2,%edi
  4d:	e8 00 00 00 00       	call   52 <Network::SetIp(unsigned int)+0x52>
  52:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  55:	83 7d c4 ff          	cmpl   $0xffffffff,-0x3c(%rbp)
  59:	75 14                	jne    6f <Network::SetIp(unsigned int)+0x6f>
  5b:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 62 <Network::SetIp(unsigned int)+0x62>
  62:	48 89 c7             	mov    %rax,%rdi
  65:	e8 00 00 00 00       	call   6a <Network::SetIp(unsigned int)+0x6a>
  6a:	e9 14 01 00 00       	jmp    183 <Network::SetIp(unsigned int)+0x183>
  6f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  73:	48 8d 88 a2 00 00 00 	lea    0xa2(%rax),%rcx
  7a:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  7e:	ba 10 00 00 00       	mov    $0x10,%edx
  83:	48 89 ce             	mov    %rcx,%rsi
  86:	48 89 c7             	mov    %rax,%rdi
  89:	e8 00 00 00 00       	call   8e <Network::SetIp(unsigned int)+0x8e>
  8e:	66 c7 45 e0 02 00    	movw   $0x2,-0x20(%rbp)
  94:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  98:	8b 55 b4             	mov    -0x4c(%rbp),%edx
  9b:	89 50 04             	mov    %edx,0x4(%rax)
  9e:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  a2:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  a5:	be 16 89 00 00       	mov    $0x8916,%esi
  aa:	89 c7                	mov    %eax,%edi
  ac:	b8 00 00 00 00       	mov    $0x0,%eax
  b1:	e8 00 00 00 00       	call   b6 <Network::SetIp(unsigned int)+0xb6>
  b6:	83 f8 ff             	cmp    $0xffffffff,%eax
  b9:	0f 94 c0             	sete   %al
  bc:	84 c0                	test   %al,%al
  be:	74 14                	je     d4 <Network::SetIp(unsigned int)+0xd4>
  c0:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # c7 <Network::SetIp(unsigned int)+0xc7>
  c7:	48 89 c7             	mov    %rax,%rdi
  ca:	e8 00 00 00 00       	call   cf <Network::SetIp(unsigned int)+0xcf>
  cf:	e9 af 00 00 00       	jmp    183 <Network::SetIp(unsigned int)+0x183>
  d4:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  d8:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  db:	be 13 89 00 00       	mov    $0x8913,%esi
  e0:	89 c7                	mov    %eax,%edi
  e2:	b8 00 00 00 00       	mov    $0x0,%eax
  e7:	e8 00 00 00 00       	call   ec <Network::SetIp(unsigned int)+0xec>
  ec:	83 f8 ff             	cmp    $0xffffffff,%eax
  ef:	0f 94 c0             	sete   %al
  f2:	84 c0                	test   %al,%al
  f4:	74 11                	je     107 <Network::SetIp(unsigned int)+0x107>
  f6:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # fd <Network::SetIp(unsigned int)+0xfd>
  fd:	48 89 c7             	mov    %rax,%rdi
 100:	e8 00 00 00 00       	call   105 <Network::SetIp(unsigned int)+0x105>
 105:	eb 7c                	jmp    183 <Network::SetIp(unsigned int)+0x183>
 107:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 10b:	48 8d 88 a2 00 00 00 	lea    0xa2(%rax),%rcx
 112:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
 116:	ba 10 00 00 00       	mov    $0x10,%edx
 11b:	48 89 ce             	mov    %rcx,%rsi
 11e:	48 89 c7             	mov    %rax,%rdi
 121:	e8 00 00 00 00       	call   126 <Network::SetIp(unsigned int)+0x126>
 126:	0f b7 45 e0          	movzwl -0x20(%rbp),%eax
 12a:	83 c8 41             	or     $0x41,%eax
 12d:	66 89 45 e0          	mov    %ax,-0x20(%rbp)
 131:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
 135:	8b 45 c4             	mov    -0x3c(%rbp),%eax
 138:	be 14 89 00 00       	mov    $0x8914,%esi
 13d:	89 c7                	mov    %eax,%edi
 13f:	b8 00 00 00 00       	mov    $0x0,%eax
 144:	e8 00 00 00 00       	call   149 <Network::SetIp(unsigned int)+0x149>
 149:	83 f8 ff             	cmp    $0xffffffff,%eax
 14c:	0f 94 c0             	sete   %al
 14f:	84 c0                	test   %al,%al
 151:	74 11                	je     164 <Network::SetIp(unsigned int)+0x164>
 153:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 15a <Network::SetIp(unsigned int)+0x15a>
 15a:	48 89 c7             	mov    %rax,%rdi
 15d:	e8 00 00 00 00       	call   162 <Network::SetIp(unsigned int)+0x162>
 162:	eb 1f                	jmp    183 <Network::SetIp(unsigned int)+0x183>
 164:	8b 45 c4             	mov    -0x3c(%rbp),%eax
 167:	89 c7                	mov    %eax,%edi
 169:	e8 00 00 00 00       	call   16e <Network::SetIp(unsigned int)+0x16e>
 16e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 172:	c6 40 01 00          	movb   $0x0,0x1(%rax)
 176:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 17a:	8b 55 b4             	mov    -0x4c(%rbp),%edx
 17d:	89 50 10             	mov    %edx,0x10(%rax)
 180:	eb 01                	jmp    183 <Network::SetIp(unsigned int)+0x183>
 182:	90                   	nop
 183:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 187:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 18e:	00 00 
 190:	74 05                	je     197 <Network::SetIp(unsigned int)+0x197>
 192:	e8 00 00 00 00       	call   197 <Network::SetIp(unsigned int)+0x197>
 197:	c9                   	leave  
 198:	c3                   	ret    

Disassembly of section .text._ZN7Network10SetNetmaskEj:

0000000000000000 <Network::SetNetmask(unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  13:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1a:	00 00 
  1c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  20:	31 c0                	xor    %eax,%eax
  22:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  26:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  29:	89 50 18             	mov    %edx,0x18(%rax)
  2c:	90                   	nop
  2d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  31:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  38:	00 00 
  3a:	74 05                	je     41 <Network::SetNetmask(unsigned int)+0x41>
  3c:	e8 00 00 00 00       	call   41 <Network::SetNetmask(unsigned int)+0x41>
  41:	c9                   	leave  
  42:	c3                   	ret    

Disassembly of section .text._ZN7Network12SetGatewayIpEj:

0000000000000000 <Network::SetGatewayIp(unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  13:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1a:	00 00 
  1c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  20:	31 c0                	xor    %eax,%eax
  22:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  26:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  29:	89 50 14             	mov    %edx,0x14(%rax)
  2c:	90                   	nop
  2d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  31:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  38:	00 00 
  3a:	74 05                	je     41 <Network::SetGatewayIp(unsigned int)+0x41>
  3c:	e8 00 00 00 00       	call   41 <Network::SetGatewayIp(unsigned int)+0x41>
  41:	c9                   	leave  
  42:	c3                   	ret    

Disassembly of section .text._ZN7Network9JoinGroupEij:

0000000000000000 <Network::JoinGroup(int, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  13:	89 55 e0             	mov    %edx,-0x20(%rbp)
  16:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1d:	00 00 
  1f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  23:	31 c0                	xor    %eax,%eax
  25:	8b 45 e0             	mov    -0x20(%rbp),%eax
  28:	89 45 f0             	mov    %eax,-0x10(%rbp)
  2b:	bf 00 00 00 00       	mov    $0x0,%edi
  30:	e8 00 00 00 00       	call   35 <Network::JoinGroup(int, unsigned int)+0x35>
  35:	89 45 f4             	mov    %eax,-0xc(%rbp)
  38:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
  3c:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  3f:	41 b8 08 00 00 00    	mov    $0x8,%r8d
  45:	48 89 d1             	mov    %rdx,%rcx
  48:	ba 23 00 00 00       	mov    $0x23,%edx
  4d:	be 00 00 00 00       	mov    $0x0,%esi
  52:	89 c7                	mov    %eax,%edi
  54:	e8 00 00 00 00       	call   59 <Network::JoinGroup(int, unsigned int)+0x59>
  59:	c1 e8 1f             	shr    $0x1f,%eax
  5c:	84 c0                	test   %al,%al
  5e:	74 0f                	je     6f <Network::JoinGroup(int, unsigned int)+0x6f>
  60:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 67 <Network::JoinGroup(int, unsigned int)+0x67>
  67:	48 89 c7             	mov    %rax,%rdi
  6a:	e8 00 00 00 00       	call   6f <Network::JoinGroup(int, unsigned int)+0x6f>
  6f:	90                   	nop
  70:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  74:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  7b:	00 00 
  7d:	74 05                	je     84 <Network::JoinGroup(int, unsigned int)+0x84>
  7f:	e8 00 00 00 00       	call   84 <Network::JoinGroup(int, unsigned int)+0x84>
  84:	c9                   	leave  
  85:	c3                   	ret    

Disassembly of section .text._ZN7Network10LeaveGroupEij:

0000000000000000 <Network::LeaveGroup(int, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  13:	89 55 e0             	mov    %edx,-0x20(%rbp)
  16:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1d:	00 00 
  1f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  23:	31 c0                	xor    %eax,%eax
  25:	8b 45 e0             	mov    -0x20(%rbp),%eax
  28:	89 45 f0             	mov    %eax,-0x10(%rbp)
  2b:	bf 00 00 00 00       	mov    $0x0,%edi
  30:	e8 00 00 00 00       	call   35 <Network::LeaveGroup(int, unsigned int)+0x35>
  35:	89 45 f4             	mov    %eax,-0xc(%rbp)
  38:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
  3c:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  3f:	41 b8 08 00 00 00    	mov    $0x8,%r8d
  45:	48 89 d1             	mov    %rdx,%rcx
  48:	ba 24 00 00 00       	mov    $0x24,%edx
  4d:	be 00 00 00 00       	mov    $0x0,%esi
  52:	89 c7                	mov    %eax,%edi
  54:	e8 00 00 00 00       	call   59 <Network::LeaveGroup(int, unsigned int)+0x59>
  59:	c1 e8 1f             	shr    $0x1f,%eax
  5c:	84 c0                	test   %al,%al
  5e:	74 0f                	je     6f <Network::LeaveGroup(int, unsigned int)+0x6f>
  60:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 67 <Network::LeaveGroup(int, unsigned int)+0x67>
  67:	48 89 c7             	mov    %rax,%rdi
  6a:	e8 00 00 00 00       	call   6f <Network::LeaveGroup(int, unsigned int)+0x6f>
  6f:	90                   	nop
  70:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  74:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  7b:	00 00 
  7d:	74 05                	je     84 <Network::LeaveGroup(int, unsigned int)+0x84>
  7f:	e8 00 00 00 00       	call   84 <Network::LeaveGroup(int, unsigned int)+0x84>
  84:	c9                   	leave  
  85:	c3                   	ret    

Disassembly of section .text._ZN7Network8RecvFromEiPvtPjPt:

0000000000000000 <Network::RecvFrom(int, void*, unsigned short, unsigned int*, unsigned short*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 60          	sub    $0x60,%rsp
   c:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  10:	89 75 c4             	mov    %esi,-0x3c(%rbp)
  13:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  17:	89 c8                	mov    %ecx,%eax
  19:	4c 89 45 b0          	mov    %r8,-0x50(%rbp)
  1d:	4c 89 4d a8          	mov    %r9,-0x58(%rbp)
  21:	66 89 45 c0          	mov    %ax,-0x40(%rbp)
  25:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  2c:	00 00 
  2e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  32:	31 c0                	xor    %eax,%eax
  34:	c7 45 d8 10 00 00 00 	movl   $0x10,-0x28(%rbp)
  3b:	0f b7 55 c0          	movzwl -0x40(%rbp),%edx
  3f:	48 8d 7d d8          	lea    -0x28(%rbp),%rdi
  43:	48 8d 4d e0          	lea    -0x20(%rbp),%rcx
  47:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  4b:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  4e:	49 89 f9             	mov    %rdi,%r9
  51:	49 89 c8             	mov    %rcx,%r8
  54:	b9 00 00 00 00       	mov    $0x0,%ecx
  59:	89 c7                	mov    %eax,%edi
  5b:	e8 00 00 00 00       	call   60 <Network::RecvFrom(int, void*, unsigned short, unsigned int*, unsigned short*)+0x60>
  60:	89 45 dc             	mov    %eax,-0x24(%rbp)
  63:	83 7d dc ff          	cmpl   $0xffffffff,-0x24(%rbp)
  67:	0f 94 c0             	sete   %al
  6a:	84 c0                	test   %al,%al
  6c:	74 2e                	je     9c <Network::RecvFrom(int, void*, unsigned short, unsigned int*, unsigned short*)+0x9c>
  6e:	e8 00 00 00 00       	call   73 <Network::RecvFrom(int, void*, unsigned short, unsigned int*, unsigned short*)+0x73>
  73:	8b 00                	mov    (%rax),%eax
  75:	83 f8 0b             	cmp    $0xb,%eax
  78:	74 1b                	je     95 <Network::RecvFrom(int, void*, unsigned short, unsigned int*, unsigned short*)+0x95>
  7a:	e8 00 00 00 00       	call   7f <Network::RecvFrom(int, void*, unsigned short, unsigned int*, unsigned short*)+0x7f>
  7f:	8b 00                	mov    (%rax),%eax
  81:	83 f8 0b             	cmp    $0xb,%eax
  84:	74 0f                	je     95 <Network::RecvFrom(int, void*, unsigned short, unsigned int*, unsigned short*)+0x95>
  86:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 8d <Network::RecvFrom(int, void*, unsigned short, unsigned int*, unsigned short*)+0x8d>
  8d:	48 89 c7             	mov    %rax,%rdi
  90:	e8 00 00 00 00       	call   95 <Network::RecvFrom(int, void*, unsigned short, unsigned int*, unsigned short*)+0x95>
  95:	b8 00 00 00 00       	mov    $0x0,%eax
  9a:	eb 21                	jmp    bd <Network::RecvFrom(int, void*, unsigned short, unsigned int*, unsigned short*)+0xbd>
  9c:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  9f:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  a3:	89 10                	mov    %edx,(%rax)
  a5:	0f b7 45 e2          	movzwl -0x1e(%rbp),%eax
  a9:	0f b7 c0             	movzwl %ax,%eax
  ac:	89 c7                	mov    %eax,%edi
  ae:	e8 00 00 00 00       	call   b3 <Network::RecvFrom(int, void*, unsigned short, unsigned int*, unsigned short*)+0xb3>
  b3:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  b7:	66 89 02             	mov    %ax,(%rdx)
  ba:	8b 45 dc             	mov    -0x24(%rbp),%eax
  bd:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  c1:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  c8:	00 00 
  ca:	74 05                	je     d1 <Network::RecvFrom(int, void*, unsigned short, unsigned int*, unsigned short*)+0xd1>
  cc:	e8 00 00 00 00       	call   d1 <Network::RecvFrom(int, void*, unsigned short, unsigned int*, unsigned short*)+0xd1>
  d1:	c9                   	leave  
  d2:	c3                   	ret    

Disassembly of section .text._ZN7Network8RecvFromEiPPKvPjPt:

0000000000000000 <Network::RecvFrom(int, void const**, unsigned int*, unsigned short*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 40          	sub    $0x40,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  13:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  17:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
  1b:	4c 89 45 c8          	mov    %r8,-0x38(%rbp)
  1f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  26:	00 00 
  28:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  2c:	31 c0                	xor    %eax,%eax
  2e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  32:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 39 <Network::RecvFrom(int, void const**, unsigned int*, unsigned short*)+0x39>
  39:	48 89 10             	mov    %rdx,(%rax)
  3c:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  40:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  44:	8b 75 e4             	mov    -0x1c(%rbp),%esi
  47:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4b:	49 89 c9             	mov    %rcx,%r9
  4e:	49 89 d0             	mov    %rdx,%r8
  51:	b9 78 05 00 00       	mov    $0x578,%ecx
  56:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 5d <Network::RecvFrom(int, void const**, unsigned int*, unsigned short*)+0x5d>
  5d:	48 89 c7             	mov    %rax,%rdi
  60:	e8 00 00 00 00       	call   65 <Network::RecvFrom(int, void const**, unsigned int*, unsigned short*)+0x65>
  65:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  69:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  70:	00 00 
  72:	74 05                	je     79 <Network::RecvFrom(int, void const**, unsigned int*, unsigned short*)+0x79>
  74:	e8 00 00 00 00       	call   79 <Network::RecvFrom(int, void const**, unsigned int*, unsigned short*)+0x79>
  79:	c9                   	leave  
  7a:	c3                   	ret    

Disassembly of section .text._ZN7Network6SendToEiPKvtjt:

0000000000000000 <Network::SendTo(int, void const*, unsigned short, unsigned int, unsigned short)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 50          	sub    $0x50,%rsp
   c:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  10:	89 75 c4             	mov    %esi,-0x3c(%rbp)
  13:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  17:	89 c8                	mov    %ecx,%eax
  19:	44 89 45 b4          	mov    %r8d,-0x4c(%rbp)
  1d:	44 89 ca             	mov    %r9d,%edx
  20:	66 89 45 c0          	mov    %ax,-0x40(%rbp)
  24:	89 d0                	mov    %edx,%eax
  26:	66 89 45 b0          	mov    %ax,-0x50(%rbp)
  2a:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  31:	00 00 
  33:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  37:	31 c0                	xor    %eax,%eax
  39:	c7 45 dc 10 00 00 00 	movl   $0x10,-0x24(%rbp)
  40:	66 c7 45 e0 02 00    	movw   $0x2,-0x20(%rbp)
  46:	8b 45 b4             	mov    -0x4c(%rbp),%eax
  49:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  4c:	0f b7 45 b0          	movzwl -0x50(%rbp),%eax
  50:	89 c7                	mov    %eax,%edi
  52:	e8 00 00 00 00       	call   57 <Network::SendTo(int, void const*, unsigned short, unsigned int, unsigned short)+0x57>
  57:	66 89 45 e2          	mov    %ax,-0x1e(%rbp)
  5b:	0f b7 55 c0          	movzwl -0x40(%rbp),%edx
  5f:	8b 7d dc             	mov    -0x24(%rbp),%edi
  62:	48 8d 4d e0          	lea    -0x20(%rbp),%rcx
  66:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  6a:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  6d:	41 89 f9             	mov    %edi,%r9d
  70:	49 89 c8             	mov    %rcx,%r8
  73:	b9 00 00 00 00       	mov    $0x0,%ecx
  78:	89 c7                	mov    %eax,%edi
  7a:	e8 00 00 00 00       	call   7f <Network::SendTo(int, void const*, unsigned short, unsigned int, unsigned short)+0x7f>
  7f:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  83:	0f 94 c0             	sete   %al
  86:	84 c0                	test   %al,%al
  88:	74 0f                	je     99 <Network::SendTo(int, void const*, unsigned short, unsigned int, unsigned short)+0x99>
  8a:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 91 <Network::SendTo(int, void const*, unsigned short, unsigned int, unsigned short)+0x91>
  91:	48 89 c7             	mov    %rax,%rdi
  94:	e8 00 00 00 00       	call   99 <Network::SendTo(int, void const*, unsigned short, unsigned int, unsigned short)+0x99>
  99:	90                   	nop
  9a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  9e:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  a5:	00 00 
  a7:	74 05                	je     ae <Network::SendTo(int, void const*, unsigned short, unsigned int, unsigned short)+0xae>
  a9:	e8 00 00 00 00       	call   ae <Network::SendTo(int, void const*, unsigned short, unsigned int, unsigned short)+0xae>
  ae:	c9                   	leave  
  af:	c3                   	ret    

Disassembly of section .text._ZN7Network10IsDhclientEPKc:

0000000000000000 <Network::IsDhclient(char const*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 81 ec 30 05 00 00 	sub    $0x530,%rsp
   f:	48 89 bd d8 fa ff ff 	mov    %rdi,-0x528(%rbp)
  16:	48 89 b5 d0 fa ff ff 	mov    %rsi,-0x530(%rbp)
  1d:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  24:	00 00 
  26:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  2a:	31 c0                	xor    %eax,%eax
  2c:	48 8d 85 f0 fa ff ff 	lea    -0x510(%rbp),%rax
  33:	ba ff 00 00 00       	mov    $0xff,%edx
  38:	be 00 00 00 00       	mov    $0x0,%esi
  3d:	48 89 c7             	mov    %rax,%rdi
  40:	e8 00 00 00 00       	call   45 <Network::IsDhclient(char const*)+0x45>
  45:	48 8d 85 f0 fb ff ff 	lea    -0x410(%rbp),%rax
  4c:	ba 00 04 00 00       	mov    $0x400,%edx
  51:	be 00 00 00 00       	mov    $0x0,%esi
  56:	48 89 c7             	mov    %rax,%rdi
  59:	e8 00 00 00 00       	call   5e <Network::IsDhclient(char const*)+0x5e>
  5e:	48 8b 95 d0 fa ff ff 	mov    -0x530(%rbp),%rdx
  65:	48 8d 85 f0 fa ff ff 	lea    -0x510(%rbp),%rax
  6c:	48 89 d1             	mov    %rdx,%rcx
  6f:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 76 <Network::IsDhclient(char const*)+0x76>
  76:	be fe 00 00 00       	mov    $0xfe,%esi
  7b:	48 89 c7             	mov    %rax,%rdi
  7e:	b8 00 00 00 00       	mov    $0x0,%eax
  83:	e8 00 00 00 00       	call   88 <Network::IsDhclient(char const*)+0x88>
  88:	48 8d 85 f0 fa ff ff 	lea    -0x510(%rbp),%rax
  8f:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 96 <Network::IsDhclient(char const*)+0x96>
  96:	48 89 d6             	mov    %rdx,%rsi
  99:	48 89 c7             	mov    %rax,%rdi
  9c:	e8 00 00 00 00       	call   a1 <Network::IsDhclient(char const*)+0xa1>
  a1:	48 89 85 e8 fa ff ff 	mov    %rax,-0x518(%rbp)
  a8:	48 8b 95 e8 fa ff ff 	mov    -0x518(%rbp),%rdx
  af:	48 8d 85 f0 fb ff ff 	lea    -0x410(%rbp),%rax
  b6:	be 00 04 00 00       	mov    $0x400,%esi
  bb:	48 89 c7             	mov    %rax,%rdi
  be:	e8 00 00 00 00       	call   c3 <Network::IsDhclient(char const*)+0xc3>
  c3:	48 85 c0             	test   %rax,%rax
  c6:	0f 94 c0             	sete   %al
  c9:	84 c0                	test   %al,%al
  cb:	74 16                	je     e3 <Network::IsDhclient(char const*)+0xe3>
  cd:	48 8b 85 e8 fa ff ff 	mov    -0x518(%rbp),%rax
  d4:	48 89 c7             	mov    %rax,%rdi
  d7:	e8 00 00 00 00       	call   dc <Network::IsDhclient(char const*)+0xdc>
  dc:	b8 00 00 00 00       	mov    $0x0,%eax
  e1:	eb 47                	jmp    12a <Network::IsDhclient(char const*)+0x12a>
  e3:	48 8b 85 e8 fa ff ff 	mov    -0x518(%rbp),%rax
  ea:	48 89 c7             	mov    %rax,%rdi
  ed:	e8 00 00 00 00       	call   f2 <Network::IsDhclient(char const*)+0xf2>
  f2:	48 8d 85 f0 fb ff ff 	lea    -0x410(%rbp),%rax
  f9:	0f b6 00             	movzbl (%rax),%eax
  fc:	84 c0                	test   %al,%al
  fe:	74 25                	je     125 <Network::IsDhclient(char const*)+0x125>
 100:	48 8b 95 d0 fa ff ff 	mov    -0x530(%rbp),%rdx
 107:	48 8d 85 f0 fb ff ff 	lea    -0x410(%rbp),%rax
 10e:	48 89 d6             	mov    %rdx,%rsi
 111:	48 89 c7             	mov    %rax,%rdi
 114:	e8 00 00 00 00       	call   119 <Network::IsDhclient(char const*)+0x119>
 119:	48 85 c0             	test   %rax,%rax
 11c:	74 07                	je     125 <Network::IsDhclient(char const*)+0x125>
 11e:	b8 01 00 00 00       	mov    $0x1,%eax
 123:	eb 05                	jmp    12a <Network::IsDhclient(char const*)+0x12a>
 125:	b8 00 00 00 00       	mov    $0x0,%eax
 12a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
 12e:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
 135:	00 00 
 137:	74 05                	je     13e <Network::IsDhclient(char const*)+0x13e>
 139:	e8 00 00 00 00       	call   13e <Network::IsDhclient(char const*)+0x13e>
 13e:	c9                   	leave  
 13f:	c3                   	ret    

Disassembly of section .text._ZN7Network17GetDefaultGatewayEv:

0000000000000000 <Network::GetDefaultGateway()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 81 ec 30 05 00 00 	sub    $0x530,%rsp
   f:	48 89 bd d8 fa ff ff 	mov    %rdi,-0x528(%rbp)
  16:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1d:	00 00 
  1f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  23:	31 c0                	xor    %eax,%eax
  25:	48 8d 85 f0 fa ff ff 	lea    -0x510(%rbp),%rax
  2c:	ba ff 00 00 00       	mov    $0xff,%edx
  31:	be 00 00 00 00       	mov    $0x0,%esi
  36:	48 89 c7             	mov    %rax,%rdi
  39:	e8 00 00 00 00       	call   3e <Network::GetDefaultGateway()+0x3e>
  3e:	48 8d 85 f0 fb ff ff 	lea    -0x410(%rbp),%rax
  45:	ba 00 04 00 00       	mov    $0x400,%edx
  4a:	be 00 00 00 00       	mov    $0x0,%esi
  4f:	48 89 c7             	mov    %rax,%rdi
  52:	e8 00 00 00 00       	call   57 <Network::GetDefaultGateway()+0x57>
  57:	48 8d 85 f0 fa ff ff 	lea    -0x510(%rbp),%rax
  5e:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 65 <Network::GetDefaultGateway()+0x65>
  65:	be fe 00 00 00       	mov    $0xfe,%esi
  6a:	48 89 c7             	mov    %rax,%rdi
  6d:	b8 00 00 00 00       	mov    $0x0,%eax
  72:	e8 00 00 00 00       	call   77 <Network::GetDefaultGateway()+0x77>
  77:	48 8d 85 f0 fa ff ff 	lea    -0x510(%rbp),%rax
  7e:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 85 <Network::GetDefaultGateway()+0x85>
  85:	48 89 d6             	mov    %rdx,%rsi
  88:	48 89 c7             	mov    %rax,%rdi
  8b:	e8 00 00 00 00       	call   90 <Network::GetDefaultGateway()+0x90>
  90:	48 89 85 e8 fa ff ff 	mov    %rax,-0x518(%rbp)
  97:	48 8b 95 e8 fa ff ff 	mov    -0x518(%rbp),%rdx
  9e:	48 8d 85 f0 fb ff ff 	lea    -0x410(%rbp),%rax
  a5:	be 00 04 00 00       	mov    $0x400,%esi
  aa:	48 89 c7             	mov    %rax,%rdi
  ad:	e8 00 00 00 00       	call   b2 <Network::GetDefaultGateway()+0xb2>
  b2:	48 85 c0             	test   %rax,%rax
  b5:	0f 94 c0             	sete   %al
  b8:	84 c0                	test   %al,%al
  ba:	74 16                	je     d2 <Network::GetDefaultGateway()+0xd2>
  bc:	48 8b 85 e8 fa ff ff 	mov    -0x518(%rbp),%rax
  c3:	48 89 c7             	mov    %rax,%rdi
  c6:	e8 00 00 00 00       	call   cb <Network::GetDefaultGateway()+0xcb>
  cb:	b8 00 00 00 00       	mov    $0x0,%eax
  d0:	eb 2e                	jmp    100 <Network::GetDefaultGateway()+0x100>
  d2:	48 8b 85 e8 fa ff ff 	mov    -0x518(%rbp),%rax
  d9:	48 89 c7             	mov    %rax,%rdi
  dc:	e8 00 00 00 00       	call   e1 <Network::GetDefaultGateway()+0xe1>
  e1:	48 8d 95 e4 fa ff ff 	lea    -0x51c(%rbp),%rdx
  e8:	48 8d 85 f0 fb ff ff 	lea    -0x410(%rbp),%rax
  ef:	48 89 d6             	mov    %rdx,%rsi
  f2:	48 89 c7             	mov    %rax,%rdi
  f5:	e8 00 00 00 00       	call   fa <Network::GetDefaultGateway()+0xfa>
  fa:	8b 85 e4 fa ff ff    	mov    -0x51c(%rbp),%eax
 100:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
 104:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
 10b:	00 00 
 10d:	74 05                	je     114 <Network::GetDefaultGateway()+0x114>
 10f:	e8 00 00 00 00       	call   114 <Network::GetDefaultGateway()+0x114>
 114:	c9                   	leave  
 115:	c3                   	ret    

Disassembly of section .text._ZN7Network14IfGetByAddressEPKcPcm:

0000000000000000 <Network::IfGetByAddress(char const*, char*, unsigned long)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 70          	sub    $0x70,%rsp
   c:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  10:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  14:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  18:	48 89 4d 90          	mov    %rcx,-0x70(%rbp)
  1c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  23:	00 00 
  25:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  29:	31 c0                	xor    %eax,%eax
  2b:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	call   37 <Network::IfGetByAddress(char const*, char*, unsigned long)+0x37>
  37:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  3b:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  3f:	e9 93 00 00 00       	jmp    d7 <Network::IfGetByAddress(char const*, char*, unsigned long)+0xd7>
  44:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  48:	48 8b 40 18          	mov    0x18(%rax),%rax
  4c:	0f b7 00             	movzwl (%rax),%eax
  4f:	66 83 f8 02          	cmp    $0x2,%ax
  53:	75 77                	jne    cc <Network::IfGetByAddress(char const*, char*, unsigned long)+0xcc>
  55:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  59:	48 8b 40 18          	mov    0x18(%rax),%rax
  5d:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  61:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  65:	48 8d 70 04          	lea    0x4(%rax),%rsi
  69:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  6d:	48 8b 40 18          	mov    0x18(%rax),%rax
  71:	0f b7 00             	movzwl (%rax),%eax
  74:	0f b7 c0             	movzwl %ax,%eax
  77:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  7b:	b9 20 00 00 00       	mov    $0x20,%ecx
  80:	89 c7                	mov    %eax,%edi
  82:	e8 00 00 00 00       	call   87 <Network::IfGetByAddress(char const*, char*, unsigned long)+0x87>
  87:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  8b:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8f:	48 89 d6             	mov    %rdx,%rsi
  92:	48 89 c7             	mov    %rax,%rdi
  95:	e8 00 00 00 00       	call   9a <Network::IfGetByAddress(char const*, char*, unsigned long)+0x9a>
  9a:	85 c0                	test   %eax,%eax
  9c:	75 2e                	jne    cc <Network::IfGetByAddress(char const*, char*, unsigned long)+0xcc>
  9e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  a2:	48 8b 48 08          	mov    0x8(%rax),%rcx
  a6:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  aa:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  ae:	48 89 ce             	mov    %rcx,%rsi
  b1:	48 89 c7             	mov    %rax,%rdi
  b4:	e8 00 00 00 00       	call   b9 <Network::IfGetByAddress(char const*, char*, unsigned long)+0xb9>
  b9:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  bd:	48 89 c7             	mov    %rax,%rdi
  c0:	e8 00 00 00 00       	call   c5 <Network::IfGetByAddress(char const*, char*, unsigned long)+0xc5>
  c5:	b8 00 00 00 00       	mov    $0x0,%eax
  ca:	eb 27                	jmp    f3 <Network::IfGetByAddress(char const*, char*, unsigned long)+0xf3>
  cc:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  d0:	48 8b 00             	mov    (%rax),%rax
  d3:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  d7:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
  dc:	0f 85 62 ff ff ff    	jne    44 <Network::IfGetByAddress(char const*, char*, unsigned long)+0x44>
  e2:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  e6:	48 89 c7             	mov    %rax,%rdi
  e9:	e8 00 00 00 00       	call   ee <Network::IfGetByAddress(char const*, char*, unsigned long)+0xee>
  ee:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  f3:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  f7:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  fe:	00 00 
 100:	74 05                	je     107 <Network::IfGetByAddress(char const*, char*, unsigned long)+0x107>
 102:	e8 00 00 00 00       	call   107 <Network::IfGetByAddress(char const*, char*, unsigned long)+0x107>
 107:	c9                   	leave  
 108:	c3                   	ret    

Disassembly of section .text._ZN7Network9IfDetailsEPKc:

0000000000000000 <Network::IfDetails(char const*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 50          	sub    $0x50,%rsp
   c:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  10:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	ba 00 00 00 00       	mov    $0x0,%edx
  28:	be 02 00 00 00       	mov    $0x2,%esi
  2d:	bf 02 00 00 00       	mov    $0x2,%edi
  32:	e8 00 00 00 00       	call   37 <Network::IfDetails(char const*)+0x37>
  37:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  3a:	83 7d c4 00          	cmpl   $0x0,-0x3c(%rbp)
  3e:	79 19                	jns    59 <Network::IfDetails(char const*)+0x59>
  40:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 47 <Network::IfDetails(char const*)+0x47>
  47:	48 89 c7             	mov    %rax,%rdi
  4a:	e8 00 00 00 00       	call   4f <Network::IfDetails(char const*)+0x4f>
  4f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  54:	e9 52 01 00 00       	jmp    1ab <Network::IfDetails(char const*)+0x1ab>
  59:	66 c7 45 e0 02 00    	movw   $0x2,-0x20(%rbp)
  5f:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  63:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  67:	ba 0f 00 00 00       	mov    $0xf,%edx
  6c:	48 89 ce             	mov    %rcx,%rsi
  6f:	48 89 c7             	mov    %rax,%rdi
  72:	e8 00 00 00 00       	call   77 <Network::IfDetails(char const*)+0x77>
  77:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  7b:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  7e:	be 15 89 00 00       	mov    $0x8915,%esi
  83:	89 c7                	mov    %eax,%edi
  85:	b8 00 00 00 00       	mov    $0x0,%eax
  8a:	e8 00 00 00 00       	call   8f <Network::IfDetails(char const*)+0x8f>
  8f:	c1 e8 1f             	shr    $0x1f,%eax
  92:	84 c0                	test   %al,%al
  94:	74 23                	je     b9 <Network::IfDetails(char const*)+0xb9>
  96:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 9d <Network::IfDetails(char const*)+0x9d>
  9d:	48 89 c7             	mov    %rax,%rdi
  a0:	e8 00 00 00 00       	call   a5 <Network::IfDetails(char const*)+0xa5>
  a5:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  a8:	89 c7                	mov    %eax,%edi
  aa:	e8 00 00 00 00       	call   af <Network::IfDetails(char const*)+0xaf>
  af:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
  b4:	e9 f2 00 00 00       	jmp    1ab <Network::IfDetails(char const*)+0x1ab>
  b9:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  bd:	48 83 c0 10          	add    $0x10,%rax
  c1:	8b 50 04             	mov    0x4(%rax),%edx
  c4:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  c8:	89 50 10             	mov    %edx,0x10(%rax)
  cb:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  cf:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  d2:	be 1b 89 00 00       	mov    $0x891b,%esi
  d7:	89 c7                	mov    %eax,%edi
  d9:	b8 00 00 00 00       	mov    $0x0,%eax
  de:	e8 00 00 00 00       	call   e3 <Network::IfDetails(char const*)+0xe3>
  e3:	c1 e8 1f             	shr    $0x1f,%eax
  e6:	84 c0                	test   %al,%al
  e8:	74 23                	je     10d <Network::IfDetails(char const*)+0x10d>
  ea:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # f1 <Network::IfDetails(char const*)+0xf1>
  f1:	48 89 c7             	mov    %rax,%rdi
  f4:	e8 00 00 00 00       	call   f9 <Network::IfDetails(char const*)+0xf9>
  f9:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  fc:	89 c7                	mov    %eax,%edi
  fe:	e8 00 00 00 00       	call   103 <Network::IfDetails(char const*)+0x103>
 103:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
 108:	e9 9e 00 00 00       	jmp    1ab <Network::IfDetails(char const*)+0x1ab>
 10d:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
 111:	48 83 c0 10          	add    $0x10,%rax
 115:	8b 50 04             	mov    0x4(%rax),%edx
 118:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 11c:	89 50 18             	mov    %edx,0x18(%rax)
 11f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 123:	48 89 c7             	mov    %rax,%rdi
 126:	e8 00 00 00 00       	call   12b <Network::IfDetails(char const*)+0x12b>
 12b:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
 12f:	89 42 14             	mov    %eax,0x14(%rdx)
 132:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
 136:	8b 45 c4             	mov    -0x3c(%rbp),%eax
 139:	be 27 89 00 00       	mov    $0x8927,%esi
 13e:	89 c7                	mov    %eax,%edi
 140:	b8 00 00 00 00       	mov    $0x0,%eax
 145:	e8 00 00 00 00       	call   14a <Network::IfDetails(char const*)+0x14a>
 14a:	c1 e8 1f             	shr    $0x1f,%eax
 14d:	84 c0                	test   %al,%al
 14f:	74 20                	je     171 <Network::IfDetails(char const*)+0x171>
 151:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 158 <Network::IfDetails(char const*)+0x158>
 158:	48 89 c7             	mov    %rax,%rdi
 15b:	e8 00 00 00 00       	call   160 <Network::IfDetails(char const*)+0x160>
 160:	8b 45 c4             	mov    -0x3c(%rbp),%eax
 163:	89 c7                	mov    %eax,%edi
 165:	e8 00 00 00 00       	call   16a <Network::IfDetails(char const*)+0x16a>
 16a:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
 16f:	eb 3a                	jmp    1ab <Network::IfDetails(char const*)+0x1ab>
 171:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
 175:	48 83 c0 12          	add    $0x12,%rax
 179:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
 17d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 181:	48 8d 88 9c 00 00 00 	lea    0x9c(%rax),%rcx
 188:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 18c:	ba 06 00 00 00       	mov    $0x6,%edx
 191:	48 89 c6             	mov    %rax,%rsi
 194:	48 89 cf             	mov    %rcx,%rdi
 197:	e8 00 00 00 00       	call   19c <Network::IfDetails(char const*)+0x19c>
 19c:	8b 45 c4             	mov    -0x3c(%rbp),%eax
 19f:	89 c7                	mov    %eax,%edi
 1a1:	e8 00 00 00 00       	call   1a6 <Network::IfDetails(char const*)+0x1a6>
 1a6:	b8 00 00 00 00       	mov    $0x0,%eax
 1ab:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
 1af:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
 1b6:	00 00 
 1b8:	74 05                	je     1bf <Network::IfDetails(char const*)+0x1bf>
 1ba:	e8 00 00 00 00       	call   1bf <Network::IfDetails(char const*)+0x1bf>
 1bf:	c9                   	leave  
 1c0:	c3                   	ret    

Disassembly of section .text._ZN7Network11SetHostNameEPKc:

0000000000000000 <Network::SetHostName(char const*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  27:	48 89 c7             	mov    %rax,%rdi
  2a:	e8 00 00 00 00       	call   2f <Network::SetHostName(char const*)+0x2f>
  2f:	48 89 c2             	mov    %rax,%rdx
  32:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  36:	48 89 d6             	mov    %rdx,%rsi
  39:	48 89 c7             	mov    %rax,%rdi
  3c:	e8 00 00 00 00       	call   41 <Network::SetHostName(char const*)+0x41>
  41:	c1 e8 1f             	shr    $0x1f,%eax
  44:	84 c0                	test   %al,%al
  46:	74 0f                	je     57 <Network::SetHostName(char const*)+0x57>
  48:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 4f <Network::SetHostName(char const*)+0x4f>
  4f:	48 89 c7             	mov    %rax,%rdi
  52:	e8 00 00 00 00       	call   57 <Network::SetHostName(char const*)+0x57>
  57:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5b:	48 83 c0 1c          	add    $0x1c,%rax
  5f:	be 40 00 00 00       	mov    $0x40,%esi
  64:	48 89 c7             	mov    %rax,%rdi
  67:	e8 00 00 00 00       	call   6c <Network::SetHostName(char const*)+0x6c>
  6c:	c1 e8 1f             	shr    $0x1f,%eax
  6f:	84 c0                	test   %al,%al
  71:	74 0f                	je     82 <Network::SetHostName(char const*)+0x82>
  73:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 7a <Network::SetHostName(char const*)+0x7a>
  7a:	48 89 c7             	mov    %rax,%rdi
  7d:	e8 00 00 00 00       	call   82 <Network::SetHostName(char const*)+0x82>
  82:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  86:	c6 40 5b 00          	movb   $0x0,0x5b(%rax)
  8a:	90                   	nop
  8b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8f:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  96:	00 00 
  98:	74 05                	je     9f <Network::SetHostName(char const*)+0x9f>
  9a:	e8 00 00 00 00       	call   9f <Network::SetHostName(char const*)+0x9f>
  9f:	c9                   	leave  
  a0:	c3                   	ret    

Disassembly of section .text._ZN7Network17SetQueuedStaticIpEjj:

0000000000000000 <Network::SetQueuedStaticIp(unsigned int, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  13:	89 55 e0             	mov    %edx,-0x20(%rbp)
  16:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1d:	00 00 
  1f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  23:	31 c0                	xor    %eax,%eax
  25:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  29:	74 0d                	je     38 <Network::SetQueuedStaticIp(unsigned int, unsigned int)+0x38>
  2b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2f:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  32:	89 90 c4 00 00 00    	mov    %edx,0xc4(%rax)
  38:	83 7d e0 00          	cmpl   $0x0,-0x20(%rbp)
  3c:	74 0d                	je     4b <Network::SetQueuedStaticIp(unsigned int, unsigned int)+0x4b>
  3e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  42:	8b 55 e0             	mov    -0x20(%rbp),%edx
  45:	89 90 c8 00 00 00    	mov    %edx,0xc8(%rax)
  4b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4f:	8b 80 c0 00 00 00    	mov    0xc0(%rax),%eax
  55:	83 c8 01             	or     $0x1,%eax
  58:	89 c2                	mov    %eax,%edx
  5a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5e:	89 90 c0 00 00 00    	mov    %edx,0xc0(%rax)
  64:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  68:	8b 80 c0 00 00 00    	mov    0xc0(%rax),%eax
  6e:	83 c8 02             	or     $0x2,%eax
  71:	89 c2                	mov    %eax,%edx
  73:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  77:	89 90 c0 00 00 00    	mov    %edx,0xc0(%rax)
  7d:	90                   	nop
  7e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  82:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  89:	00 00 
  8b:	74 05                	je     92 <Network::SetQueuedStaticIp(unsigned int, unsigned int)+0x92>
  8d:	e8 00 00 00 00       	call   92 <Network::SetQueuedStaticIp(unsigned int, unsigned int)+0x92>
  92:	c9                   	leave  
  93:	c3                   	ret    

Disassembly of section .text._ZN7Network17ApplyQueuedConfigEv:

0000000000000000 <Network::ApplyQueuedConfig()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	8b 80 c0 00 00 00    	mov    0xc0(%rax),%eax
  29:	85 c0                	test   %eax,%eax
  2b:	75 0a                	jne    37 <Network::ApplyQueuedConfig()+0x37>
  2d:	b8 00 00 00 00       	mov    $0x0,%eax
  32:	e9 43 01 00 00       	jmp    17a <Network::ApplyQueuedConfig()+0x17a>
  37:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3b:	be 01 00 00 00       	mov    $0x1,%esi
  40:	48 89 c7             	mov    %rax,%rdi
  43:	e8 00 00 00 00       	call   48 <Network::ApplyQueuedConfig()+0x48>
  48:	84 c0                	test   %al,%al
  4a:	75 15                	jne    61 <Network::ApplyQueuedConfig()+0x61>
  4c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  50:	be 02 00 00 00       	mov    $0x2,%esi
  55:	48 89 c7             	mov    %rax,%rdi
  58:	e8 00 00 00 00       	call   5d <Network::ApplyQueuedConfig()+0x5d>
  5d:	84 c0                	test   %al,%al
  5f:	74 07                	je     68 <Network::ApplyQueuedConfig()+0x68>
  61:	b8 01 00 00 00       	mov    $0x1,%eax
  66:	eb 05                	jmp    6d <Network::ApplyQueuedConfig()+0x6d>
  68:	b8 00 00 00 00       	mov    $0x0,%eax
  6d:	84 c0                	test   %al,%al
  6f:	0f 84 8c 00 00 00    	je     101 <Network::ApplyQueuedConfig()+0x101>
  75:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  79:	be 02 00 00 00       	mov    $0x2,%esi
  7e:	48 89 c7             	mov    %rax,%rdi
  81:	e8 00 00 00 00       	call   86 <Network::ApplyQueuedConfig()+0x86>
  86:	84 c0                	test   %al,%al
  88:	74 31                	je     bb <Network::ApplyQueuedConfig()+0xbb>
  8a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8e:	8b 90 c8 00 00 00    	mov    0xc8(%rax),%edx
  94:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  98:	89 d6                	mov    %edx,%esi
  9a:	48 89 c7             	mov    %rax,%rdi
  9d:	e8 00 00 00 00       	call   a2 <Network::ApplyQueuedConfig()+0xa2>
  a2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  a6:	8b 80 c0 00 00 00    	mov    0xc0(%rax),%eax
  ac:	83 e0 fd             	and    $0xfffffffd,%eax
  af:	89 c2                	mov    %eax,%edx
  b1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  b5:	89 90 c0 00 00 00    	mov    %edx,0xc0(%rax)
  bb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  bf:	be 01 00 00 00       	mov    $0x1,%esi
  c4:	48 89 c7             	mov    %rax,%rdi
  c7:	e8 00 00 00 00       	call   cc <Network::ApplyQueuedConfig()+0xcc>
  cc:	84 c0                	test   %al,%al
  ce:	74 31                	je     101 <Network::ApplyQueuedConfig()+0x101>
  d0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  d4:	8b 90 c4 00 00 00    	mov    0xc4(%rax),%edx
  da:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  de:	89 d6                	mov    %edx,%esi
  e0:	48 89 c7             	mov    %rax,%rdi
  e3:	e8 00 00 00 00       	call   e8 <Network::ApplyQueuedConfig()+0xe8>
  e8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  ec:	8b 80 c0 00 00 00    	mov    0xc0(%rax),%eax
  f2:	83 e0 fe             	and    $0xfffffffe,%eax
  f5:	89 c2                	mov    %eax,%edx
  f7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  fb:	89 90 c0 00 00 00    	mov    %edx,0xc0(%rax)
 101:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 105:	be 04 00 00 00       	mov    $0x4,%esi
 10a:	48 89 c7             	mov    %rax,%rdi
 10d:	e8 00 00 00 00       	call   112 <Network::ApplyQueuedConfig()+0x112>
 112:	84 c0                	test   %al,%al
 114:	74 25                	je     13b <Network::ApplyQueuedConfig()+0x13b>
 116:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 11a:	48 89 c7             	mov    %rax,%rdi
 11d:	e8 00 00 00 00       	call   122 <Network::ApplyQueuedConfig()+0x122>
 122:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 126:	8b 80 c0 00 00 00    	mov    0xc0(%rax),%eax
 12c:	83 e0 fb             	and    $0xfffffffb,%eax
 12f:	89 c2                	mov    %eax,%edx
 131:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 135:	89 90 c0 00 00 00    	mov    %edx,0xc0(%rax)
 13b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 13f:	be 08 00 00 00       	mov    $0x8,%esi
 144:	48 89 c7             	mov    %rax,%rdi
 147:	e8 00 00 00 00       	call   14c <Network::ApplyQueuedConfig()+0x14c>
 14c:	84 c0                	test   %al,%al
 14e:	74 25                	je     175 <Network::ApplyQueuedConfig()+0x175>
 150:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 154:	48 89 c7             	mov    %rax,%rdi
 157:	e8 00 00 00 00       	call   15c <Network::ApplyQueuedConfig()+0x15c>
 15c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 160:	8b 80 c0 00 00 00    	mov    0xc0(%rax),%eax
 166:	83 e0 f7             	and    $0xfffffff7,%eax
 169:	89 c2                	mov    %eax,%edx
 16b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 16f:	89 90 c0 00 00 00    	mov    %edx,0xc0(%rax)
 175:	b8 01 00 00 00       	mov    $0x1,%eax
 17a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
 17e:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
 185:	00 00 
 187:	74 05                	je     18e <Network::ApplyQueuedConfig()+0x18e>
 189:	e8 00 00 00 00       	call   18e <Network::ApplyQueuedConfig()+0x18e>
 18e:	c9                   	leave  
 18f:	c3                   	ret    

Disassembly of section .text._ZN7Network5PrintEv:

0000000000000000 <Network::Print()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	41 55                	push   %r13
   a:	41 54                	push   %r12
   c:	53                   	push   %rbx
   d:	48 83 ec 28          	sub    $0x28,%rsp
  11:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 2b <Network::Print()+0x2b>
  2b:	48 89 c7             	mov    %rax,%rdi
  2e:	e8 00 00 00 00       	call   33 <Network::Print()+0x33>
  33:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  37:	48 83 c0 1c          	add    $0x1c,%rax
  3b:	48 89 c6             	mov    %rax,%rsi
  3e:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 45 <Network::Print()+0x45>
  45:	48 89 c7             	mov    %rax,%rdi
  48:	b8 00 00 00 00       	mov    $0x0,%eax
  4d:	e8 00 00 00 00       	call   52 <Network::Print()+0x52>
  52:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  56:	48 83 c0 5c          	add    $0x5c,%rax
  5a:	48 89 c6             	mov    %rax,%rsi
  5d:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 64 <Network::Print()+0x64>
  64:	48 89 c7             	mov    %rax,%rdi
  67:	b8 00 00 00 00       	mov    $0x0,%eax
  6c:	e8 00 00 00 00       	call   71 <Network::Print()+0x71>
  71:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  75:	48 8d 90 a2 00 00 00 	lea    0xa2(%rax),%rdx
  7c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80:	8b 40 04             	mov    0x4(%rax),%eax
  83:	89 c6                	mov    %eax,%esi
  85:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 8c <Network::Print()+0x8c>
  8c:	48 89 c7             	mov    %rax,%rdi
  8f:	b8 00 00 00 00       	mov    $0x0,%eax
  94:	e8 00 00 00 00       	call   99 <Network::Print()+0x99>
  99:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  9d:	48 89 c7             	mov    %rax,%rdi
  a0:	e8 00 00 00 00       	call   a5 <Network::Print()+0xa5>
  a5:	89 c6                	mov    %eax,%esi
  a7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  ab:	8b 40 10             	mov    0x10(%rax),%eax
  ae:	c1 e8 18             	shr    $0x18,%eax
  b1:	89 c7                	mov    %eax,%edi
  b3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  b7:	8b 40 10             	mov    0x10(%rax),%eax
  ba:	c1 e8 10             	shr    $0x10,%eax
  bd:	0f b6 c8             	movzbl %al,%ecx
  c0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  c4:	8b 40 10             	mov    0x10(%rax),%eax
  c7:	c1 e8 08             	shr    $0x8,%eax
  ca:	0f b6 d0             	movzbl %al,%edx
  cd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  d1:	8b 40 10             	mov    0x10(%rax),%eax
  d4:	0f b6 c0             	movzbl %al,%eax
  d7:	41 89 f1             	mov    %esi,%r9d
  da:	41 89 f8             	mov    %edi,%r8d
  dd:	89 c6                	mov    %eax,%esi
  df:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # e6 <Network::Print()+0xe6>
  e6:	48 89 c7             	mov    %rax,%rdi
  e9:	b8 00 00 00 00       	mov    $0x0,%eax
  ee:	e8 00 00 00 00       	call   f3 <Network::Print()+0xf3>
  f3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  f7:	8b 40 18             	mov    0x18(%rax),%eax
  fa:	c1 e8 18             	shr    $0x18,%eax
  fd:	89 c6                	mov    %eax,%esi
  ff:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 103:	8b 40 18             	mov    0x18(%rax),%eax
 106:	c1 e8 10             	shr    $0x10,%eax
 109:	0f b6 c8             	movzbl %al,%ecx
 10c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 110:	8b 40 18             	mov    0x18(%rax),%eax
 113:	c1 e8 08             	shr    $0x8,%eax
 116:	0f b6 d0             	movzbl %al,%edx
 119:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 11d:	8b 40 18             	mov    0x18(%rax),%eax
 120:	0f b6 c0             	movzbl %al,%eax
 123:	41 89 f0             	mov    %esi,%r8d
 126:	89 c6                	mov    %eax,%esi
 128:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 12f <Network::Print()+0x12f>
 12f:	48 89 c7             	mov    %rax,%rdi
 132:	b8 00 00 00 00       	mov    $0x0,%eax
 137:	e8 00 00 00 00       	call   13c <Network::Print()+0x13c>
 13c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 140:	8b 40 14             	mov    0x14(%rax),%eax
 143:	c1 e8 18             	shr    $0x18,%eax
 146:	89 c6                	mov    %eax,%esi
 148:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 14c:	8b 40 14             	mov    0x14(%rax),%eax
 14f:	c1 e8 10             	shr    $0x10,%eax
 152:	0f b6 c8             	movzbl %al,%ecx
 155:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 159:	8b 40 14             	mov    0x14(%rax),%eax
 15c:	c1 e8 08             	shr    $0x8,%eax
 15f:	0f b6 d0             	movzbl %al,%edx
 162:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 166:	8b 40 14             	mov    0x14(%rax),%eax
 169:	0f b6 c0             	movzbl %al,%eax
 16c:	41 89 f0             	mov    %esi,%r8d
 16f:	89 c6                	mov    %eax,%esi
 171:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 178 <Network::Print()+0x178>
 178:	48 89 c7             	mov    %rax,%rdi
 17b:	b8 00 00 00 00       	mov    $0x0,%eax
 180:	e8 00 00 00 00       	call   185 <Network::Print()+0x185>
 185:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 189:	48 89 c7             	mov    %rax,%rdi
 18c:	e8 00 00 00 00       	call   191 <Network::Print()+0x191>
 191:	c1 e8 18             	shr    $0x18,%eax
 194:	44 0f b6 e8          	movzbl %al,%r13d
 198:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 19c:	48 89 c7             	mov    %rax,%rdi
 19f:	e8 00 00 00 00       	call   1a4 <Network::Print()+0x1a4>
 1a4:	c1 e8 10             	shr    $0x10,%eax
 1a7:	44 0f b6 e0          	movzbl %al,%r12d
 1ab:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 1af:	48 89 c7             	mov    %rax,%rdi
 1b2:	e8 00 00 00 00       	call   1b7 <Network::Print()+0x1b7>
 1b7:	c1 e8 08             	shr    $0x8,%eax
 1ba:	0f b6 d8             	movzbl %al,%ebx
 1bd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 1c1:	48 89 c7             	mov    %rax,%rdi
 1c4:	e8 00 00 00 00       	call   1c9 <Network::Print()+0x1c9>
 1c9:	0f b6 c0             	movzbl %al,%eax
 1cc:	45 89 e8             	mov    %r13d,%r8d
 1cf:	44 89 e1             	mov    %r12d,%ecx
 1d2:	89 da                	mov    %ebx,%edx
 1d4:	89 c6                	mov    %eax,%esi
 1d6:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 1dd <Network::Print()+0x1dd>
 1dd:	48 89 c7             	mov    %rax,%rdi
 1e0:	b8 00 00 00 00       	mov    $0x0,%eax
 1e5:	e8 00 00 00 00       	call   1ea <Network::Print()+0x1ea>
 1ea:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 1ee:	0f b6 80 a1 00 00 00 	movzbl 0xa1(%rax),%eax
 1f5:	0f b6 f0             	movzbl %al,%esi
 1f8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 1fc:	0f b6 80 a0 00 00 00 	movzbl 0xa0(%rax),%eax
 203:	44 0f b6 c0          	movzbl %al,%r8d
 207:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 20b:	0f b6 80 9f 00 00 00 	movzbl 0x9f(%rax),%eax
 212:	0f b6 f8             	movzbl %al,%edi
 215:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 219:	0f b6 80 9e 00 00 00 	movzbl 0x9e(%rax),%eax
 220:	0f b6 c8             	movzbl %al,%ecx
 223:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 227:	0f b6 80 9d 00 00 00 	movzbl 0x9d(%rax),%eax
 22e:	0f b6 d0             	movzbl %al,%edx
 231:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 235:	0f b6 80 9c 00 00 00 	movzbl 0x9c(%rax),%eax
 23c:	0f b6 c0             	movzbl %al,%eax
 23f:	48 83 ec 08          	sub    $0x8,%rsp
 243:	56                   	push   %rsi
 244:	45 89 c1             	mov    %r8d,%r9d
 247:	41 89 f8             	mov    %edi,%r8d
 24a:	89 c6                	mov    %eax,%esi
 24c:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 253 <Network::Print()+0x253>
 253:	48 89 c7             	mov    %rax,%rdi
 256:	b8 00 00 00 00       	mov    $0x0,%eax
 25b:	e8 00 00 00 00       	call   260 <Network::Print()+0x260>
 260:	48 83 c4 10          	add    $0x10,%rsp
 264:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 268:	48 89 c7             	mov    %rax,%rdi
 26b:	e8 00 00 00 00       	call   270 <Network::Print()+0x270>
 270:	0f be c0             	movsbl %al,%eax
 273:	89 c6                	mov    %eax,%esi
 275:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 27c <Network::Print()+0x27c>
 27c:	48 89 c7             	mov    %rax,%rdi
 27f:	b8 00 00 00 00       	mov    $0x0,%eax
 284:	e8 00 00 00 00       	call   289 <Network::Print()+0x289>
 289:	90                   	nop
 28a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 28e:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 295:	00 00 
 297:	74 05                	je     29e <Network::Print()+0x29e>
 299:	e8 00 00 00 00       	call   29e <Network::Print()+0x29e>
 29e:	48 8d 65 e8          	lea    -0x18(%rbp),%rsp
 2a2:	5b                   	pop    %rbx
 2a3:	41 5c                	pop    %r12
 2a5:	41 5d                	pop    %r13
 2a7:	5d                   	pop    %rbp
 2a8:	c3                   	ret    

networktcp.o:     file format elf64-x86-64


Disassembly of section .text._ZN7Network8TcpBeginEt:

0000000000000000 <Network::TcpBegin(unsigned short)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 40          	sub    $0x40,%rsp
   c:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	66 89 45 c4          	mov    %ax,-0x3c(%rbp)
  16:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1d:	00 00 
  1f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  23:	31 c0                	xor    %eax,%eax
  25:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%rbp)
  2c:	eb 50                	jmp    7e <Network::TcpBegin(unsigned short)+0x7e>
  2e:	8b 45 dc             	mov    -0x24(%rbp),%eax
  31:	48 98                	cltq   
  33:	48 8d 14 00          	lea    (%rax,%rax,1),%rdx
  37:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 3e <Network::TcpBegin(unsigned short)+0x3e>
  3e:	0f b7 04 02          	movzwl (%rdx,%rax,1),%eax
  42:	66 39 45 c4          	cmp    %ax,-0x3c(%rbp)
  46:	75 19                	jne    61 <Network::TcpBegin(unsigned short)+0x61>
  48:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 4f <Network::TcpBegin(unsigned short)+0x4f>
  4f:	48 89 c7             	mov    %rax,%rdi
  52:	e8 00 00 00 00       	call   57 <Network::TcpBegin(unsigned short)+0x57>
  57:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
  5c:	e9 67 02 00 00       	jmp    2c8 <Network::TcpBegin(unsigned short)+0x2c8>
  61:	8b 45 dc             	mov    -0x24(%rbp),%eax
  64:	48 98                	cltq   
  66:	48 8d 14 00          	lea    (%rax,%rax,1),%rdx
  6a:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 71 <Network::TcpBegin(unsigned short)+0x71>
  71:	0f b7 04 02          	movzwl (%rdx,%rax,1),%eax
  75:	66 85 c0             	test   %ax,%ax
  78:	74 0c                	je     86 <Network::TcpBegin(unsigned short)+0x86>
  7a:	83 45 dc 01          	addl   $0x1,-0x24(%rbp)
  7e:	83 7d dc 01          	cmpl   $0x1,-0x24(%rbp)
  82:	7e aa                	jle    2e <Network::TcpBegin(unsigned short)+0x2e>
  84:	eb 01                	jmp    87 <Network::TcpBegin(unsigned short)+0x87>
  86:	90                   	nop
  87:	83 7d dc 02          	cmpl   $0x2,-0x24(%rbp)
  8b:	75 19                	jne    a6 <Network::TcpBegin(unsigned short)+0xa6>
  8d:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 94 <Network::TcpBegin(unsigned short)+0x94>
  94:	48 89 c7             	mov    %rax,%rdi
  97:	e8 00 00 00 00       	call   9c <Network::TcpBegin(unsigned short)+0x9c>
  9c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  a1:	e9 22 02 00 00       	jmp    2c8 <Network::TcpBegin(unsigned short)+0x2c8>
  a6:	8b 45 dc             	mov    -0x24(%rbp),%eax
  a9:	48 98                	cltq   
  ab:	48 8d 0c 00          	lea    (%rax,%rax,1),%rcx
  af:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # b6 <Network::TcpBegin(unsigned short)+0xb6>
  b6:	0f b7 45 c4          	movzwl -0x3c(%rbp),%eax
  ba:	66 89 04 11          	mov    %ax,(%rcx,%rdx,1)
  be:	8b 45 dc             	mov    -0x24(%rbp),%eax
  c1:	48 98                	cltq   
  c3:	48 c1 e0 05          	shl    $0x5,%rax
  c7:	48 89 c2             	mov    %rax,%rdx
  ca:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # d1 <Network::TcpBegin(unsigned short)+0xd1>
  d1:	48 01 d0             	add    %rdx,%rax
  d4:	ba 20 00 00 00       	mov    $0x20,%edx
  d9:	be 00 00 00 00       	mov    $0x0,%esi
  de:	48 89 c7             	mov    %rax,%rdi
  e1:	e8 00 00 00 00       	call   e6 <Network::TcpBegin(unsigned short)+0xe6>
  e6:	ba 00 00 00 00       	mov    $0x0,%edx
  eb:	be 01 00 00 00       	mov    $0x1,%esi
  f0:	bf 02 00 00 00       	mov    $0x2,%edi
  f5:	e8 00 00 00 00       	call   fa <Network::TcpBegin(unsigned short)+0xfa>
  fa:	8b 55 dc             	mov    -0x24(%rbp),%edx
  fd:	48 63 d2             	movslq %edx,%rdx
 100:	48 8d 0c 95 00 00 00 	lea    0x0(,%rdx,4),%rcx
 107:	00 
 108:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 10f <Network::TcpBegin(unsigned short)+0x10f>
 10f:	89 04 11             	mov    %eax,(%rcx,%rdx,1)
 112:	8b 45 dc             	mov    -0x24(%rbp),%eax
 115:	48 98                	cltq   
 117:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
 11e:	00 
 11f:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 126 <Network::TcpBegin(unsigned short)+0x126>
 126:	8b 04 02             	mov    (%rdx,%rax,1),%eax
 129:	83 f8 ff             	cmp    $0xffffffff,%eax
 12c:	75 19                	jne    147 <Network::TcpBegin(unsigned short)+0x147>
 12e:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 135 <Network::TcpBegin(unsigned short)+0x135>
 135:	48 89 c7             	mov    %rax,%rdi
 138:	e8 00 00 00 00       	call   13d <Network::TcpBegin(unsigned short)+0x13d>
 13d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 142:	e9 81 01 00 00       	jmp    2c8 <Network::TcpBegin(unsigned short)+0x2c8>
 147:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%rbp)
 14e:	8b 45 dc             	mov    -0x24(%rbp),%eax
 151:	48 98                	cltq   
 153:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
 15a:	00 
 15b:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 162 <Network::TcpBegin(unsigned short)+0x162>
 162:	8b 04 02             	mov    (%rdx,%rax,1),%eax
 165:	48 8d 55 d8          	lea    -0x28(%rbp),%rdx
 169:	41 b8 04 00 00 00    	mov    $0x4,%r8d
 16f:	48 89 d1             	mov    %rdx,%rcx
 172:	ba 02 00 00 00       	mov    $0x2,%edx
 177:	be 01 00 00 00       	mov    $0x1,%esi
 17c:	89 c7                	mov    %eax,%edi
 17e:	e8 00 00 00 00       	call   183 <Network::TcpBegin(unsigned short)+0x183>
 183:	83 f8 ff             	cmp    $0xffffffff,%eax
 186:	0f 94 c0             	sete   %al
 189:	84 c0                	test   %al,%al
 18b:	74 0f                	je     19c <Network::TcpBegin(unsigned short)+0x19c>
 18d:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 194 <Network::TcpBegin(unsigned short)+0x194>
 194:	48 89 c7             	mov    %rax,%rdi
 197:	e8 00 00 00 00       	call   19c <Network::TcpBegin(unsigned short)+0x19c>
 19c:	66 c7 45 e0 02 00    	movw   $0x2,-0x20(%rbp)
 1a2:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
 1a9:	0f b7 45 c4          	movzwl -0x3c(%rbp),%eax
 1ad:	89 c7                	mov    %eax,%edi
 1af:	e8 00 00 00 00       	call   1b4 <Network::TcpBegin(unsigned short)+0x1b4>
 1b4:	66 89 45 e2          	mov    %ax,-0x1e(%rbp)
 1b8:	8b 45 dc             	mov    -0x24(%rbp),%eax
 1bb:	48 98                	cltq   
 1bd:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
 1c4:	00 
 1c5:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 1cc <Network::TcpBegin(unsigned short)+0x1cc>
 1cc:	8b 04 02             	mov    (%rdx,%rax,1),%eax
 1cf:	48 8d 4d e0          	lea    -0x20(%rbp),%rcx
 1d3:	ba 10 00 00 00       	mov    $0x10,%edx
 1d8:	48 89 ce             	mov    %rcx,%rsi
 1db:	89 c7                	mov    %eax,%edi
 1dd:	e8 00 00 00 00       	call   1e2 <Network::TcpBegin(unsigned short)+0x1e2>
 1e2:	c1 e8 1f             	shr    $0x1f,%eax
 1e5:	84 c0                	test   %al,%al
 1e7:	74 59                	je     242 <Network::TcpBegin(unsigned short)+0x242>
 1e9:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 1f0 <Network::TcpBegin(unsigned short)+0x1f0>
 1f0:	48 89 c7             	mov    %rax,%rdi
 1f3:	e8 00 00 00 00       	call   1f8 <Network::TcpBegin(unsigned short)+0x1f8>
 1f8:	0f b7 75 c4          	movzwl -0x3c(%rbp),%esi
 1fc:	8b 45 e4             	mov    -0x1c(%rbp),%eax
 1ff:	c1 e8 18             	shr    $0x18,%eax
 202:	89 c7                	mov    %eax,%edi
 204:	8b 45 e4             	mov    -0x1c(%rbp),%eax
 207:	c1 e8 10             	shr    $0x10,%eax
 20a:	0f b6 c8             	movzbl %al,%ecx
 20d:	8b 45 e4             	mov    -0x1c(%rbp),%eax
 210:	c1 e8 08             	shr    $0x8,%eax
 213:	0f b6 d0             	movzbl %al,%edx
 216:	8b 45 e4             	mov    -0x1c(%rbp),%eax
 219:	0f b6 c0             	movzbl %al,%eax
 21c:	41 89 f1             	mov    %esi,%r9d
 21f:	41 89 f8             	mov    %edi,%r8d
 222:	89 c6                	mov    %eax,%esi
 224:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 22b <Network::TcpBegin(unsigned short)+0x22b>
 22b:	48 89 c7             	mov    %rax,%rdi
 22e:	b8 00 00 00 00       	mov    $0x0,%eax
 233:	e8 00 00 00 00       	call   238 <Network::TcpBegin(unsigned short)+0x238>
 238:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
 23d:	e9 86 00 00 00       	jmp    2c8 <Network::TcpBegin(unsigned short)+0x2c8>
 242:	8b 45 dc             	mov    -0x24(%rbp),%eax
 245:	48 98                	cltq   
 247:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
 24e:	00 
 24f:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 256 <Network::TcpBegin(unsigned short)+0x256>
 256:	8b 04 02             	mov    (%rdx,%rax,1),%eax
 259:	be 00 00 00 00       	mov    $0x0,%esi
 25e:	89 c7                	mov    %eax,%edi
 260:	e8 00 00 00 00       	call   265 <Network::TcpBegin(unsigned short)+0x265>
 265:	8b 45 dc             	mov    -0x24(%rbp),%eax
 268:	48 98                	cltq   
 26a:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
 271:	00 
 272:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 279 <Network::TcpBegin(unsigned short)+0x279>
 279:	8b 04 02             	mov    (%rdx,%rax,1),%eax
 27c:	8b 55 dc             	mov    -0x24(%rbp),%edx
 27f:	48 63 d2             	movslq %edx,%rdx
 282:	48 89 d1             	mov    %rdx,%rcx
 285:	48 c1 e1 05          	shl    $0x5,%rcx
 289:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 290 <Network::TcpBegin(unsigned short)+0x290>
 290:	89 04 11             	mov    %eax,(%rcx,%rdx,1)
 293:	8b 45 dc             	mov    -0x24(%rbp),%eax
 296:	48 98                	cltq   
 298:	48 c1 e0 05          	shl    $0x5,%rax
 29c:	48 89 c2             	mov    %rax,%rdx
 29f:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 2a6 <Network::TcpBegin(unsigned short)+0x2a6>
 2a6:	66 c7 04 02 03 00    	movw   $0x3,(%rdx,%rax,1)
 2ac:	8b 45 dc             	mov    -0x24(%rbp),%eax
 2af:	89 c6                	mov    %eax,%esi
 2b1:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 2b8 <Network::TcpBegin(unsigned short)+0x2b8>
 2b8:	48 89 c7             	mov    %rax,%rdi
 2bb:	b8 00 00 00 00       	mov    $0x0,%eax
 2c0:	e8 00 00 00 00       	call   2c5 <Network::TcpBegin(unsigned short)+0x2c5>
 2c5:	8b 45 dc             	mov    -0x24(%rbp),%eax
 2c8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
 2cc:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
 2d3:	00 00 
 2d5:	74 05                	je     2dc <Network::TcpBegin(unsigned short)+0x2dc>
 2d7:	e8 00 00 00 00       	call   2dc <Network::TcpBegin(unsigned short)+0x2dc>
 2dc:	c9                   	leave  
 2dd:	c3                   	ret    

Disassembly of section .text._ZN7Network6TcpEndEi:

0000000000000000 <Network::TcpEnd(int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  13:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1a:	00 00 
  1c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  20:	31 c0                	xor    %eax,%eax
  22:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  25:	48 98                	cltq   
  27:	48 c1 e0 05          	shl    $0x5,%rax
  2b:	48 89 c2             	mov    %rax,%rdx
  2e:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 35 <Network::TcpEnd(int)+0x35>
  35:	8b 04 02             	mov    (%rdx,%rax,1),%eax
  38:	89 c7                	mov    %eax,%edi
  3a:	e8 00 00 00 00       	call   3f <Network::TcpEnd(int)+0x3f>
  3f:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  42:	48 98                	cltq   
  44:	48 c1 e0 05          	shl    $0x5,%rax
  48:	48 89 c2             	mov    %rax,%rdx
  4b:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 52 <Network::TcpEnd(int)+0x52>
  52:	8b 04 02             	mov    (%rdx,%rax,1),%eax
  55:	89 c7                	mov    %eax,%edi
  57:	e8 00 00 00 00       	call   5c <Network::TcpEnd(int)+0x5c>
  5c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  61:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  65:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  6c:	00 00 
  6e:	74 05                	je     75 <Network::TcpEnd(int)+0x75>
  70:	e8 00 00 00 00       	call   75 <Network::TcpEnd(int)+0x75>
  75:	c9                   	leave  
  76:	c3                   	ret    

Disassembly of section .text._ZN7Network7TcpReadEiPPKhRj:

0000000000000000 <Network::TcpRead(int, unsigned char const**, unsigned int&)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 60          	sub    $0x60,%rsp
   c:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  10:	89 75 b4             	mov    %esi,-0x4c(%rbp)
  13:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  17:	48 89 4d a0          	mov    %rcx,-0x60(%rbp)
  1b:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  22:	00 00 
  24:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  28:	31 c0                	xor    %eax,%eax
  2a:	8b 45 b4             	mov    -0x4c(%rbp),%eax
  2d:	48 98                	cltq   
  2f:	48 c1 e0 05          	shl    $0x5,%rax
  33:	48 89 c2             	mov    %rax,%rdx
  36:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 3d <Network::TcpRead(int, unsigned char const**, unsigned int&)+0x3d>
  3d:	48 01 d0             	add    %rdx,%rax
  40:	ba 00 00 00 00       	mov    $0x0,%edx
  45:	be 04 00 00 00       	mov    $0x4,%esi
  4a:	48 89 c7             	mov    %rax,%rdi
  4d:	e8 00 00 00 00       	call   52 <Network::TcpRead(int, unsigned char const**, unsigned int&)+0x52>
  52:	89 45 d0             	mov    %eax,-0x30(%rbp)
  55:	83 7d d0 00          	cmpl   $0x0,-0x30(%rbp)
  59:	7f 08                	jg     63 <Network::TcpRead(int, unsigned char const**, unsigned int&)+0x63>
  5b:	8b 45 d0             	mov    -0x30(%rbp),%eax
  5e:	e9 32 03 00 00       	jmp    395 <Network::TcpRead(int, unsigned char const**, unsigned int&)+0x395>
  63:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%rbp)
  6a:	e9 17 03 00 00       	jmp    386 <Network::TcpRead(int, unsigned char const**, unsigned int&)+0x386>
  6f:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  72:	48 63 d0             	movslq %eax,%rdx
  75:	8b 45 b4             	mov    -0x4c(%rbp),%eax
  78:	48 98                	cltq   
  7a:	48 c1 e0 02          	shl    $0x2,%rax
  7e:	48 01 d0             	add    %rdx,%rax
  81:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  88:	00 
  89:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 90 <Network::TcpRead(int, unsigned char const**, unsigned int&)+0x90>
  90:	0f b7 04 02          	movzwl (%rdx,%rax,1),%eax
  94:	98                   	cwtl   
  95:	83 e0 01             	and    $0x1,%eax
  98:	85 c0                	test   %eax,%eax
  9a:	0f 84 e2 02 00 00    	je     382 <Network::TcpRead(int, unsigned char const**, unsigned int&)+0x382>
  a0:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  a3:	48 63 d0             	movslq %eax,%rdx
  a6:	8b 45 b4             	mov    -0x4c(%rbp),%eax
  a9:	48 98                	cltq   
  ab:	48 c1 e0 02          	shl    $0x2,%rax
  af:	48 01 d0             	add    %rdx,%rax
  b2:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  b9:	00 
  ba:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # c1 <Network::TcpRead(int, unsigned char const**, unsigned int&)+0xc1>
  c1:	8b 04 02             	mov    (%rdx,%rax,1),%eax
  c4:	89 45 d4             	mov    %eax,-0x2c(%rbp)
  c7:	8b 45 b4             	mov    -0x4c(%rbp),%eax
  ca:	48 98                	cltq   
  cc:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
  d3:	00 
  d4:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # db <Network::TcpRead(int, unsigned char const**, unsigned int&)+0xdb>
  db:	8b 04 02             	mov    (%rdx,%rax,1),%eax
  de:	39 45 d4             	cmp    %eax,-0x2c(%rbp)
  e1:	0f 85 fd 00 00 00    	jne    1e4 <Network::TcpRead(int, unsigned char const**, unsigned int&)+0x1e4>
  e7:	c7 45 c0 10 00 00 00 	movl   $0x10,-0x40(%rbp)
  ee:	8b 45 b4             	mov    -0x4c(%rbp),%eax
  f1:	48 98                	cltq   
  f3:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
  fa:	00 
  fb:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 102 <Network::TcpRead(int, unsigned char const**, unsigned int&)+0x102>
 102:	8b 04 02             	mov    (%rdx,%rax,1),%eax
 105:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
 109:	48 8d 4d e0          	lea    -0x20(%rbp),%rcx
 10d:	48 89 ce             	mov    %rcx,%rsi
 110:	89 c7                	mov    %eax,%edi
 112:	e8 00 00 00 00       	call   117 <Network::TcpRead(int, unsigned char const**, unsigned int&)+0x117>
 117:	89 45 dc             	mov    %eax,-0x24(%rbp)
 11a:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
 11e:	79 17                	jns    137 <Network::TcpRead(int, unsigned char const**, unsigned int&)+0x137>
 120:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 127 <Network::TcpRead(int, unsigned char const**, unsigned int&)+0x127>
 127:	48 89 c7             	mov    %rax,%rdi
 12a:	e8 00 00 00 00       	call   12f <Network::TcpRead(int, unsigned char const**, unsigned int&)+0x12f>
 12f:	8b 45 dc             	mov    -0x24(%rbp),%eax
 132:	e9 5e 02 00 00       	jmp    395 <Network::TcpRead(int, unsigned char const**, unsigned int&)+0x395>
 137:	c7 45 c8 ff ff ff ff 	movl   $0xffffffff,-0x38(%rbp)
 13e:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%rbp)
 145:	eb 34                	jmp    17b <Network::TcpRead(int, unsigned char const**, unsigned int&)+0x17b>
 147:	8b 45 cc             	mov    -0x34(%rbp),%eax
 14a:	48 63 d0             	movslq %eax,%rdx
 14d:	8b 45 b4             	mov    -0x4c(%rbp),%eax
 150:	48 98                	cltq   
 152:	48 c1 e0 02          	shl    $0x2,%rax
 156:	48 01 d0             	add    %rdx,%rax
 159:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
 160:	00 
 161:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 168 <Network::TcpRead(int, unsigned char const**, unsigned int&)+0x168>
 168:	8b 04 02             	mov    (%rdx,%rax,1),%eax
 16b:	85 c0                	test   %eax,%eax
 16d:	75 08                	jne    177 <Network::TcpRead(int, unsigned char const**, unsigned int&)+0x177>
 16f:	8b 45 cc             	mov    -0x34(%rbp),%eax
 172:	89 45 c8             	mov    %eax,-0x38(%rbp)
 175:	eb 0a                	jmp    181 <Network::TcpRead(int, unsigned char const**, unsigned int&)+0x181>
 177:	83 45 cc 01          	addl   $0x1,-0x34(%rbp)
 17b:	83 7d cc 03          	cmpl   $0x3,-0x34(%rbp)
 17f:	7e c6                	jle    147 <Network::TcpRead(int, unsigned char const**, unsigned int&)+0x147>
 181:	83 7d c8 ff          	cmpl   $0xffffffff,-0x38(%rbp)
 185:	75 0a                	jne    191 <Network::TcpRead(int, unsigned char const**, unsigned int&)+0x191>
 187:	b8 00 00 00 00       	mov    $0x0,%eax
 18c:	e9 04 02 00 00       	jmp    395 <Network::TcpRead(int, unsigned char const**, unsigned int&)+0x395>
 191:	8b 45 c8             	mov    -0x38(%rbp),%eax
 194:	48 63 d0             	movslq %eax,%rdx
 197:	8b 45 b4             	mov    -0x4c(%rbp),%eax
 19a:	48 98                	cltq   
 19c:	48 c1 e0 02          	shl    $0x2,%rax
 1a0:	48 01 d0             	add    %rdx,%rax
 1a3:	48 8d 0c c5 00 00 00 	lea    0x0(,%rax,8),%rcx
 1aa:	00 
 1ab:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 1b2 <Network::TcpRead(int, unsigned char const**, unsigned int&)+0x1b2>
 1b2:	8b 45 dc             	mov    -0x24(%rbp),%eax
 1b5:	89 04 11             	mov    %eax,(%rcx,%rdx,1)
 1b8:	8b 45 c8             	mov    -0x38(%rbp),%eax
 1bb:	48 63 d0             	movslq %eax,%rdx
 1be:	8b 45 b4             	mov    -0x4c(%rbp),%eax
 1c1:	48 98                	cltq   
 1c3:	48 c1 e0 02          	shl    $0x2,%rax
 1c7:	48 01 d0             	add    %rdx,%rax
 1ca:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
 1d1:	00 
 1d2:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 1d9 <Network::TcpRead(int, unsigned char const**, unsigned int&)+0x1d9>
 1d9:	66 c7 04 02 03 00    	movw   $0x3,(%rdx,%rax,1)
 1df:	e9 9e 01 00 00       	jmp    382 <Network::TcpRead(int, unsigned char const**, unsigned int&)+0x382>
 1e4:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
 1e8:	8b 45 d4             	mov    -0x2c(%rbp),%eax
 1eb:	be 1b 54 00 00       	mov    $0x541b,%esi
 1f0:	89 c7                	mov    %eax,%edi
 1f2:	b8 00 00 00 00       	mov    $0x0,%eax
 1f7:	e8 00 00 00 00       	call   1fc <Network::TcpRead(int, unsigned char const**, unsigned int&)+0x1fc>
 1fc:	8b 45 c0             	mov    -0x40(%rbp),%eax
 1ff:	85 c0                	test   %eax,%eax
 201:	0f 85 85 00 00 00    	jne    28c <Network::TcpRead(int, unsigned char const**, unsigned int&)+0x28c>
 207:	8b 45 d4             	mov    -0x2c(%rbp),%eax
 20a:	89 c7                	mov    %eax,%edi
 20c:	e8 00 00 00 00       	call   211 <Network::TcpRead(int, unsigned char const**, unsigned int&)+0x211>
 211:	8b 45 c4             	mov    -0x3c(%rbp),%eax
 214:	48 63 d0             	movslq %eax,%rdx
 217:	8b 45 b4             	mov    -0x4c(%rbp),%eax
 21a:	48 98                	cltq   
 21c:	48 c1 e0 02          	shl    $0x2,%rax
 220:	48 01 d0             	add    %rdx,%rax
 223:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
 22a:	00 
 22b:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 232 <Network::TcpRead(int, unsigned char const**, unsigned int&)+0x232>
 232:	c7 04 02 00 00 00 00 	movl   $0x0,(%rdx,%rax,1)
 239:	8b 45 c4             	mov    -0x3c(%rbp),%eax
 23c:	48 63 d0             	movslq %eax,%rdx
 23f:	8b 45 b4             	mov    -0x4c(%rbp),%eax
 242:	48 98                	cltq   
 244:	48 c1 e0 02          	shl    $0x2,%rax
 248:	48 01 d0             	add    %rdx,%rax
 24b:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
 252:	00 
 253:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 25a <Network::TcpRead(int, unsigned char const**, unsigned int&)+0x25a>
 25a:	66 c7 04 02 00 00    	movw   $0x0,(%rdx,%rax,1)
 260:	8b 45 c4             	mov    -0x3c(%rbp),%eax
 263:	48 63 d0             	movslq %eax,%rdx
 266:	8b 45 b4             	mov    -0x4c(%rbp),%eax
 269:	48 98                	cltq   
 26b:	48 c1 e0 02          	shl    $0x2,%rax
 26f:	48 01 d0             	add    %rdx,%rax
 272:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
 279:	00 
 27a:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 281 <Network::TcpRead(int, unsigned char const**, unsigned int&)+0x281>
 281:	66 c7 04 02 00 00    	movw   $0x0,(%rdx,%rax,1)
 287:	e9 f6 00 00 00       	jmp    382 <Network::TcpRead(int, unsigned char const**, unsigned int&)+0x382>
 28c:	8b 45 d4             	mov    -0x2c(%rbp),%eax
 28f:	ba 78 05 00 00       	mov    $0x578,%edx
 294:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 29b <Network::TcpRead(int, unsigned char const**, unsigned int&)+0x29b>
 29b:	48 89 ce             	mov    %rcx,%rsi
 29e:	89 c7                	mov    %eax,%edi
 2a0:	e8 00 00 00 00       	call   2a5 <Network::TcpRead(int, unsigned char const**, unsigned int&)+0x2a5>
 2a5:	89 45 d8             	mov    %eax,-0x28(%rbp)
 2a8:	83 7d d8 00          	cmpl   $0x0,-0x28(%rbp)
 2ac:	0f 8f 91 00 00 00    	jg     343 <Network::TcpRead(int, unsigned char const**, unsigned int&)+0x343>
 2b2:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 2b9 <Network::TcpRead(int, unsigned char const**, unsigned int&)+0x2b9>
 2b9:	48 89 c7             	mov    %rax,%rdi
 2bc:	e8 00 00 00 00       	call   2c1 <Network::TcpRead(int, unsigned char const**, unsigned int&)+0x2c1>
 2c1:	8b 45 d4             	mov    -0x2c(%rbp),%eax
 2c4:	89 c7                	mov    %eax,%edi
 2c6:	e8 00 00 00 00       	call   2cb <Network::TcpRead(int, unsigned char const**, unsigned int&)+0x2cb>
 2cb:	8b 45 c4             	mov    -0x3c(%rbp),%eax
 2ce:	48 63 d0             	movslq %eax,%rdx
 2d1:	8b 45 b4             	mov    -0x4c(%rbp),%eax
 2d4:	48 98                	cltq   
 2d6:	48 c1 e0 02          	shl    $0x2,%rax
 2da:	48 01 d0             	add    %rdx,%rax
 2dd:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
 2e4:	00 
 2e5:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 2ec <Network::TcpRead(int, unsigned char const**, unsigned int&)+0x2ec>
 2ec:	c7 04 02 00 00 00 00 	movl   $0x0,(%rdx,%rax,1)
 2f3:	8b 45 c4             	mov    -0x3c(%rbp),%eax
 2f6:	48 63 d0             	movslq %eax,%rdx
 2f9:	8b 45 b4             	mov    -0x4c(%rbp),%eax
 2fc:	48 98                	cltq   
 2fe:	48 c1 e0 02          	shl    $0x2,%rax
 302:	48 01 d0             	add    %rdx,%rax
 305:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
 30c:	00 
 30d:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 314 <Network::TcpRead(int, unsigned char const**, unsigned int&)+0x314>
 314:	66 c7 04 02 00 00    	movw   $0x0,(%rdx,%rax,1)
 31a:	8b 45 c4             	mov    -0x3c(%rbp),%eax
 31d:	48 63 d0             	movslq %eax,%rdx
 320:	8b 45 b4             	mov    -0x4c(%rbp),%eax
 323:	48 98                	cltq   
 325:	48 c1 e0 02          	shl    $0x2,%rax
 329:	48 01 d0             	add    %rdx,%rax
 32c:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
 333:	00 
 334:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 33b <Network::TcpRead(int, unsigned char const**, unsigned int&)+0x33b>
 33b:	66 c7 04 02 00 00    	movw   $0x0,(%rdx,%rax,1)
 341:	eb 3f                	jmp    382 <Network::TcpRead(int, unsigned char const**, unsigned int&)+0x382>
 343:	8b 45 c4             	mov    -0x3c(%rbp),%eax
 346:	48 63 d0             	movslq %eax,%rdx
 349:	8b 45 b4             	mov    -0x4c(%rbp),%eax
 34c:	48 98                	cltq   
 34e:	48 c1 e0 02          	shl    $0x2,%rax
 352:	48 01 d0             	add    %rdx,%rax
 355:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
 35c:	00 
 35d:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 364 <Network::TcpRead(int, unsigned char const**, unsigned int&)+0x364>
 364:	8b 04 02             	mov    (%rdx,%rax,1),%eax
 367:	89 c2                	mov    %eax,%edx
 369:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
 36d:	89 10                	mov    %edx,(%rax)
 36f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
 373:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 37a <Network::TcpRead(int, unsigned char const**, unsigned int&)+0x37a>
 37a:	48 89 10             	mov    %rdx,(%rax)
 37d:	8b 45 d8             	mov    -0x28(%rbp),%eax
 380:	eb 13                	jmp    395 <Network::TcpRead(int, unsigned char const**, unsigned int&)+0x395>
 382:	83 45 c4 01          	addl   $0x1,-0x3c(%rbp)
 386:	83 7d c4 03          	cmpl   $0x3,-0x3c(%rbp)
 38a:	0f 8e df fc ff ff    	jle    6f <Network::TcpRead(int, unsigned char const**, unsigned int&)+0x6f>
 390:	b8 00 00 00 00       	mov    $0x0,%eax
 395:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
 399:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
 3a0:	00 00 
 3a2:	74 05                	je     3a9 <Network::TcpRead(int, unsigned char const**, unsigned int&)+0x3a9>
 3a4:	e8 00 00 00 00       	call   3a9 <Network::TcpRead(int, unsigned char const**, unsigned int&)+0x3a9>
 3a9:	c9                   	leave  
 3aa:	c3                   	ret    

Disassembly of section .text._ZN7Network8TcpWriteEiPKhtj:

0000000000000000 <Network::TcpWrite(int, unsigned char const*, unsigned short, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  13:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  17:	89 c8                	mov    %ecx,%eax
  19:	44 89 45 d4          	mov    %r8d,-0x2c(%rbp)
  1d:	66 89 45 e0          	mov    %ax,-0x20(%rbp)
  21:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  28:	00 00 
  2a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  2e:	31 c0                	xor    %eax,%eax
  30:	0f b7 55 e0          	movzwl -0x20(%rbp),%edx
  34:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  37:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  3b:	48 89 ce             	mov    %rcx,%rsi
  3e:	89 c7                	mov    %eax,%edi
  40:	e8 00 00 00 00       	call   45 <Network::TcpWrite(int, unsigned char const*, unsigned short, unsigned int)+0x45>
  45:	89 45 f4             	mov    %eax,-0xc(%rbp)
  48:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
  4c:	79 0f                	jns    5d <Network::TcpWrite(int, unsigned char const*, unsigned short, unsigned int)+0x5d>
  4e:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 55 <Network::TcpWrite(int, unsigned char const*, unsigned short, unsigned int)+0x55>
  55:	48 89 c7             	mov    %rax,%rdi
  58:	e8 00 00 00 00       	call   5d <Network::TcpWrite(int, unsigned char const*, unsigned short, unsigned int)+0x5d>
  5d:	90                   	nop
  5e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  62:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  69:	00 00 
  6b:	74 05                	je     72 <Network::TcpWrite(int, unsigned char const*, unsigned short, unsigned int)+0x72>
  6d:	e8 00 00 00 00       	call   72 <Network::TcpWrite(int, unsigned char const*, unsigned short, unsigned int)+0x72>
  72:	c9                   	leave  
  73:	c3                   	ret    

osxgetmacaddress.o:     file format elf64-x86-64


mdns.o:     file format elf64-x86-64


Disassembly of section .text._ZN7Network13SetDomainNameEPKc:

0000000000000000 <Network::SetDomainName(char const*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  27:	48 8d 48 5c          	lea    0x5c(%rax),%rcx
  2b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  2f:	ba 3f 00 00 00       	mov    $0x3f,%edx
  34:	48 89 c6             	mov    %rax,%rsi
  37:	48 89 cf             	mov    %rcx,%rdi
  3a:	e8 00 00 00 00       	call   3f <Network::SetDomainName(char const*)+0x3f>
  3f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43:	c6 80 9b 00 00 00 00 	movb   $0x0,0x9b(%rax)
  4a:	90                   	nop
  4b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4f:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  56:	00 00 
  58:	74 05                	je     5f <Network::SetDomainName(char const*)+0x5f>
  5a:	e8 00 00 00 00       	call   5f <Network::SetDomainName(char const*)+0x5f>
  5f:	c9                   	leave  
  60:	c3                   	ret    

Disassembly of section .text._ZNK7Network5GetIpEv:

0000000000000000 <Network::GetIp() const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	8b 40 10             	mov    0x10(%rax),%eax
  26:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  2a:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  31:	00 00 
  33:	74 05                	je     3a <Network::GetIp() const+0x3a>
  35:	e8 00 00 00 00       	call   3a <Network::GetIp() const+0x3a>
  3a:	c9                   	leave  
  3b:	c3                   	ret    

Disassembly of section .text._ZNK7Network11GetHostNameEv:

0000000000000000 <Network::GetHostName() const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	48 83 c0 1c          	add    $0x1c,%rax
  27:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  2b:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  32:	00 00 
  34:	74 05                	je     3b <Network::GetHostName() const+0x3b>
  36:	e8 00 00 00 00       	call   3b <Network::GetHostName() const+0x3b>
  3b:	c9                   	leave  
  3c:	c3                   	ret    

Disassembly of section .text._ZN7Network3GetEv:

0000000000000000 <Network::Get()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 22 <Network::Get()+0x22>
  22:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  26:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  2d:	00 00 
  2f:	74 05                	je     36 <Network::Get()+0x36>
  31:	e8 00 00 00 00       	call   36 <Network::Get()+0x36>
  36:	c9                   	leave  
  37:	c3                   	ret    

Disassembly of section .text._ZN4MDNS3GetEv:

0000000000000000 <MDNS::Get()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 22 <MDNS::Get()+0x22>
  22:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  26:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  2d:	00 00 
  2f:	74 05                	je     36 <MDNS::Get()+0x36>
  31:	e8 00 00 00 00       	call   36 <MDNS::Get()+0x36>
  36:	c9                   	leave  
  37:	c3                   	ret    

Disassembly of section .text._ZN4mdns6Domain8AddLabelEPKcm:

0000000000000000 <mdns::Domain::AddLabel(char const*, unsigned long)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  14:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  18:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1f:	00 00 
  21:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  25:	31 c0                	xor    %eax,%eax
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2b:	0f b7 80 00 01 00 00 	movzwl 0x100(%rax),%eax
  32:	0f b7 c0             	movzwl %ax,%eax
  35:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  39:	89 d1                	mov    %edx,%ecx
  3b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  3f:	48 98                	cltq   
  41:	88 0c 02             	mov    %cl,(%rdx,%rax,1)
  44:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  48:	0f b7 80 00 01 00 00 	movzwl 0x100(%rax),%eax
  4f:	8d 50 01             	lea    0x1(%rax),%edx
  52:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  56:	66 89 90 00 01 00 00 	mov    %dx,0x100(%rax)
  5d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  61:	0f b7 80 00 01 00 00 	movzwl 0x100(%rax),%eax
  68:	0f b7 c0             	movzwl %ax,%eax
  6b:	48 63 d0             	movslq %eax,%rdx
  6e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  72:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  76:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  7a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  7e:	48 89 c6             	mov    %rax,%rsi
  81:	48 89 cf             	mov    %rcx,%rdi
  84:	e8 00 00 00 00       	call   89 <mdns::Domain::AddLabel(char const*, unsigned long)+0x89>
  89:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8d:	0f b7 90 00 01 00 00 	movzwl 0x100(%rax),%edx
  94:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  98:	01 c2                	add    %eax,%edx
  9a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  9e:	66 89 90 00 01 00 00 	mov    %dx,0x100(%rax)
  a5:	90                   	nop
  a6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  aa:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  b1:	00 00 
  b3:	74 05                	je     ba <mdns::Domain::AddLabel(char const*, unsigned long)+0xba>
  b5:	e8 00 00 00 00       	call   ba <mdns::Domain::AddLabel(char const*, unsigned long)+0xba>
  ba:	c9                   	leave  
  bb:	c3                   	ret    

Disassembly of section .text._ZN4mdns6Domain11AddProtocolENS_9ProtocolsE:

0000000000000000 <mdns::Domain::AddProtocol(mdns::Protocols)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  13:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1a:	00 00 
  1c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  20:	31 c0                	xor    %eax,%eax
  22:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  26:	75 45                	jne    6d <mdns::Domain::AddProtocol(mdns::Protocols)+0x6d>
  28:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2c:	0f b7 80 00 01 00 00 	movzwl 0x100(%rax),%eax
  33:	0f b7 c0             	movzwl %ax,%eax
  36:	48 63 d0             	movslq %eax,%rdx
  39:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3d:	48 01 d0             	add    %rdx,%rax
  40:	8b 15 00 00 00 00    	mov    0x0(%rip),%edx        # 46 <mdns::Domain::AddProtocol(mdns::Protocols)+0x46>
  46:	89 10                	mov    %edx,(%rax)
  48:	0f b6 15 00 00 00 00 	movzbl 0x0(%rip),%edx        # 4f <mdns::Domain::AddProtocol(mdns::Protocols)+0x4f>
  4f:	88 50 04             	mov    %dl,0x4(%rax)
  52:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  56:	0f b7 80 00 01 00 00 	movzwl 0x100(%rax),%eax
  5d:	8d 50 05             	lea    0x5(%rax),%edx
  60:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  64:	66 89 90 00 01 00 00 	mov    %dx,0x100(%rax)
  6b:	eb 43                	jmp    b0 <mdns::Domain::AddProtocol(mdns::Protocols)+0xb0>
  6d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  71:	0f b7 80 00 01 00 00 	movzwl 0x100(%rax),%eax
  78:	0f b7 c0             	movzwl %ax,%eax
  7b:	48 63 d0             	movslq %eax,%rdx
  7e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  82:	48 01 d0             	add    %rdx,%rax
  85:	8b 15 00 00 00 00    	mov    0x0(%rip),%edx        # 8b <mdns::Domain::AddProtocol(mdns::Protocols)+0x8b>
  8b:	89 10                	mov    %edx,(%rax)
  8d:	0f b6 15 00 00 00 00 	movzbl 0x0(%rip),%edx        # 94 <mdns::Domain::AddProtocol(mdns::Protocols)+0x94>
  94:	88 50 04             	mov    %dl,0x4(%rax)
  97:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  9b:	0f b7 80 00 01 00 00 	movzwl 0x100(%rax),%eax
  a2:	8d 50 05             	lea    0x5(%rax),%edx
  a5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  a9:	66 89 90 00 01 00 00 	mov    %dx,0x100(%rax)
  b0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  b4:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  bb:	00 00 
  bd:	74 05                	je     c4 <mdns::Domain::AddProtocol(mdns::Protocols)+0xc4>
  bf:	e8 00 00 00 00       	call   c4 <mdns::Domain::AddProtocol(mdns::Protocols)+0xc4>
  c4:	c9                   	leave  
  c5:	c3                   	ret    

Disassembly of section .text._ZN4mdns6Domain11AddDotLocalEv:

0000000000000000 <mdns::Domain::AddDotLocal()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	0f b7 80 00 01 00 00 	movzwl 0x100(%rax),%eax
  2a:	0f b7 c0             	movzwl %ax,%eax
  2d:	48 63 d0             	movslq %eax,%rdx
  30:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  34:	48 01 d0             	add    %rdx,%rax
  37:	8b 15 00 00 00 00    	mov    0x0(%rip),%edx        # 3d <mdns::Domain::AddDotLocal()+0x3d>
  3d:	89 10                	mov    %edx,(%rax)
  3f:	0f b7 15 00 00 00 00 	movzwl 0x0(%rip),%edx        # 46 <mdns::Domain::AddDotLocal()+0x46>
  46:	66 89 50 04          	mov    %dx,0x4(%rax)
  4a:	0f b6 15 00 00 00 00 	movzbl 0x0(%rip),%edx        # 51 <mdns::Domain::AddDotLocal()+0x51>
  51:	88 50 06             	mov    %dl,0x6(%rax)
  54:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  58:	0f b7 80 00 01 00 00 	movzwl 0x100(%rax),%eax
  5f:	8d 50 07             	lea    0x7(%rax),%edx
  62:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  66:	66 89 90 00 01 00 00 	mov    %dx,0x100(%rax)
  6d:	90                   	nop
  6e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  72:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  79:	00 00 
  7b:	74 05                	je     82 <mdns::Domain::AddDotLocal()+0x82>
  7d:	e8 00 00 00 00       	call   82 <mdns::Domain::AddDotLocal()+0x82>
  82:	c9                   	leave  
  83:	c3                   	ret    

Disassembly of section .text._ZN4mdns6Domain5PrintEb:

0000000000000000 <mdns::Domain::Print(bool)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	88 45 d4             	mov    %al,-0x2c(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	bf 20 00 00 00       	mov    $0x20,%edi
  29:	e8 00 00 00 00       	call   2e <mdns::Domain::Print(bool)+0x2e>
  2e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  32:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  36:	eb 3e                	jmp    76 <mdns::Domain::Print(bool)+0x76>
  38:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3c:	0f b6 00             	movzbl (%rax),%eax
  3f:	0f b6 c0             	movzbl %al,%eax
  42:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  46:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
  4b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4f:	89 c1                	mov    %eax,%ecx
  51:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  55:	48 89 c2             	mov    %rax,%rdx
  58:	89 ce                	mov    %ecx,%esi
  5a:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 61 <mdns::Domain::Print(bool)+0x61>
  61:	48 89 c7             	mov    %rax,%rdi
  64:	b8 00 00 00 00       	mov    $0x0,%eax
  69:	e8 00 00 00 00       	call   6e <mdns::Domain::Print(bool)+0x6e>
  6e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  72:	48 01 45 e8          	add    %rax,-0x18(%rbp)
  76:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7a:	0f b6 00             	movzbl (%rax),%eax
  7d:	84 c0                	test   %al,%al
  7f:	74 1e                	je     9f <mdns::Domain::Print(bool)+0x9f>
  81:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  85:	0f b7 80 00 01 00 00 	movzwl 0x100(%rax),%eax
  8c:	0f b7 c0             	movzwl %ax,%eax
  8f:	48 63 d0             	movslq %eax,%rdx
  92:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  96:	48 01 d0             	add    %rdx,%rax
  99:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  9d:	72 99                	jb     38 <mdns::Domain::Print(bool)+0x38>
  9f:	80 7d d4 00          	cmpb   $0x0,-0x2c(%rbp)
  a3:	74 0a                	je     af <mdns::Domain::Print(bool)+0xaf>
  a5:	bf 0a 00 00 00       	mov    $0xa,%edi
  aa:	e8 00 00 00 00       	call   af <mdns::Domain::Print(bool)+0xaf>
  af:	90                   	nop
  b0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  b4:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  bb:	00 00 
  bd:	74 05                	je     c4 <mdns::Domain::Print(bool)+0xc4>
  bf:	e8 00 00 00 00       	call   c4 <mdns::Domain::Print(bool)+0xc4>
  c4:	c9                   	leave  
  c5:	c3                   	ret    

Disassembly of section .text._ZN4mdnseqERKNS_6DomainES2_:

0000000000000000 <mdns::operator==(mdns::Domain const&, mdns::Domain const&)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  27:	0f b7 90 00 01 00 00 	movzwl 0x100(%rax),%edx
  2e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  32:	0f b7 80 00 01 00 00 	movzwl 0x100(%rax),%eax
  39:	66 39 c2             	cmp    %ax,%dx
  3c:	74 0a                	je     48 <mdns::operator==(mdns::Domain const&, mdns::Domain const&)+0x48>
  3e:	b8 00 00 00 00       	mov    $0x0,%eax
  43:	e9 b5 00 00 00       	jmp    fd <mdns::operator==(mdns::Domain const&, mdns::Domain const&)+0xfd>
  48:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  50:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  54:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  58:	eb 66                	jmp    c0 <mdns::operator==(mdns::Domain const&, mdns::Domain const&)+0xc0>
  5a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  5e:	0f b6 10             	movzbl (%rax),%edx
  61:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  65:	0f b6 00             	movzbl (%rax),%eax
  68:	38 c2                	cmp    %al,%dl
  6a:	74 0a                	je     76 <mdns::operator==(mdns::Domain const&, mdns::Domain const&)+0x76>
  6c:	b8 00 00 00 00       	mov    $0x0,%eax
  71:	e9 87 00 00 00       	jmp    fd <mdns::operator==(mdns::Domain const&, mdns::Domain const&)+0xfd>
  76:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  7a:	0f b6 00             	movzbl (%rax),%eax
  7d:	0f b6 c0             	movzbl %al,%eax
  80:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  84:	48 83 45 e0 01       	addq   $0x1,-0x20(%rbp)
  89:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
  8e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  92:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  96:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  9a:	48 89 ce             	mov    %rcx,%rsi
  9d:	48 89 c7             	mov    %rax,%rdi
  a0:	e8 00 00 00 00       	call   a5 <mdns::operator==(mdns::Domain const&, mdns::Domain const&)+0xa5>
  a5:	85 c0                	test   %eax,%eax
  a7:	74 07                	je     b0 <mdns::operator==(mdns::Domain const&, mdns::Domain const&)+0xb0>
  a9:	b8 00 00 00 00       	mov    $0x0,%eax
  ae:	eb 4d                	jmp    fd <mdns::operator==(mdns::Domain const&, mdns::Domain const&)+0xfd>
  b0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  b4:	48 01 45 e0          	add    %rax,-0x20(%rbp)
  b8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  bc:	48 01 45 e8          	add    %rax,-0x18(%rbp)
  c0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  c4:	0f b6 00             	movzbl (%rax),%eax
  c7:	84 c0                	test   %al,%al
  c9:	74 2d                	je     f8 <mdns::operator==(mdns::Domain const&, mdns::Domain const&)+0xf8>
  cb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  cf:	0f b6 00             	movzbl (%rax),%eax
  d2:	84 c0                	test   %al,%al
  d4:	74 22                	je     f8 <mdns::operator==(mdns::Domain const&, mdns::Domain const&)+0xf8>
  d6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  da:	0f b7 80 00 01 00 00 	movzwl 0x100(%rax),%eax
  e1:	0f b7 c0             	movzwl %ax,%eax
  e4:	48 63 d0             	movslq %eax,%rdx
  e7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  eb:	48 01 d0             	add    %rdx,%rax
  ee:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  f2:	0f 82 62 ff ff ff    	jb     5a <mdns::operator==(mdns::Domain const&, mdns::Domain const&)+0x5a>
  f8:	b8 01 00 00 00       	mov    $0x1,%eax
  fd:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
 101:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
 108:	00 00 
 10a:	74 05                	je     111 <mdns::operator==(mdns::Domain const&, mdns::Domain const&)+0x111>
 10c:	e8 00 00 00 00       	call   111 <mdns::operator==(mdns::Domain const&, mdns::Domain const&)+0x111>
 111:	c9                   	leave  
 112:	c3                   	ret    

Disassembly of section .text._ZorN4mdns6Flags1ES0_:

0000000000000000 <operator|(mdns::Flags1, mdns::Flags1)>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	89 fa                	mov    %edi,%edx
   a:	89 f0                	mov    %esi,%eax
   c:	88 55 ec             	mov    %dl,-0x14(%rbp)
   f:	88 45 e8             	mov    %al,-0x18(%rbp)
  12:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  19:	00 00 
  1b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1f:	31 c0                	xor    %eax,%eax
  21:	0f b6 45 ec          	movzbl -0x14(%rbp),%eax
  25:	0a 45 e8             	or     -0x18(%rbp),%al
  28:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  2c:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  33:	00 00 
  35:	74 05                	je     3c <operator|(mdns::Flags1, mdns::Flags1)+0x3c>
  37:	e8 00 00 00 00       	call   3c <operator|(mdns::Flags1, mdns::Flags1)+0x3c>
  3c:	c9                   	leave  
  3d:	c3                   	ret    

Disassembly of section .text._ZorN4mdns7ClassesES0_:

0000000000000000 <operator|(mdns::Classes, mdns::Classes)>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	89 fa                	mov    %edi,%edx
   a:	89 f0                	mov    %esi,%eax
   c:	66 89 55 ec          	mov    %dx,-0x14(%rbp)
  10:	66 89 45 e8          	mov    %ax,-0x18(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	0f b7 45 ec          	movzwl -0x14(%rbp),%eax
  27:	66 0b 45 e8          	or     -0x18(%rbp),%ax
  2b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  2f:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  36:	00 00 
  38:	74 05                	je     3f <operator|(mdns::Classes, mdns::Classes)+0x3f>
  3a:	e8 00 00 00 00       	call   3f <operator|(mdns::Classes, mdns::Classes)+0x3f>
  3f:	c9                   	leave  
  40:	c3                   	ret    

Disassembly of section .text._ZorN4mdns9HostReplyES0_:

0000000000000000 <operator|(mdns::HostReply, mdns::HostReply)>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	89 7d ec             	mov    %edi,-0x14(%rbp)
   b:	89 75 e8             	mov    %esi,-0x18(%rbp)
   e:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  15:	00 00 
  17:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1b:	31 c0                	xor    %eax,%eax
  1d:	8b 45 ec             	mov    -0x14(%rbp),%eax
  20:	0b 45 e8             	or     -0x18(%rbp),%eax
  23:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  27:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  2e:	00 00 
  30:	74 05                	je     37 <operator|(mdns::HostReply, mdns::HostReply)+0x37>
  32:	e8 00 00 00 00       	call   37 <operator|(mdns::HostReply, mdns::HostReply)+0x37>
  37:	c9                   	leave  
  38:	c3                   	ret    

Disassembly of section .text._ZanN4mdns9HostReplyES0_:

0000000000000000 <operator&(mdns::HostReply, mdns::HostReply)>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	89 7d ec             	mov    %edi,-0x14(%rbp)
   b:	89 75 e8             	mov    %esi,-0x18(%rbp)
   e:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  15:	00 00 
  17:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1b:	31 c0                	xor    %eax,%eax
  1d:	8b 45 ec             	mov    -0x14(%rbp),%eax
  20:	23 45 e8             	and    -0x18(%rbp),%eax
  23:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  27:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  2e:	00 00 
  30:	74 05                	je     37 <operator&(mdns::HostReply, mdns::HostReply)+0x37>
  32:	e8 00 00 00 00       	call   37 <operator&(mdns::HostReply, mdns::HostReply)+0x37>
  37:	c9                   	leave  
  38:	c3                   	ret    

Disassembly of section .text._ZorN4mdns12ServiceReplyES0_:

0000000000000000 <operator|(mdns::ServiceReply, mdns::ServiceReply)>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	89 7d ec             	mov    %edi,-0x14(%rbp)
   b:	89 75 e8             	mov    %esi,-0x18(%rbp)
   e:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  15:	00 00 
  17:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1b:	31 c0                	xor    %eax,%eax
  1d:	8b 45 ec             	mov    -0x14(%rbp),%eax
  20:	89 c2                	mov    %eax,%edx
  22:	8b 45 e8             	mov    -0x18(%rbp),%eax
  25:	09 d0                	or     %edx,%eax
  27:	0f b6 c0             	movzbl %al,%eax
  2a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  2e:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  35:	00 00 
  37:	74 05                	je     3e <operator|(mdns::ServiceReply, mdns::ServiceReply)+0x3e>
  39:	e8 00 00 00 00       	call   3e <operator|(mdns::ServiceReply, mdns::ServiceReply)+0x3e>
  3e:	c9                   	leave  
  3f:	c3                   	ret    

Disassembly of section .text._ZanN4mdns12ServiceReplyES0_:

0000000000000000 <operator&(mdns::ServiceReply, mdns::ServiceReply)>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	89 7d ec             	mov    %edi,-0x14(%rbp)
   b:	89 75 e8             	mov    %esi,-0x18(%rbp)
   e:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  15:	00 00 
  17:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1b:	31 c0                	xor    %eax,%eax
  1d:	8b 45 ec             	mov    -0x14(%rbp),%eax
  20:	23 45 e8             	and    -0x18(%rbp),%eax
  23:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  27:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  2e:	00 00 
  30:	74 05                	je     37 <operator&(mdns::ServiceReply, mdns::ServiceReply)+0x37>
  32:	e8 00 00 00 00       	call   37 <operator&(mdns::ServiceReply, mdns::ServiceReply)+0x37>
  37:	c9                   	leave  
  38:	c3                   	ret    

Disassembly of section .text._ZN7network17mdns_announcementEv:

0000000000000000 <network::mdns_announcement()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	e8 00 00 00 00       	call   20 <network::mdns_announcement()+0x20>
  20:	be 10 0e 00 00       	mov    $0xe10,%esi
  25:	48 89 c7             	mov    %rax,%rdi
  28:	e8 00 00 00 00       	call   2d <network::mdns_announcement()+0x2d>
  2d:	90                   	nop
  2e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  32:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  39:	00 00 
  3b:	74 05                	je     42 <network::mdns_announcement()+0x42>
  3d:	e8 00 00 00 00       	call   42 <network::mdns_announcement()+0x42>
  42:	c9                   	leave  
  43:	c3                   	ret    

Disassembly of section .text._ZN7network13mdns_shutdownEv:

0000000000000000 <network::mdns_shutdown()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	e8 00 00 00 00       	call   20 <network::mdns_shutdown()+0x20>
  20:	be 00 00 00 00       	mov    $0x0,%esi
  25:	48 89 c7             	mov    %rax,%rdi
  28:	e8 00 00 00 00       	call   2d <network::mdns_shutdown()+0x2d>
  2d:	90                   	nop
  2e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  32:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  39:	00 00 
  3b:	74 05                	je     42 <network::mdns_shutdown()+0x42>
  3d:	e8 00 00 00 00       	call   42 <network::mdns_shutdown()+0x42>
  42:	c9                   	leave  
  43:	c3                   	ret    

Disassembly of section .text._ZL21create_service_domainRN4mdns6DomainERKNS_13ServiceRecordEb:

0000000000000000 <create_service_domain(mdns::Domain&, mdns::ServiceRecord const&, bool)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	53                   	push   %rbx
   9:	48 83 ec 38          	sub    $0x38,%rsp
   d:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  11:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  15:	89 d0                	mov    %edx,%eax
  17:	88 45 cc             	mov    %al,-0x34(%rbp)
  1a:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  21:	00 00 
  23:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  27:	31 c0                	xor    %eax,%eax
  29:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  2d:	66 c7 80 00 01 00 00 	movw   $0x0,0x100(%rax)
  34:	00 00 
  36:	80 7d cc 00          	cmpb   $0x0,-0x34(%rbp)
  3a:	74 70                	je     ac <create_service_domain(mdns::Domain&, mdns::ServiceRecord const&, bool)+0xac>
  3c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40:	48 8b 00             	mov    (%rax),%rax
  43:	48 85 c0             	test   %rax,%rax
  46:	74 2a                	je     72 <create_service_domain(mdns::Domain&, mdns::ServiceRecord const&, bool)+0x72>
  48:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4c:	48 8b 00             	mov    (%rax),%rax
  4f:	48 89 c7             	mov    %rax,%rdi
  52:	e8 00 00 00 00       	call   57 <create_service_domain(mdns::Domain&, mdns::ServiceRecord const&, bool)+0x57>
  57:	48 89 c2             	mov    %rax,%rdx
  5a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  5e:	48 8b 08             	mov    (%rax),%rcx
  61:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  65:	48 89 ce             	mov    %rcx,%rsi
  68:	48 89 c7             	mov    %rax,%rdi
  6b:	e8 00 00 00 00       	call   70 <create_service_domain(mdns::Domain&, mdns::ServiceRecord const&, bool)+0x70>
  70:	eb 3a                	jmp    ac <create_service_domain(mdns::Domain&, mdns::ServiceRecord const&, bool)+0xac>
  72:	e8 00 00 00 00       	call   77 <create_service_domain(mdns::Domain&, mdns::ServiceRecord const&, bool)+0x77>
  77:	48 89 c7             	mov    %rax,%rdi
  7a:	e8 00 00 00 00       	call   7f <create_service_domain(mdns::Domain&, mdns::ServiceRecord const&, bool)+0x7f>
  7f:	48 89 c7             	mov    %rax,%rdi
  82:	e8 00 00 00 00       	call   87 <create_service_domain(mdns::Domain&, mdns::ServiceRecord const&, bool)+0x87>
  87:	48 89 c3             	mov    %rax,%rbx
  8a:	e8 00 00 00 00       	call   8f <create_service_domain(mdns::Domain&, mdns::ServiceRecord const&, bool)+0x8f>
  8f:	48 89 c7             	mov    %rax,%rdi
  92:	e8 00 00 00 00       	call   97 <create_service_domain(mdns::Domain&, mdns::ServiceRecord const&, bool)+0x97>
  97:	48 89 c1             	mov    %rax,%rcx
  9a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  9e:	48 89 da             	mov    %rbx,%rdx
  a1:	48 89 ce             	mov    %rcx,%rsi
  a4:	48 89 c7             	mov    %rax,%rdi
  a7:	e8 00 00 00 00       	call   ac <create_service_domain(mdns::Domain&, mdns::ServiceRecord const&, bool)+0xac>
  ac:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  b0:	8b 40 14             	mov    0x14(%rax),%eax
  b3:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  b6:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  b9:	48 89 d0             	mov    %rdx,%rax
  bc:	48 01 c0             	add    %rax,%rax
  bf:	48 01 d0             	add    %rdx,%rax
  c2:	48 c1 e0 03          	shl    $0x3,%rax
  c6:	48 89 c2             	mov    %rax,%rdx
  c9:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # d0 <create_service_domain(mdns::Domain&, mdns::ServiceRecord const&, bool)+0xd0>
  d0:	0f b7 04 02          	movzwl (%rdx,%rax,1),%eax
  d4:	0f b7 d0             	movzwl %ax,%edx
  d7:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
  da:	48 89 c8             	mov    %rcx,%rax
  dd:	48 01 c0             	add    %rax,%rax
  e0:	48 01 c8             	add    %rcx,%rax
  e3:	48 c1 e0 03          	shl    $0x3,%rax
  e7:	48 89 c1             	mov    %rax,%rcx
  ea:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # f1 <create_service_domain(mdns::Domain&, mdns::ServiceRecord const&, bool)+0xf1>
  f1:	48 8b 04 01          	mov    (%rcx,%rax,1),%rax
  f5:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  f9:	0f b7 89 00 01 00 00 	movzwl 0x100(%rcx),%ecx
 100:	0f b7 c9             	movzwl %cx,%ecx
 103:	48 63 f1             	movslq %ecx,%rsi
 106:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
 10a:	48 01 f1             	add    %rsi,%rcx
 10d:	48 89 c6             	mov    %rax,%rsi
 110:	48 89 cf             	mov    %rcx,%rdi
 113:	e8 00 00 00 00       	call   118 <create_service_domain(mdns::Domain&, mdns::ServiceRecord const&, bool)+0x118>
 118:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 11c:	0f b7 88 00 01 00 00 	movzwl 0x100(%rax),%ecx
 123:	8b 55 e4             	mov    -0x1c(%rbp),%edx
 126:	48 89 d0             	mov    %rdx,%rax
 129:	48 01 c0             	add    %rax,%rax
 12c:	48 01 d0             	add    %rdx,%rax
 12f:	48 c1 e0 03          	shl    $0x3,%rax
 133:	48 89 c2             	mov    %rax,%rdx
 136:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 13d <create_service_domain(mdns::Domain&, mdns::ServiceRecord const&, bool)+0x13d>
 13d:	0f b7 04 02          	movzwl (%rdx,%rax,1),%eax
 141:	8d 14 01             	lea    (%rcx,%rax,1),%edx
 144:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 148:	66 89 90 00 01 00 00 	mov    %dx,0x100(%rax)
 14f:	8b 55 e4             	mov    -0x1c(%rbp),%edx
 152:	48 89 d0             	mov    %rdx,%rax
 155:	48 01 c0             	add    %rax,%rax
 158:	48 01 d0             	add    %rdx,%rax
 15b:	48 c1 e0 03          	shl    $0x3,%rax
 15f:	48 89 c2             	mov    %rax,%rdx
 162:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 169 <create_service_domain(mdns::Domain&, mdns::ServiceRecord const&, bool)+0x169>
 169:	8b 14 02             	mov    (%rdx,%rax,1),%edx
 16c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 170:	89 d6                	mov    %edx,%esi
 172:	48 89 c7             	mov    %rax,%rdi
 175:	e8 00 00 00 00       	call   17a <create_service_domain(mdns::Domain&, mdns::ServiceRecord const&, bool)+0x17a>
 17a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 17e:	48 89 c7             	mov    %rax,%rdi
 181:	e8 00 00 00 00       	call   186 <create_service_domain(mdns::Domain&, mdns::ServiceRecord const&, bool)+0x186>
 186:	90                   	nop
 187:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 18b:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 192:	00 00 
 194:	74 05                	je     19b <create_service_domain(mdns::Domain&, mdns::ServiceRecord const&, bool)+0x19b>
 196:	e8 00 00 00 00       	call   19b <create_service_domain(mdns::Domain&, mdns::ServiceRecord const&, bool)+0x19b>
 19b:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
 19f:	c9                   	leave  
 1a0:	c3                   	ret    

Disassembly of section .text._ZL18create_host_domainRN4mdns6DomainE:

0000000000000000 <create_host_domain(mdns::Domain&)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	53                   	push   %rbx
   9:	48 83 ec 28          	sub    $0x28,%rsp
   d:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  11:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  18:	00 00 
  1a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  1e:	31 c0                	xor    %eax,%eax
  20:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  24:	66 c7 80 00 01 00 00 	movw   $0x0,0x100(%rax)
  2b:	00 00 
  2d:	e8 00 00 00 00       	call   32 <create_host_domain(mdns::Domain&)+0x32>
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	call   3a <create_host_domain(mdns::Domain&)+0x3a>
  3a:	48 89 c7             	mov    %rax,%rdi
  3d:	e8 00 00 00 00       	call   42 <create_host_domain(mdns::Domain&)+0x42>
  42:	48 89 c3             	mov    %rax,%rbx
  45:	e8 00 00 00 00       	call   4a <create_host_domain(mdns::Domain&)+0x4a>
  4a:	48 89 c7             	mov    %rax,%rdi
  4d:	e8 00 00 00 00       	call   52 <create_host_domain(mdns::Domain&)+0x52>
  52:	48 89 c1             	mov    %rax,%rcx
  55:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  59:	48 89 da             	mov    %rbx,%rdx
  5c:	48 89 ce             	mov    %rcx,%rsi
  5f:	48 89 c7             	mov    %rax,%rdi
  62:	e8 00 00 00 00       	call   67 <create_host_domain(mdns::Domain&)+0x67>
  67:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  6b:	48 89 c7             	mov    %rax,%rdi
  6e:	e8 00 00 00 00       	call   73 <create_host_domain(mdns::Domain&)+0x73>
  73:	90                   	nop
  74:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  78:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  7f:	00 00 
  81:	74 05                	je     88 <create_host_domain(mdns::Domain&)+0x88>
  83:	e8 00 00 00 00       	call   88 <create_host_domain(mdns::Domain&)+0x88>
  88:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  8c:	c9                   	leave  
  8d:	c3                   	ret    

Disassembly of section .text._ZL21create_reverse_domainRN4mdns6DomainE:

0000000000000000 <create_reverse_domain(mdns::Domain&)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 50          	sub    $0x50,%rsp
   c:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  23:	66 c7 80 00 01 00 00 	movw   $0x0,0x100(%rax)
  2a:	00 00 
  2c:	e8 00 00 00 00       	call   31 <create_reverse_domain(mdns::Domain&)+0x31>
  31:	48 89 c7             	mov    %rax,%rdi
  34:	e8 00 00 00 00       	call   39 <create_reverse_domain(mdns::Domain&)+0x39>
  39:	89 45 d0             	mov    %eax,-0x30(%rbp)
  3c:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  40:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  44:	c7 45 dc 03 00 00 00 	movl   $0x3,-0x24(%rbp)
  4b:	e9 11 01 00 00       	jmp    161 <create_reverse_domain(mdns::Domain&)+0x161>
  50:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%rbp)
  57:	8b 45 dc             	mov    -0x24(%rbp),%eax
  5a:	48 63 d0             	movslq %eax,%rdx
  5d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  61:	48 01 d0             	add    %rdx,%rax
  64:	0f b6 00             	movzbl (%rax),%eax
  67:	88 45 cf             	mov    %al,-0x31(%rbp)
  6a:	0f b6 45 cf          	movzbl -0x31(%rbp),%eax
  6e:	ba 29 00 00 00       	mov    $0x29,%edx
  73:	f6 e2                	mul    %dl
  75:	66 c1 e8 08          	shr    $0x8,%ax
  79:	c0 e8 04             	shr    $0x4,%al
  7c:	0f b6 c0             	movzbl %al,%eax
  7f:	89 45 e0             	mov    %eax,-0x20(%rbp)
  82:	83 7d e0 00          	cmpl   $0x0,-0x20(%rbp)
  86:	74 1e                	je     a6 <create_reverse_domain(mdns::Domain&)+0xa6>
  88:	c7 45 d4 03 00 00 00 	movl   $0x3,-0x2c(%rbp)
  8f:	8b 45 e0             	mov    -0x20(%rbp),%eax
  92:	83 c0 30             	add    $0x30,%eax
  95:	88 45 f5             	mov    %al,-0xb(%rbp)
  98:	8b 45 e0             	mov    -0x20(%rbp),%eax
  9b:	ba 64 00 00 00       	mov    $0x64,%edx
  a0:	0f af c2             	imul   %edx,%eax
  a3:	28 45 cf             	sub    %al,-0x31(%rbp)
  a6:	0f b6 45 cf          	movzbl -0x31(%rbp),%eax
  aa:	ba cd ff ff ff       	mov    $0xffffffcd,%edx
  af:	f6 e2                	mul    %dl
  b1:	66 c1 e8 08          	shr    $0x8,%ax
  b5:	c0 e8 03             	shr    $0x3,%al
  b8:	0f b6 c0             	movzbl %al,%eax
  bb:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  be:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  c2:	74 21                	je     e5 <create_reverse_domain(mdns::Domain&)+0xe5>
  c4:	c7 45 d8 02 00 00 00 	movl   $0x2,-0x28(%rbp)
  cb:	48 8d 55 d4          	lea    -0x2c(%rbp),%rdx
  cf:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  d3:	48 89 d6             	mov    %rdx,%rsi
  d6:	48 89 c7             	mov    %rax,%rdi
  d9:	e8 00 00 00 00       	call   de <create_reverse_domain(mdns::Domain&)+0xde>
  de:	8b 00                	mov    (%rax),%eax
  e0:	89 45 d4             	mov    %eax,-0x2c(%rbp)
  e3:	eb 1f                	jmp    104 <create_reverse_domain(mdns::Domain&)+0x104>
  e5:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%rbp)
  ec:	48 8d 55 d4          	lea    -0x2c(%rbp),%rdx
  f0:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  f4:	48 89 d6             	mov    %rdx,%rsi
  f7:	48 89 c7             	mov    %rax,%rdi
  fa:	e8 00 00 00 00       	call   ff <create_reverse_domain(mdns::Domain&)+0xff>
  ff:	8b 00                	mov    (%rax),%eax
 101:	89 45 d4             	mov    %eax,-0x2c(%rbp)
 104:	8b 45 e4             	mov    -0x1c(%rbp),%eax
 107:	83 c0 30             	add    $0x30,%eax
 10a:	88 45 f6             	mov    %al,-0xa(%rbp)
 10d:	0f b6 4d cf          	movzbl -0x31(%rbp),%ecx
 111:	ba cd ff ff ff       	mov    $0xffffffcd,%edx
 116:	89 d0                	mov    %edx,%eax
 118:	f6 e1                	mul    %cl
 11a:	66 c1 e8 08          	shr    $0x8,%ax
 11e:	89 c2                	mov    %eax,%edx
 120:	c0 ea 03             	shr    $0x3,%dl
 123:	89 d0                	mov    %edx,%eax
 125:	c1 e0 02             	shl    $0x2,%eax
 128:	01 d0                	add    %edx,%eax
 12a:	01 c0                	add    %eax,%eax
 12c:	29 c1                	sub    %eax,%ecx
 12e:	89 ca                	mov    %ecx,%edx
 130:	8d 42 30             	lea    0x30(%rdx),%eax
 133:	88 45 f7             	mov    %al,-0x9(%rbp)
 136:	8b 45 d4             	mov    -0x2c(%rbp),%eax
 139:	89 c2                	mov    %eax,%edx
 13b:	8b 45 d4             	mov    -0x2c(%rbp),%eax
 13e:	b9 03 00 00 00       	mov    $0x3,%ecx
 143:	29 c1                	sub    %eax,%ecx
 145:	48 8d 45 f5          	lea    -0xb(%rbp),%rax
 149:	89 c9                	mov    %ecx,%ecx
 14b:	48 01 c1             	add    %rax,%rcx
 14e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 152:	48 89 ce             	mov    %rcx,%rsi
 155:	48 89 c7             	mov    %rax,%rdi
 158:	e8 00 00 00 00       	call   15d <create_reverse_domain(mdns::Domain&)+0x15d>
 15d:	83 6d dc 01          	subl   $0x1,-0x24(%rbp)
 161:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
 165:	0f 89 e5 fe ff ff    	jns    50 <create_reverse_domain(mdns::Domain&)+0x50>
 16b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 16f:	0f b7 80 00 01 00 00 	movzwl 0x100(%rax),%eax
 176:	0f b7 c0             	movzwl %ax,%eax
 179:	48 63 d0             	movslq %eax,%rdx
 17c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 180:	48 01 d0             	add    %rdx,%rax
 183:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 18a <create_reverse_domain(mdns::Domain&)+0x18a>
 18a:	48 89 10             	mov    %rdx,(%rax)
 18d:	8b 15 00 00 00 00    	mov    0x0(%rip),%edx        # 193 <create_reverse_domain(mdns::Domain&)+0x193>
 193:	89 50 08             	mov    %edx,0x8(%rax)
 196:	0f b7 15 00 00 00 00 	movzwl 0x0(%rip),%edx        # 19d <create_reverse_domain(mdns::Domain&)+0x19d>
 19d:	66 89 50 0c          	mov    %dx,0xc(%rax)
 1a1:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 1a5:	0f b7 80 00 01 00 00 	movzwl 0x100(%rax),%eax
 1ac:	8d 50 0e             	lea    0xe(%rax),%edx
 1af:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 1b3:	66 89 90 00 01 00 00 	mov    %dx,0x100(%rax)
 1ba:	90                   	nop
 1bb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 1bf:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 1c6:	00 00 
 1c8:	74 05                	je     1cf <create_reverse_domain(mdns::Domain&)+0x1cf>
 1ca:	e8 00 00 00 00       	call   1cf <create_reverse_domain(mdns::Domain&)+0x1cf>
 1cf:	c9                   	leave  
 1d0:	c3                   	ret    

Disassembly of section .text._Z24find_compression_pointerPKhS0_S0_:

0000000000000000 <find_compression_pointer(unsigned char const*, unsigned char const*, unsigned char const*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 50          	sub    $0x50,%rsp
   c:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  10:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  14:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  18:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1f:	00 00 
  21:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  25:	31 c0                	xor    %eax,%eax
  27:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  2b:	0f b6 00             	movzbl (%rax),%eax
  2e:	0f b6 c0             	movzbl %al,%eax
  31:	48 f7 d0             	not    %rax
  34:	48 89 c2             	mov    %rax,%rdx
  37:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  3b:	48 01 d0             	add    %rdx,%rax
  3e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  42:	e9 9f 01 00 00       	jmp    1e6 <find_compression_pointer(unsigned char const*, unsigned char const*, unsigned char const*)+0x1e6>
  47:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4b:	0f b6 10             	movzbl (%rax),%edx
  4e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  52:	0f b6 00             	movzbl (%rax),%eax
  55:	38 c2                	cmp    %al,%dl
  57:	0f 85 84 01 00 00    	jne    1e1 <find_compression_pointer(unsigned char const*, unsigned char const*, unsigned char const*)+0x1e1>
  5d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  61:	48 83 c0 01          	add    $0x1,%rax
  65:	0f b6 10             	movzbl (%rax),%edx
  68:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  6c:	48 83 c0 01          	add    $0x1,%rax
  70:	0f b6 00             	movzbl (%rax),%eax
  73:	38 c2                	cmp    %al,%dl
  75:	0f 85 66 01 00 00    	jne    1e1 <find_compression_pointer(unsigned char const*, unsigned char const*, unsigned char const*)+0x1e1>
  7b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  7f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  83:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  87:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8b:	e9 24 01 00 00       	jmp    1b4 <find_compression_pointer(unsigned char const*, unsigned char const*, unsigned char const*)+0x1b4>
  90:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%rbp)
  97:	eb 28                	jmp    c1 <find_compression_pointer(unsigned char const*, unsigned char const*, unsigned char const*)+0xc1>
  99:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  9c:	48 63 d0             	movslq %eax,%rdx
  9f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  a3:	48 01 d0             	add    %rdx,%rax
  a6:	0f b6 10             	movzbl (%rax),%edx
  a9:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  ac:	48 63 c8             	movslq %eax,%rcx
  af:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  b3:	48 01 c8             	add    %rcx,%rax
  b6:	0f b6 00             	movzbl (%rax),%eax
  b9:	38 c2                	cmp    %al,%dl
  bb:	75 15                	jne    d2 <find_compression_pointer(unsigned char const*, unsigned char const*, unsigned char const*)+0xd2>
  bd:	83 45 d4 01          	addl   $0x1,-0x2c(%rbp)
  c1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  c5:	0f b6 00             	movzbl (%rax),%eax
  c8:	0f b6 c0             	movzbl %al,%eax
  cb:	39 45 d4             	cmp    %eax,-0x2c(%rbp)
  ce:	7e c9                	jle    99 <find_compression_pointer(unsigned char const*, unsigned char const*, unsigned char const*)+0x99>
  d0:	eb 01                	jmp    d3 <find_compression_pointer(unsigned char const*, unsigned char const*, unsigned char const*)+0xd3>
  d2:	90                   	nop
  d3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  d7:	0f b6 00             	movzbl (%rax),%eax
  da:	0f b6 c0             	movzbl %al,%eax
  dd:	39 45 d4             	cmp    %eax,-0x2c(%rbp)
  e0:	0f 8e eb 00 00 00    	jle    1d1 <find_compression_pointer(unsigned char const*, unsigned char const*, unsigned char const*)+0x1d1>
  e6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  ea:	0f b6 00             	movzbl (%rax),%eax
  ed:	0f b6 c0             	movzbl %al,%eax
  f0:	83 c0 01             	add    $0x1,%eax
  f3:	48 98                	cltq   
  f5:	48 01 45 e8          	add    %rax,-0x18(%rbp)
  f9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  fd:	0f b6 00             	movzbl (%rax),%eax
 100:	0f b6 c0             	movzbl %al,%eax
 103:	83 c0 01             	add    $0x1,%eax
 106:	48 98                	cltq   
 108:	48 01 45 e0          	add    %rax,-0x20(%rbp)
 10c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
 110:	0f b6 00             	movzbl (%rax),%eax
 113:	84 c0                	test   %al,%al
 115:	75 14                	jne    12b <find_compression_pointer(unsigned char const*, unsigned char const*, unsigned char const*)+0x12b>
 117:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 11b:	0f b6 00             	movzbl (%rax),%eax
 11e:	84 c0                	test   %al,%al
 120:	75 09                	jne    12b <find_compression_pointer(unsigned char const*, unsigned char const*, unsigned char const*)+0x12b>
 122:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 126:	e9 ce 00 00 00       	jmp    1f9 <find_compression_pointer(unsigned char const*, unsigned char const*, unsigned char const*)+0x1f9>
 12b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
 12f:	0f b6 00             	movzbl (%rax),%eax
 132:	84 c0                	test   %al,%al
 134:	0f 84 9a 00 00 00    	je     1d4 <find_compression_pointer(unsigned char const*, unsigned char const*, unsigned char const*)+0x1d4>
 13a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 13e:	0f b6 00             	movzbl (%rax),%eax
 141:	3c 3f                	cmp    $0x3f,%al
 143:	77 02                	ja     147 <find_compression_pointer(unsigned char const*, unsigned char const*, unsigned char const*)+0x147>
 145:	eb 6d                	jmp    1b4 <find_compression_pointer(unsigned char const*, unsigned char const*, unsigned char const*)+0x1b4>
 147:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 14b:	0f b6 00             	movzbl (%rax),%eax
 14e:	3c bf                	cmp    $0xbf,%al
 150:	0f 86 81 00 00 00    	jbe    1d7 <find_compression_pointer(unsigned char const*, unsigned char const*, unsigned char const*)+0x1d7>
 156:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 15a:	48 83 c0 01          	add    $0x1,%rax
 15e:	48 39 45 c0          	cmp    %rax,-0x40(%rbp)
 162:	76 76                	jbe    1da <find_compression_pointer(unsigned char const*, unsigned char const*, unsigned char const*)+0x1da>
 164:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 168:	0f b6 00             	movzbl (%rax),%eax
 16b:	0f b6 c0             	movzbl %al,%eax
 16e:	c1 e0 08             	shl    $0x8,%eax
 171:	48 98                	cltq   
 173:	25 00 3f 00 00       	and    $0x3f00,%eax
 178:	48 89 c2             	mov    %rax,%rdx
 17b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 17f:	48 83 c0 01          	add    $0x1,%rax
 183:	0f b6 00             	movzbl (%rax),%eax
 186:	0f b6 c0             	movzbl %al,%eax
 189:	48 01 c2             	add    %rax,%rdx
 18c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 190:	48 01 d0             	add    %rdx,%rax
 193:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
 197:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 19b:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
 19f:	72 3c                	jb     1dd <find_compression_pointer(unsigned char const*, unsigned char const*, unsigned char const*)+0x1dd>
 1a1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 1a5:	0f b6 00             	movzbl (%rax),%eax
 1a8:	3c 3f                	cmp    $0x3f,%al
 1aa:	77 34                	ja     1e0 <find_compression_pointer(unsigned char const*, unsigned char const*, unsigned char const*)+0x1e0>
 1ac:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 1b0:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
 1b4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
 1b8:	0f b6 00             	movzbl (%rax),%eax
 1bb:	0f b6 d0             	movzbl %al,%edx
 1be:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 1c2:	48 01 d0             	add    %rdx,%rax
 1c5:	48 39 45 c0          	cmp    %rax,-0x40(%rbp)
 1c9:	0f 87 c1 fe ff ff    	ja     90 <find_compression_pointer(unsigned char const*, unsigned char const*, unsigned char const*)+0x90>
 1cf:	eb 10                	jmp    1e1 <find_compression_pointer(unsigned char const*, unsigned char const*, unsigned char const*)+0x1e1>
 1d1:	90                   	nop
 1d2:	eb 0d                	jmp    1e1 <find_compression_pointer(unsigned char const*, unsigned char const*, unsigned char const*)+0x1e1>
 1d4:	90                   	nop
 1d5:	eb 0a                	jmp    1e1 <find_compression_pointer(unsigned char const*, unsigned char const*, unsigned char const*)+0x1e1>
 1d7:	90                   	nop
 1d8:	eb 07                	jmp    1e1 <find_compression_pointer(unsigned char const*, unsigned char const*, unsigned char const*)+0x1e1>
 1da:	90                   	nop
 1db:	eb 04                	jmp    1e1 <find_compression_pointer(unsigned char const*, unsigned char const*, unsigned char const*)+0x1e1>
 1dd:	90                   	nop
 1de:	eb 01                	jmp    1e1 <find_compression_pointer(unsigned char const*, unsigned char const*, unsigned char const*)+0x1e1>
 1e0:	90                   	nop
 1e1:	48 83 6d d8 01       	subq   $0x1,-0x28(%rbp)
 1e6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 1ea:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
 1ee:	0f 83 53 fe ff ff    	jae    47 <find_compression_pointer(unsigned char const*, unsigned char const*, unsigned char const*)+0x47>
 1f4:	b8 00 00 00 00       	mov    $0x0,%eax
 1f9:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
 1fd:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
 204:	00 00 
 206:	74 05                	je     20d <find_compression_pointer(unsigned char const*, unsigned char const*, unsigned char const*)+0x20d>
 208:	e8 00 00 00 00       	call   20d <find_compression_pointer(unsigned char const*, unsigned char const*, unsigned char const*)+0x20d>
 20d:	c9                   	leave  
 20e:	c3                   	ret    

Disassembly of section .text._ZL25put_domain_name_as_labelsPhRKN4mdns6DomainE:

0000000000000000 <put_domain_name_as_labels(unsigned char*, mdns::Domain const&)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 40          	sub    $0x40,%rsp
   c:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  10:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 2a <put_domain_name_as_labels(unsigned char*, mdns::Domain const&)+0x2a>
  2a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  2e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  32:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  36:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  3d:	00 
  3e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  42:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  46:	e9 c3 00 00 00       	jmp    10e <put_domain_name_as_labels(unsigned char*, mdns::Domain const&)+0x10e>
  4b:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  4f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  53:	48 89 c6             	mov    %rax,%rsi
  56:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 5d <put_domain_name_as_labels(unsigned char*, mdns::Domain const&)+0x5d>
  5d:	48 89 c7             	mov    %rax,%rdi
  60:	e8 00 00 00 00       	call   65 <put_domain_name_as_labels(unsigned char*, mdns::Domain const&)+0x65>
  65:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  69:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  6e:	74 47                	je     b7 <put_domain_name_as_labels(unsigned char*, mdns::Domain const&)+0xb7>
  70:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 77 <put_domain_name_as_labels(unsigned char*, mdns::Domain const&)+0x77>
  77:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7b:	48 29 d0             	sub    %rdx,%rax
  7e:	66 89 45 d2          	mov    %ax,-0x2e(%rbp)
  82:	0f b7 45 d2          	movzwl -0x2e(%rbp),%eax
  86:	66 c1 e8 08          	shr    $0x8,%ax
  8a:	89 c1                	mov    %eax,%ecx
  8c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  90:	48 8d 50 01          	lea    0x1(%rax),%rdx
  94:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  98:	83 c9 c0             	or     $0xffffffc0,%ecx
  9b:	89 ca                	mov    %ecx,%edx
  9d:	88 10                	mov    %dl,(%rax)
  9f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  a3:	48 8d 50 01          	lea    0x1(%rax),%rdx
  a7:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  ab:	0f b7 55 d2          	movzwl -0x2e(%rbp),%edx
  af:	88 10                	mov    %dl,(%rax)
  b1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  b5:	eb 79                	jmp    130 <put_domain_name_as_labels(unsigned char*, mdns::Domain const&)+0x130>
  b7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  bb:	48 8d 50 01          	lea    0x1(%rax),%rdx
  bf:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  c3:	0f b6 00             	movzbl (%rax),%eax
  c6:	88 45 d1             	mov    %al,-0x2f(%rbp)
  c9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  cd:	48 8d 50 01          	lea    0x1(%rax),%rdx
  d1:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  d5:	0f b6 55 d1          	movzbl -0x2f(%rbp),%edx
  d9:	88 10                	mov    %dl,(%rax)
  db:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%rbp)
  e2:	eb 21                	jmp    105 <put_domain_name_as_labels(unsigned char*, mdns::Domain const&)+0x105>
  e4:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  e8:	48 8d 42 01          	lea    0x1(%rdx),%rax
  ec:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  f0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  f4:	48 8d 48 01          	lea    0x1(%rax),%rcx
  f8:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
  fc:	0f b6 12             	movzbl (%rdx),%edx
  ff:	88 10                	mov    %dl,(%rax)
 101:	83 45 d4 01          	addl   $0x1,-0x2c(%rbp)
 105:	0f b6 45 d1          	movzbl -0x2f(%rbp),%eax
 109:	39 45 d4             	cmp    %eax,-0x2c(%rbp)
 10c:	72 d6                	jb     e4 <put_domain_name_as_labels(unsigned char*, mdns::Domain const&)+0xe4>
 10e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 112:	0f b6 00             	movzbl (%rax),%eax
 115:	84 c0                	test   %al,%al
 117:	0f 85 2e ff ff ff    	jne    4b <put_domain_name_as_labels(unsigned char*, mdns::Domain const&)+0x4b>
 11d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 121:	48 8d 50 01          	lea    0x1(%rax),%rdx
 125:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
 129:	c6 00 00             	movb   $0x0,(%rax)
 12c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 130:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
 134:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
 13b:	00 00 
 13d:	74 05                	je     144 <put_domain_name_as_labels(unsigned char*, mdns::Domain const&)+0x144>
 13f:	e8 00 00 00 00       	call   144 <put_domain_name_as_labels(unsigned char*, mdns::Domain const&)+0x144>
 144:	c9                   	leave  
 145:	c3                   	ret    

Disassembly of section .text._ZL12add_questionPhRKN4mdns6DomainENS0_5TypesEb:

0000000000000000 <add_question(unsigned char*, mdns::Domain const&, mdns::Types, bool)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  14:	89 d0                	mov    %edx,%eax
  16:	89 ca                	mov    %ecx,%edx
  18:	66 89 45 dc          	mov    %ax,-0x24(%rbp)
  1c:	89 d0                	mov    %edx,%eax
  1e:	88 45 d8             	mov    %al,-0x28(%rbp)
  21:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  28:	00 00 
  2a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  2e:	31 c0                	xor    %eax,%eax
  30:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  34:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  38:	48 89 d6             	mov    %rdx,%rsi
  3b:	48 89 c7             	mov    %rax,%rdi
  3e:	e8 00 00 00 00       	call   43 <add_question(unsigned char*, mdns::Domain const&, mdns::Types, bool)+0x43>
  43:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  47:	0f b7 45 dc          	movzwl -0x24(%rbp),%eax
  4b:	89 c2                	mov    %eax,%edx
  4d:	66 c1 c2 08          	rol    $0x8,%dx
  51:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  55:	66 89 10             	mov    %dx,(%rax)
  58:	48 83 45 f0 02       	addq   $0x2,-0x10(%rbp)
  5d:	80 7d d8 00          	cmpb   $0x0,-0x28(%rbp)
  61:	74 07                	je     6a <add_question(unsigned char*, mdns::Domain const&, mdns::Types, bool)+0x6a>
  63:	b8 00 80 ff ff       	mov    $0xffff8000,%eax
  68:	eb 05                	jmp    6f <add_question(unsigned char*, mdns::Domain const&, mdns::Types, bool)+0x6f>
  6a:	b8 00 00 00 00       	mov    $0x0,%eax
  6f:	be 01 00 00 00       	mov    $0x1,%esi
  74:	89 c7                	mov    %eax,%edi
  76:	e8 00 00 00 00       	call   7b <add_question(unsigned char*, mdns::Domain const&, mdns::Types, bool)+0x7b>
  7b:	0f b7 c0             	movzwl %ax,%eax
  7e:	89 c2                	mov    %eax,%edx
  80:	66 c1 c2 08          	rol    $0x8,%dx
  84:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  88:	66 89 10             	mov    %dx,(%rax)
  8b:	48 83 45 f0 02       	addq   $0x2,-0x10(%rbp)
  90:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  94:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  98:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  9f:	00 00 
  a1:	74 05                	je     a8 <add_question(unsigned char*, mdns::Domain const&, mdns::Types, bool)+0xa8>
  a3:	e8 00 00 00 00       	call   a8 <add_question(unsigned char*, mdns::Domain const&, mdns::Types, bool)+0xa8>
  a8:	c9                   	leave  
  a9:	c3                   	ret    

Disassembly of section .text._ZL14add_answer_srvRKN4mdns13ServiceRecordEPhj:

0000000000000000 <add_answer_srv(mdns::ServiceRecord const&, unsigned char*, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 81 ec 50 01 00 00 	sub    $0x150,%rsp
   f:	48 89 bd c8 fe ff ff 	mov    %rdi,-0x138(%rbp)
  16:	48 89 b5 c0 fe ff ff 	mov    %rsi,-0x140(%rbp)
  1d:	89 95 bc fe ff ff    	mov    %edx,-0x144(%rbp)
  23:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  2a:	00 00 
  2c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  30:	31 c0                	xor    %eax,%eax
  32:	48 8b 8d c8 fe ff ff 	mov    -0x138(%rbp),%rcx
  39:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
  40:	ba 01 00 00 00       	mov    $0x1,%edx
  45:	48 89 ce             	mov    %rcx,%rsi
  48:	48 89 c7             	mov    %rax,%rdi
  4b:	e8 00 00 00 00       	call   50 <add_answer_srv(mdns::ServiceRecord const&, unsigned char*, unsigned int)+0x50>
  50:	48 8d b5 f0 fe ff ff 	lea    -0x110(%rbp),%rsi
  57:	48 8b 85 c0 fe ff ff 	mov    -0x140(%rbp),%rax
  5e:	b9 01 00 00 00       	mov    $0x1,%ecx
  63:	ba 21 00 00 00       	mov    $0x21,%edx
  68:	48 89 c7             	mov    %rax,%rdi
  6b:	e8 00 00 00 00       	call   70 <add_answer_srv(mdns::ServiceRecord const&, unsigned char*, unsigned int)+0x70>
  70:	48 89 85 d8 fe ff ff 	mov    %rax,-0x128(%rbp)
  77:	8b 85 bc fe ff ff    	mov    -0x144(%rbp),%eax
  7d:	0f c8                	bswap  %eax
  7f:	89 c2                	mov    %eax,%edx
  81:	48 8b 85 d8 fe ff ff 	mov    -0x128(%rbp),%rax
  88:	89 10                	mov    %edx,(%rax)
  8a:	48 83 85 d8 fe ff ff 	addq   $0x4,-0x128(%rbp)
  91:	04 
  92:	48 8b 85 d8 fe ff ff 	mov    -0x128(%rbp),%rax
  99:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
  a0:	48 83 85 d8 fe ff ff 	addq   $0x2,-0x128(%rbp)
  a7:	02 
  a8:	48 8b 85 d8 fe ff ff 	mov    -0x128(%rbp),%rax
  af:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
  b5:	48 83 85 d8 fe ff ff 	addq   $0x4,-0x128(%rbp)
  bc:	04 
  bd:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
  c4:	0f b7 50 12          	movzwl 0x12(%rax),%edx
  c8:	48 8b 85 d8 fe ff ff 	mov    -0x128(%rbp),%rax
  cf:	66 89 10             	mov    %dx,(%rax)
  d2:	48 83 85 d8 fe ff ff 	addq   $0x2,-0x128(%rbp)
  d9:	02 
  da:	48 8b 85 d8 fe ff ff 	mov    -0x128(%rbp),%rax
  e1:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
  e8:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
  ef:	48 89 c7             	mov    %rax,%rdi
  f2:	e8 00 00 00 00       	call   f7 <add_answer_srv(mdns::ServiceRecord const&, unsigned char*, unsigned int)+0xf7>
  f7:	48 8d 95 f0 fe ff ff 	lea    -0x110(%rbp),%rdx
  fe:	48 8b 85 d8 fe ff ff 	mov    -0x128(%rbp),%rax
 105:	48 89 d6             	mov    %rdx,%rsi
 108:	48 89 c7             	mov    %rax,%rdi
 10b:	e8 00 00 00 00       	call   110 <add_answer_srv(mdns::ServiceRecord const&, unsigned char*, unsigned int)+0x110>
 110:	48 89 85 d8 fe ff ff 	mov    %rax,-0x128(%rbp)
 117:	48 8b 85 d8 fe ff ff 	mov    -0x128(%rbp),%rax
 11e:	48 83 c0 06          	add    $0x6,%rax
 122:	48 2b 85 e8 fe ff ff 	sub    -0x118(%rbp),%rax
 129:	0f b7 c0             	movzwl %ax,%eax
 12c:	89 c2                	mov    %eax,%edx
 12e:	66 c1 c2 08          	rol    $0x8,%dx
 132:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
 139:	66 89 10             	mov    %dx,(%rax)
 13c:	48 8b 85 d8 fe ff ff 	mov    -0x128(%rbp),%rax
 143:	48 2b 85 c0 fe ff ff 	sub    -0x140(%rbp),%rax
 14a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
 14e:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
 155:	00 00 
 157:	74 05                	je     15e <add_answer_srv(mdns::ServiceRecord const&, unsigned char*, unsigned int)+0x15e>
 159:	e8 00 00 00 00       	call   15e <add_answer_srv(mdns::ServiceRecord const&, unsigned char*, unsigned int)+0x15e>
 15e:	c9                   	leave  
 15f:	c3                   	ret    

Disassembly of section .text._ZL14add_answer_txtRKN4mdns13ServiceRecordEPhj:

0000000000000000 <add_answer_txt(mdns::ServiceRecord const&, unsigned char*, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 81 ec 40 01 00 00 	sub    $0x140,%rsp
   f:	48 89 bd d8 fe ff ff 	mov    %rdi,-0x128(%rbp)
  16:	48 89 b5 d0 fe ff ff 	mov    %rsi,-0x130(%rbp)
  1d:	89 95 cc fe ff ff    	mov    %edx,-0x134(%rbp)
  23:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  2a:	00 00 
  2c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  30:	31 c0                	xor    %eax,%eax
  32:	48 8b 8d d8 fe ff ff 	mov    -0x128(%rbp),%rcx
  39:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
  40:	ba 01 00 00 00       	mov    $0x1,%edx
  45:	48 89 ce             	mov    %rcx,%rsi
  48:	48 89 c7             	mov    %rax,%rdi
  4b:	e8 00 00 00 00       	call   50 <add_answer_txt(mdns::ServiceRecord const&, unsigned char*, unsigned int)+0x50>
  50:	48 8d b5 f0 fe ff ff 	lea    -0x110(%rbp),%rsi
  57:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
  5e:	b9 01 00 00 00       	mov    $0x1,%ecx
  63:	ba 10 00 00 00       	mov    $0x10,%edx
  68:	48 89 c7             	mov    %rax,%rdi
  6b:	e8 00 00 00 00       	call   70 <add_answer_txt(mdns::ServiceRecord const&, unsigned char*, unsigned int)+0x70>
  70:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
  77:	8b 85 cc fe ff ff    	mov    -0x134(%rbp),%eax
  7d:	0f c8                	bswap  %eax
  7f:	89 c2                	mov    %eax,%edx
  81:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
  88:	89 10                	mov    %edx,(%rax)
  8a:	48 83 85 e8 fe ff ff 	addq   $0x4,-0x118(%rbp)
  91:	04 
  92:	48 8b 85 d8 fe ff ff 	mov    -0x128(%rbp),%rax
  99:	48 8b 40 08          	mov    0x8(%rax),%rax
  9d:	48 85 c0             	test   %rax,%rax
  a0:	75 2b                	jne    cd <add_answer_txt(mdns::ServiceRecord const&, unsigned char*, unsigned int)+0xcd>
  a2:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
  a9:	66 c7 00 00 01       	movw   $0x100,(%rax)
  ae:	48 83 85 e8 fe ff ff 	addq   $0x2,-0x118(%rbp)
  b5:	02 
  b6:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
  bd:	c6 00 00             	movb   $0x0,(%rax)
  c0:	48 83 85 e8 fe ff ff 	addq   $0x1,-0x118(%rbp)
  c7:	01 
  c8:	e9 8a 00 00 00       	jmp    157 <add_answer_txt(mdns::ServiceRecord const&, unsigned char*, unsigned int)+0x157>
  cd:	48 8b 85 d8 fe ff ff 	mov    -0x128(%rbp),%rax
  d4:	0f b7 40 10          	movzwl 0x10(%rax),%eax
  d8:	66 89 85 e6 fe ff ff 	mov    %ax,-0x11a(%rbp)
  df:	0f b7 85 e6 fe ff ff 	movzwl -0x11a(%rbp),%eax
  e6:	83 c0 01             	add    $0x1,%eax
  e9:	0f b7 c0             	movzwl %ax,%eax
  ec:	89 c2                	mov    %eax,%edx
  ee:	66 c1 c2 08          	rol    $0x8,%dx
  f2:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
  f9:	66 89 10             	mov    %dx,(%rax)
  fc:	48 83 85 e8 fe ff ff 	addq   $0x2,-0x118(%rbp)
 103:	02 
 104:	0f b7 85 e6 fe ff ff 	movzwl -0x11a(%rbp),%eax
 10b:	89 c2                	mov    %eax,%edx
 10d:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
 114:	88 10                	mov    %dl,(%rax)
 116:	48 83 85 e8 fe ff ff 	addq   $0x1,-0x118(%rbp)
 11d:	01 
 11e:	48 8b 85 d8 fe ff ff 	mov    -0x128(%rbp),%rax
 125:	0f b7 40 10          	movzwl 0x10(%rax),%eax
 129:	0f b7 d0             	movzwl %ax,%edx
 12c:	48 8b 85 d8 fe ff ff 	mov    -0x128(%rbp),%rax
 133:	48 8b 48 08          	mov    0x8(%rax),%rcx
 137:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
 13e:	48 89 ce             	mov    %rcx,%rsi
 141:	48 89 c7             	mov    %rax,%rdi
 144:	e8 00 00 00 00       	call   149 <add_answer_txt(mdns::ServiceRecord const&, unsigned char*, unsigned int)+0x149>
 149:	0f b7 85 e6 fe ff ff 	movzwl -0x11a(%rbp),%eax
 150:	48 01 85 e8 fe ff ff 	add    %rax,-0x118(%rbp)
 157:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
 15e:	48 2b 85 d0 fe ff ff 	sub    -0x130(%rbp),%rax
 165:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
 169:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
 170:	00 00 
 172:	74 05                	je     179 <add_answer_txt(mdns::ServiceRecord const&, unsigned char*, unsigned int)+0x179>
 174:	e8 00 00 00 00       	call   179 <add_answer_txt(mdns::ServiceRecord const&, unsigned char*, unsigned int)+0x179>
 179:	c9                   	leave  
 17a:	c3                   	ret    

Disassembly of section .text._ZL14add_answer_ptrRKN4mdns13ServiceRecordEPhj:

0000000000000000 <add_answer_ptr(mdns::ServiceRecord const&, unsigned char*, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 81 ec 50 01 00 00 	sub    $0x150,%rsp
   f:	48 89 bd c8 fe ff ff 	mov    %rdi,-0x138(%rbp)
  16:	48 89 b5 c0 fe ff ff 	mov    %rsi,-0x140(%rbp)
  1d:	89 95 bc fe ff ff    	mov    %edx,-0x144(%rbp)
  23:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  2a:	00 00 
  2c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  30:	31 c0                	xor    %eax,%eax
  32:	48 8b 8d c8 fe ff ff 	mov    -0x138(%rbp),%rcx
  39:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
  40:	ba 00 00 00 00       	mov    $0x0,%edx
  45:	48 89 ce             	mov    %rcx,%rsi
  48:	48 89 c7             	mov    %rax,%rdi
  4b:	e8 00 00 00 00       	call   50 <add_answer_ptr(mdns::ServiceRecord const&, unsigned char*, unsigned int)+0x50>
  50:	48 8d b5 f0 fe ff ff 	lea    -0x110(%rbp),%rsi
  57:	48 8b 85 c0 fe ff ff 	mov    -0x140(%rbp),%rax
  5e:	b9 00 00 00 00       	mov    $0x0,%ecx
  63:	ba 0c 00 00 00       	mov    $0xc,%edx
  68:	48 89 c7             	mov    %rax,%rdi
  6b:	e8 00 00 00 00       	call   70 <add_answer_ptr(mdns::ServiceRecord const&, unsigned char*, unsigned int)+0x70>
  70:	48 89 85 d8 fe ff ff 	mov    %rax,-0x128(%rbp)
  77:	8b 85 bc fe ff ff    	mov    -0x144(%rbp),%eax
  7d:	0f c8                	bswap  %eax
  7f:	89 c2                	mov    %eax,%edx
  81:	48 8b 85 d8 fe ff ff 	mov    -0x128(%rbp),%rax
  88:	89 10                	mov    %edx,(%rax)
  8a:	48 83 85 d8 fe ff ff 	addq   $0x4,-0x128(%rbp)
  91:	04 
  92:	48 8b 85 d8 fe ff ff 	mov    -0x128(%rbp),%rax
  99:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
  a0:	48 83 85 d8 fe ff ff 	addq   $0x2,-0x128(%rbp)
  a7:	02 
  a8:	48 8b 85 d8 fe ff ff 	mov    -0x128(%rbp),%rax
  af:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
  b6:	48 8b 8d c8 fe ff ff 	mov    -0x138(%rbp),%rcx
  bd:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
  c4:	ba 01 00 00 00       	mov    $0x1,%edx
  c9:	48 89 ce             	mov    %rcx,%rsi
  cc:	48 89 c7             	mov    %rax,%rdi
  cf:	e8 00 00 00 00       	call   d4 <add_answer_ptr(mdns::ServiceRecord const&, unsigned char*, unsigned int)+0xd4>
  d4:	48 8d 95 f0 fe ff ff 	lea    -0x110(%rbp),%rdx
  db:	48 8b 85 d8 fe ff ff 	mov    -0x128(%rbp),%rax
  e2:	48 89 d6             	mov    %rdx,%rsi
  e5:	48 89 c7             	mov    %rax,%rdi
  e8:	e8 00 00 00 00       	call   ed <add_answer_ptr(mdns::ServiceRecord const&, unsigned char*, unsigned int)+0xed>
  ed:	48 89 85 d8 fe ff ff 	mov    %rax,-0x128(%rbp)
  f4:	48 8b 85 d8 fe ff ff 	mov    -0x128(%rbp),%rax
  fb:	48 2b 85 e8 fe ff ff 	sub    -0x118(%rbp),%rax
 102:	0f b7 c0             	movzwl %ax,%eax
 105:	89 c2                	mov    %eax,%edx
 107:	66 c1 c2 08          	rol    $0x8,%dx
 10b:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
 112:	66 89 10             	mov    %dx,(%rax)
 115:	48 8b 85 d8 fe ff ff 	mov    -0x128(%rbp),%rax
 11c:	48 2b 85 c0 fe ff ff 	sub    -0x140(%rbp),%rax
 123:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
 127:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
 12e:	00 00 
 130:	74 05                	je     137 <add_answer_ptr(mdns::ServiceRecord const&, unsigned char*, unsigned int)+0x137>
 132:	e8 00 00 00 00       	call   137 <add_answer_ptr(mdns::ServiceRecord const&, unsigned char*, unsigned int)+0x137>
 137:	c9                   	leave  
 138:	c3                   	ret    

Disassembly of section .text._ZL19add_answer_dnsd_ptrRKN4mdns13ServiceRecordEPhj:

0000000000000000 <add_answer_dnsd_ptr(mdns::ServiceRecord const&, unsigned char*, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 81 ec 50 01 00 00 	sub    $0x150,%rsp
   f:	48 89 bd c8 fe ff ff 	mov    %rdi,-0x138(%rbp)
  16:	48 89 b5 c0 fe ff ff 	mov    %rsi,-0x140(%rbp)
  1d:	89 95 bc fe ff ff    	mov    %edx,-0x144(%rbp)
  23:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  2a:	00 00 
  2c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  30:	31 c0                	xor    %eax,%eax
  32:	48 8b 85 c0 fe ff ff 	mov    -0x140(%rbp),%rax
  39:	b9 00 00 00 00       	mov    $0x0,%ecx
  3e:	ba 0c 00 00 00       	mov    $0xc,%edx
  43:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4a <add_answer_dnsd_ptr(mdns::ServiceRecord const&, unsigned char*, unsigned int)+0x4a>
  4a:	48 89 c7             	mov    %rax,%rdi
  4d:	e8 00 00 00 00       	call   52 <add_answer_dnsd_ptr(mdns::ServiceRecord const&, unsigned char*, unsigned int)+0x52>
  52:	48 89 85 d8 fe ff ff 	mov    %rax,-0x128(%rbp)
  59:	8b 85 bc fe ff ff    	mov    -0x144(%rbp),%eax
  5f:	0f c8                	bswap  %eax
  61:	89 c2                	mov    %eax,%edx
  63:	48 8b 85 d8 fe ff ff 	mov    -0x128(%rbp),%rax
  6a:	89 10                	mov    %edx,(%rax)
  6c:	48 83 85 d8 fe ff ff 	addq   $0x4,-0x128(%rbp)
  73:	04 
  74:	48 8b 85 d8 fe ff ff 	mov    -0x128(%rbp),%rax
  7b:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
  82:	48 83 85 d8 fe ff ff 	addq   $0x2,-0x128(%rbp)
  89:	02 
  8a:	48 8b 85 d8 fe ff ff 	mov    -0x128(%rbp),%rax
  91:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
  98:	48 8b 8d c8 fe ff ff 	mov    -0x138(%rbp),%rcx
  9f:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
  a6:	ba 00 00 00 00       	mov    $0x0,%edx
  ab:	48 89 ce             	mov    %rcx,%rsi
  ae:	48 89 c7             	mov    %rax,%rdi
  b1:	e8 00 00 00 00       	call   b6 <add_answer_dnsd_ptr(mdns::ServiceRecord const&, unsigned char*, unsigned int)+0xb6>
  b6:	48 8d 95 f0 fe ff ff 	lea    -0x110(%rbp),%rdx
  bd:	48 8b 85 d8 fe ff ff 	mov    -0x128(%rbp),%rax
  c4:	48 89 d6             	mov    %rdx,%rsi
  c7:	48 89 c7             	mov    %rax,%rdi
  ca:	e8 00 00 00 00       	call   cf <add_answer_dnsd_ptr(mdns::ServiceRecord const&, unsigned char*, unsigned int)+0xcf>
  cf:	48 89 85 d8 fe ff ff 	mov    %rax,-0x128(%rbp)
  d6:	48 8b 85 d8 fe ff ff 	mov    -0x128(%rbp),%rax
  dd:	48 2b 85 e8 fe ff ff 	sub    -0x118(%rbp),%rax
  e4:	0f b7 c0             	movzwl %ax,%eax
  e7:	89 c2                	mov    %eax,%edx
  e9:	66 c1 c2 08          	rol    $0x8,%dx
  ed:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
  f4:	66 89 10             	mov    %dx,(%rax)
  f7:	48 8b 85 d8 fe ff ff 	mov    -0x128(%rbp),%rax
  fe:	48 2b 85 c0 fe ff ff 	sub    -0x140(%rbp),%rax
 105:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
 109:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
 110:	00 00 
 112:	74 05                	je     119 <add_answer_dnsd_ptr(mdns::ServiceRecord const&, unsigned char*, unsigned int)+0x119>
 114:	e8 00 00 00 00       	call   119 <add_answer_dnsd_ptr(mdns::ServiceRecord const&, unsigned char*, unsigned int)+0x119>
 119:	c9                   	leave  
 11a:	c3                   	ret    

Disassembly of section .text._ZL12add_answer_aPhj:

0000000000000000 <add_answer_a(unsigned char*, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 81 ec 30 01 00 00 	sub    $0x130,%rsp
   f:	48 89 bd d8 fe ff ff 	mov    %rdi,-0x128(%rbp)
  16:	89 b5 d4 fe ff ff    	mov    %esi,-0x12c(%rbp)
  1c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  23:	00 00 
  25:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  29:	31 c0                	xor    %eax,%eax
  2b:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	call   3a <add_answer_a(unsigned char*, unsigned int)+0x3a>
  3a:	48 8d b5 f0 fe ff ff 	lea    -0x110(%rbp),%rsi
  41:	48 8b 85 d8 fe ff ff 	mov    -0x128(%rbp),%rax
  48:	b9 01 00 00 00       	mov    $0x1,%ecx
  4d:	ba 01 00 00 00       	mov    $0x1,%edx
  52:	48 89 c7             	mov    %rax,%rdi
  55:	e8 00 00 00 00       	call   5a <add_answer_a(unsigned char*, unsigned int)+0x5a>
  5a:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
  61:	8b 85 d4 fe ff ff    	mov    -0x12c(%rbp),%eax
  67:	0f c8                	bswap  %eax
  69:	89 c2                	mov    %eax,%edx
  6b:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
  72:	89 10                	mov    %edx,(%rax)
  74:	48 83 85 e8 fe ff ff 	addq   $0x4,-0x118(%rbp)
  7b:	04 
  7c:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
  83:	66 c7 00 00 04       	movw   $0x400,(%rax)
  88:	48 83 85 e8 fe ff ff 	addq   $0x2,-0x118(%rbp)
  8f:	02 
  90:	e8 00 00 00 00       	call   95 <add_answer_a(unsigned char*, unsigned int)+0x95>
  95:	48 89 c7             	mov    %rax,%rdi
  98:	e8 00 00 00 00       	call   9d <add_answer_a(unsigned char*, unsigned int)+0x9d>
  9d:	48 8b 95 e8 fe ff ff 	mov    -0x118(%rbp),%rdx
  a4:	89 02                	mov    %eax,(%rdx)
  a6:	48 83 85 e8 fe ff ff 	addq   $0x4,-0x118(%rbp)
  ad:	04 
  ae:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
  b5:	48 2b 85 d8 fe ff ff 	sub    -0x128(%rbp),%rax
  bc:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  c0:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  c7:	00 00 
  c9:	74 05                	je     d0 <add_answer_a(unsigned char*, unsigned int)+0xd0>
  cb:	e8 00 00 00 00       	call   d0 <add_answer_a(unsigned char*, unsigned int)+0xd0>
  d0:	c9                   	leave  
  d1:	c3                   	ret    

Disassembly of section .text._ZL21add_answer_hostv4_ptrPhj:

0000000000000000 <add_answer_hostv4_ptr(unsigned char*, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 81 ec 40 01 00 00 	sub    $0x140,%rsp
   f:	48 89 bd c8 fe ff ff 	mov    %rdi,-0x138(%rbp)
  16:	89 b5 c4 fe ff ff    	mov    %esi,-0x13c(%rbp)
  1c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  23:	00 00 
  25:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  29:	31 c0                	xor    %eax,%eax
  2b:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	call   3a <add_answer_hostv4_ptr(unsigned char*, unsigned int)+0x3a>
  3a:	48 8d b5 f0 fe ff ff 	lea    -0x110(%rbp),%rsi
  41:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
  48:	b9 01 00 00 00       	mov    $0x1,%ecx
  4d:	ba 0c 00 00 00       	mov    $0xc,%edx
  52:	48 89 c7             	mov    %rax,%rdi
  55:	e8 00 00 00 00       	call   5a <add_answer_hostv4_ptr(unsigned char*, unsigned int)+0x5a>
  5a:	48 89 85 d8 fe ff ff 	mov    %rax,-0x128(%rbp)
  61:	8b 85 c4 fe ff ff    	mov    -0x13c(%rbp),%eax
  67:	0f c8                	bswap  %eax
  69:	89 c2                	mov    %eax,%edx
  6b:	48 8b 85 d8 fe ff ff 	mov    -0x128(%rbp),%rax
  72:	89 10                	mov    %edx,(%rax)
  74:	48 83 85 d8 fe ff ff 	addq   $0x4,-0x128(%rbp)
  7b:	04 
  7c:	48 8b 85 d8 fe ff ff 	mov    -0x128(%rbp),%rax
  83:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
  8a:	48 83 85 d8 fe ff ff 	addq   $0x2,-0x128(%rbp)
  91:	02 
  92:	48 8b 85 d8 fe ff ff 	mov    -0x128(%rbp),%rax
  99:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
  a0:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
  a7:	48 89 c7             	mov    %rax,%rdi
  aa:	e8 00 00 00 00       	call   af <add_answer_hostv4_ptr(unsigned char*, unsigned int)+0xaf>
  af:	48 8d 95 f0 fe ff ff 	lea    -0x110(%rbp),%rdx
  b6:	48 8b 85 d8 fe ff ff 	mov    -0x128(%rbp),%rax
  bd:	48 89 d6             	mov    %rdx,%rsi
  c0:	48 89 c7             	mov    %rax,%rdi
  c3:	e8 00 00 00 00       	call   c8 <add_answer_hostv4_ptr(unsigned char*, unsigned int)+0xc8>
  c8:	48 89 85 d8 fe ff ff 	mov    %rax,-0x128(%rbp)
  cf:	48 8b 85 d8 fe ff ff 	mov    -0x128(%rbp),%rax
  d6:	48 2b 85 e8 fe ff ff 	sub    -0x118(%rbp),%rax
  dd:	0f b7 c0             	movzwl %ax,%eax
  e0:	89 c2                	mov    %eax,%edx
  e2:	66 c1 c2 08          	rol    $0x8,%dx
  e6:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
  ed:	66 89 10             	mov    %dx,(%rax)
  f0:	48 8b 85 d8 fe ff ff 	mov    -0x128(%rbp),%rax
  f7:	48 2b 85 c8 fe ff ff 	sub    -0x138(%rbp),%rax
  fe:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
 102:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
 109:	00 00 
 10b:	74 05                	je     112 <add_answer_hostv4_ptr(unsigned char*, unsigned int)+0x112>
 10d:	e8 00 00 00 00       	call   112 <add_answer_hostv4_ptr(unsigned char*, unsigned int)+0x112>
 112:	c9                   	leave  
 113:	c3                   	ret    

Disassembly of section .text._Z15get_domain_namePKhS0_S0_Ph:

0000000000000000 <get_domain_name(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 50          	sub    $0x50,%rsp
   c:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  10:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  14:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  18:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  1c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  23:	00 00 
  25:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  29:	31 c0                	xor    %eax,%eax
  2b:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  32:	00 
  33:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  37:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  3b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3f:	48 05 00 01 00 00    	add    $0x100,%rax
  45:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  49:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  4d:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  51:	72 0a                	jb     5d <get_domain_name(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*)+0x5d>
  53:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  57:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  5b:	72 0a                	jb     67 <get_domain_name(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*)+0x67>
  5d:	b8 00 00 00 00       	mov    $0x0,%eax
  62:	e9 91 01 00 00       	jmp    1f8 <get_domain_name(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*)+0x1f8>
  67:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  6b:	c6 00 00             	movb   $0x0,(%rax)
  6e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  72:	48 8d 50 01          	lea    0x1(%rax),%rdx
  76:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  7a:	0f b6 00             	movzbl (%rax),%eax
  7d:	88 45 d9             	mov    %al,-0x27(%rbp)
  80:	80 7d d9 00          	cmpb   $0x0,-0x27(%rbp)
  84:	0f 84 5c 01 00 00    	je     1e6 <get_domain_name(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*)+0x1e6>
  8a:	0f b6 45 d9          	movzbl -0x27(%rbp),%eax
  8e:	25 c0 00 00 00       	and    $0xc0,%eax
  93:	3d c0 00 00 00       	cmp    $0xc0,%eax
  98:	0f 84 ca 00 00 00    	je     168 <get_domain_name(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*)+0x168>
  9e:	3d c0 00 00 00       	cmp    $0xc0,%eax
  a3:	7f c9                	jg     6e <get_domain_name(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*)+0x6e>
  a5:	3d 80 00 00 00       	cmp    $0x80,%eax
  aa:	0f 84 ae 00 00 00    	je     15e <get_domain_name(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*)+0x15e>
  b0:	3d 80 00 00 00       	cmp    $0x80,%eax
  b5:	7f b7                	jg     6e <get_domain_name(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*)+0x6e>
  b7:	85 c0                	test   %eax,%eax
  b9:	74 0e                	je     c9 <get_domain_name(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*)+0xc9>
  bb:	83 f8 40             	cmp    $0x40,%eax
  be:	0f 84 90 00 00 00    	je     154 <get_domain_name(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*)+0x154>
  c4:	e9 18 01 00 00       	jmp    1e1 <get_domain_name(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*)+0x1e1>
  c9:	0f b6 55 d9          	movzbl -0x27(%rbp),%edx
  cd:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  d1:	48 01 d0             	add    %rdx,%rax
  d4:	48 39 45 b8          	cmp    %rax,-0x48(%rbp)
  d8:	77 0a                	ja     e4 <get_domain_name(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*)+0xe4>
  da:	b8 00 00 00 00       	mov    $0x0,%eax
  df:	e9 14 01 00 00       	jmp    1f8 <get_domain_name(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*)+0x1f8>
  e4:	0f b6 45 d9          	movzbl -0x27(%rbp),%eax
  e8:	48 8d 50 01          	lea    0x1(%rax),%rdx
  ec:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  f0:	48 01 d0             	add    %rdx,%rax
  f3:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  f7:	77 0a                	ja     103 <get_domain_name(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*)+0x103>
  f9:	b8 00 00 00 00       	mov    $0x0,%eax
  fe:	e9 f5 00 00 00       	jmp    1f8 <get_domain_name(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*)+0x1f8>
 103:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 107:	48 8d 50 01          	lea    0x1(%rax),%rdx
 10b:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
 10f:	0f b6 55 d9          	movzbl -0x27(%rbp),%edx
 113:	88 10                	mov    %dl,(%rax)
 115:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%rbp)
 11c:	eb 21                	jmp    13f <get_domain_name(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*)+0x13f>
 11e:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
 122:	48 8d 42 01          	lea    0x1(%rdx),%rax
 126:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
 12a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 12e:	48 8d 48 01          	lea    0x1(%rax),%rcx
 132:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
 136:	0f b6 12             	movzbl (%rdx),%edx
 139:	88 10                	mov    %dl,(%rax)
 13b:	83 45 dc 01          	addl   $0x1,-0x24(%rbp)
 13f:	0f b6 45 d9          	movzbl -0x27(%rbp),%eax
 143:	39 45 dc             	cmp    %eax,-0x24(%rbp)
 146:	7c d6                	jl     11e <get_domain_name(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*)+0x11e>
 148:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 14c:	c6 00 00             	movb   $0x0,(%rax)
 14f:	e9 8d 00 00 00       	jmp    1e1 <get_domain_name(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*)+0x1e1>
 154:	b8 00 00 00 00       	mov    $0x0,%eax
 159:	e9 9a 00 00 00       	jmp    1f8 <get_domain_name(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*)+0x1f8>
 15e:	b8 00 00 00 00       	mov    $0x0,%eax
 163:	e9 90 00 00 00       	jmp    1f8 <get_domain_name(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*)+0x1f8>
 168:	0f b6 45 d9          	movzbl -0x27(%rbp),%eax
 16c:	c1 e0 08             	shl    $0x8,%eax
 16f:	66 25 00 3f          	and    $0x3f00,%ax
 173:	89 c1                	mov    %eax,%ecx
 175:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
 179:	48 8d 50 01          	lea    0x1(%rax),%rdx
 17d:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
 181:	0f b6 00             	movzbl (%rax),%eax
 184:	0f b6 c0             	movzbl %al,%eax
 187:	09 c8                	or     %ecx,%eax
 189:	66 89 45 da          	mov    %ax,-0x26(%rbp)
 18d:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
 192:	75 08                	jne    19c <get_domain_name(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*)+0x19c>
 194:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
 198:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
 19c:	0f b7 55 da          	movzwl -0x26(%rbp),%edx
 1a0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 1a4:	48 01 d0             	add    %rdx,%rax
 1a7:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
 1ab:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
 1af:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
 1b3:	72 0a                	jb     1bf <get_domain_name(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*)+0x1bf>
 1b5:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
 1b9:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
 1bd:	72 07                	jb     1c6 <get_domain_name(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*)+0x1c6>
 1bf:	b8 00 00 00 00       	mov    $0x0,%eax
 1c4:	eb 32                	jmp    1f8 <get_domain_name(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*)+0x1f8>
 1c6:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
 1ca:	0f b6 00             	movzbl (%rax),%eax
 1cd:	0f b6 c0             	movzbl %al,%eax
 1d0:	25 c0 00 00 00       	and    $0xc0,%eax
 1d5:	85 c0                	test   %eax,%eax
 1d7:	74 07                	je     1e0 <get_domain_name(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*)+0x1e0>
 1d9:	b8 00 00 00 00       	mov    $0x0,%eax
 1de:	eb 18                	jmp    1f8 <get_domain_name(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*)+0x1f8>
 1e0:	90                   	nop
 1e1:	e9 88 fe ff ff       	jmp    6e <get_domain_name(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*)+0x6e>
 1e6:	90                   	nop
 1e7:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
 1ec:	74 06                	je     1f4 <get_domain_name(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*)+0x1f4>
 1ee:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
 1f2:	eb 04                	jmp    1f8 <get_domain_name(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*)+0x1f8>
 1f4:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
 1f8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
 1fc:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
 203:	00 00 
 205:	74 05                	je     20c <get_domain_name(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*)+0x20c>
 207:	e8 00 00 00 00       	call   20c <get_domain_name(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*)+0x20c>
 20c:	c9                   	leave  
 20d:	c3                   	ret    

Disassembly of section .text._ZN4MDNS24SendAnswerLocalIpAddressEtj:

0000000000000000 <MDNS::SendAnswerLocalIpAddress(unsigned short, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 81 ec 40 01 00 00 	sub    $0x140,%rsp
   f:	48 89 bd c8 fe ff ff 	mov    %rdi,-0x138(%rbp)
  16:	89 f0                	mov    %esi,%eax
  18:	89 95 c0 fe ff ff    	mov    %edx,-0x140(%rbp)
  1e:	66 89 85 c4 fe ff ff 	mov    %ax,-0x13c(%rbp)
  25:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  2c:	00 00 
  2e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  32:	31 c0                	xor    %eax,%eax
  34:	c7 85 dc fe ff ff 00 	movl   $0x0,-0x124(%rbp)
  3b:	00 00 00 
  3e:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 45 <MDNS::SendAnswerLocalIpAddress(unsigned short, unsigned int)+0x45>
  45:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
  4c:	8b 05 00 00 00 00    	mov    0x0(%rip),%eax        # 52 <MDNS::SendAnswerLocalIpAddress(unsigned short, unsigned int)+0x52>
  52:	89 c6                	mov    %eax,%esi
  54:	bf 02 00 00 00       	mov    $0x2,%edi
  59:	e8 00 00 00 00       	call   5e <MDNS::SendAnswerLocalIpAddress(unsigned short, unsigned int)+0x5e>
  5e:	83 f8 02             	cmp    $0x2,%eax
  61:	0f 94 c0             	sete   %al
  64:	84 c0                	test   %al,%al
  66:	74 41                	je     a9 <MDNS::SendAnswerLocalIpAddress(unsigned short, unsigned int)+0xa9>
  68:	0f b6 05 00 00 00 00 	movzbl 0x0(%rip),%eax        # 6f <MDNS::SendAnswerLocalIpAddress(unsigned short, unsigned int)+0x6f>
  6f:	84 c0                	test   %al,%al
  71:	74 36                	je     a9 <MDNS::SendAnswerLocalIpAddress(unsigned short, unsigned int)+0xa9>
  73:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
  7a:	48 89 c7             	mov    %rax,%rdi
  7d:	e8 00 00 00 00       	call   82 <MDNS::SendAnswerLocalIpAddress(unsigned short, unsigned int)+0x82>
  82:	48 8d b5 f0 fe ff ff 	lea    -0x110(%rbp),%rsi
  89:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
  90:	b9 00 00 00 00       	mov    $0x0,%ecx
  95:	ba 0c 00 00 00       	mov    $0xc,%edx
  9a:	48 89 c7             	mov    %rax,%rdi
  9d:	e8 00 00 00 00       	call   a2 <MDNS::SendAnswerLocalIpAddress(unsigned short, unsigned int)+0xa2>
  a2:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
  a9:	8b 05 00 00 00 00    	mov    0x0(%rip),%eax        # af <MDNS::SendAnswerLocalIpAddress(unsigned short, unsigned int)+0xaf>
  af:	89 c6                	mov    %eax,%esi
  b1:	bf 01 00 00 00       	mov    $0x1,%edi
  b6:	e8 00 00 00 00       	call   bb <MDNS::SendAnswerLocalIpAddress(unsigned short, unsigned int)+0xbb>
  bb:	83 f8 01             	cmp    $0x1,%eax
  be:	0f 94 c0             	sete   %al
  c1:	84 c0                	test   %al,%al
  c3:	74 27                	je     ec <MDNS::SendAnswerLocalIpAddress(unsigned short, unsigned int)+0xec>
  c5:	83 85 dc fe ff ff 01 	addl   $0x1,-0x124(%rbp)
  cc:	8b 95 c0 fe ff ff    	mov    -0x140(%rbp),%edx
  d2:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
  d9:	89 d6                	mov    %edx,%esi
  db:	48 89 c7             	mov    %rax,%rdi
  de:	e8 00 00 00 00       	call   e3 <MDNS::SendAnswerLocalIpAddress(unsigned short, unsigned int)+0xe3>
  e3:	89 c0                	mov    %eax,%eax
  e5:	48 01 85 e0 fe ff ff 	add    %rax,-0x120(%rbp)
  ec:	8b 05 00 00 00 00    	mov    0x0(%rip),%eax        # f2 <MDNS::SendAnswerLocalIpAddress(unsigned short, unsigned int)+0xf2>
  f2:	89 c6                	mov    %eax,%esi
  f4:	bf 02 00 00 00       	mov    $0x2,%edi
  f9:	e8 00 00 00 00       	call   fe <MDNS::SendAnswerLocalIpAddress(unsigned short, unsigned int)+0xfe>
  fe:	83 f8 02             	cmp    $0x2,%eax
 101:	0f 94 c0             	sete   %al
 104:	84 c0                	test   %al,%al
 106:	74 27                	je     12f <MDNS::SendAnswerLocalIpAddress(unsigned short, unsigned int)+0x12f>
 108:	83 85 dc fe ff ff 01 	addl   $0x1,-0x124(%rbp)
 10f:	8b 95 c0 fe ff ff    	mov    -0x140(%rbp),%edx
 115:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
 11c:	89 d6                	mov    %edx,%esi
 11e:	48 89 c7             	mov    %rax,%rdi
 121:	e8 00 00 00 00       	call   126 <MDNS::SendAnswerLocalIpAddress(unsigned short, unsigned int)+0x126>
 126:	89 c0                	mov    %eax,%eax
 128:	48 01 85 e0 fe ff ff 	add    %rax,-0x120(%rbp)
 12f:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 136 <MDNS::SendAnswerLocalIpAddress(unsigned short, unsigned int)+0x136>
 136:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
 13d:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
 144:	0f b7 95 c4 fe ff ff 	movzwl -0x13c(%rbp),%edx
 14b:	66 89 10             	mov    %dx,(%rax)
 14e:	be 04 00 00 00       	mov    $0x4,%esi
 153:	bf 80 ff ff ff       	mov    $0xffffff80,%edi
 158:	e8 00 00 00 00       	call   15d <MDNS::SendAnswerLocalIpAddress(unsigned short, unsigned int)+0x15d>
 15d:	48 8b 95 e8 fe ff ff 	mov    -0x118(%rbp),%rdx
 164:	88 42 02             	mov    %al,0x2(%rdx)
 167:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
 16e:	c6 40 03 00          	movb   $0x0,0x3(%rax)
 172:	0f b6 05 00 00 00 00 	movzbl 0x0(%rip),%eax        # 179 <MDNS::SendAnswerLocalIpAddress(unsigned short, unsigned int)+0x179>
 179:	0f b6 c0             	movzbl %al,%eax
 17c:	89 c2                	mov    %eax,%edx
 17e:	66 c1 c2 08          	rol    $0x8,%dx
 182:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
 189:	66 89 50 04          	mov    %dx,0x4(%rax)
 18d:	8b 85 dc fe ff ff    	mov    -0x124(%rbp),%eax
 193:	0f b7 c0             	movzwl %ax,%eax
 196:	89 c2                	mov    %eax,%edx
 198:	66 c1 c2 08          	rol    $0x8,%dx
 19c:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
 1a3:	66 89 50 06          	mov    %dx,0x6(%rax)
 1a7:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
 1ae:	66 c7 40 08 00 00    	movw   $0x0,0x8(%rax)
 1b4:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
 1bb:	66 c7 40 0a 00 00    	movw   $0x0,0xa(%rax)
 1c1:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
 1c8:	48 2b 85 e8 fe ff ff 	sub    -0x118(%rbp),%rax
 1cf:	66 89 85 da fe ff ff 	mov    %ax,-0x126(%rbp)
 1d6:	0f b7 95 da fe ff ff 	movzwl -0x126(%rbp),%edx
 1dd:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
 1e4:	89 d6                	mov    %edx,%esi
 1e6:	48 89 c7             	mov    %rax,%rdi
 1e9:	e8 00 00 00 00       	call   1ee <MDNS::SendAnswerLocalIpAddress(unsigned short, unsigned int)+0x1ee>
 1ee:	90                   	nop
 1ef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 1f3:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 1fa:	00 00 
 1fc:	74 05                	je     203 <MDNS::SendAnswerLocalIpAddress(unsigned short, unsigned int)+0x203>
 1fe:	e8 00 00 00 00       	call   203 <MDNS::SendAnswerLocalIpAddress(unsigned short, unsigned int)+0x203>
 203:	c9                   	leave  
 204:	c3                   	ret    

Disassembly of section .text._ZN4MDNSC2Ev:

0000000000000000 <MDNS::MDNS()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 40          	sub    $0x40,%rsp
   c:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  23:	48 89 05 00 00 00 00 	mov    %rax,0x0(%rip)        # 2a <MDNS::MDNS()+0x2a>
  2a:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 31 <MDNS::MDNS()+0x31>
  31:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  35:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 3c <MDNS::MDNS()+0x3c>
  3c:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  40:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 47 <MDNS::MDNS()+0x47>
  47:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  4b:	eb 18                	jmp    65 <MDNS::MDNS()+0x65>
  4d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  51:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  55:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  59:	c7 40 14 09 00 00 00 	movl   $0x9,0x14(%rax)
  60:	48 83 45 d8 18       	addq   $0x18,-0x28(%rbp)
  65:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  69:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  6d:	75 de                	jne    4d <MDNS::MDNS()+0x4d>
  6f:	e8 00 00 00 00       	call   74 <MDNS::MDNS()+0x74>
  74:	be e9 14 00 00       	mov    $0x14e9,%esi
  79:	48 89 c7             	mov    %rax,%rdi
  7c:	e8 00 00 00 00       	call   81 <MDNS::MDNS()+0x81>
  81:	89 05 00 00 00 00    	mov    %eax,0x0(%rip)        # 87 <MDNS::MDNS()+0x87>
  87:	e8 00 00 00 00       	call   8c <MDNS::MDNS()+0x8c>
  8c:	48 89 c1             	mov    %rax,%rcx
  8f:	8b 05 00 00 00 00    	mov    0x0(%rip),%eax        # 95 <MDNS::MDNS()+0x95>
  95:	ba e0 00 00 fb       	mov    $0xfb0000e0,%edx
  9a:	89 c6                	mov    %eax,%esi
  9c:	48 89 cf             	mov    %rcx,%rdi
  9f:	e8 00 00 00 00       	call   a4 <MDNS::MDNS()+0xa4>
  a4:	e8 00 00 00 00       	call   a9 <MDNS::MDNS()+0xa9>
  a9:	48 89 c2             	mov    %rax,%rdx
  ac:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # b3 <MDNS::MDNS()+0xb3>
  b3:	48 89 c6             	mov    %rax,%rsi
  b6:	48 89 d7             	mov    %rdx,%rdi
  b9:	e8 00 00 00 00       	call   be <MDNS::MDNS()+0xbe>
  be:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  c2:	be 10 0e 00 00       	mov    $0xe10,%esi
  c7:	48 89 c7             	mov    %rax,%rdi
  ca:	e8 00 00 00 00       	call   cf <MDNS::MDNS()+0xcf>
  cf:	90                   	nop
  d0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  d4:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  db:	00 00 
  dd:	74 05                	je     e4 <MDNS::MDNS()+0xe4>
  df:	e8 00 00 00 00       	call   e4 <MDNS::MDNS()+0xe4>
  e4:	c9                   	leave  
  e5:	c3                   	ret    

Disassembly of section .text._ZN4MDNSD2Ev:

0000000000000000 <MDNS::~MDNS()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 40          	sub    $0x40,%rsp
   c:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  23:	be 00 00 00 00       	mov    $0x0,%esi
  28:	48 89 c7             	mov    %rax,%rdi
  2b:	e8 00 00 00 00       	call   30 <MDNS::~MDNS()+0x30>
  30:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 37 <MDNS::~MDNS()+0x37>
  37:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  3b:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 42 <MDNS::~MDNS()+0x42>
  42:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  46:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 4d <MDNS::~MDNS()+0x4d>
  4d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  51:	eb 5e                	jmp    b1 <MDNS::~MDNS()+0xb1>
  53:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  57:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  5b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  5f:	48 8b 00             	mov    (%rax),%rax
  62:	48 85 c0             	test   %rax,%rax
  65:	74 1b                	je     82 <MDNS::~MDNS()+0x82>
  67:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  6b:	48 8b 00             	mov    (%rax),%rax
  6e:	48 85 c0             	test   %rax,%rax
  71:	74 0f                	je     82 <MDNS::~MDNS()+0x82>
  73:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  77:	48 8b 00             	mov    (%rax),%rax
  7a:	48 89 c7             	mov    %rax,%rdi
  7d:	e8 00 00 00 00       	call   82 <MDNS::~MDNS()+0x82>
  82:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  86:	48 8b 40 08          	mov    0x8(%rax),%rax
  8a:	48 85 c0             	test   %rax,%rax
  8d:	74 1d                	je     ac <MDNS::~MDNS()+0xac>
  8f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  93:	48 8b 40 08          	mov    0x8(%rax),%rax
  97:	48 85 c0             	test   %rax,%rax
  9a:	74 10                	je     ac <MDNS::~MDNS()+0xac>
  9c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  a0:	48 8b 40 08          	mov    0x8(%rax),%rax
  a4:	48 89 c7             	mov    %rax,%rdi
  a7:	e8 00 00 00 00       	call   ac <MDNS::~MDNS()+0xac>
  ac:	48 83 45 d8 18       	addq   $0x18,-0x28(%rbp)
  b1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  b5:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  b9:	75 98                	jne    53 <MDNS::~MDNS()+0x53>
  bb:	e8 00 00 00 00       	call   c0 <MDNS::~MDNS()+0xc0>
  c0:	48 89 c1             	mov    %rax,%rcx
  c3:	8b 05 00 00 00 00    	mov    0x0(%rip),%eax        # c9 <MDNS::~MDNS()+0xc9>
  c9:	ba e0 00 00 fb       	mov    $0xfb0000e0,%edx
  ce:	89 c6                	mov    %eax,%esi
  d0:	48 89 cf             	mov    %rcx,%rdi
  d3:	e8 00 00 00 00       	call   d8 <MDNS::~MDNS()+0xd8>
  d8:	e8 00 00 00 00       	call   dd <MDNS::~MDNS()+0xdd>
  dd:	be e9 14 00 00       	mov    $0x14e9,%esi
  e2:	48 89 c7             	mov    %rax,%rdi
  e5:	e8 00 00 00 00       	call   ea <MDNS::~MDNS()+0xea>
  ea:	c7 05 00 00 00 00 ff 	movl   $0xffffffff,0x0(%rip)        # f4 <MDNS::~MDNS()+0xf4>
  f1:	ff ff ff 
  f4:	90                   	nop
  f5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  f9:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 100:	00 00 
 102:	74 05                	je     109 <MDNS::~MDNS()+0x109>
 104:	e8 00 00 00 00       	call   109 <MDNS::~MDNS()+0x109>
 109:	c9                   	leave  
 10a:	c3                   	ret    

Disassembly of section .text._ZN4MDNS16SendAnnouncementEj:

0000000000000000 <MDNS::SendAnnouncement(unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 40          	sub    $0x40,%rsp
   c:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  10:	89 75 c4             	mov    %esi,-0x3c(%rbp)
  13:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1a:	00 00 
  1c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  20:	31 c0                	xor    %eax,%eax
  22:	66 c7 05 00 00 00 00 	movw   $0x14e9,0x0(%rip)        # 2b <MDNS::SendAnnouncement(unsigned int)+0x2b>
  29:	e9 14 
  2b:	c7 05 00 00 00 00 01 	movl   $0x1,0x0(%rip)        # 35 <MDNS::SendAnnouncement(unsigned int)+0x35>
  32:	00 00 00 
  35:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  38:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  3c:	be 00 00 00 00       	mov    $0x0,%esi
  41:	48 89 c7             	mov    %rax,%rdi
  44:	e8 00 00 00 00       	call   49 <MDNS::SendAnnouncement(unsigned int)+0x49>
  49:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 50 <MDNS::SendAnnouncement(unsigned int)+0x50>
  50:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  54:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 5b <MDNS::SendAnnouncement(unsigned int)+0x5b>
  5b:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  5f:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 66 <MDNS::SendAnnouncement(unsigned int)+0x66>
  66:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  6a:	eb 60                	jmp    cc <MDNS::SendAnnouncement(unsigned int)+0xcc>
  6c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  70:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  74:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  78:	8b 40 14             	mov    0x14(%rax),%eax
  7b:	83 f8 08             	cmp    $0x8,%eax
  7e:	7f 47                	jg     c7 <MDNS::SendAnnouncement(unsigned int)+0xc7>
  80:	be 20 00 00 00       	mov    $0x20,%esi
  85:	bf 10 00 00 00       	mov    $0x10,%edi
  8a:	e8 00 00 00 00       	call   8f <MDNS::SendAnnouncement(unsigned int)+0x8f>
  8f:	be 40 00 00 00       	mov    $0x40,%esi
  94:	89 c7                	mov    %eax,%edi
  96:	e8 00 00 00 00       	call   9b <MDNS::SendAnnouncement(unsigned int)+0x9b>
  9b:	be 80 00 00 00       	mov    $0x80,%esi
  a0:	89 c7                	mov    %eax,%edi
  a2:	e8 00 00 00 00       	call   a7 <MDNS::SendAnnouncement(unsigned int)+0xa7>
  a7:	89 05 00 00 00 00    	mov    %eax,0x0(%rip)        # ad <MDNS::SendAnnouncement(unsigned int)+0xad>
  ad:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  b0:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  b4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  b8:	89 d1                	mov    %edx,%ecx
  ba:	ba 00 00 00 00       	mov    $0x0,%edx
  bf:	48 89 c7             	mov    %rax,%rdi
  c2:	e8 00 00 00 00       	call   c7 <MDNS::SendAnnouncement(unsigned int)+0xc7>
  c7:	48 83 45 d8 18       	addq   $0x18,-0x28(%rbp)
  cc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  d0:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  d4:	75 96                	jne    6c <MDNS::SendAnnouncement(unsigned int)+0x6c>
  d6:	90                   	nop
  d7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  db:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  e2:	00 00 
  e4:	74 05                	je     eb <MDNS::SendAnnouncement(unsigned int)+0xeb>
  e6:	e8 00 00 00 00       	call   eb <MDNS::SendAnnouncement(unsigned int)+0xeb>
  eb:	c9                   	leave  
  ec:	c3                   	ret    

Disassembly of section .text._ZN4MDNS16AddServiceRecordEPKcN4mdns8ServicesES1_t:

0000000000000000 <MDNS::AddServiceRecord(char const*, mdns::Services, char const*, unsigned short)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 60          	sub    $0x60,%rsp
   c:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  10:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  14:	89 55 ac             	mov    %edx,-0x54(%rbp)
  17:	48 89 4d a0          	mov    %rcx,-0x60(%rbp)
  1b:	44 89 c0             	mov    %r8d,%eax
  1e:	66 89 45 a8          	mov    %ax,-0x58(%rbp)
  22:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  29:	00 00 
  2b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  2f:	31 c0                	xor    %eax,%eax
  31:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 38 <MDNS::AddServiceRecord(char const*, mdns::Services, char const*, unsigned short)+0x38>
  38:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  3c:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 43 <MDNS::AddServiceRecord(char const*, mdns::Services, char const*, unsigned short)+0x43>
  43:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  47:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 4e <MDNS::AddServiceRecord(char const*, mdns::Services, char const*, unsigned short)+0x4e>
  4e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  52:	e9 cc 01 00 00       	jmp    223 <MDNS::AddServiceRecord(char const*, mdns::Services, char const*, unsigned short)+0x223>
  57:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  5b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  5f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  63:	8b 40 14             	mov    0x14(%rax),%eax
  66:	83 f8 09             	cmp    $0x9,%eax
  69:	0f 85 af 01 00 00    	jne    21e <MDNS::AddServiceRecord(char const*, mdns::Services, char const*, unsigned short)+0x21e>
  6f:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
  74:	0f 84 83 00 00 00    	je     fd <MDNS::AddServiceRecord(char const*, mdns::Services, char const*, unsigned short)+0xfd>
  7a:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  7e:	48 89 c7             	mov    %rax,%rdi
  81:	e8 00 00 00 00       	call   86 <MDNS::AddServiceRecord(char const*, mdns::Services, char const*, unsigned short)+0x86>
  86:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  8a:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  8e:	48 89 c6             	mov    %rax,%rsi
  91:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 98 <MDNS::AddServiceRecord(char const*, mdns::Services, char const*, unsigned short)+0x98>
  98:	48 89 c7             	mov    %rax,%rdi
  9b:	e8 00 00 00 00       	call   a0 <MDNS::AddServiceRecord(char const*, mdns::Services, char const*, unsigned short)+0xa0>
  a0:	48 8b 00             	mov    (%rax),%rax
  a3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  a7:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  ac:	75 0a                	jne    b8 <MDNS::AddServiceRecord(char const*, mdns::Services, char const*, unsigned short)+0xb8>
  ae:	b8 00 00 00 00       	mov    $0x0,%eax
  b3:	e9 7e 01 00 00       	jmp    236 <MDNS::AddServiceRecord(char const*, mdns::Services, char const*, unsigned short)+0x236>
  b8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  bc:	48 83 c0 01          	add    $0x1,%rax
  c0:	48 89 c7             	mov    %rax,%rdi
  c3:	e8 00 00 00 00       	call   c8 <MDNS::AddServiceRecord(char const*, mdns::Services, char const*, unsigned short)+0xc8>
  c8:	48 89 c2             	mov    %rax,%rdx
  cb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  cf:	48 89 10             	mov    %rdx,(%rax)
  d2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  d6:	48 8b 00             	mov    (%rax),%rax
  d9:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  dd:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  e1:	48 89 ce             	mov    %rcx,%rsi
  e4:	48 89 c7             	mov    %rax,%rdi
  e7:	e8 00 00 00 00       	call   ec <MDNS::AddServiceRecord(char const*, mdns::Services, char const*, unsigned short)+0xec>
  ec:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  f0:	48 8b 10             	mov    (%rax),%rdx
  f3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  f7:	48 01 d0             	add    %rdx,%rax
  fa:	c6 00 00             	movb   $0x0,(%rax)
  fd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
 101:	8b 55 ac             	mov    -0x54(%rbp),%edx
 104:	89 50 14             	mov    %edx,0x14(%rax)
 107:	66 83 7d a8 00       	cmpw   $0x0,-0x58(%rbp)
 10c:	75 33                	jne    141 <MDNS::AddServiceRecord(char const*, mdns::Services, char const*, unsigned short)+0x141>
 10e:	8b 45 ac             	mov    -0x54(%rbp),%eax
 111:	89 c2                	mov    %eax,%edx
 113:	48 89 d0             	mov    %rdx,%rax
 116:	48 01 c0             	add    %rax,%rax
 119:	48 01 d0             	add    %rdx,%rax
 11c:	48 c1 e0 03          	shl    $0x3,%rax
 120:	48 89 c2             	mov    %rax,%rdx
 123:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 12a <MDNS::AddServiceRecord(char const*, mdns::Services, char const*, unsigned short)+0x12a>
 12a:	0f b7 04 02          	movzwl (%rdx,%rax,1),%eax
 12e:	0f b7 c0             	movzwl %ax,%eax
 131:	89 c2                	mov    %eax,%edx
 133:	66 c1 c2 08          	rol    $0x8,%dx
 137:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
 13b:	66 89 50 12          	mov    %dx,0x12(%rax)
 13f:	eb 12                	jmp    153 <MDNS::AddServiceRecord(char const*, mdns::Services, char const*, unsigned short)+0x153>
 141:	0f b7 45 a8          	movzwl -0x58(%rbp),%eax
 145:	89 c2                	mov    %eax,%edx
 147:	66 c1 c2 08          	rol    $0x8,%dx
 14b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
 14f:	66 89 50 12          	mov    %dx,0x12(%rax)
 153:	48 83 7d a0 00       	cmpq   $0x0,-0x60(%rbp)
 158:	74 6d                	je     1c7 <MDNS::AddServiceRecord(char const*, mdns::Services, char const*, unsigned short)+0x1c7>
 15a:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
 15e:	48 89 c7             	mov    %rax,%rdi
 161:	e8 00 00 00 00       	call   166 <MDNS::AddServiceRecord(char const*, mdns::Services, char const*, unsigned short)+0x166>
 166:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
 16a:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
 16e:	48 89 c6             	mov    %rax,%rsi
 171:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 178 <MDNS::AddServiceRecord(char const*, mdns::Services, char const*, unsigned short)+0x178>
 178:	48 89 c7             	mov    %rax,%rdi
 17b:	e8 00 00 00 00       	call   180 <MDNS::AddServiceRecord(char const*, mdns::Services, char const*, unsigned short)+0x180>
 180:	48 8b 00             	mov    (%rax),%rax
 183:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
 187:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 18b:	48 89 c7             	mov    %rax,%rdi
 18e:	e8 00 00 00 00       	call   193 <MDNS::AddServiceRecord(char const*, mdns::Services, char const*, unsigned short)+0x193>
 193:	48 89 c2             	mov    %rax,%rdx
 196:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
 19a:	48 89 50 08          	mov    %rdx,0x8(%rax)
 19e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
 1a2:	48 8b 40 08          	mov    0x8(%rax),%rax
 1a6:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
 1aa:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
 1ae:	48 89 ce             	mov    %rcx,%rsi
 1b1:	48 89 c7             	mov    %rax,%rdi
 1b4:	e8 00 00 00 00       	call   1b9 <MDNS::AddServiceRecord(char const*, mdns::Services, char const*, unsigned short)+0x1b9>
 1b9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 1bd:	89 c2                	mov    %eax,%edx
 1bf:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
 1c3:	66 89 50 10          	mov    %dx,0x10(%rax)
 1c7:	66 c7 05 00 00 00 00 	movw   $0x14e9,0x0(%rip)        # 1d0 <MDNS::AddServiceRecord(char const*, mdns::Services, char const*, unsigned short)+0x1d0>
 1ce:	e9 14 
 1d0:	be 20 00 00 00       	mov    $0x20,%esi
 1d5:	bf 10 00 00 00       	mov    $0x10,%edi
 1da:	e8 00 00 00 00       	call   1df <MDNS::AddServiceRecord(char const*, mdns::Services, char const*, unsigned short)+0x1df>
 1df:	be 40 00 00 00       	mov    $0x40,%esi
 1e4:	89 c7                	mov    %eax,%edi
 1e6:	e8 00 00 00 00       	call   1eb <MDNS::AddServiceRecord(char const*, mdns::Services, char const*, unsigned short)+0x1eb>
 1eb:	be 80 00 00 00       	mov    $0x80,%esi
 1f0:	89 c7                	mov    %eax,%edi
 1f2:	e8 00 00 00 00       	call   1f7 <MDNS::AddServiceRecord(char const*, mdns::Services, char const*, unsigned short)+0x1f7>
 1f7:	89 05 00 00 00 00    	mov    %eax,0x0(%rip)        # 1fd <MDNS::AddServiceRecord(char const*, mdns::Services, char const*, unsigned short)+0x1fd>
 1fd:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
 201:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 205:	b9 10 0e 00 00       	mov    $0xe10,%ecx
 20a:	ba 00 00 00 00       	mov    $0x0,%edx
 20f:	48 89 c7             	mov    %rax,%rdi
 212:	e8 00 00 00 00       	call   217 <MDNS::AddServiceRecord(char const*, mdns::Services, char const*, unsigned short)+0x217>
 217:	b8 01 00 00 00       	mov    $0x1,%eax
 21c:	eb 18                	jmp    236 <MDNS::AddServiceRecord(char const*, mdns::Services, char const*, unsigned short)+0x236>
 21e:	48 83 45 c8 18       	addq   $0x18,-0x38(%rbp)
 223:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 227:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
 22b:	0f 85 26 fe ff ff    	jne    57 <MDNS::AddServiceRecord(char const*, mdns::Services, char const*, unsigned short)+0x57>
 231:	b8 00 00 00 00       	mov    $0x0,%eax
 236:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
 23a:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
 241:	00 00 
 243:	74 05                	je     24a <MDNS::AddServiceRecord(char const*, mdns::Services, char const*, unsigned short)+0x24a>
 245:	e8 00 00 00 00       	call   24a <MDNS::AddServiceRecord(char const*, mdns::Services, char const*, unsigned short)+0x24a>
 24a:	c9                   	leave  
 24b:	c3                   	ret    

Disassembly of section .text._ZN4MDNS6SendToEt:

0000000000000000 <MDNS::SendTo(unsigned short)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	66 89 45 e4          	mov    %ax,-0x1c(%rbp)
  16:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1d:	00 00 
  1f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  23:	31 c0                	xor    %eax,%eax
  25:	0f b6 05 00 00 00 00 	movzbl 0x0(%rip),%eax        # 2c <MDNS::SendTo(unsigned short)+0x2c>
  2c:	83 f0 01             	xor    $0x1,%eax
  2f:	84 c0                	test   %al,%al
  31:	74 30                	je     63 <MDNS::SendTo(unsigned short)+0x63>
  33:	e8 00 00 00 00       	call   38 <MDNS::SendTo(unsigned short)+0x38>
  38:	48 89 c7             	mov    %rax,%rdi
  3b:	0f b7 55 e4          	movzwl -0x1c(%rbp),%edx
  3f:	8b 05 00 00 00 00    	mov    0x0(%rip),%eax        # 45 <MDNS::SendTo(unsigned short)+0x45>
  45:	41 b9 e9 14 00 00    	mov    $0x14e9,%r9d
  4b:	41 b8 e0 00 00 fb    	mov    $0xfb0000e0,%r8d
  51:	89 d1                	mov    %edx,%ecx
  53:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 5a <MDNS::SendTo(unsigned short)+0x5a>
  5a:	89 c6                	mov    %eax,%esi
  5c:	e8 00 00 00 00       	call   61 <MDNS::SendTo(unsigned short)+0x61>
  61:	eb 38                	jmp    9b <MDNS::SendTo(unsigned short)+0x9b>
  63:	e8 00 00 00 00       	call   68 <MDNS::SendTo(unsigned short)+0x68>
  68:	48 89 c7             	mov    %rax,%rdi
  6b:	0f b7 05 00 00 00 00 	movzwl 0x0(%rip),%eax        # 72 <MDNS::SendTo(unsigned short)+0x72>
  72:	0f b7 f0             	movzwl %ax,%esi
  75:	8b 0d 00 00 00 00    	mov    0x0(%rip),%ecx        # 7b <MDNS::SendTo(unsigned short)+0x7b>
  7b:	0f b7 55 e4          	movzwl -0x1c(%rbp),%edx
  7f:	8b 05 00 00 00 00    	mov    0x0(%rip),%eax        # 85 <MDNS::SendTo(unsigned short)+0x85>
  85:	41 89 f1             	mov    %esi,%r9d
  88:	41 89 c8             	mov    %ecx,%r8d
  8b:	89 d1                	mov    %edx,%ecx
  8d:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 94 <MDNS::SendTo(unsigned short)+0x94>
  94:	89 c6                	mov    %eax,%esi
  96:	e8 00 00 00 00       	call   9b <MDNS::SendTo(unsigned short)+0x9b>
  9b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  9f:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  a6:	00 00 
  a8:	74 05                	je     af <MDNS::SendTo(unsigned short)+0xaf>
  aa:	e8 00 00 00 00       	call   af <MDNS::SendTo(unsigned short)+0xaf>
  af:	c9                   	leave  
  b0:	c3                   	ret    

Disassembly of section .text._ZN4MDNS11SendMessageERKN4mdns13ServiceRecordEtj:

0000000000000000 <MDNS::SendMessage(mdns::ServiceRecord const&, unsigned short, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 40          	sub    $0x40,%rsp
   c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  14:	89 d0                	mov    %edx,%eax
  16:	89 4d c8             	mov    %ecx,-0x38(%rbp)
  19:	66 89 45 cc          	mov    %ax,-0x34(%rbp)
  1d:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  24:	00 00 
  26:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  2a:	31 c0                	xor    %eax,%eax
  2c:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  33:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 3a <MDNS::SendMessage(mdns::ServiceRecord const&, unsigned short, unsigned int)+0x3a>
  3a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  3e:	8b 05 00 00 00 00    	mov    0x0(%rip),%eax        # 44 <MDNS::SendMessage(mdns::ServiceRecord const&, unsigned short, unsigned int)+0x44>
  44:	be 10 00 00 00       	mov    $0x10,%esi
  49:	89 c7                	mov    %eax,%edi
  4b:	e8 00 00 00 00       	call   50 <MDNS::SendMessage(mdns::ServiceRecord const&, unsigned short, unsigned int)+0x50>
  50:	83 f8 10             	cmp    $0x10,%eax
  53:	0f 94 c0             	sete   %al
  56:	84 c0                	test   %al,%al
  58:	74 20                	je     7a <MDNS::SendMessage(mdns::ServiceRecord const&, unsigned short, unsigned int)+0x7a>
  5a:	83 45 e4 01          	addl   $0x1,-0x1c(%rbp)
  5e:	8b 55 c8             	mov    -0x38(%rbp),%edx
  61:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  65:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  69:	48 89 ce             	mov    %rcx,%rsi
  6c:	48 89 c7             	mov    %rax,%rdi
  6f:	e8 00 00 00 00       	call   74 <MDNS::SendMessage(mdns::ServiceRecord const&, unsigned short, unsigned int)+0x74>
  74:	89 c0                	mov    %eax,%eax
  76:	48 01 45 e8          	add    %rax,-0x18(%rbp)
  7a:	8b 05 00 00 00 00    	mov    0x0(%rip),%eax        # 80 <MDNS::SendMessage(mdns::ServiceRecord const&, unsigned short, unsigned int)+0x80>
  80:	be 20 00 00 00       	mov    $0x20,%esi
  85:	89 c7                	mov    %eax,%edi
  87:	e8 00 00 00 00       	call   8c <MDNS::SendMessage(mdns::ServiceRecord const&, unsigned short, unsigned int)+0x8c>
  8c:	83 f8 20             	cmp    $0x20,%eax
  8f:	0f 94 c0             	sete   %al
  92:	84 c0                	test   %al,%al
  94:	74 20                	je     b6 <MDNS::SendMessage(mdns::ServiceRecord const&, unsigned short, unsigned int)+0xb6>
  96:	83 45 e4 01          	addl   $0x1,-0x1c(%rbp)
  9a:	8b 55 c8             	mov    -0x38(%rbp),%edx
  9d:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  a1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  a5:	48 89 ce             	mov    %rcx,%rsi
  a8:	48 89 c7             	mov    %rax,%rdi
  ab:	e8 00 00 00 00       	call   b0 <MDNS::SendMessage(mdns::ServiceRecord const&, unsigned short, unsigned int)+0xb0>
  b0:	89 c0                	mov    %eax,%eax
  b2:	48 01 45 e8          	add    %rax,-0x18(%rbp)
  b6:	8b 05 00 00 00 00    	mov    0x0(%rip),%eax        # bc <MDNS::SendMessage(mdns::ServiceRecord const&, unsigned short, unsigned int)+0xbc>
  bc:	be 40 00 00 00       	mov    $0x40,%esi
  c1:	89 c7                	mov    %eax,%edi
  c3:	e8 00 00 00 00       	call   c8 <MDNS::SendMessage(mdns::ServiceRecord const&, unsigned short, unsigned int)+0xc8>
  c8:	83 f8 40             	cmp    $0x40,%eax
  cb:	0f 94 c0             	sete   %al
  ce:	84 c0                	test   %al,%al
  d0:	74 20                	je     f2 <MDNS::SendMessage(mdns::ServiceRecord const&, unsigned short, unsigned int)+0xf2>
  d2:	83 45 e4 01          	addl   $0x1,-0x1c(%rbp)
  d6:	8b 55 c8             	mov    -0x38(%rbp),%edx
  d9:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  dd:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  e1:	48 89 ce             	mov    %rcx,%rsi
  e4:	48 89 c7             	mov    %rax,%rdi
  e7:	e8 00 00 00 00       	call   ec <MDNS::SendMessage(mdns::ServiceRecord const&, unsigned short, unsigned int)+0xec>
  ec:	89 c0                	mov    %eax,%eax
  ee:	48 01 45 e8          	add    %rax,-0x18(%rbp)
  f2:	8b 05 00 00 00 00    	mov    0x0(%rip),%eax        # f8 <MDNS::SendMessage(mdns::ServiceRecord const&, unsigned short, unsigned int)+0xf8>
  f8:	be 80 00 00 00       	mov    $0x80,%esi
  fd:	89 c7                	mov    %eax,%edi
  ff:	e8 00 00 00 00       	call   104 <MDNS::SendMessage(mdns::ServiceRecord const&, unsigned short, unsigned int)+0x104>
 104:	3d 80 00 00 00       	cmp    $0x80,%eax
 109:	0f 94 c0             	sete   %al
 10c:	84 c0                	test   %al,%al
 10e:	74 20                	je     130 <MDNS::SendMessage(mdns::ServiceRecord const&, unsigned short, unsigned int)+0x130>
 110:	83 45 e4 01          	addl   $0x1,-0x1c(%rbp)
 114:	8b 55 c8             	mov    -0x38(%rbp),%edx
 117:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
 11b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 11f:	48 89 ce             	mov    %rcx,%rsi
 122:	48 89 c7             	mov    %rax,%rdi
 125:	e8 00 00 00 00       	call   12a <MDNS::SendMessage(mdns::ServiceRecord const&, unsigned short, unsigned int)+0x12a>
 12a:	89 c0                	mov    %eax,%eax
 12c:	48 01 45 e8          	add    %rax,-0x18(%rbp)
 130:	8b 55 c8             	mov    -0x38(%rbp),%edx
 133:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 137:	89 d6                	mov    %edx,%esi
 139:	48 89 c7             	mov    %rax,%rdi
 13c:	e8 00 00 00 00       	call   141 <MDNS::SendMessage(mdns::ServiceRecord const&, unsigned short, unsigned int)+0x141>
 141:	89 c0                	mov    %eax,%eax
 143:	48 01 45 e8          	add    %rax,-0x18(%rbp)
 147:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 14e <MDNS::SendMessage(mdns::ServiceRecord const&, unsigned short, unsigned int)+0x14e>
 14e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
 152:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 156:	0f b7 55 cc          	movzwl -0x34(%rbp),%edx
 15a:	66 89 10             	mov    %dx,(%rax)
 15d:	be 04 00 00 00       	mov    $0x4,%esi
 162:	bf 80 ff ff ff       	mov    $0xffffff80,%edi
 167:	e8 00 00 00 00       	call   16c <MDNS::SendMessage(mdns::ServiceRecord const&, unsigned short, unsigned int)+0x16c>
 16c:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
 170:	88 42 02             	mov    %al,0x2(%rdx)
 173:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 177:	c6 40 03 00          	movb   $0x0,0x3(%rax)
 17b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 17f:	66 c7 40 04 00 00    	movw   $0x0,0x4(%rax)
 185:	8b 45 e4             	mov    -0x1c(%rbp),%eax
 188:	0f b7 c0             	movzwl %ax,%eax
 18b:	89 c2                	mov    %eax,%edx
 18d:	66 c1 c2 08          	rol    $0x8,%dx
 191:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 195:	66 89 50 06          	mov    %dx,0x6(%rax)
 199:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 19d:	66 c7 40 08 00 01    	movw   $0x100,0x8(%rax)
 1a3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 1a7:	66 c7 40 0a 00 00    	movw   $0x0,0xa(%rax)
 1ad:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 1b1:	48 2b 45 f0          	sub    -0x10(%rbp),%rax
 1b5:	66 89 45 e2          	mov    %ax,-0x1e(%rbp)
 1b9:	0f b7 55 e2          	movzwl -0x1e(%rbp),%edx
 1bd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 1c1:	89 d6                	mov    %edx,%esi
 1c3:	48 89 c7             	mov    %rax,%rdi
 1c6:	e8 00 00 00 00       	call   1cb <MDNS::SendMessage(mdns::ServiceRecord const&, unsigned short, unsigned int)+0x1cb>
 1cb:	90                   	nop
 1cc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 1d0:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 1d7:	00 00 
 1d9:	74 05                	je     1e0 <MDNS::SendMessage(mdns::ServiceRecord const&, unsigned short, unsigned int)+0x1e0>
 1db:	e8 00 00 00 00       	call   1e0 <MDNS::SendMessage(mdns::ServiceRecord const&, unsigned short, unsigned int)+0x1e0>
 1e0:	c9                   	leave  
 1e1:	c3                   	ret    

Disassembly of section .text._ZN4MDNS15HandleQuestionsEj:

0000000000000000 <MDNS::HandleQuestions(unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 81 ec 80 03 00 00 	sub    $0x380,%rsp
   f:	48 89 bd 88 fc ff ff 	mov    %rdi,-0x378(%rbp)
  16:	89 b5 84 fc ff ff    	mov    %esi,-0x37c(%rbp)
  1c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  23:	00 00 
  25:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  29:	31 c0                	xor    %eax,%eax
  2b:	c7 05 00 00 00 00 00 	movl   $0x0,0x0(%rip)        # 35 <MDNS::HandleQuestions(unsigned int)+0x35>
  32:	00 00 00 
  35:	0f b7 05 00 00 00 00 	movzwl 0x0(%rip),%eax        # 3c <MDNS::HandleQuestions(unsigned int)+0x3c>
  3c:	66 3d e9 14          	cmp    $0x14e9,%ax
  40:	0f 95 c0             	setne  %al
  43:	88 05 00 00 00 00    	mov    %al,0x0(%rip)        # 49 <MDNS::HandleQuestions(unsigned int)+0x49>
  49:	0f b6 05 00 00 00 00 	movzbl 0x0(%rip),%eax        # 50 <MDNS::HandleQuestions(unsigned int)+0x50>
  50:	84 c0                	test   %al,%al
  52:	74 10                	je     64 <MDNS::HandleQuestions(unsigned int)+0x64>
  54:	83 bd 84 fc ff ff 01 	cmpl   $0x1,-0x37c(%rbp)
  5b:	75 07                	jne    64 <MDNS::HandleQuestions(unsigned int)+0x64>
  5d:	b8 01 00 00 00       	mov    $0x1,%eax
  62:	eb 05                	jmp    69 <MDNS::HandleQuestions(unsigned int)+0x69>
  64:	b8 00 00 00 00       	mov    $0x0,%eax
  69:	88 05 00 00 00 00    	mov    %al,0x0(%rip)        # 6f <MDNS::HandleQuestions(unsigned int)+0x6f>
  6f:	0f b6 05 00 00 00 00 	movzbl 0x0(%rip),%eax        # 76 <MDNS::HandleQuestions(unsigned int)+0x76>
  76:	84 c0                	test   %al,%al
  78:	74 0c                	je     86 <MDNS::HandleQuestions(unsigned int)+0x86>
  7a:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 81 <MDNS::HandleQuestions(unsigned int)+0x81>
  81:	0f b7 00             	movzwl (%rax),%eax
  84:	eb 05                	jmp    8b <MDNS::HandleQuestions(unsigned int)+0x8b>
  86:	b8 00 00 00 00       	mov    $0x0,%eax
  8b:	66 89 85 9a fc ff ff 	mov    %ax,-0x366(%rbp)
  92:	c7 85 a0 fc ff ff 0c 	movl   $0xc,-0x360(%rbp)
  99:	00 00 00 
  9c:	c7 85 a4 fc ff ff 00 	movl   $0x0,-0x35c(%rbp)
  a3:	00 00 00 
  a6:	e9 88 03 00 00       	jmp    433 <MDNS::HandleQuestions(unsigned int)+0x433>
  ab:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # b2 <MDNS::HandleQuestions(unsigned int)+0xb2>
  b2:	0f b7 05 00 00 00 00 	movzwl 0x0(%rip),%eax        # b9 <MDNS::HandleQuestions(unsigned int)+0xb9>
  b9:	0f b7 c0             	movzwl %ax,%eax
  bc:	48 8d 3c 02          	lea    (%rdx,%rax,1),%rdi
  c0:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # c7 <MDNS::HandleQuestions(unsigned int)+0xc7>
  c7:	8b 85 a0 fc ff ff    	mov    -0x360(%rbp),%eax
  cd:	48 8d 34 02          	lea    (%rdx,%rax,1),%rsi
  d1:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # d8 <MDNS::HandleQuestions(unsigned int)+0xd8>
  d8:	48 8d 95 d0 fc ff ff 	lea    -0x330(%rbp),%rdx
  df:	48 89 d1             	mov    %rdx,%rcx
  e2:	48 89 fa             	mov    %rdi,%rdx
  e5:	48 89 c7             	mov    %rax,%rdi
  e8:	e8 00 00 00 00       	call   ed <MDNS::HandleQuestions(unsigned int)+0xed>
  ed:	48 89 85 b0 fc ff ff 	mov    %rax,-0x350(%rbp)
  f4:	48 83 bd b0 fc ff ff 	cmpq   $0x0,-0x350(%rbp)
  fb:	00 
  fc:	0f 84 6c 03 00 00    	je     46e <MDNS::HandleQuestions(unsigned int)+0x46e>
 102:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 109 <MDNS::HandleQuestions(unsigned int)+0x109>
 109:	8b 85 a0 fc ff ff    	mov    -0x360(%rbp),%eax
 10f:	48 01 c2             	add    %rax,%rdx
 112:	48 8b 85 b0 fc ff ff 	mov    -0x350(%rbp),%rax
 119:	48 29 d0             	sub    %rdx,%rax
 11c:	66 89 85 d0 fd ff ff 	mov    %ax,-0x230(%rbp)
 123:	0f b7 85 d0 fd ff ff 	movzwl -0x230(%rbp),%eax
 12a:	0f b7 c0             	movzwl %ax,%eax
 12d:	01 85 a0 fc ff ff    	add    %eax,-0x360(%rbp)
 133:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 13a <MDNS::HandleQuestions(unsigned int)+0x13a>
 13a:	8b 85 a0 fc ff ff    	mov    -0x360(%rbp),%eax
 140:	48 01 d0             	add    %rdx,%rax
 143:	0f b7 00             	movzwl (%rax),%eax
 146:	0f b7 c0             	movzwl %ax,%eax
 149:	66 c1 c0 08          	rol    $0x8,%ax
 14d:	66 89 85 9c fc ff ff 	mov    %ax,-0x364(%rbp)
 154:	83 85 a0 fc ff ff 02 	addl   $0x2,-0x360(%rbp)
 15b:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 162 <MDNS::HandleQuestions(unsigned int)+0x162>
 162:	8b 85 a0 fc ff ff    	mov    -0x360(%rbp),%eax
 168:	48 01 d0             	add    %rdx,%rax
 16b:	0f b7 00             	movzwl (%rax),%eax
 16e:	0f b7 c0             	movzwl %ax,%eax
 171:	66 c1 c0 08          	rol    $0x8,%ax
 175:	83 e0 7f             	and    $0x7f,%eax
 178:	66 89 85 9e fc ff ff 	mov    %ax,-0x362(%rbp)
 17f:	83 85 a0 fc ff ff 02 	addl   $0x2,-0x360(%rbp)
 186:	66 83 bd 9e fc ff ff 	cmpw   $0x1,-0x362(%rbp)
 18d:	01 
 18e:	74 0f                	je     19f <MDNS::HandleQuestions(unsigned int)+0x19f>
 190:	66 81 bd 9e fc ff ff 	cmpw   $0xff,-0x362(%rbp)
 197:	ff 00 
 199:	0f 85 8c 02 00 00    	jne    42b <MDNS::HandleQuestions(unsigned int)+0x42b>
 19f:	66 83 bd 9c fc ff ff 	cmpw   $0x1,-0x364(%rbp)
 1a6:	01 
 1a7:	74 0b                	je     1b4 <MDNS::HandleQuestions(unsigned int)+0x1b4>
 1a9:	66 81 bd 9c fc ff ff 	cmpw   $0xff,-0x364(%rbp)
 1b0:	ff 00 
 1b2:	75 44                	jne    1f8 <MDNS::HandleQuestions(unsigned int)+0x1f8>
 1b4:	48 8d 85 e0 fd ff ff 	lea    -0x220(%rbp),%rax
 1bb:	48 89 c7             	mov    %rax,%rdi
 1be:	e8 00 00 00 00       	call   1c3 <MDNS::HandleQuestions(unsigned int)+0x1c3>
 1c3:	48 8d 95 d0 fc ff ff 	lea    -0x330(%rbp),%rdx
 1ca:	48 8d 85 e0 fd ff ff 	lea    -0x220(%rbp),%rax
 1d1:	48 89 d6             	mov    %rdx,%rsi
 1d4:	48 89 c7             	mov    %rax,%rdi
 1d7:	e8 00 00 00 00       	call   1dc <MDNS::HandleQuestions(unsigned int)+0x1dc>
 1dc:	84 c0                	test   %al,%al
 1de:	74 18                	je     1f8 <MDNS::HandleQuestions(unsigned int)+0x1f8>
 1e0:	8b 05 00 00 00 00    	mov    0x0(%rip),%eax        # 1e6 <MDNS::HandleQuestions(unsigned int)+0x1e6>
 1e6:	be 01 00 00 00       	mov    $0x1,%esi
 1eb:	89 c7                	mov    %eax,%edi
 1ed:	e8 00 00 00 00       	call   1f2 <MDNS::HandleQuestions(unsigned int)+0x1f2>
 1f2:	89 05 00 00 00 00    	mov    %eax,0x0(%rip)        # 1f8 <MDNS::HandleQuestions(unsigned int)+0x1f8>
 1f8:	66 83 bd 9c fc ff ff 	cmpw   $0xc,-0x364(%rbp)
 1ff:	0c 
 200:	74 0b                	je     20d <MDNS::HandleQuestions(unsigned int)+0x20d>
 202:	66 81 bd 9c fc ff ff 	cmpw   $0xff,-0x364(%rbp)
 209:	ff 00 
 20b:	75 44                	jne    251 <MDNS::HandleQuestions(unsigned int)+0x251>
 20d:	48 8d 85 e0 fd ff ff 	lea    -0x220(%rbp),%rax
 214:	48 89 c7             	mov    %rax,%rdi
 217:	e8 00 00 00 00       	call   21c <MDNS::HandleQuestions(unsigned int)+0x21c>
 21c:	48 8d 95 d0 fc ff ff 	lea    -0x330(%rbp),%rdx
 223:	48 8d 85 e0 fd ff ff 	lea    -0x220(%rbp),%rax
 22a:	48 89 d6             	mov    %rdx,%rsi
 22d:	48 89 c7             	mov    %rax,%rdi
 230:	e8 00 00 00 00       	call   235 <MDNS::HandleQuestions(unsigned int)+0x235>
 235:	84 c0                	test   %al,%al
 237:	74 18                	je     251 <MDNS::HandleQuestions(unsigned int)+0x251>
 239:	8b 05 00 00 00 00    	mov    0x0(%rip),%eax        # 23f <MDNS::HandleQuestions(unsigned int)+0x23f>
 23f:	be 02 00 00 00       	mov    $0x2,%esi
 244:	89 c7                	mov    %eax,%edi
 246:	e8 00 00 00 00       	call   24b <MDNS::HandleQuestions(unsigned int)+0x24b>
 24b:	89 05 00 00 00 00    	mov    %eax,0x0(%rip)        # 251 <MDNS::HandleQuestions(unsigned int)+0x251>
 251:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 258 <MDNS::HandleQuestions(unsigned int)+0x258>
 258:	48 89 85 b8 fc ff ff 	mov    %rax,-0x348(%rbp)
 25f:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 266 <MDNS::HandleQuestions(unsigned int)+0x266>
 266:	48 89 85 a8 fc ff ff 	mov    %rax,-0x358(%rbp)
 26d:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 274 <MDNS::HandleQuestions(unsigned int)+0x274>
 274:	48 89 85 c0 fc ff ff 	mov    %rax,-0x340(%rbp)
 27b:	e9 95 01 00 00       	jmp    415 <MDNS::HandleQuestions(unsigned int)+0x415>
 280:	48 8b 85 a8 fc ff ff 	mov    -0x358(%rbp),%rax
 287:	48 89 85 c8 fc ff ff 	mov    %rax,-0x338(%rbp)
 28e:	48 8b 85 c8 fc ff ff 	mov    -0x338(%rbp),%rax
 295:	8b 40 14             	mov    0x14(%rax),%eax
 298:	83 f8 08             	cmp    $0x8,%eax
 29b:	0f 8f 6c 01 00 00    	jg     40d <MDNS::HandleQuestions(unsigned int)+0x40d>
 2a1:	c7 05 00 00 00 00 00 	movl   $0x0,0x0(%rip)        # 2ab <MDNS::HandleQuestions(unsigned int)+0x2ab>
 2a8:	00 00 00 
 2ab:	66 83 bd 9c fc ff ff 	cmpw   $0xc,-0x364(%rbp)
 2b2:	0c 
 2b3:	74 0f                	je     2c4 <MDNS::HandleQuestions(unsigned int)+0x2c4>
 2b5:	66 81 bd 9c fc ff ff 	cmpw   $0xff,-0x364(%rbp)
 2bc:	ff 00 
 2be:	0f 85 88 00 00 00    	jne    34c <MDNS::HandleQuestions(unsigned int)+0x34c>
 2c4:	48 8d 85 d0 fc ff ff 	lea    -0x330(%rbp),%rax
 2cb:	48 89 c6             	mov    %rax,%rsi
 2ce:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 2d5 <MDNS::HandleQuestions(unsigned int)+0x2d5>
 2d5:	48 89 c7             	mov    %rax,%rdi
 2d8:	e8 00 00 00 00       	call   2dd <MDNS::HandleQuestions(unsigned int)+0x2dd>
 2dd:	84 c0                	test   %al,%al
 2df:	74 18                	je     2f9 <MDNS::HandleQuestions(unsigned int)+0x2f9>
 2e1:	8b 05 00 00 00 00    	mov    0x0(%rip),%eax        # 2e7 <MDNS::HandleQuestions(unsigned int)+0x2e7>
 2e7:	be 10 00 00 00       	mov    $0x10,%esi
 2ec:	89 c7                	mov    %eax,%edi
 2ee:	e8 00 00 00 00       	call   2f3 <MDNS::HandleQuestions(unsigned int)+0x2f3>
 2f3:	89 05 00 00 00 00    	mov    %eax,0x0(%rip)        # 2f9 <MDNS::HandleQuestions(unsigned int)+0x2f9>
 2f9:	48 8b 8d c8 fc ff ff 	mov    -0x338(%rbp),%rcx
 300:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
 307:	ba 00 00 00 00       	mov    $0x0,%edx
 30c:	48 89 ce             	mov    %rcx,%rsi
 30f:	48 89 c7             	mov    %rax,%rdi
 312:	e8 00 00 00 00       	call   317 <MDNS::HandleQuestions(unsigned int)+0x317>
 317:	48 8d 95 d0 fc ff ff 	lea    -0x330(%rbp),%rdx
 31e:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
 325:	48 89 d6             	mov    %rdx,%rsi
 328:	48 89 c7             	mov    %rax,%rdi
 32b:	e8 00 00 00 00       	call   330 <MDNS::HandleQuestions(unsigned int)+0x330>
 330:	84 c0                	test   %al,%al
 332:	74 18                	je     34c <MDNS::HandleQuestions(unsigned int)+0x34c>
 334:	8b 05 00 00 00 00    	mov    0x0(%rip),%eax        # 33a <MDNS::HandleQuestions(unsigned int)+0x33a>
 33a:	be 20 00 00 00       	mov    $0x20,%esi
 33f:	89 c7                	mov    %eax,%edi
 341:	e8 00 00 00 00       	call   346 <MDNS::HandleQuestions(unsigned int)+0x346>
 346:	89 05 00 00 00 00    	mov    %eax,0x0(%rip)        # 34c <MDNS::HandleQuestions(unsigned int)+0x34c>
 34c:	48 8b 8d c8 fc ff ff 	mov    -0x338(%rbp),%rcx
 353:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
 35a:	ba 01 00 00 00       	mov    $0x1,%edx
 35f:	48 89 ce             	mov    %rcx,%rsi
 362:	48 89 c7             	mov    %rax,%rdi
 365:	e8 00 00 00 00       	call   36a <MDNS::HandleQuestions(unsigned int)+0x36a>
 36a:	48 8d 95 d0 fc ff ff 	lea    -0x330(%rbp),%rdx
 371:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
 378:	48 89 d6             	mov    %rdx,%rsi
 37b:	48 89 c7             	mov    %rax,%rdi
 37e:	e8 00 00 00 00       	call   383 <MDNS::HandleQuestions(unsigned int)+0x383>
 383:	84 c0                	test   %al,%al
 385:	74 5a                	je     3e1 <MDNS::HandleQuestions(unsigned int)+0x3e1>
 387:	66 83 bd 9c fc ff ff 	cmpw   $0x21,-0x364(%rbp)
 38e:	21 
 38f:	74 0b                	je     39c <MDNS::HandleQuestions(unsigned int)+0x39c>
 391:	66 81 bd 9c fc ff ff 	cmpw   $0xff,-0x364(%rbp)
 398:	ff 00 
 39a:	75 18                	jne    3b4 <MDNS::HandleQuestions(unsigned int)+0x3b4>
 39c:	8b 05 00 00 00 00    	mov    0x0(%rip),%eax        # 3a2 <MDNS::HandleQuestions(unsigned int)+0x3a2>
 3a2:	be 40 00 00 00       	mov    $0x40,%esi
 3a7:	89 c7                	mov    %eax,%edi
 3a9:	e8 00 00 00 00       	call   3ae <MDNS::HandleQuestions(unsigned int)+0x3ae>
 3ae:	89 05 00 00 00 00    	mov    %eax,0x0(%rip)        # 3b4 <MDNS::HandleQuestions(unsigned int)+0x3b4>
 3b4:	66 83 bd 9c fc ff ff 	cmpw   $0x10,-0x364(%rbp)
 3bb:	10 
 3bc:	74 0b                	je     3c9 <MDNS::HandleQuestions(unsigned int)+0x3c9>
 3be:	66 81 bd 9c fc ff ff 	cmpw   $0xff,-0x364(%rbp)
 3c5:	ff 00 
 3c7:	75 18                	jne    3e1 <MDNS::HandleQuestions(unsigned int)+0x3e1>
 3c9:	8b 05 00 00 00 00    	mov    0x0(%rip),%eax        # 3cf <MDNS::HandleQuestions(unsigned int)+0x3cf>
 3cf:	be 80 00 00 00       	mov    $0x80,%esi
 3d4:	89 c7                	mov    %eax,%edi
 3d6:	e8 00 00 00 00       	call   3db <MDNS::HandleQuestions(unsigned int)+0x3db>
 3db:	89 05 00 00 00 00    	mov    %eax,0x0(%rip)        # 3e1 <MDNS::HandleQuestions(unsigned int)+0x3e1>
 3e1:	8b 05 00 00 00 00    	mov    0x0(%rip),%eax        # 3e7 <MDNS::HandleQuestions(unsigned int)+0x3e7>
 3e7:	85 c0                	test   %eax,%eax
 3e9:	74 22                	je     40d <MDNS::HandleQuestions(unsigned int)+0x40d>
 3eb:	0f b7 95 9a fc ff ff 	movzwl -0x366(%rbp),%edx
 3f2:	48 8b b5 c8 fc ff ff 	mov    -0x338(%rbp),%rsi
 3f9:	48 8b 85 88 fc ff ff 	mov    -0x378(%rbp),%rax
 400:	b9 10 0e 00 00       	mov    $0xe10,%ecx
 405:	48 89 c7             	mov    %rax,%rdi
 408:	e8 00 00 00 00       	call   40d <MDNS::HandleQuestions(unsigned int)+0x40d>
 40d:	48 83 85 a8 fc ff ff 	addq   $0x18,-0x358(%rbp)
 414:	18 
 415:	48 8b 85 a8 fc ff ff 	mov    -0x358(%rbp),%rax
 41c:	48 3b 85 c0 fc ff ff 	cmp    -0x340(%rbp),%rax
 423:	0f 85 57 fe ff ff    	jne    280 <MDNS::HandleQuestions(unsigned int)+0x280>
 429:	eb 01                	jmp    42c <MDNS::HandleQuestions(unsigned int)+0x42c>
 42b:	90                   	nop
 42c:	83 85 a4 fc ff ff 01 	addl   $0x1,-0x35c(%rbp)
 433:	8b 85 a4 fc ff ff    	mov    -0x35c(%rbp),%eax
 439:	3b 85 84 fc ff ff    	cmp    -0x37c(%rbp),%eax
 43f:	0f 82 66 fc ff ff    	jb     ab <MDNS::HandleQuestions(unsigned int)+0xab>
 445:	8b 05 00 00 00 00    	mov    0x0(%rip),%eax        # 44b <MDNS::HandleQuestions(unsigned int)+0x44b>
 44b:	85 c0                	test   %eax,%eax
 44d:	74 20                	je     46f <MDNS::HandleQuestions(unsigned int)+0x46f>
 44f:	0f b7 8d 9a fc ff ff 	movzwl -0x366(%rbp),%ecx
 456:	48 8b 85 88 fc ff ff 	mov    -0x378(%rbp),%rax
 45d:	ba 10 0e 00 00       	mov    $0xe10,%edx
 462:	89 ce                	mov    %ecx,%esi
 464:	48 89 c7             	mov    %rax,%rdi
 467:	e8 00 00 00 00       	call   46c <MDNS::HandleQuestions(unsigned int)+0x46c>
 46c:	eb 01                	jmp    46f <MDNS::HandleQuestions(unsigned int)+0x46f>
 46e:	90                   	nop
 46f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 473:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 47a:	00 00 
 47c:	74 05                	je     483 <MDNS::HandleQuestions(unsigned int)+0x483>
 47e:	e8 00 00 00 00       	call   483 <MDNS::HandleQuestions(unsigned int)+0x483>
 483:	c9                   	leave  
 484:	c3                   	ret    

Disassembly of section .text._ZN4MDNS5PrintEv:

0000000000000000 <MDNS::Print()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 81 ec 40 01 00 00 	sub    $0x140,%rsp
   f:	48 89 bd c8 fe ff ff 	mov    %rdi,-0x138(%rbp)
  16:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1d:	00 00 
  1f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  23:	31 c0                	xor    %eax,%eax
  25:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 2c <MDNS::Print()+0x2c>
  2c:	48 89 c7             	mov    %rax,%rdi
  2f:	e8 00 00 00 00       	call   34 <MDNS::Print()+0x34>
  34:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
  3b:	48 89 c7             	mov    %rax,%rdi
  3e:	e8 00 00 00 00       	call   43 <MDNS::Print()+0x43>
  43:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
  4a:	be 01 00 00 00       	mov    $0x1,%esi
  4f:	48 89 c7             	mov    %rax,%rdi
  52:	e8 00 00 00 00       	call   57 <MDNS::Print()+0x57>
  57:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 5e <MDNS::Print()+0x5e>
  5e:	48 89 85 d8 fe ff ff 	mov    %rax,-0x128(%rbp)
  65:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 6c <MDNS::Print()+0x6c>
  6c:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  73:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 7a <MDNS::Print()+0x7a>
  7a:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
  81:	e9 b9 00 00 00       	jmp    13f <MDNS::Print()+0x13f>
  86:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
  8d:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
  94:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
  9b:	8b 40 14             	mov    0x14(%rax),%eax
  9e:	83 f8 08             	cmp    $0x8,%eax
  a1:	0f 8f 90 00 00 00    	jg     137 <MDNS::Print()+0x137>
  a7:	48 8b 8d e8 fe ff ff 	mov    -0x118(%rbp),%rcx
  ae:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
  b5:	ba 00 00 00 00       	mov    $0x0,%edx
  ba:	48 89 ce             	mov    %rcx,%rsi
  bd:	48 89 c7             	mov    %rax,%rdi
  c0:	e8 00 00 00 00       	call   c5 <MDNS::Print()+0xc5>
  c5:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
  cc:	be 00 00 00 00       	mov    $0x0,%esi
  d1:	48 89 c7             	mov    %rax,%rdi
  d4:	e8 00 00 00 00       	call   d9 <MDNS::Print()+0xd9>
  d9:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
  e0:	48 8b 40 08          	mov    0x8(%rax),%rax
  e4:	48 85 c0             	test   %rax,%rax
  e7:	74 0d                	je     f6 <MDNS::Print()+0xf6>
  e9:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
  f0:	48 8b 40 08          	mov    0x8(%rax),%rax
  f4:	eb 07                	jmp    fd <MDNS::Print()+0xfd>
  f6:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # fd <MDNS::Print()+0xfd>
  fd:	48 8b 95 e8 fe ff ff 	mov    -0x118(%rbp),%rdx
 104:	0f b7 52 10          	movzwl 0x10(%rdx),%edx
 108:	0f b7 d2             	movzwl %dx,%edx
 10b:	48 8b 8d e8 fe ff ff 	mov    -0x118(%rbp),%rcx
 112:	0f b7 49 12          	movzwl 0x12(%rcx),%ecx
 116:	0f b7 c9             	movzwl %cx,%ecx
 119:	66 c1 c1 08          	rol    $0x8,%cx
 11d:	0f b7 f1             	movzwl %cx,%esi
 120:	48 89 c1             	mov    %rax,%rcx
 123:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 12a <MDNS::Print()+0x12a>
 12a:	48 89 c7             	mov    %rax,%rdi
 12d:	b8 00 00 00 00       	mov    $0x0,%eax
 132:	e8 00 00 00 00       	call   137 <MDNS::Print()+0x137>
 137:	48 83 85 d0 fe ff ff 	addq   $0x18,-0x130(%rbp)
 13e:	18 
 13f:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
 146:	48 3b 85 e0 fe ff ff 	cmp    -0x120(%rbp),%rax
 14d:	0f 85 33 ff ff ff    	jne    86 <MDNS::Print()+0x86>
 153:	90                   	nop
 154:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 158:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 15f:	00 00 
 161:	74 05                	je     168 <MDNS::Print()+0x168>
 163:	e8 00 00 00 00       	call   168 <MDNS::Print()+0x168>
 168:	c9                   	leave  
 169:	c3                   	ret    

Disassembly of section .text._ZSt3maxIjERKT_S2_S2_:

0000000000000000 <unsigned int const& std::max<unsigned int>(unsigned int const&, unsigned int const&)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  27:	8b 10                	mov    (%rax),%edx
  29:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  2d:	8b 00                	mov    (%rax),%eax
  2f:	39 c2                	cmp    %eax,%edx
  31:	73 06                	jae    39 <unsigned int const& std::max<unsigned int>(unsigned int const&, unsigned int const&)+0x39>
  33:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  37:	eb 04                	jmp    3d <unsigned int const& std::max<unsigned int>(unsigned int const&, unsigned int const&)+0x3d>
  39:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  41:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  48:	00 00 
  4a:	74 05                	je     51 <unsigned int const& std::max<unsigned int>(unsigned int const&, unsigned int const&)+0x51>
  4c:	e8 00 00 00 00       	call   51 <unsigned int const& std::max<unsigned int>(unsigned int const&, unsigned int const&)+0x51>
  51:	c9                   	leave  
  52:	c3                   	ret    

Disassembly of section .text._ZSt3minImERKT_S2_S2_:

0000000000000000 <unsigned long const& std::min<unsigned long>(unsigned long const&, unsigned long const&)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  27:	48 8b 10             	mov    (%rax),%rdx
  2a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2e:	48 8b 00             	mov    (%rax),%rax
  31:	48 39 c2             	cmp    %rax,%rdx
  34:	73 06                	jae    3c <unsigned long const& std::min<unsigned long>(unsigned long const&, unsigned long const&)+0x3c>
  36:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  3a:	eb 04                	jmp    40 <unsigned long const& std::min<unsigned long>(unsigned long const&, unsigned long const&)+0x40>
  3c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  44:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  4b:	00 00 
  4d:	74 05                	je     54 <unsigned long const& std::min<unsigned long>(unsigned long const&, unsigned long const&)+0x54>
  4f:	e8 00 00 00 00       	call   54 <unsigned long const& std::min<unsigned long>(unsigned long const&, unsigned long const&)+0x54>
  54:	c9                   	leave  
  55:	c3                   	ret    

tftpdaemon.o:     file format elf64-x86-64


Disassembly of section .text._ZN7Network3GetEv:

0000000000000000 <Network::Get()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 22 <Network::Get()+0x22>
  22:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  26:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  2d:	00 00 
  2f:	74 05                	je     36 <Network::Get()+0x36>
  31:	e8 00 00 00 00       	call   36 <Network::Get()+0x36>
  36:	c9                   	leave  
  37:	c3                   	ret    

Disassembly of section .text._ZN10TFTPDaemonC2Ev:

0000000000000000 <TFTPDaemon::TFTPDaemon()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 26 <TFTPDaemon::TFTPDaemon()+0x26>
  26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2a:	48 89 10             	mov    %rdx,(%rax)
  2d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  31:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)
  38:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3c:	c7 40 0c ff ff ff ff 	movl   $0xffffffff,0xc(%rax)
  43:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  47:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  4e:	00 
  4f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  53:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%rax)
  5a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5e:	66 c7 40 1c 00 00    	movw   $0x0,0x1c(%rax)
  64:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  68:	48 c7 40 20 00 00 00 	movq   $0x0,0x20(%rax)
  6f:	00 
  70:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  74:	66 c7 40 28 00 00    	movw   $0x0,0x28(%rax)
  7a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7e:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
  85:	00 
  86:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8a:	66 c7 40 38 00 00    	movw   $0x0,0x38(%rax)
  90:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  94:	c6 40 3a 00          	movb   $0x0,0x3a(%rax)
  98:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 9f <TFTPDaemon::TFTPDaemon()+0x9f>
  9f:	48 85 c0             	test   %rax,%rax
  a2:	74 1d                	je     c1 <TFTPDaemon::TFTPDaemon()+0xc1>
  a4:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # ab <TFTPDaemon::TFTPDaemon()+0xab>
  ab:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # b2 <TFTPDaemon::TFTPDaemon()+0xb2>
  b2:	48 8b 12             	mov    (%rdx),%rdx
  b5:	48 83 c2 38          	add    $0x38,%rdx
  b9:	48 8b 12             	mov    (%rdx),%rdx
  bc:	48 89 c7             	mov    %rax,%rdi
  bf:	ff d2                	call   *%rdx
  c1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  c5:	48 89 05 00 00 00 00 	mov    %rax,0x0(%rip)        # cc <TFTPDaemon::TFTPDaemon()+0xcc>
  cc:	90                   	nop
  cd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  d1:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  d8:	00 00 
  da:	74 05                	je     e1 <TFTPDaemon::TFTPDaemon()+0xe1>
  dc:	e8 00 00 00 00       	call   e1 <TFTPDaemon::TFTPDaemon()+0xe1>
  e1:	c9                   	leave  
  e2:	c3                   	ret    

Disassembly of section .text._ZN10TFTPDaemonD2Ev:

0000000000000000 <TFTPDaemon::~TFTPDaemon()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 26 <TFTPDaemon::~TFTPDaemon()+0x26>
  26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2a:	48 89 10             	mov    %rdx,(%rax)
  2d:	e8 00 00 00 00       	call   32 <TFTPDaemon::~TFTPDaemon()+0x32>
  32:	48 89 c2             	mov    %rax,%rdx
  35:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  39:	0f b7 40 1c          	movzwl 0x1c(%rax),%eax
  3d:	0f b7 c0             	movzwl %ax,%eax
  40:	89 c6                	mov    %eax,%esi
  42:	48 89 d7             	mov    %rdx,%rdi
  45:	e8 00 00 00 00       	call   4a <TFTPDaemon::~TFTPDaemon()+0x4a>
  4a:	48 c7 05 00 00 00 00 	movq   $0x0,0x0(%rip)        # 55 <TFTPDaemon::~TFTPDaemon()+0x55>
  51:	00 00 00 00 
  55:	90                   	nop
  56:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  5a:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  61:	00 00 
  63:	74 05                	je     6a <TFTPDaemon::~TFTPDaemon()+0x6a>
  65:	e8 00 00 00 00       	call   6a <TFTPDaemon::~TFTPDaemon()+0x6a>
  6a:	c9                   	leave  
  6b:	c3                   	ret    

Disassembly of section .text._ZN10TFTPDaemonD0Ev:

0000000000000000 <TFTPDaemon::~TFTPDaemon()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	call   2b <TFTPDaemon::~TFTPDaemon()+0x2b>
  2b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	call   37 <TFTPDaemon::~TFTPDaemon()+0x37>
  37:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3b:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  42:	00 00 
  44:	74 05                	je     4b <TFTPDaemon::~TFTPDaemon()+0x4b>
  46:	e8 00 00 00 00       	call   4b <TFTPDaemon::~TFTPDaemon()+0x4b>
  4b:	c9                   	leave  
  4c:	c3                   	ret    

Disassembly of section .text._ZN10TFTPDaemon3RunEv:

0000000000000000 <TFTPDaemon::Run()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	8b 40 08             	mov    0x8(%rax),%eax
  26:	85 c0                	test   %eax,%eax
  28:	75 7a                	jne    a4 <TFTPDaemon::Run()+0xa4>
  2a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2e:	0f b7 40 1c          	movzwl 0x1c(%rax),%eax
  32:	66 85 c0             	test   %ax,%ax
  35:	74 28                	je     5f <TFTPDaemon::Run()+0x5f>
  37:	e8 00 00 00 00       	call   3c <TFTPDaemon::Run()+0x3c>
  3c:	48 89 c2             	mov    %rax,%rdx
  3f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43:	0f b7 40 1c          	movzwl 0x1c(%rax),%eax
  47:	0f b7 c0             	movzwl %ax,%eax
  4a:	89 c6                	mov    %eax,%esi
  4c:	48 89 d7             	mov    %rdx,%rdi
  4f:	e8 00 00 00 00       	call   54 <TFTPDaemon::Run()+0x54>
  54:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  58:	c7 40 0c ff ff ff ff 	movl   $0xffffffff,0xc(%rax)
  5f:	e8 00 00 00 00       	call   64 <TFTPDaemon::Run()+0x64>
  64:	be 45 00 00 00       	mov    $0x45,%esi
  69:	48 89 c7             	mov    %rax,%rdi
  6c:	e8 00 00 00 00       	call   71 <TFTPDaemon::Run()+0x71>
  71:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  75:	89 42 0c             	mov    %eax,0xc(%rdx)
  78:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7c:	66 c7 40 1c 45 00    	movw   $0x45,0x1c(%rax)
  82:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  86:	66 c7 40 28 00 00    	movw   $0x0,0x28(%rax)
  8c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  90:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%rax)
  97:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  9b:	c6 40 3a 00          	movb   $0x0,0x3a(%rax)
  9f:	e9 ce 00 00 00       	jmp    172 <TFTPDaemon::Run()+0x172>
  a4:	e8 00 00 00 00       	call   a9 <TFTPDaemon::Run()+0xa9>
  a9:	48 89 c7             	mov    %rax,%rdi
  ac:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  b0:	48 8d 70 1c          	lea    0x1c(%rax),%rsi
  b4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  b8:	48 8d 48 18          	lea    0x18(%rax),%rcx
  bc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  c0:	48 8d 50 10          	lea    0x10(%rax),%rdx
  c4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  c8:	8b 40 0c             	mov    0xc(%rax),%eax
  cb:	49 89 f0             	mov    %rsi,%r8
  ce:	89 c6                	mov    %eax,%esi
  d0:	e8 00 00 00 00       	call   d5 <TFTPDaemon::Run()+0xd5>
  d5:	0f b7 d0             	movzwl %ax,%edx
  d8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  dc:	48 89 50 20          	mov    %rdx,0x20(%rax)
  e0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  e4:	8b 40 08             	mov    0x8(%rax),%eax
  e7:	83 f8 05             	cmp    $0x5,%eax
  ea:	74 61                	je     14d <TFTPDaemon::Run()+0x14d>
  ec:	83 f8 05             	cmp    $0x5,%eax
  ef:	7f 7a                	jg     16b <TFTPDaemon::Run()+0x16b>
  f1:	83 f8 03             	cmp    $0x3,%eax
  f4:	74 3b                	je     131 <TFTPDaemon::Run()+0x131>
  f6:	83 f8 03             	cmp    $0x3,%eax
  f9:	7f 70                	jg     16b <TFTPDaemon::Run()+0x16b>
  fb:	83 f8 01             	cmp    $0x1,%eax
  fe:	74 07                	je     107 <TFTPDaemon::Run()+0x107>
 100:	83 f8 02             	cmp    $0x2,%eax
 103:	74 1e                	je     123 <TFTPDaemon::Run()+0x123>
 105:	eb 64                	jmp    16b <TFTPDaemon::Run()+0x16b>
 107:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 10b:	48 8b 40 20          	mov    0x20(%rax),%rax
 10f:	48 83 f8 04          	cmp    $0x4,%rax
 113:	76 56                	jbe    16b <TFTPDaemon::Run()+0x16b>
 115:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 119:	48 89 c7             	mov    %rax,%rdi
 11c:	e8 00 00 00 00       	call   121 <TFTPDaemon::Run()+0x121>
 121:	eb 48                	jmp    16b <TFTPDaemon::Run()+0x16b>
 123:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 127:	48 89 c7             	mov    %rax,%rdi
 12a:	e8 00 00 00 00       	call   12f <TFTPDaemon::Run()+0x12f>
 12f:	eb 41                	jmp    172 <TFTPDaemon::Run()+0x172>
 131:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 135:	48 8b 40 20          	mov    0x20(%rax),%rax
 139:	48 83 f8 04          	cmp    $0x4,%rax
 13d:	75 2f                	jne    16e <TFTPDaemon::Run()+0x16e>
 13f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 143:	48 89 c7             	mov    %rax,%rdi
 146:	e8 00 00 00 00       	call   14b <TFTPDaemon::Run()+0x14b>
 14b:	eb 21                	jmp    16e <TFTPDaemon::Run()+0x16e>
 14d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 151:	48 8b 40 20          	mov    0x20(%rax),%rax
 155:	48 3d 04 02 00 00    	cmp    $0x204,%rax
 15b:	77 14                	ja     171 <TFTPDaemon::Run()+0x171>
 15d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 161:	48 89 c7             	mov    %rax,%rdi
 164:	e8 00 00 00 00       	call   169 <TFTPDaemon::Run()+0x169>
 169:	eb 06                	jmp    171 <TFTPDaemon::Run()+0x171>
 16b:	90                   	nop
 16c:	eb 04                	jmp    172 <TFTPDaemon::Run()+0x172>
 16e:	90                   	nop
 16f:	eb 01                	jmp    172 <TFTPDaemon::Run()+0x172>
 171:	90                   	nop
 172:	90                   	nop
 173:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 177:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 17e:	00 00 
 180:	74 05                	je     187 <TFTPDaemon::Run()+0x187>
 182:	e8 00 00 00 00       	call   187 <TFTPDaemon::Run()+0x187>
 187:	c9                   	leave  
 188:	c3                   	ret    

Disassembly of section .text._ZN10TFTPDaemon13HandleRequestEv:

0000000000000000 <TFTPDaemon::HandleRequest()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 40          	sub    $0x40,%rsp
   c:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  23:	48 8b 40 10          	mov    0x10(%rax),%rax
  27:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  2b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  2f:	0f b7 00             	movzwl (%rax),%eax
  32:	0f b7 c0             	movzwl %ax,%eax
  35:	66 c1 c0 08          	rol    $0x8,%ax
  39:	66 89 45 d2          	mov    %ax,-0x2e(%rbp)
  3d:	66 83 7d d2 01       	cmpw   $0x1,-0x2e(%rbp)
  42:	74 24                	je     68 <TFTPDaemon::HandleRequest()+0x68>
  44:	66 83 7d d2 02       	cmpw   $0x2,-0x2e(%rbp)
  49:	74 1d                	je     68 <TFTPDaemon::HandleRequest()+0x68>
  4b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4f:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 56 <TFTPDaemon::HandleRequest()+0x56>
  56:	be 04 00 00 00       	mov    $0x4,%esi
  5b:	48 89 c7             	mov    %rax,%rdi
  5e:	e8 00 00 00 00       	call   63 <TFTPDaemon::HandleRequest()+0x63>
  63:	e9 1f 02 00 00       	jmp    287 <TFTPDaemon::HandleRequest()+0x287>
  68:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  6c:	48 83 c0 02          	add    $0x2,%rax
  70:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  74:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  78:	48 89 c7             	mov    %rax,%rdi
  7b:	e8 00 00 00 00       	call   80 <TFTPDaemon::HandleRequest()+0x80>
  80:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  84:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  89:	74 0a                	je     95 <TFTPDaemon::HandleRequest()+0x95>
  8b:	48 81 7d e8 80 00 00 	cmpq   $0x80,-0x18(%rbp)
  92:	00 
  93:	76 1d                	jbe    b2 <TFTPDaemon::HandleRequest()+0xb2>
  95:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  99:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # a0 <TFTPDaemon::HandleRequest()+0xa0>
  a0:	be 00 00 00 00       	mov    $0x0,%esi
  a5:	48 89 c7             	mov    %rax,%rdi
  a8:	e8 00 00 00 00       	call   ad <TFTPDaemon::HandleRequest()+0xad>
  ad:	e9 d5 01 00 00       	jmp    287 <TFTPDaemon::HandleRequest()+0x287>
  b2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  b6:	48 8d 50 01          	lea    0x1(%rax),%rdx
  ba:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  be:	48 01 d0             	add    %rdx,%rax
  c1:	48 83 c0 02          	add    $0x2,%rax
  c5:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  c9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  cd:	ba 05 00 00 00       	mov    $0x5,%edx
  d2:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # d9 <TFTPDaemon::HandleRequest()+0xd9>
  d9:	48 89 ce             	mov    %rcx,%rsi
  dc:	48 89 c7             	mov    %rax,%rdi
  df:	e8 00 00 00 00       	call   e4 <TFTPDaemon::HandleRequest()+0xe4>
  e4:	85 c0                	test   %eax,%eax
  e6:	75 09                	jne    f1 <TFTPDaemon::HandleRequest()+0xf1>
  e8:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%rbp)
  ef:	eb 45                	jmp    136 <TFTPDaemon::HandleRequest()+0x136>
  f1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  f5:	ba 08 00 00 00       	mov    $0x8,%edx
  fa:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 101 <TFTPDaemon::HandleRequest()+0x101>
 101:	48 89 ce             	mov    %rcx,%rsi
 104:	48 89 c7             	mov    %rax,%rdi
 107:	e8 00 00 00 00       	call   10c <TFTPDaemon::HandleRequest()+0x10c>
 10c:	85 c0                	test   %eax,%eax
 10e:	75 09                	jne    119 <TFTPDaemon::HandleRequest()+0x119>
 110:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%rbp)
 117:	eb 1d                	jmp    136 <TFTPDaemon::HandleRequest()+0x136>
 119:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 11d:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 124 <TFTPDaemon::HandleRequest()+0x124>
 124:	be 04 00 00 00       	mov    $0x4,%esi
 129:	48 89 c7             	mov    %rax,%rdi
 12c:	e8 00 00 00 00       	call   131 <TFTPDaemon::HandleRequest()+0x131>
 131:	e9 51 01 00 00       	jmp    287 <TFTPDaemon::HandleRequest()+0x287>
 136:	0f b7 45 d2          	movzwl -0x2e(%rbp),%eax
 13a:	83 f8 01             	cmp    $0x1,%eax
 13d:	74 35                	je     174 <TFTPDaemon::HandleRequest()+0x174>
 13f:	83 f8 02             	cmp    $0x2,%eax
 142:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 146:	48 8b 00             	mov    (%rax),%rax
 149:	48 83 c0 18          	add    $0x18,%rax
 14d:	4c 8b 00             	mov    (%rax),%r8
 150:	8b 55 d4             	mov    -0x2c(%rbp),%edx
 153:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
 157:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 15b:	48 89 ce             	mov    %rcx,%rsi
 15e:	48 89 c7             	mov    %rax,%rdi
 161:	41 ff d0             	call   *%r8
 164:	83 f0 01             	xor    $0x1,%eax
 167:	84 c0                	test   %al,%al
 169:	0f 84 ca 00 00 00    	je     239 <TFTPDaemon::HandleRequest()+0x239>
 16f:	e9 a0 00 00 00       	jmp    214 <TFTPDaemon::HandleRequest()+0x214>
 174:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 178:	48 8b 00             	mov    (%rax),%rax
 17b:	48 83 c0 10          	add    $0x10,%rax
 17f:	4c 8b 00             	mov    (%rax),%r8
 182:	8b 55 d4             	mov    -0x2c(%rbp),%edx
 185:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
 189:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 18d:	48 89 ce             	mov    %rcx,%rsi
 190:	48 89 c7             	mov    %rax,%rdi
 193:	41 ff d0             	call   *%r8
 196:	83 f0 01             	xor    $0x1,%eax
 199:	84 c0                	test   %al,%al
 19b:	74 28                	je     1c5 <TFTPDaemon::HandleRequest()+0x1c5>
 19d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 1a1:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 1a8 <TFTPDaemon::HandleRequest()+0x1a8>
 1a8:	be 01 00 00 00       	mov    $0x1,%esi
 1ad:	48 89 c7             	mov    %rax,%rdi
 1b0:	e8 00 00 00 00       	call   1b5 <TFTPDaemon::HandleRequest()+0x1b5>
 1b5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 1b9:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%rax)
 1c0:	e9 c2 00 00 00       	jmp    287 <TFTPDaemon::HandleRequest()+0x287>
 1c5:	e8 00 00 00 00       	call   1ca <TFTPDaemon::HandleRequest()+0x1ca>
 1ca:	be 45 00 00 00       	mov    $0x45,%esi
 1cf:	48 89 c7             	mov    %rax,%rdi
 1d2:	e8 00 00 00 00       	call   1d7 <TFTPDaemon::HandleRequest()+0x1d7>
 1d7:	e8 00 00 00 00       	call   1dc <TFTPDaemon::HandleRequest()+0x1dc>
 1dc:	48 89 c2             	mov    %rax,%rdx
 1df:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 1e3:	0f b7 40 1c          	movzwl 0x1c(%rax),%eax
 1e7:	0f b7 c0             	movzwl %ax,%eax
 1ea:	89 c6                	mov    %eax,%esi
 1ec:	48 89 d7             	mov    %rdx,%rdi
 1ef:	e8 00 00 00 00       	call   1f4 <TFTPDaemon::HandleRequest()+0x1f4>
 1f4:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
 1f8:	89 42 0c             	mov    %eax,0xc(%rdx)
 1fb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 1ff:	c7 40 08 02 00 00 00 	movl   $0x2,0x8(%rax)
 206:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 20a:	48 89 c7             	mov    %rax,%rdi
 20d:	e8 00 00 00 00       	call   212 <TFTPDaemon::HandleRequest()+0x212>
 212:	eb 73                	jmp    287 <TFTPDaemon::HandleRequest()+0x287>
 214:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 218:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 21f <TFTPDaemon::HandleRequest()+0x21f>
 21f:	be 02 00 00 00       	mov    $0x2,%esi
 224:	48 89 c7             	mov    %rax,%rdi
 227:	e8 00 00 00 00       	call   22c <TFTPDaemon::HandleRequest()+0x22c>
 22c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 230:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%rax)
 237:	eb 4d                	jmp    286 <TFTPDaemon::HandleRequest()+0x286>
 239:	e8 00 00 00 00       	call   23e <TFTPDaemon::HandleRequest()+0x23e>
 23e:	be 45 00 00 00       	mov    $0x45,%esi
 243:	48 89 c7             	mov    %rax,%rdi
 246:	e8 00 00 00 00       	call   24b <TFTPDaemon::HandleRequest()+0x24b>
 24b:	e8 00 00 00 00       	call   250 <TFTPDaemon::HandleRequest()+0x250>
 250:	48 89 c2             	mov    %rax,%rdx
 253:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 257:	0f b7 40 1c          	movzwl 0x1c(%rax),%eax
 25b:	0f b7 c0             	movzwl %ax,%eax
 25e:	89 c6                	mov    %eax,%esi
 260:	48 89 d7             	mov    %rdx,%rdi
 263:	e8 00 00 00 00       	call   268 <TFTPDaemon::HandleRequest()+0x268>
 268:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
 26c:	89 42 0c             	mov    %eax,0xc(%rdx)
 26f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 273:	c7 40 08 04 00 00 00 	movl   $0x4,0x8(%rax)
 27a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 27e:	48 89 c7             	mov    %rax,%rdi
 281:	e8 00 00 00 00       	call   286 <TFTPDaemon::HandleRequest()+0x286>
 286:	90                   	nop
 287:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 28b:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 292:	00 00 
 294:	74 05                	je     29b <TFTPDaemon::HandleRequest()+0x29b>
 296:	e8 00 00 00 00       	call   29b <TFTPDaemon::HandleRequest()+0x29b>
 29b:	c9                   	leave  
 29c:	c3                   	ret    

Disassembly of section .text._ZN10TFTPDaemon9SendErrorEtPKc:

0000000000000000 <TFTPDaemon::SendError(unsigned short, char const*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
   f:	48 89 bd 68 ff ff ff 	mov    %rdi,-0x98(%rbp)
  16:	89 f0                	mov    %esi,%eax
  18:	48 89 95 58 ff ff ff 	mov    %rdx,-0xa8(%rbp)
  1f:	66 89 85 64 ff ff ff 	mov    %ax,-0x9c(%rbp)
  26:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  2d:	00 00 
  2f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  33:	31 c0                	xor    %eax,%eax
  35:	66 c7 85 70 ff ff ff 	movw   $0x500,-0x90(%rbp)
  3c:	00 05 
  3e:	0f b7 85 64 ff ff ff 	movzwl -0x9c(%rbp),%eax
  45:	66 c1 c0 08          	rol    $0x8,%ax
  49:	66 89 85 72 ff ff ff 	mov    %ax,-0x8e(%rbp)
  50:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  57:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
  5e:	48 8d 4a 04          	lea    0x4(%rdx),%rcx
  62:	ba 7f 00 00 00       	mov    $0x7f,%edx
  67:	48 89 c6             	mov    %rax,%rsi
  6a:	48 89 cf             	mov    %rcx,%rdi
  6d:	e8 00 00 00 00       	call   72 <TFTPDaemon::SendError(unsigned short, char const*)+0x72>
  72:	e8 00 00 00 00       	call   77 <TFTPDaemon::SendError(unsigned short, char const*)+0x77>
  77:	48 89 c7             	mov    %rax,%rdi
  7a:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  81:	0f b7 40 1c          	movzwl 0x1c(%rax),%eax
  85:	0f b7 f0             	movzwl %ax,%esi
  88:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8f:	8b 48 18             	mov    0x18(%rax),%ecx
  92:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  99:	8b 40 0c             	mov    0xc(%rax),%eax
  9c:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
  a3:	41 89 f1             	mov    %esi,%r9d
  a6:	41 89 c8             	mov    %ecx,%r8d
  a9:	b9 84 00 00 00       	mov    $0x84,%ecx
  ae:	89 c6                	mov    %eax,%esi
  b0:	e8 00 00 00 00       	call   b5 <TFTPDaemon::SendError(unsigned short, char const*)+0xb5>
  b5:	90                   	nop
  b6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  ba:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  c1:	00 00 
  c3:	74 05                	je     ca <TFTPDaemon::SendError(unsigned short, char const*)+0xca>
  c5:	e8 00 00 00 00       	call   ca <TFTPDaemon::SendError(unsigned short, char const*)+0xca>
  ca:	c9                   	leave  
  cb:	c3                   	ret    

Disassembly of section .text._ZN10TFTPDaemon6DoReadEv:

0000000000000000 <TFTPDaemon::DoRead()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	48 8b 40 10          	mov    0x10(%rax),%rax
  27:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  2b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2f:	8b 40 08             	mov    0x8(%rax),%eax
  32:	83 f8 02             	cmp    $0x2,%eax
  35:	0f 85 bd 00 00 00    	jne    f8 <TFTPDaemon::DoRead()+0xf8>
  3b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3f:	48 8b 00             	mov    (%rax),%rax
  42:	48 83 c0 28          	add    $0x28,%rax
  46:	4c 8b 00             	mov    (%rax),%r8
  49:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4d:	0f b7 40 28          	movzwl 0x28(%rax),%eax
  51:	8d 50 01             	lea    0x1(%rax),%edx
  54:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  58:	66 89 50 28          	mov    %dx,0x28(%rax)
  5c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  60:	0f b7 40 28          	movzwl 0x28(%rax),%eax
  64:	0f b7 d0             	movzwl %ax,%edx
  67:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  6b:	48 8d 70 04          	lea    0x4(%rax),%rsi
  6f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  73:	89 d1                	mov    %edx,%ecx
  75:	ba 00 02 00 00       	mov    $0x200,%edx
  7a:	48 89 c7             	mov    %rax,%rdi
  7d:	41 ff d0             	call   *%r8
  80:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  84:	48 89 42 30          	mov    %rax,0x30(%rdx)
  88:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8c:	66 c7 00 00 03       	movw   $0x300,(%rax)
  91:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  95:	0f b7 40 28          	movzwl 0x28(%rax),%eax
  99:	0f b7 c0             	movzwl %ax,%eax
  9c:	89 c2                	mov    %eax,%edx
  9e:	66 c1 c2 08          	rol    $0x8,%dx
  a2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  a6:	66 89 50 02          	mov    %dx,0x2(%rax)
  aa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  ae:	48 8b 40 30          	mov    0x30(%rax),%rax
  b2:	8d 50 04             	lea    0x4(%rax),%edx
  b5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  b9:	66 89 50 38          	mov    %dx,0x38(%rax)
  bd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  c1:	48 8b 40 30          	mov    0x30(%rax),%rax
  c5:	48 3d ff 01 00 00    	cmp    $0x1ff,%rax
  cb:	0f 96 c2             	setbe  %dl
  ce:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  d2:	88 50 3a             	mov    %dl,0x3a(%rax)
  d5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  d9:	0f b6 40 3a          	movzbl 0x3a(%rax),%eax
  dd:	84 c0                	test   %al,%al
  df:	74 17                	je     f8 <TFTPDaemon::DoRead()+0xf8>
  e1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  e5:	48 8b 00             	mov    (%rax),%rax
  e8:	48 83 c0 20          	add    $0x20,%rax
  ec:	48 8b 10             	mov    (%rax),%rdx
  ef:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  f3:	48 89 c7             	mov    %rax,%rdi
  f6:	ff d2                	call   *%rdx
  f8:	e8 00 00 00 00       	call   fd <TFTPDaemon::DoRead()+0xfd>
  fd:	48 89 c7             	mov    %rax,%rdi
 100:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 104:	0f b7 40 1c          	movzwl 0x1c(%rax),%eax
 108:	44 0f b7 c0          	movzwl %ax,%r8d
 10c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 110:	8b 70 18             	mov    0x18(%rax),%esi
 113:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 117:	0f b7 40 38          	movzwl 0x38(%rax),%eax
 11b:	0f b7 c8             	movzwl %ax,%ecx
 11e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 122:	48 8b 50 10          	mov    0x10(%rax),%rdx
 126:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 12a:	8b 40 0c             	mov    0xc(%rax),%eax
 12d:	45 89 c1             	mov    %r8d,%r9d
 130:	41 89 f0             	mov    %esi,%r8d
 133:	89 c6                	mov    %eax,%esi
 135:	e8 00 00 00 00       	call   13a <TFTPDaemon::DoRead()+0x13a>
 13a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 13e:	c7 40 08 03 00 00 00 	movl   $0x3,0x8(%rax)
 145:	90                   	nop
 146:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 14a:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 151:	00 00 
 153:	74 05                	je     15a <TFTPDaemon::DoRead()+0x15a>
 155:	e8 00 00 00 00       	call   15a <TFTPDaemon::DoRead()+0x15a>
 15a:	c9                   	leave  
 15b:	c3                   	ret    

Disassembly of section .text._ZN10TFTPDaemon13HandleRecvAckEv:

0000000000000000 <TFTPDaemon::HandleRecvAck()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	48 8b 40 10          	mov    0x10(%rax),%rax
  27:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  2b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  2f:	0f b7 00             	movzwl (%rax),%eax
  32:	66 3d 00 04          	cmp    $0x400,%ax
  36:	75 3b                	jne    73 <TFTPDaemon::HandleRecvAck()+0x73>
  38:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  3c:	0f b7 50 02          	movzwl 0x2(%rax),%edx
  40:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  44:	0f b7 40 28          	movzwl 0x28(%rax),%eax
  48:	0f b7 c0             	movzwl %ax,%eax
  4b:	66 c1 c0 08          	rol    $0x8,%ax
  4f:	66 39 c2             	cmp    %ax,%dx
  52:	75 1f                	jne    73 <TFTPDaemon::HandleRecvAck()+0x73>
  54:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  58:	0f b6 40 3a          	movzbl 0x3a(%rax),%eax
  5c:	84 c0                	test   %al,%al
  5e:	74 07                	je     67 <TFTPDaemon::HandleRecvAck()+0x67>
  60:	ba 00 00 00 00       	mov    $0x0,%edx
  65:	eb 05                	jmp    6c <TFTPDaemon::HandleRecvAck()+0x6c>
  67:	ba 02 00 00 00       	mov    $0x2,%edx
  6c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  70:	89 50 08             	mov    %edx,0x8(%rax)
  73:	90                   	nop
  74:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  78:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  7f:	00 00 
  81:	74 05                	je     88 <TFTPDaemon::HandleRecvAck()+0x88>
  83:	e8 00 00 00 00       	call   88 <TFTPDaemon::HandleRecvAck()+0x88>
  88:	c9                   	leave  
  89:	c3                   	ret    

Disassembly of section .text._ZN10TFTPDaemon10DoWriteAckEv:

0000000000000000 <TFTPDaemon::DoWriteAck()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	48 8b 40 10          	mov    0x10(%rax),%rax
  27:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  2b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  2f:	66 c7 00 00 04       	movw   $0x400,(%rax)
  34:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  38:	0f b7 40 28          	movzwl 0x28(%rax),%eax
  3c:	0f b7 c0             	movzwl %ax,%eax
  3f:	89 c2                	mov    %eax,%edx
  41:	66 c1 c2 08          	rol    $0x8,%dx
  45:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  49:	66 89 50 02          	mov    %dx,0x2(%rax)
  4d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  51:	0f b6 40 3a          	movzbl 0x3a(%rax),%eax
  55:	84 c0                	test   %al,%al
  57:	74 07                	je     60 <TFTPDaemon::DoWriteAck()+0x60>
  59:	ba 00 00 00 00       	mov    $0x0,%edx
  5e:	eb 05                	jmp    65 <TFTPDaemon::DoWriteAck()+0x65>
  60:	ba 05 00 00 00       	mov    $0x5,%edx
  65:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  69:	89 50 08             	mov    %edx,0x8(%rax)
  6c:	e8 00 00 00 00       	call   71 <TFTPDaemon::DoWriteAck()+0x71>
  71:	48 89 c7             	mov    %rax,%rdi
  74:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  78:	0f b7 40 1c          	movzwl 0x1c(%rax),%eax
  7c:	0f b7 f0             	movzwl %ax,%esi
  7f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  83:	8b 48 18             	mov    0x18(%rax),%ecx
  86:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8a:	48 8b 50 10          	mov    0x10(%rax),%rdx
  8e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  92:	8b 40 0c             	mov    0xc(%rax),%eax
  95:	41 89 f1             	mov    %esi,%r9d
  98:	41 89 c8             	mov    %ecx,%r8d
  9b:	b9 04 00 00 00       	mov    $0x4,%ecx
  a0:	89 c6                	mov    %eax,%esi
  a2:	e8 00 00 00 00       	call   a7 <TFTPDaemon::DoWriteAck()+0xa7>
  a7:	90                   	nop
  a8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  ac:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  b3:	00 00 
  b5:	74 05                	je     bc <TFTPDaemon::DoWriteAck()+0xbc>
  b7:	e8 00 00 00 00       	call   bc <TFTPDaemon::DoWriteAck()+0xbc>
  bc:	c9                   	leave  
  bd:	c3                   	ret    

Disassembly of section .text._ZN10TFTPDaemon14HandleRecvDataEv:

0000000000000000 <TFTPDaemon::HandleRecvData()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	53                   	push   %rbx
   9:	48 83 ec 28          	sub    $0x28,%rsp
   d:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  11:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  18:	00 00 
  1a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  1e:	31 c0                	xor    %eax,%eax
  20:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  24:	48 8b 40 10          	mov    0x10(%rax),%rax
  28:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  2c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  30:	0f b7 00             	movzwl (%rax),%eax
  33:	66 3d 00 03          	cmp    $0x300,%ax
  37:	0f 85 d2 00 00 00    	jne    10f <TFTPDaemon::HandleRecvData()+0x10f>
  3d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  41:	48 8b 40 20          	mov    0x20(%rax),%rax
  45:	48 8d 50 fc          	lea    -0x4(%rax),%rdx
  49:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4d:	48 89 50 30          	mov    %rdx,0x30(%rax)
  51:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  55:	0f b7 40 02          	movzwl 0x2(%rax),%eax
  59:	0f b7 c0             	movzwl %ax,%eax
  5c:	89 c2                	mov    %eax,%edx
  5e:	66 c1 c2 08          	rol    $0x8,%dx
  62:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  66:	66 89 50 28          	mov    %dx,0x28(%rax)
  6a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  6e:	48 8b 58 30          	mov    0x30(%rax),%rbx
  72:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  76:	48 8b 00             	mov    (%rax),%rax
  79:	48 83 c0 30          	add    $0x30,%rax
  7d:	4c 8b 00             	mov    (%rax),%r8
  80:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  84:	0f b7 40 28          	movzwl 0x28(%rax),%eax
  88:	0f b7 c8             	movzwl %ax,%ecx
  8b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8f:	48 8b 50 30          	mov    0x30(%rax),%rdx
  93:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  97:	48 8d 70 04          	lea    0x4(%rax),%rsi
  9b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  9f:	48 89 c7             	mov    %rax,%rdi
  a2:	41 ff d0             	call   *%r8
  a5:	48 39 c3             	cmp    %rax,%rbx
  a8:	0f 94 c0             	sete   %al
  ab:	84 c0                	test   %al,%al
  ad:	74 3d                	je     ec <TFTPDaemon::HandleRecvData()+0xec>
  af:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  b3:	48 8b 40 30          	mov    0x30(%rax),%rax
  b7:	48 3d ff 01 00 00    	cmp    $0x1ff,%rax
  bd:	77 1f                	ja     de <TFTPDaemon::HandleRecvData()+0xde>
  bf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  c3:	c6 40 3a 01          	movb   $0x1,0x3a(%rax)
  c7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  cb:	48 8b 00             	mov    (%rax),%rax
  ce:	48 83 c0 20          	add    $0x20,%rax
  d2:	48 8b 10             	mov    (%rax),%rdx
  d5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  d9:	48 89 c7             	mov    %rax,%rdi
  dc:	ff d2                	call   *%rdx
  de:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  e2:	48 89 c7             	mov    %rax,%rdi
  e5:	e8 00 00 00 00       	call   ea <TFTPDaemon::HandleRecvData()+0xea>
  ea:	eb 23                	jmp    10f <TFTPDaemon::HandleRecvData()+0x10f>
  ec:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  f0:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # f7 <TFTPDaemon::HandleRecvData()+0xf7>
  f7:	be 03 00 00 00       	mov    $0x3,%esi
  fc:	48 89 c7             	mov    %rax,%rdi
  ff:	e8 00 00 00 00       	call   104 <TFTPDaemon::HandleRecvData()+0x104>
 104:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 108:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)
 10f:	90                   	nop
 110:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 114:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 11b:	00 00 
 11d:	74 05                	je     124 <TFTPDaemon::HandleRecvData()+0x124>
 11f:	e8 00 00 00 00       	call   124 <TFTPDaemon::HandleRecvData()+0x124>
 124:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
 128:	c9                   	leave  
 129:	c3                   	ret    

networkparams.o:     file format elf64-x86-64


Disassembly of section .text._ZN7network16is_netmask_validEj:

0000000000000000 <network::is_netmask_valid(unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 ec 18          	sub    $0x18,%rsp
   8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   f:	00 00 
  11:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  16:	31 c0                	xor    %eax,%eax
  18:	85 ff                	test   %edi,%edi
  1a:	74 0d                	je     29 <network::is_netmask_valid(unsigned int)+0x29>
  1c:	0f cf                	bswap  %edi
  1e:	89 f8                	mov    %edi,%eax
  20:	f7 d0                	not    %eax
  22:	d1 e8                	shr    %eax
  24:	85 f8                	test   %edi,%eax
  26:	0f 94 c0             	sete   %al
  29:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  2e:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  35:	00 00 
  37:	74 05                	je     3e <network::is_netmask_valid(unsigned int)+0x3e>
  39:	e8 00 00 00 00       	call   3e <network::is_netmask_valid(unsigned int)+0x3e>
  3e:	48 83 c4 18          	add    $0x18,%rsp
  42:	c3                   	ret    

Disassembly of section .text._ZN7network13is_private_ipEj:

0000000000000000 <network::is_private_ip(unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 ec 18          	sub    $0x18,%rsp
   8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   f:	00 00 
  11:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  16:	89 f8                	mov    %edi,%eax
  18:	c1 e8 08             	shr    $0x8,%eax
  1b:	40 80 ff ac          	cmp    $0xac,%dil
  1f:	74 11                	je     32 <network::is_private_ip(unsigned int)+0x32>
  21:	40 0f b6 d7          	movzbl %dil,%edx
  25:	81 fa c0 00 00 00    	cmp    $0xc0,%edx
  2b:	74 0f                	je     3c <network::is_private_ip(unsigned int)+0x3c>
  2d:	83 fa 0a             	cmp    $0xa,%edx
  30:	eb 0c                	jmp    3e <network::is_private_ip(unsigned int)+0x3e>
  32:	83 e8 10             	sub    $0x10,%eax
  35:	3c 0f                	cmp    $0xf,%al
  37:	0f 96 c0             	setbe  %al
  3a:	eb 05                	jmp    41 <network::is_private_ip(unsigned int)+0x41>
  3c:	3c a8                	cmp    $0xa8,%al
  3e:	0f 94 c0             	sete   %al
  41:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  46:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  4d:	00 00 
  4f:	74 05                	je     56 <network::is_private_ip(unsigned int)+0x56>
  51:	e8 00 00 00 00       	call   56 <network::is_private_ip(unsigned int)+0x56>
  56:	48 83 c4 18          	add    $0x18,%rsp
  5a:	c3                   	ret    

Disassembly of section .text._ZNK13NetworkParams9isMaskSetEj:

0000000000000000 <NetworkParams::isMaskSet(unsigned int) const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 ec 18          	sub    $0x18,%rsp
   8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   f:	00 00 
  11:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  16:	89 f0                	mov    %esi,%eax
  18:	23 47 08             	and    0x8(%rdi),%eax
  1b:	39 f0                	cmp    %esi,%eax
  1d:	0f 94 c0             	sete   %al
  20:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  25:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  2c:	00 00 
  2e:	74 05                	je     35 <NetworkParams::isMaskSet(unsigned int) const+0x35>
  30:	e8 00 00 00 00       	call   35 <NetworkParams::isMaskSet(unsigned int) const+0x35>
  35:	48 83 c4 18          	add    $0x18,%rsp
  39:	c3                   	ret    

Disassembly of section .text._ZNK7Network14GetSecondaryIpEv:

0000000000000000 <Network::GetSecondaryIp() const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 ec 18          	sub    $0x18,%rsp
   8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   f:	00 00 
  11:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  16:	8b 47 10             	mov    0x10(%rdi),%eax
  19:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  1e:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  25:	00 00 
  27:	74 05                	je     2e <Network::GetSecondaryIp() const+0x2e>
  29:	e8 00 00 00 00       	call   2e <Network::GetSecondaryIp() const+0x2e>
  2e:	48 83 c4 18          	add    $0x18,%rsp
  32:	c3                   	ret    

Disassembly of section .text._ZNK7Network5GetIpEv:

0000000000000000 <Network::GetIp() const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 ec 18          	sub    $0x18,%rsp
   8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   f:	00 00 
  11:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  16:	8b 47 10             	mov    0x10(%rdi),%eax
  19:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  1e:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  25:	00 00 
  27:	74 05                	je     2e <Network::GetIp() const+0x2e>
  29:	e8 00 00 00 00       	call   2e <Network::GetIp() const+0x2e>
  2e:	48 83 c4 18          	add    $0x18,%rsp
  32:	c3                   	ret    

Disassembly of section .text._ZNK7Network11GetHostNameEv:

0000000000000000 <Network::GetHostName() const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 ec 18          	sub    $0x18,%rsp
   8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   f:	00 00 
  11:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  16:	31 c0                	xor    %eax,%eax
  18:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  1d:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  24:	00 00 
  26:	74 05                	je     2d <Network::GetHostName() const+0x2d>
  28:	e8 00 00 00 00       	call   2d <Network::GetHostName() const+0x2d>
  2d:	48 8d 47 1c          	lea    0x1c(%rdi),%rax
  31:	48 83 c4 18          	add    $0x18,%rsp
  35:	c3                   	ret    

Disassembly of section .text._ZNK7Network12GetGatewayIpEv:

0000000000000000 <Network::GetGatewayIp() const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 ec 18          	sub    $0x18,%rsp
   8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   f:	00 00 
  11:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  16:	8b 47 14             	mov    0x14(%rdi),%eax
  19:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  1e:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  25:	00 00 
  27:	74 05                	je     2e <Network::GetGatewayIp() const+0x2e>
  29:	e8 00 00 00 00       	call   2e <Network::GetGatewayIp() const+0x2e>
  2e:	48 83 c4 18          	add    $0x18,%rsp
  32:	c3                   	ret    

Disassembly of section .text._ZNK7Network10GetNetmaskEv:

0000000000000000 <Network::GetNetmask() const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 ec 18          	sub    $0x18,%rsp
   8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   f:	00 00 
  11:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  16:	8b 47 18             	mov    0x18(%rdi),%eax
  19:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  1e:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  25:	00 00 
  27:	74 05                	je     2e <Network::GetNetmask() const+0x2e>
  29:	e8 00 00 00 00       	call   2e <Network::GetNetmask() const+0x2e>
  2e:	48 83 c4 18          	add    $0x18,%rsp
  32:	c3                   	ret    

Disassembly of section .text._ZN7Network3GetEv:

0000000000000000 <Network::Get()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 ec 18          	sub    $0x18,%rsp
   8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   f:	00 00 
  11:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  16:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 1d <Network::Get()+0x1d>
  1d:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  22:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  29:	00 00 
  2b:	74 05                	je     32 <Network::Get()+0x32>
  2d:	e8 00 00 00 00       	call   32 <Network::Get()+0x32>
  32:	48 83 c4 18          	add    $0x18,%rsp
  36:	c3                   	ret    

Disassembly of section .text._ZN17PropertiesBuilder7GetSizeEv:

0000000000000000 <PropertiesBuilder::GetSize()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 ec 18          	sub    $0x18,%rsp
   8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   f:	00 00 
  11:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  16:	31 c0                	xor    %eax,%eax
  18:	80 7f 0c 00          	cmpb   $0x0,0xc(%rdi)
  1c:	74 1b                	je     39 <PropertiesBuilder::GetSize()+0x39>
  1e:	0f b7 47 0a          	movzwl 0xa(%rdi),%eax
  22:	48 8b 17             	mov    (%rdi),%rdx
  25:	c6 44 02 ff 7d       	movb   $0x7d,-0x1(%rdx,%rax,1)
  2a:	0f b7 47 0a          	movzwl 0xa(%rdi),%eax
  2e:	48 8b 17             	mov    (%rdi),%rdx
  31:	c6 04 02 7d          	movb   $0x7d,(%rdx,%rax,1)
  35:	66 ff 47 0a          	incw   0xa(%rdi)
  39:	66 8b 47 0a          	mov    0xa(%rdi),%ax
  3d:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  42:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  49:	00 00 
  4b:	74 05                	je     52 <PropertiesBuilder::GetSize()+0x52>
  4d:	e8 00 00 00 00       	call   52 <PropertiesBuilder::GetSize()+0x52>
  52:	48 83 c4 18          	add    $0x18,%rsp
  56:	c3                   	ret    

Disassembly of section .text._ZN17PropertiesBuilder8add_partIPcEEiS1_jPKcT_bj:

0000000000000000 <int PropertiesBuilder::add_part<char*>(char*, unsigned int, char const*, char*, bool, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 ec 18          	sub    $0x18,%rsp
   8:	49 89 fa             	mov    %rdi,%r10
   b:	48 89 f7             	mov    %rsi,%rdi
   e:	89 d6                	mov    %edx,%esi
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  1e:	31 c0                	xor    %eax,%eax
  20:	41 8a 42 0c          	mov    0xc(%r10),%al
  24:	45 84 c9             	test   %r9b,%r9b
  27:	75 06                	jne    2f <int PropertiesBuilder::add_part<char*>(char*, unsigned int, char const*, char*, bool, unsigned int)+0x2f>
  29:	84 c0                	test   %al,%al
  2b:	75 06                	jne    33 <int PropertiesBuilder::add_part<char*>(char*, unsigned int, char const*, char*, bool, unsigned int)+0x33>
  2d:	eb 36                	jmp    65 <int PropertiesBuilder::add_part<char*>(char*, unsigned int, char const*, char*, bool, unsigned int)+0x65>
  2f:	84 c0                	test   %al,%al
  31:	74 19                	je     4c <int PropertiesBuilder::add_part<char*>(char*, unsigned int, char const*, char*, bool, unsigned int)+0x4c>
  33:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  38:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  3f:	00 00 
  41:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 48 <int PropertiesBuilder::add_part<char*>(char*, unsigned int, char const*, char*, bool, unsigned int)+0x48>
  48:	74 37                	je     81 <int PropertiesBuilder::add_part<char*>(char*, unsigned int, char const*, char*, bool, unsigned int)+0x81>
  4a:	eb 30                	jmp    7c <int PropertiesBuilder::add_part<char*>(char*, unsigned int, char const*, char*, bool, unsigned int)+0x7c>
  4c:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  51:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  58:	00 00 
  5a:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 61 <int PropertiesBuilder::add_part<char*>(char*, unsigned int, char const*, char*, bool, unsigned int)+0x61>
  61:	74 1e                	je     81 <int PropertiesBuilder::add_part<char*>(char*, unsigned int, char const*, char*, bool, unsigned int)+0x81>
  63:	eb 17                	jmp    7c <int PropertiesBuilder::add_part<char*>(char*, unsigned int, char const*, char*, bool, unsigned int)+0x7c>
  65:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  6a:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  71:	00 00 
  73:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 7a <int PropertiesBuilder::add_part<char*>(char*, unsigned int, char const*, char*, bool, unsigned int)+0x7a>
  7a:	74 05                	je     81 <int PropertiesBuilder::add_part<char*>(char*, unsigned int, char const*, char*, bool, unsigned int)+0x81>
  7c:	e8 00 00 00 00       	call   81 <int PropertiesBuilder::add_part<char*>(char*, unsigned int, char const*, char*, bool, unsigned int)+0x81>
  81:	31 c0                	xor    %eax,%eax
  83:	48 83 c4 18          	add    $0x18,%rsp
  87:	e9 00 00 00 00       	jmp    8c <.LC2+0x7a>

Disassembly of section .text._ZN13NetworkParamsC2EP18NetworkParamsStore:

0000000000000000 <NetworkParams::NetworkParams(NetworkParamsStore*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 ec 18          	sub    $0x18,%rsp
   8:	48 89 fa             	mov    %rdi,%rdx
   b:	b9 5e 00 00 00       	mov    $0x5e,%ecx
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  1e:	31 c0                	xor    %eax,%eax
  20:	48 89 37             	mov    %rsi,(%rdi)
  23:	48 8d 77 08          	lea    0x8(%rdi),%rsi
  27:	48 89 f7             	mov    %rsi,%rdi
  2a:	f3 aa                	rep stos %al,%es:(%rdi)
  2c:	c6 42 1c 01          	movb   $0x1,0x1c(%rdx)
  30:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  35:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  3c:	00 00 
  3e:	74 05                	je     45 <NetworkParams::NetworkParams(NetworkParamsStore*)+0x45>
  40:	e8 00 00 00 00       	call   45 <NetworkParams::NetworkParams(NetworkParamsStore*)+0x45>
  45:	48 83 c4 18          	add    $0x18,%rsp
  49:	c3                   	ret    

Disassembly of section .text._ZN13NetworkParams4LoadEv:

0000000000000000 <NetworkParams::Load()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	41 54                	push   %r12
   6:	48 89 fa             	mov    %rdi,%rdx
   9:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 10 <NetworkParams::Load()+0x10>
  10:	55                   	push   %rbp
  11:	53                   	push   %rbx
  12:	48 89 fb             	mov    %rdi,%rbx
  15:	48 83 ec 20          	sub    $0x20,%rsp
  19:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  20:	00 00 
  22:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  27:	31 c0                	xor    %eax,%eax
  29:	c7 47 08 00 00 00 00 	movl   $0x0,0x8(%rdi)
  30:	48 8d 6c 24 08       	lea    0x8(%rsp),%rbp
  35:	48 89 ef             	mov    %rbp,%rdi
  38:	e8 00 00 00 00       	call   3d <NetworkParams::Load()+0x3d>
  3d:	48 89 ef             	mov    %rbp,%rdi
  40:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 47 <NetworkParams::Load()+0x47>
  47:	e8 00 00 00 00       	call   4c <NetworkParams::Load()+0x4c>
  4c:	48 8b 3b             	mov    (%rbx),%rdi
  4f:	84 c0                	test   %al,%al
  51:	41 89 c4             	mov    %eax,%r12d
  54:	74 11                	je     67 <NetworkParams::Load()+0x67>
  56:	48 85 ff             	test   %rdi,%rdi
  59:	74 1e                	je     79 <NetworkParams::Load()+0x79>
  5b:	48 8b 07             	mov    (%rdi),%rax
  5e:	48 8d 73 08          	lea    0x8(%rbx),%rsi
  62:	ff 50 10             	call   *0x10(%rax)
  65:	eb 12                	jmp    79 <NetworkParams::Load()+0x79>
  67:	48 85 ff             	test   %rdi,%rdi
  6a:	74 0d                	je     79 <NetworkParams::Load()+0x79>
  6c:	48 8b 07             	mov    (%rdi),%rax
  6f:	48 8d 73 08          	lea    0x8(%rbx),%rsi
  73:	41 b4 01             	mov    $0x1,%r12b
  76:	ff 50 18             	call   *0x18(%rax)
  79:	48 89 ef             	mov    %rbp,%rdi
  7c:	e8 00 00 00 00       	call   81 <NetworkParams::Load()+0x81>
  81:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  86:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  8d:	00 00 
  8f:	74 05                	je     96 <NetworkParams::Load()+0x96>
  91:	e8 00 00 00 00       	call   96 <NetworkParams::Load()+0x96>
  96:	48 83 c4 20          	add    $0x20,%rsp
  9a:	44 89 e0             	mov    %r12d,%eax
  9d:	5b                   	pop    %rbx
  9e:	5d                   	pop    %rbp
  9f:	41 5c                	pop    %r12
  a1:	c3                   	ret    

Disassembly of section .text._ZN13NetworkParams4LoadEPKcj:

0000000000000000 <NetworkParams::Load(char const*, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	41 55                	push   %r13
   6:	41 89 d5             	mov    %edx,%r13d
   9:	48 89 fa             	mov    %rdi,%rdx
   c:	41 54                	push   %r12
   e:	49 89 f4             	mov    %rsi,%r12
  11:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 18 <NetworkParams::Load(char const*, unsigned int)+0x18>
  18:	55                   	push   %rbp
  19:	53                   	push   %rbx
  1a:	48 89 fb             	mov    %rdi,%rbx
  1d:	48 83 ec 28          	sub    $0x28,%rsp
  21:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  28:	00 00 
  2a:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2f:	31 c0                	xor    %eax,%eax
  31:	c7 47 08 00 00 00 00 	movl   $0x0,0x8(%rdi)
  38:	48 8d 6c 24 08       	lea    0x8(%rsp),%rbp
  3d:	48 89 ef             	mov    %rbp,%rdi
  40:	e8 00 00 00 00       	call   45 <NetworkParams::Load(char const*, unsigned int)+0x45>
  45:	44 89 ea             	mov    %r13d,%edx
  48:	4c 89 e6             	mov    %r12,%rsi
  4b:	48 89 ef             	mov    %rbp,%rdi
  4e:	e8 00 00 00 00       	call   53 <NetworkParams::Load(char const*, unsigned int)+0x53>
  53:	48 8b 3b             	mov    (%rbx),%rdi
  56:	48 8d 73 08          	lea    0x8(%rbx),%rsi
  5a:	48 8b 07             	mov    (%rdi),%rax
  5d:	ff 50 10             	call   *0x10(%rax)
  60:	48 89 ef             	mov    %rbp,%rdi
  63:	e8 00 00 00 00       	call   68 <NetworkParams::Load(char const*, unsigned int)+0x68>
  68:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  6d:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  74:	00 00 
  76:	74 05                	je     7d <NetworkParams::Load(char const*, unsigned int)+0x7d>
  78:	e8 00 00 00 00       	call   7d <NetworkParams::Load(char const*, unsigned int)+0x7d>
  7d:	48 83 c4 28          	add    $0x28,%rsp
  81:	5b                   	pop    %rbx
  82:	5d                   	pop    %rbp
  83:	41 5c                	pop    %r12
  85:	41 5d                	pop    %r13
  87:	c3                   	ret    

Disassembly of section .text._ZN13NetworkParams16callbackFunctionEPKc:

0000000000000000 <NetworkParams::callbackFunction(char const*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	41 54                	push   %r12
   6:	55                   	push   %rbp
   7:	48 89 f5             	mov    %rsi,%rbp
   a:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 11 <NetworkParams::callbackFunction(char const*)+0x11>
  11:	53                   	push   %rbx
  12:	48 89 fb             	mov    %rdi,%rbx
  15:	48 89 ef             	mov    %rbp,%rdi
  18:	48 83 ec 20          	sub    $0x20,%rsp
  1c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  23:	00 00 
  25:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2a:	31 c0                	xor    %eax,%eax
  2c:	4c 8d 64 24 0f       	lea    0xf(%rsp),%r12
  31:	4c 89 e2             	mov    %r12,%rdx
  34:	e8 00 00 00 00       	call   39 <NetworkParams::callbackFunction(char const*)+0x39>
  39:	85 c0                	test   %eax,%eax
  3b:	75 23                	jne    60 <NetworkParams::callbackFunction(char const*)+0x60>
  3d:	8b 4b 08             	mov    0x8(%rbx),%ecx
  40:	8a 44 24 0f          	mov    0xf(%rsp),%al
  44:	89 ca                	mov    %ecx,%edx
  46:	83 ca 01             	or     $0x1,%edx
  49:	84 c0                	test   %al,%al
  4b:	74 05                	je     52 <NetworkParams::callbackFunction(char const*)+0x52>
  4d:	83 e1 fe             	and    $0xfffffffe,%ecx
  50:	89 ca                	mov    %ecx,%edx
  52:	84 c0                	test   %al,%al
  54:	89 53 08             	mov    %edx,0x8(%rbx)
  57:	0f 95 43 1c          	setne  0x1c(%rbx)
  5b:	e9 0b 01 00 00       	jmp    16b <NetworkParams::callbackFunction(char const*)+0x16b>
  60:	4c 89 e2             	mov    %r12,%rdx
  63:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6a <NetworkParams::callbackFunction(char const*)+0x6a>
  6a:	48 89 ef             	mov    %rbp,%rdi
  6d:	e8 00 00 00 00       	call   72 <NetworkParams::callbackFunction(char const*)+0x72>
  72:	85 c0                	test   %eax,%eax
  74:	75 24                	jne    9a <NetworkParams::callbackFunction(char const*)+0x9a>
  76:	8a 54 24 0f          	mov    0xf(%rsp),%dl
  7a:	8b 43 08             	mov    0x8(%rbx),%eax
  7d:	8d 4a ff             	lea    -0x1(%rdx),%ecx
  80:	80 f9 04             	cmp    $0x4,%cl
  83:	77 0b                	ja     90 <NetworkParams::callbackFunction(char const*)+0x90>
  85:	80 cc 01             	or     $0x1,%ah
  88:	88 53 65             	mov    %dl,0x65(%rbx)
  8b:	89 43 08             	mov    %eax,0x8(%rbx)
  8e:	eb 0a                	jmp    9a <NetworkParams::callbackFunction(char const*)+0x9a>
  90:	80 e4 fe             	and    $0xfe,%ah
  93:	c6 43 65 00          	movb   $0x0,0x65(%rbx)
  97:	89 43 08             	mov    %eax,0x8(%rbx)
  9a:	4c 8d 64 24 10       	lea    0x10(%rsp),%r12
  9f:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # a6 <NetworkParams::callbackFunction(char const*)+0xa6>
  a6:	48 89 ef             	mov    %rbp,%rdi
  a9:	4c 89 e2             	mov    %r12,%rdx
  ac:	e8 00 00 00 00       	call   b1 <NetworkParams::callbackFunction(char const*)+0xb1>
  b1:	85 c0                	test   %eax,%eax
  b3:	75 2e                	jne    e3 <NetworkParams::callbackFunction(char const*)+0xe3>
  b5:	8b 6c 24 10          	mov    0x10(%rsp),%ebp
  b9:	89 ef                	mov    %ebp,%edi
  bb:	e8 00 00 00 00       	call   c0 <NetworkParams::callbackFunction(char const*)+0xc0>
  c0:	84 c0                	test   %al,%al
  c2:	75 13                	jne    d7 <NetworkParams::callbackFunction(char const*)+0xd7>
  c4:	40 80 fd 02          	cmp    $0x2,%bpl
  c8:	74 0d                	je     d7 <NetworkParams::callbackFunction(char const*)+0xd7>
  ca:	85 ed                	test   %ebp,%ebp
  cc:	74 09                	je     d7 <NetworkParams::callbackFunction(char const*)+0xd7>
  ce:	83 63 08 fd          	andl   $0xfffffffd,0x8(%rbx)
  d2:	e9 94 00 00 00       	jmp    16b <NetworkParams::callbackFunction(char const*)+0x16b>
  d7:	83 4b 08 02          	orl    $0x2,0x8(%rbx)
  db:	89 6b 0c             	mov    %ebp,0xc(%rbx)
  de:	e9 88 00 00 00       	jmp    16b <NetworkParams::callbackFunction(char const*)+0x16b>
  e3:	4c 89 e2             	mov    %r12,%rdx
  e6:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # ed <NetworkParams::callbackFunction(char const*)+0xed>
  ed:	48 89 ef             	mov    %rbp,%rdi
  f0:	e8 00 00 00 00       	call   f5 <NetworkParams::callbackFunction(char const*)+0xf5>
  f5:	85 c0                	test   %eax,%eax
  f7:	75 1e                	jne    117 <NetworkParams::callbackFunction(char const*)+0x117>
  f9:	8b 6c 24 10          	mov    0x10(%rsp),%ebp
  fd:	89 ef                	mov    %ebp,%edi
  ff:	e8 00 00 00 00       	call   104 <NetworkParams::callbackFunction(char const*)+0x104>
 104:	84 c0                	test   %al,%al
 106:	74 09                	je     111 <NetworkParams::callbackFunction(char const*)+0x111>
 108:	83 4b 08 04          	orl    $0x4,0x8(%rbx)
 10c:	89 6b 10             	mov    %ebp,0x10(%rbx)
 10f:	eb 5a                	jmp    16b <NetworkParams::callbackFunction(char const*)+0x16b>
 111:	83 63 08 fb          	andl   $0xfffffffb,0x8(%rbx)
 115:	eb 54                	jmp    16b <NetworkParams::callbackFunction(char const*)+0x16b>
 117:	4c 89 e2             	mov    %r12,%rdx
 11a:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 121 <NetworkParams::callbackFunction(char const*)+0x121>
 121:	48 89 ef             	mov    %rbp,%rdi
 124:	e8 00 00 00 00       	call   129 <NetworkParams::callbackFunction(char const*)+0x129>
 129:	85 c0                	test   %eax,%eax
 12b:	75 0d                	jne    13a <NetworkParams::callbackFunction(char const*)+0x13a>
 12d:	8b 44 24 10          	mov    0x10(%rsp),%eax
 131:	83 4b 08 08          	orl    $0x8,0x8(%rbx)
 135:	89 43 14             	mov    %eax,0x14(%rbx)
 138:	eb 31                	jmp    16b <NetworkParams::callbackFunction(char const*)+0x16b>
 13a:	48 8d 4c 24 14       	lea    0x14(%rsp),%rcx
 13f:	48 8d 53 1d          	lea    0x1d(%rbx),%rdx
 143:	48 89 ef             	mov    %rbp,%rdi
 146:	c7 44 24 14 3f 00 00 	movl   $0x3f,0x14(%rsp)
 14d:	00 
 14e:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 155 <NetworkParams::callbackFunction(char const*)+0x155>
 155:	e8 00 00 00 00       	call   15a <NetworkParams::callbackFunction(char const*)+0x15a>
 15a:	85 c0                	test   %eax,%eax
 15c:	75 0d                	jne    16b <NetworkParams::callbackFunction(char const*)+0x16b>
 15e:	8b 44 24 14          	mov    0x14(%rsp),%eax
 162:	c6 44 03 1d 00       	movb   $0x0,0x1d(%rbx,%rax,1)
 167:	83 4b 08 20          	orl    $0x20,0x8(%rbx)
 16b:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
 170:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 177:	00 00 
 179:	74 05                	je     180 <NetworkParams::callbackFunction(char const*)+0x180>
 17b:	e8 00 00 00 00       	call   180 <NetworkParams::callbackFunction(char const*)+0x180>
 180:	48 83 c4 20          	add    $0x20,%rsp
 184:	5b                   	pop    %rbx
 185:	5d                   	pop    %rbp
 186:	41 5c                	pop    %r12
 188:	c3                   	ret    

Disassembly of section .text._ZN13NetworkParams22staticCallbackFunctionEPvPKc:

0000000000000000 <NetworkParams::staticCallbackFunction(void*, char const*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 ec 18          	sub    $0x18,%rsp
   8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   f:	00 00 
  11:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  16:	31 c0                	xor    %eax,%eax
  18:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  1d:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  24:	00 00 
  26:	74 05                	je     2d <NetworkParams::staticCallbackFunction(void*, char const*)+0x2d>
  28:	e8 00 00 00 00       	call   2d <NetworkParams::staticCallbackFunction(void*, char const*)+0x2d>
  2d:	48 83 c4 18          	add    $0x18,%rsp
  31:	e9 00 00 00 00       	jmp    36 <.LC2+0x24>

Disassembly of section .text._ZN13NetworkParams7BuilderEPKN13networkparams6ParamsEPcjRj:

0000000000000000 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	41 56                	push   %r14
   6:	41 89 ce             	mov    %ecx,%r14d
   9:	41 55                	push   %r13
   b:	49 89 d5             	mov    %rdx,%r13
   e:	41 54                	push   %r12
  10:	55                   	push   %rbp
  11:	48 89 fd             	mov    %rdi,%rbp
  14:	53                   	push   %rbx
  15:	4c 89 c3             	mov    %r8,%rbx
  18:	4c 8d 47 08          	lea    0x8(%rdi),%r8
  1c:	48 83 ec 20          	sub    $0x20,%rsp
  20:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  27:	00 00 
  29:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2e:	31 c0                	xor    %eax,%eax
  30:	48 85 f6             	test   %rsi,%rsi
  33:	74 0c                	je     41 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x41>
  35:	b9 5e 00 00 00       	mov    $0x5e,%ecx
  3a:	4c 89 c7             	mov    %r8,%rdi
  3d:	f3 a4                	rep movsb %ds:(%rsi),%es:(%rdi)
  3f:	eb 0c                	jmp    4d <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x4d>
  41:	48 8b 3f             	mov    (%rdi),%rdi
  44:	4c 89 c6             	mov    %r8,%rsi
  47:	48 8b 07             	mov    (%rdi),%rax
  4a:	ff 50 18             	call   *0x18(%rax)
  4d:	4c 8d 64 24 08       	lea    0x8(%rsp),%r12
  52:	44 89 f1             	mov    %r14d,%ecx
  55:	4c 89 ea             	mov    %r13,%rdx
  58:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5f <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x5f>
  5f:	4c 89 e7             	mov    %r12,%rdi
  62:	e8 00 00 00 00       	call   67 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x67>
  67:	e8 00 00 00 00       	call   6c <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x6c>
  6c:	48 89 c7             	mov    %rax,%rdi
  6f:	e8 00 00 00 00       	call   74 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x74>
  74:	31 c9                	xor    %ecx,%ecx
  76:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 7d <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x7d>
  7d:	4c 89 e7             	mov    %r12,%rdi
  80:	89 c2                	mov    %eax,%edx
  82:	e8 00 00 00 00       	call   87 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x87>
  87:	be 02 00 00 00       	mov    $0x2,%esi
  8c:	48 89 ef             	mov    %rbp,%rdi
  8f:	e8 00 00 00 00       	call   94 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x94>
  94:	84 c0                	test   %al,%al
  96:	75 10                	jne    a8 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0xa8>
  98:	e8 00 00 00 00       	call   9d <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x9d>
  9d:	48 89 c7             	mov    %rax,%rdi
  a0:	e8 00 00 00 00       	call   a5 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0xa5>
  a5:	89 45 0c             	mov    %eax,0xc(%rbp)
  a8:	be 04 00 00 00       	mov    $0x4,%esi
  ad:	48 89 ef             	mov    %rbp,%rdi
  b0:	e8 00 00 00 00       	call   b5 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0xb5>
  b5:	84 c0                	test   %al,%al
  b7:	75 10                	jne    c9 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0xc9>
  b9:	e8 00 00 00 00       	call   be <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0xbe>
  be:	48 89 c7             	mov    %rax,%rdi
  c1:	e8 00 00 00 00       	call   c6 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0xc6>
  c6:	89 45 10             	mov    %eax,0x10(%rbp)
  c9:	be 08 00 00 00       	mov    $0x8,%esi
  ce:	48 89 ef             	mov    %rbp,%rdi
  d1:	e8 00 00 00 00       	call   d6 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0xd6>
  d6:	84 c0                	test   %al,%al
  d8:	75 10                	jne    ea <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0xea>
  da:	e8 00 00 00 00       	call   df <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0xdf>
  df:	48 89 c7             	mov    %rax,%rdi
  e2:	e8 00 00 00 00       	call   e7 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0xe7>
  e7:	89 45 14             	mov    %eax,0x14(%rbp)
  ea:	be 20 00 00 00       	mov    $0x20,%esi
  ef:	48 89 ef             	mov    %rbp,%rdi
  f2:	4c 8d 6d 1d          	lea    0x1d(%rbp),%r13
  f6:	e8 00 00 00 00       	call   fb <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0xfb>
  fb:	84 c0                	test   %al,%al
  fd:	75 21                	jne    120 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x120>
  ff:	e8 00 00 00 00       	call   104 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x104>
 104:	48 89 c7             	mov    %rax,%rdi
 107:	e8 00 00 00 00       	call   10c <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x10c>
 10c:	ba 3f 00 00 00       	mov    $0x3f,%edx
 111:	4c 89 ef             	mov    %r13,%rdi
 114:	48 89 c6             	mov    %rax,%rsi
 117:	e8 00 00 00 00       	call   11c <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x11c>
 11c:	c6 45 5c 00          	movb   $0x0,0x5c(%rbp)
 120:	be 01 00 00 00       	mov    $0x1,%esi
 125:	48 89 ef             	mov    %rbp,%rdi
 128:	e8 00 00 00 00       	call   12d <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x12d>
 12d:	0f b6 55 1c          	movzbl 0x1c(%rbp),%edx
 131:	41 b8 01 00 00 00    	mov    $0x1,%r8d
 137:	4c 89 e7             	mov    %r12,%rdi
 13a:	0f b6 c8             	movzbl %al,%ecx
 13d:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 144 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x144>
 144:	e8 00 00 00 00       	call   149 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x149>
 149:	be 00 01 00 00       	mov    $0x100,%esi
 14e:	48 89 ef             	mov    %rbp,%rdi
 151:	e8 00 00 00 00       	call   156 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x156>
 156:	0f b6 55 65          	movzbl 0x65(%rbp),%edx
 15a:	41 b8 01 00 00 00    	mov    $0x1,%r8d
 160:	4c 89 e7             	mov    %r12,%rdi
 163:	0f b6 c8             	movzbl %al,%ecx
 166:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 16d <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x16d>
 16d:	e8 00 00 00 00       	call   172 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x172>
 172:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 179 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x179>
 179:	4c 89 e7             	mov    %r12,%rdi
 17c:	e8 00 00 00 00       	call   181 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x181>
 181:	be 02 00 00 00       	mov    $0x2,%esi
 186:	48 89 ef             	mov    %rbp,%rdi
 189:	e8 00 00 00 00       	call   18e <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x18e>
 18e:	8b 55 0c             	mov    0xc(%rbp),%edx
 191:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 198 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x198>
 198:	4c 89 e7             	mov    %r12,%rdi
 19b:	0f b6 c8             	movzbl %al,%ecx
 19e:	e8 00 00 00 00       	call   1a3 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1a3>
 1a3:	be 04 00 00 00       	mov    $0x4,%esi
 1a8:	48 89 ef             	mov    %rbp,%rdi
 1ab:	e8 00 00 00 00       	call   1b0 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1b0>
 1b0:	8b 55 10             	mov    0x10(%rbp),%edx
 1b3:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1ba <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1ba>
 1ba:	4c 89 e7             	mov    %r12,%rdi
 1bd:	0f b6 c8             	movzbl %al,%ecx
 1c0:	e8 00 00 00 00       	call   1c5 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1c5>
 1c5:	be 08 00 00 00       	mov    $0x8,%esi
 1ca:	48 89 ef             	mov    %rbp,%rdi
 1cd:	e8 00 00 00 00       	call   1d2 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1d2>
 1d2:	8b 55 14             	mov    0x14(%rbp),%edx
 1d5:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1dc <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1dc>
 1dc:	4c 89 e7             	mov    %r12,%rdi
 1df:	0f b6 c8             	movzbl %al,%ecx
 1e2:	e8 00 00 00 00       	call   1e7 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1e7>
 1e7:	be 20 00 00 00       	mov    $0x20,%esi
 1ec:	48 89 ef             	mov    %rbp,%rdi
 1ef:	e8 00 00 00 00       	call   1f4 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1f4>
 1f4:	41 b8 01 00 00 00    	mov    $0x1,%r8d
 1fa:	4c 89 ea             	mov    %r13,%rdx
 1fd:	4c 89 e7             	mov    %r12,%rdi
 200:	0f b6 c8             	movzbl %al,%ecx
 203:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 20a <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x20a>
 20a:	e8 00 00 00 00       	call   20f <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x20f>
 20f:	4c 89 e7             	mov    %r12,%rdi
 212:	e8 00 00 00 00       	call   217 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x217>
 217:	0f b7 c0             	movzwl %ax,%eax
 21a:	89 03                	mov    %eax,(%rbx)
 21c:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
 221:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 228:	00 00 
 22a:	74 05                	je     231 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x231>
 22c:	e8 00 00 00 00       	call   231 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x231>
 231:	48 83 c4 20          	add    $0x20,%rsp
 235:	5b                   	pop    %rbx
 236:	5d                   	pop    %rbp
 237:	41 5c                	pop    %r12
 239:	41 5d                	pop    %r13
 23b:	41 5e                	pop    %r14
 23d:	c3                   	ret    

Disassembly of section .text._ZN17PropertiesBuilder3AddIbEEbPKcT_bj:

0000000000000000 <bool PropertiesBuilder::Add<bool>(char const*, bool, bool, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	49 89 f2             	mov    %rsi,%r10
   8:	89 d0                	mov    %edx,%eax
   a:	53                   	push   %rbx
   b:	48 83 ec 18          	sub    $0x18,%rsp
   f:	0f b7 77 0a          	movzwl 0xa(%rdi),%esi
  13:	0f b7 6f 08          	movzwl 0x8(%rdi),%ebp
  17:	64 48 8b 14 25 28 00 	mov    %fs:0x28,%rdx
  1e:	00 00 
  20:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  25:	31 d2                	xor    %edx,%edx
  27:	66 39 ee             	cmp    %bp,%si
  2a:	72 04                	jb     30 <bool PropertiesBuilder::Add<bool>(char const*, bool, bool, unsigned int)+0x30>
  2c:	31 c0                	xor    %eax,%eax
  2e:	eb 2c                	jmp    5c <bool PropertiesBuilder::Add<bool>(char const*, bool, bool, unsigned int)+0x5c>
  30:	0f b7 d6             	movzwl %si,%edx
  33:	44 0f b6 c9          	movzbl %cl,%r9d
  37:	48 03 37             	add    (%rdi),%rsi
  3a:	4c 89 d1             	mov    %r10,%rcx
  3d:	29 d5                	sub    %edx,%ebp
  3f:	52                   	push   %rdx
  40:	48 89 fb             	mov    %rdi,%rbx
  43:	41 50                	push   %r8
  45:	89 ea                	mov    %ebp,%edx
  47:	44 0f b6 c0          	movzbl %al,%r8d
  4b:	e8 00 00 00 00       	call   50 <bool PropertiesBuilder::Add<bool>(char const*, bool, bool, unsigned int)+0x50>
  50:	59                   	pop    %rcx
  51:	5e                   	pop    %rsi
  52:	39 c5                	cmp    %eax,%ebp
  54:	7c d6                	jl     2c <bool PropertiesBuilder::Add<bool>(char const*, bool, bool, unsigned int)+0x2c>
  56:	66 01 43 0a          	add    %ax,0xa(%rbx)
  5a:	b0 01                	mov    $0x1,%al
  5c:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  61:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  68:	00 00 
  6a:	74 05                	je     71 <bool PropertiesBuilder::Add<bool>(char const*, bool, bool, unsigned int)+0x71>
  6c:	e8 00 00 00 00       	call   71 <bool PropertiesBuilder::Add<bool>(char const*, bool, bool, unsigned int)+0x71>
  71:	48 83 c4 18          	add    $0x18,%rsp
  75:	5b                   	pop    %rbx
  76:	5d                   	pop    %rbp
  77:	c3                   	ret    

Disassembly of section .text._ZN17PropertiesBuilder3AddIhEEbPKcT_bj:

0000000000000000 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	49 89 f2             	mov    %rsi,%r10
   8:	89 d0                	mov    %edx,%eax
   a:	53                   	push   %rbx
   b:	48 83 ec 18          	sub    $0x18,%rsp
   f:	0f b7 77 0a          	movzwl 0xa(%rdi),%esi
  13:	0f b7 6f 08          	movzwl 0x8(%rdi),%ebp
  17:	64 48 8b 14 25 28 00 	mov    %fs:0x28,%rdx
  1e:	00 00 
  20:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  25:	31 d2                	xor    %edx,%edx
  27:	66 39 ee             	cmp    %bp,%si
  2a:	72 04                	jb     30 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int)+0x30>
  2c:	31 c0                	xor    %eax,%eax
  2e:	eb 2c                	jmp    5c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int)+0x5c>
  30:	0f b7 d6             	movzwl %si,%edx
  33:	44 0f b6 c9          	movzbl %cl,%r9d
  37:	48 03 37             	add    (%rdi),%rsi
  3a:	4c 89 d1             	mov    %r10,%rcx
  3d:	29 d5                	sub    %edx,%ebp
  3f:	52                   	push   %rdx
  40:	48 89 fb             	mov    %rdi,%rbx
  43:	41 50                	push   %r8
  45:	89 ea                	mov    %ebp,%edx
  47:	44 0f b6 c0          	movzbl %al,%r8d
  4b:	e8 00 00 00 00       	call   50 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int)+0x50>
  50:	59                   	pop    %rcx
  51:	5e                   	pop    %rsi
  52:	39 c5                	cmp    %eax,%ebp
  54:	7c d6                	jl     2c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int)+0x2c>
  56:	66 01 43 0a          	add    %ax,0xa(%rbx)
  5a:	b0 01                	mov    $0x1,%al
  5c:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  61:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  68:	00 00 
  6a:	74 05                	je     71 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int)+0x71>
  6c:	e8 00 00 00 00       	call   71 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int)+0x71>
  71:	48 83 c4 18          	add    $0x18,%rsp
  75:	5b                   	pop    %rbx
  76:	5d                   	pop    %rbp
  77:	c3                   	ret    

Disassembly of section .text._ZN17PropertiesBuilder3AddIPcEEbPKcT_bj:

0000000000000000 <bool PropertiesBuilder::Add<char*>(char const*, char*, bool, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	49 89 f2             	mov    %rsi,%r10
   8:	48 89 d0             	mov    %rdx,%rax
   b:	53                   	push   %rbx
   c:	48 83 ec 18          	sub    $0x18,%rsp
  10:	0f b7 77 0a          	movzwl 0xa(%rdi),%esi
  14:	0f b7 6f 08          	movzwl 0x8(%rdi),%ebp
  18:	64 48 8b 14 25 28 00 	mov    %fs:0x28,%rdx
  1f:	00 00 
  21:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  26:	31 d2                	xor    %edx,%edx
  28:	66 39 ee             	cmp    %bp,%si
  2b:	72 04                	jb     31 <bool PropertiesBuilder::Add<char*>(char const*, char*, bool, unsigned int)+0x31>
  2d:	31 c0                	xor    %eax,%eax
  2f:	eb 2b                	jmp    5c <bool PropertiesBuilder::Add<char*>(char const*, char*, bool, unsigned int)+0x5c>
  31:	0f b7 d6             	movzwl %si,%edx
  34:	44 0f b6 c9          	movzbl %cl,%r9d
  38:	48 03 37             	add    (%rdi),%rsi
  3b:	4c 89 d1             	mov    %r10,%rcx
  3e:	29 d5                	sub    %edx,%ebp
  40:	52                   	push   %rdx
  41:	48 89 fb             	mov    %rdi,%rbx
  44:	41 50                	push   %r8
  46:	89 ea                	mov    %ebp,%edx
  48:	49 89 c0             	mov    %rax,%r8
  4b:	e8 00 00 00 00       	call   50 <bool PropertiesBuilder::Add<char*>(char const*, char*, bool, unsigned int)+0x50>
  50:	59                   	pop    %rcx
  51:	5e                   	pop    %rsi
  52:	39 c5                	cmp    %eax,%ebp
  54:	7c d7                	jl     2d <bool PropertiesBuilder::Add<char*>(char const*, char*, bool, unsigned int)+0x2d>
  56:	66 01 43 0a          	add    %ax,0xa(%rbx)
  5a:	b0 01                	mov    $0x1,%al
  5c:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  61:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  68:	00 00 
  6a:	74 05                	je     71 <bool PropertiesBuilder::Add<char*>(char const*, char*, bool, unsigned int)+0x71>
  6c:	e8 00 00 00 00       	call   71 <bool PropertiesBuilder::Add<char*>(char const*, char*, bool, unsigned int)+0x71>
  71:	48 83 c4 18          	add    $0x18,%rsp
  75:	5b                   	pop    %rbx
  76:	5d                   	pop    %rbp
  77:	c3                   	ret    

Disassembly of section .text._ZN17PropertiesBuilder8add_partIbEEiPcjPKcT_bj:

0000000000000000 <int PropertiesBuilder::add_part<bool>(char*, unsigned int, char const*, bool, bool, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 ec 18          	sub    $0x18,%rsp
   8:	49 89 fa             	mov    %rdi,%r10
   b:	45 0f b6 c0          	movzbl %r8b,%r8d
   f:	48 89 f7             	mov    %rsi,%rdi
  12:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  19:	00 00 
  1b:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20:	31 c0                	xor    %eax,%eax
  22:	89 d6                	mov    %edx,%esi
  24:	41 8a 42 0c          	mov    0xc(%r10),%al
  28:	45 84 c9             	test   %r9b,%r9b
  2b:	75 06                	jne    33 <int PropertiesBuilder::add_part<bool>(char*, unsigned int, char const*, bool, bool, unsigned int)+0x33>
  2d:	84 c0                	test   %al,%al
  2f:	75 06                	jne    37 <int PropertiesBuilder::add_part<bool>(char*, unsigned int, char const*, bool, bool, unsigned int)+0x37>
  31:	eb 36                	jmp    69 <int PropertiesBuilder::add_part<bool>(char*, unsigned int, char const*, bool, bool, unsigned int)+0x69>
  33:	84 c0                	test   %al,%al
  35:	74 19                	je     50 <int PropertiesBuilder::add_part<bool>(char*, unsigned int, char const*, bool, bool, unsigned int)+0x50>
  37:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  3c:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  43:	00 00 
  45:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 4c <int PropertiesBuilder::add_part<bool>(char*, unsigned int, char const*, bool, bool, unsigned int)+0x4c>
  4c:	74 37                	je     85 <int PropertiesBuilder::add_part<bool>(char*, unsigned int, char const*, bool, bool, unsigned int)+0x85>
  4e:	eb 30                	jmp    80 <int PropertiesBuilder::add_part<bool>(char*, unsigned int, char const*, bool, bool, unsigned int)+0x80>
  50:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  55:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  5c:	00 00 
  5e:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 65 <int PropertiesBuilder::add_part<bool>(char*, unsigned int, char const*, bool, bool, unsigned int)+0x65>
  65:	74 1e                	je     85 <int PropertiesBuilder::add_part<bool>(char*, unsigned int, char const*, bool, bool, unsigned int)+0x85>
  67:	eb 17                	jmp    80 <int PropertiesBuilder::add_part<bool>(char*, unsigned int, char const*, bool, bool, unsigned int)+0x80>
  69:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  6e:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  75:	00 00 
  77:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 7e <int PropertiesBuilder::add_part<bool>(char*, unsigned int, char const*, bool, bool, unsigned int)+0x7e>
  7e:	74 05                	je     85 <int PropertiesBuilder::add_part<bool>(char*, unsigned int, char const*, bool, bool, unsigned int)+0x85>
  80:	e8 00 00 00 00       	call   85 <int PropertiesBuilder::add_part<bool>(char*, unsigned int, char const*, bool, bool, unsigned int)+0x85>
  85:	31 c0                	xor    %eax,%eax
  87:	48 83 c4 18          	add    $0x18,%rsp
  8b:	e9 00 00 00 00       	jmp    90 <.LC2+0x7e>

Disassembly of section .text._ZN17PropertiesBuilder8add_partIhEEiPcjPKcT_bj:

0000000000000000 <int PropertiesBuilder::add_part<unsigned char>(char*, unsigned int, char const*, unsigned char, bool, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 ec 18          	sub    $0x18,%rsp
   8:	49 89 fa             	mov    %rdi,%r10
   b:	45 0f b6 c0          	movzbl %r8b,%r8d
   f:	48 89 f7             	mov    %rsi,%rdi
  12:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  19:	00 00 
  1b:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20:	31 c0                	xor    %eax,%eax
  22:	89 d6                	mov    %edx,%esi
  24:	41 8a 42 0c          	mov    0xc(%r10),%al
  28:	45 84 c9             	test   %r9b,%r9b
  2b:	75 06                	jne    33 <int PropertiesBuilder::add_part<unsigned char>(char*, unsigned int, char const*, unsigned char, bool, unsigned int)+0x33>
  2d:	84 c0                	test   %al,%al
  2f:	75 06                	jne    37 <int PropertiesBuilder::add_part<unsigned char>(char*, unsigned int, char const*, unsigned char, bool, unsigned int)+0x37>
  31:	eb 36                	jmp    69 <int PropertiesBuilder::add_part<unsigned char>(char*, unsigned int, char const*, unsigned char, bool, unsigned int)+0x69>
  33:	84 c0                	test   %al,%al
  35:	74 19                	je     50 <int PropertiesBuilder::add_part<unsigned char>(char*, unsigned int, char const*, unsigned char, bool, unsigned int)+0x50>
  37:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  3c:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  43:	00 00 
  45:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 4c <int PropertiesBuilder::add_part<unsigned char>(char*, unsigned int, char const*, unsigned char, bool, unsigned int)+0x4c>
  4c:	74 37                	je     85 <int PropertiesBuilder::add_part<unsigned char>(char*, unsigned int, char const*, unsigned char, bool, unsigned int)+0x85>
  4e:	eb 30                	jmp    80 <int PropertiesBuilder::add_part<unsigned char>(char*, unsigned int, char const*, unsigned char, bool, unsigned int)+0x80>
  50:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  55:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  5c:	00 00 
  5e:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 65 <int PropertiesBuilder::add_part<unsigned char>(char*, unsigned int, char const*, unsigned char, bool, unsigned int)+0x65>
  65:	74 1e                	je     85 <int PropertiesBuilder::add_part<unsigned char>(char*, unsigned int, char const*, unsigned char, bool, unsigned int)+0x85>
  67:	eb 17                	jmp    80 <int PropertiesBuilder::add_part<unsigned char>(char*, unsigned int, char const*, unsigned char, bool, unsigned int)+0x80>
  69:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  6e:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  75:	00 00 
  77:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 7e <int PropertiesBuilder::add_part<unsigned char>(char*, unsigned int, char const*, unsigned char, bool, unsigned int)+0x7e>
  7e:	74 05                	je     85 <int PropertiesBuilder::add_part<unsigned char>(char*, unsigned int, char const*, unsigned char, bool, unsigned int)+0x85>
  80:	e8 00 00 00 00       	call   85 <int PropertiesBuilder::add_part<unsigned char>(char*, unsigned int, char const*, unsigned char, bool, unsigned int)+0x85>
  85:	31 c0                	xor    %eax,%eax
  87:	48 83 c4 18          	add    $0x18,%rsp
  8b:	e9 00 00 00 00       	jmp    90 <.LC2+0x7e>

networkparamsdump.o:     file format elf64-x86-64


Disassembly of section .text._ZN13NetworkParams4DumpEv:

0000000000000000 <NetworkParams::Dump()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 ec 18          	sub    $0x18,%rsp
   8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   f:	00 00 
  11:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  16:	31 c0                	xor    %eax,%eax
  18:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  1d:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  24:	00 00 
  26:	74 05                	je     2d <NetworkParams::Dump()+0x2d>
  28:	e8 00 00 00 00       	call   2d <NetworkParams::Dump()+0x2d>
  2d:	48 83 c4 18          	add    $0x18,%rsp
  31:	c3                   	ret    

In archive lib_linux/librdmsensor.a:

rdmsensor.o:     file format elf64-x86-64


Disassembly of section .text._ZN9RDMSensorC2Eh:

0000000000000000 <RDMSensor::RDMSensor(unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	88 45 e4             	mov    %al,-0x1c(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 2b <RDMSensor::RDMSensor(unsigned char)+0x2b>
  2b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2f:	48 89 10             	mov    %rdx,(%rax)
  32:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  36:	0f b6 55 e4          	movzbl -0x1c(%rbp),%edx
  3a:	88 50 08             	mov    %dl,0x8(%rax)
  3d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  41:	0f b6 50 08          	movzbl 0x8(%rax),%edx
  45:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  49:	88 50 0a             	mov    %dl,0xa(%rax)
  4c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  50:	c6 40 37 03          	movb   $0x3,0x37(%rax)
  54:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  58:	0f b6 50 08          	movzbl 0x8(%rax),%edx
  5c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  60:	88 50 40             	mov    %dl,0x40(%rax)
  63:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  67:	66 c7 40 3a ff 7f    	movw   $0x7fff,0x3a(%rax)
  6d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  71:	66 c7 40 3c 00 80    	movw   $0x8000,0x3c(%rax)
  77:	90                   	nop
  78:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  7c:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  83:	00 00 
  85:	74 05                	je     8c <RDMSensor::RDMSensor(unsigned char)+0x8c>
  87:	e8 00 00 00 00       	call   8c <RDMSensor::RDMSensor(unsigned char)+0x8c>
  8c:	c9                   	leave  
  8d:	c3                   	ret    

Disassembly of section .text._ZN9RDMSensor14SetDescriptionEPKc:

0000000000000000 <RDMSensor::SetDescription(char const*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  2a:	eb 1c                	jmp    48 <RDMSensor::SetDescription(char const*)+0x48>
  2c:	8b 55 f4             	mov    -0xc(%rbp),%edx
  2f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  33:	48 01 d0             	add    %rdx,%rax
  36:	0f b6 08             	movzbl (%rax),%ecx
  39:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  3d:	8b 45 f4             	mov    -0xc(%rbp),%eax
  40:	88 4c 02 16          	mov    %cl,0x16(%rdx,%rax,1)
  44:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  48:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%rbp)
  4c:	77 11                	ja     5f <RDMSensor::SetDescription(char const*)+0x5f>
  4e:	8b 55 f4             	mov    -0xc(%rbp),%edx
  51:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  55:	48 01 d0             	add    %rdx,%rax
  58:	0f b6 00             	movzbl (%rax),%eax
  5b:	84 c0                	test   %al,%al
  5d:	75 cd                	jne    2c <RDMSensor::SetDescription(char const*)+0x2c>
  5f:	8b 45 f4             	mov    -0xc(%rbp),%eax
  62:	89 c2                	mov    %eax,%edx
  64:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  68:	88 50 36             	mov    %dl,0x36(%rax)
  6b:	90                   	nop
  6c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  70:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  77:	00 00 
  79:	74 05                	je     80 <RDMSensor::SetDescription(char const*)+0x80>
  7b:	e8 00 00 00 00       	call   80 <RDMSensor::SetDescription(char const*)+0x80>
  80:	c9                   	leave  
  81:	c3                   	ret    

Disassembly of section .text._ZN9RDMSensor9GetValuesEv:

0000000000000000 <RDMSensor::GetValues()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	48 8b 00             	mov    (%rax),%rax
  26:	48 83 c0 18          	add    $0x18,%rax
  2a:	48 8b 10             	mov    (%rax),%rdx
  2d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  31:	48 89 c7             	mov    %rax,%rdi
  34:	ff d2                	call   *%rdx
  36:	66 89 45 f6          	mov    %ax,-0xa(%rbp)
  3a:	0f b7 55 f6          	movzwl -0xa(%rbp),%edx
  3e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  42:	66 89 50 38          	mov    %dx,0x38(%rax)
  46:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4a:	48 8d 50 3a          	lea    0x3a(%rax),%rdx
  4e:	48 8d 45 f6          	lea    -0xa(%rbp),%rax
  52:	48 89 c6             	mov    %rax,%rsi
  55:	48 89 d7             	mov    %rdx,%rdi
  58:	e8 00 00 00 00       	call   5d <RDMSensor::GetValues()+0x5d>
  5d:	0f b7 10             	movzwl (%rax),%edx
  60:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  64:	66 89 50 3a          	mov    %dx,0x3a(%rax)
  68:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  6c:	48 8d 50 3c          	lea    0x3c(%rax),%rdx
  70:	48 8d 45 f6          	lea    -0xa(%rbp),%rax
  74:	48 89 c6             	mov    %rax,%rsi
  77:	48 89 d7             	mov    %rdx,%rdi
  7a:	e8 00 00 00 00       	call   7f <RDMSensor::GetValues()+0x7f>
  7f:	0f b7 10             	movzwl (%rax),%edx
  82:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  86:	66 89 50 3c          	mov    %dx,0x3c(%rax)
  8a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8e:	48 83 c0 38          	add    $0x38,%rax
  92:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  96:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  9d:	00 00 
  9f:	74 05                	je     a6 <RDMSensor::GetValues()+0xa6>
  a1:	e8 00 00 00 00       	call   a6 <RDMSensor::GetValues()+0xa6>
  a6:	c9                   	leave  
  a7:	c3                   	ret    

Disassembly of section .text._ZN9RDMSensor9SetValuesEv:

0000000000000000 <RDMSensor::SetValues()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	48 8b 00             	mov    (%rax),%rax
  26:	48 83 c0 18          	add    $0x18,%rax
  2a:	48 8b 10             	mov    (%rax),%rdx
  2d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  31:	48 89 c7             	mov    %rax,%rdi
  34:	ff d2                	call   *%rdx
  36:	66 89 45 f6          	mov    %ax,-0xa(%rbp)
  3a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3e:	0f b7 55 f6          	movzwl -0xa(%rbp),%edx
  42:	66 89 50 38          	mov    %dx,0x38(%rax)
  46:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4a:	0f b7 55 f6          	movzwl -0xa(%rbp),%edx
  4e:	66 89 50 3a          	mov    %dx,0x3a(%rax)
  52:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  56:	0f b7 55 f6          	movzwl -0xa(%rbp),%edx
  5a:	66 89 50 3c          	mov    %dx,0x3c(%rax)
  5e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  62:	0f b7 55 f6          	movzwl -0xa(%rbp),%edx
  66:	66 89 50 3e          	mov    %dx,0x3e(%rax)
  6a:	90                   	nop
  6b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  6f:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  76:	00 00 
  78:	74 05                	je     7f <RDMSensor::SetValues()+0x7f>
  7a:	e8 00 00 00 00       	call   7f <RDMSensor::SetValues()+0x7f>
  7f:	c9                   	leave  
  80:	c3                   	ret    

Disassembly of section .text._ZN9RDMSensor6RecordEv:

0000000000000000 <RDMSensor::Record()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	48 8b 00             	mov    (%rax),%rax
  26:	48 83 c0 18          	add    $0x18,%rax
  2a:	48 8b 10             	mov    (%rax),%rdx
  2d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  31:	48 89 c7             	mov    %rax,%rdi
  34:	ff d2                	call   *%rdx
  36:	66 89 45 f6          	mov    %ax,-0xa(%rbp)
  3a:	0f b7 55 f6          	movzwl -0xa(%rbp),%edx
  3e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  42:	66 89 50 38          	mov    %dx,0x38(%rax)
  46:	0f b7 55 f6          	movzwl -0xa(%rbp),%edx
  4a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4e:	66 89 50 3e          	mov    %dx,0x3e(%rax)
  52:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  56:	48 8d 50 3a          	lea    0x3a(%rax),%rdx
  5a:	48 8d 45 f6          	lea    -0xa(%rbp),%rax
  5e:	48 89 c6             	mov    %rax,%rsi
  61:	48 89 d7             	mov    %rdx,%rdi
  64:	e8 00 00 00 00       	call   69 <RDMSensor::Record()+0x69>
  69:	0f b7 10             	movzwl (%rax),%edx
  6c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  70:	66 89 50 3a          	mov    %dx,0x3a(%rax)
  74:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  78:	48 8d 50 3c          	lea    0x3c(%rax),%rdx
  7c:	48 8d 45 f6          	lea    -0xa(%rbp),%rax
  80:	48 89 c6             	mov    %rax,%rsi
  83:	48 89 d7             	mov    %rdx,%rdi
  86:	e8 00 00 00 00       	call   8b <RDMSensor::Record()+0x8b>
  8b:	0f b7 10             	movzwl (%rax),%edx
  8e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  92:	66 89 50 3c          	mov    %dx,0x3c(%rax)
  96:	90                   	nop
  97:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  9b:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  a2:	00 00 
  a4:	74 05                	je     ab <RDMSensor::Record()+0xab>
  a6:	e8 00 00 00 00       	call   ab <RDMSensor::Record()+0xab>
  ab:	c9                   	leave  
  ac:	c3                   	ret    

Disassembly of section .text._ZSt3minIsERKT_S2_S2_:

0000000000000000 <short const& std::min<short>(short const&, short const&)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  27:	0f b7 10             	movzwl (%rax),%edx
  2a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2e:	0f b7 00             	movzwl (%rax),%eax
  31:	66 39 c2             	cmp    %ax,%dx
  34:	7d 06                	jge    3c <short const& std::min<short>(short const&, short const&)+0x3c>
  36:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  3a:	eb 04                	jmp    40 <short const& std::min<short>(short const&, short const&)+0x40>
  3c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  44:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  4b:	00 00 
  4d:	74 05                	je     54 <short const& std::min<short>(short const&, short const&)+0x54>
  4f:	e8 00 00 00 00       	call   54 <short const& std::min<short>(short const&, short const&)+0x54>
  54:	c9                   	leave  
  55:	c3                   	ret    

Disassembly of section .text._ZSt3maxIsERKT_S2_S2_:

0000000000000000 <short const& std::max<short>(short const&, short const&)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  27:	0f b7 10             	movzwl (%rax),%edx
  2a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  2e:	0f b7 00             	movzwl (%rax),%eax
  31:	66 39 c2             	cmp    %ax,%dx
  34:	7d 06                	jge    3c <short const& std::max<short>(short const&, short const&)+0x3c>
  36:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  3a:	eb 04                	jmp    40 <short const& std::max<short>(short const&, short const&)+0x40>
  3c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  44:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  4b:	00 00 
  4d:	74 05                	je     54 <short const& std::max<short>(short const&, short const&)+0x54>
  4f:	e8 00 00 00 00       	call   54 <short const& std::max<short>(short const&, short const&)+0x54>
  54:	c9                   	leave  
  55:	c3                   	ret    

rdmsensorsconst.o:     file format elf64-x86-64


rdmsensors.o:     file format elf64-x86-64


Disassembly of section .text._ZN9RDMSensorD2Ev:

0000000000000000 <RDMSensor::~RDMSensor()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 26 <RDMSensor::~RDMSensor()+0x26>
  26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2a:	48 89 10             	mov    %rdx,(%rax)
  2d:	90                   	nop
  2e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  32:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  39:	00 00 
  3b:	74 05                	je     42 <RDMSensor::~RDMSensor()+0x42>
  3d:	e8 00 00 00 00       	call   42 <RDMSensor::~RDMSensor()+0x42>
  42:	c9                   	leave  
  43:	c3                   	ret    

Disassembly of section .text._ZN9RDMSensorD0Ev:

0000000000000000 <RDMSensor::~RDMSensor()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	call   2b <RDMSensor::~RDMSensor()+0x2b>
  2b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	call   37 <RDMSensor::~RDMSensor()+0x37>
  37:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3b:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  42:	00 00 
  44:	74 05                	je     4b <RDMSensor::~RDMSensor()+0x4b>
  46:	e8 00 00 00 00       	call   4b <RDMSensor::~RDMSensor()+0x4b>
  4b:	c9                   	leave  
  4c:	c3                   	ret    

Disassembly of section .text._ZN9RDMSensor7SetTypeEh:

0000000000000000 <RDMSensor::SetType(unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	88 45 e4             	mov    %al,-0x1c(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  28:	0f b6 55 e4          	movzbl -0x1c(%rbp),%edx
  2c:	88 50 0b             	mov    %dl,0xb(%rax)
  2f:	90                   	nop
  30:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  34:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  3b:	00 00 
  3d:	74 05                	je     44 <RDMSensor::SetType(unsigned char)+0x44>
  3f:	e8 00 00 00 00       	call   44 <RDMSensor::SetType(unsigned char)+0x44>
  44:	c9                   	leave  
  45:	c3                   	ret    

Disassembly of section .text._ZN9RDMSensor7SetUnitEh:

0000000000000000 <RDMSensor::SetUnit(unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	88 45 e4             	mov    %al,-0x1c(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  28:	0f b6 55 e4          	movzbl -0x1c(%rbp),%edx
  2c:	88 50 0c             	mov    %dl,0xc(%rax)
  2f:	90                   	nop
  30:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  34:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  3b:	00 00 
  3d:	74 05                	je     44 <RDMSensor::SetUnit(unsigned char)+0x44>
  3f:	e8 00 00 00 00       	call   44 <RDMSensor::SetUnit(unsigned char)+0x44>
  44:	c9                   	leave  
  45:	c3                   	ret    

Disassembly of section .text._ZN9RDMSensor9SetPrefixEh:

0000000000000000 <RDMSensor::SetPrefix(unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	88 45 e4             	mov    %al,-0x1c(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  28:	0f b6 55 e4          	movzbl -0x1c(%rbp),%edx
  2c:	88 50 0d             	mov    %dl,0xd(%rax)
  2f:	90                   	nop
  30:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  34:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  3b:	00 00 
  3d:	74 05                	je     44 <RDMSensor::SetPrefix(unsigned char)+0x44>
  3f:	e8 00 00 00 00       	call   44 <RDMSensor::SetPrefix(unsigned char)+0x44>
  44:	c9                   	leave  
  45:	c3                   	ret    

Disassembly of section .text._ZN9RDMSensor11SetRangeMinEs:

0000000000000000 <RDMSensor::SetRangeMin(short)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	66 89 45 e4          	mov    %ax,-0x1c(%rbp)
  16:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1d:	00 00 
  1f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  23:	31 c0                	xor    %eax,%eax
  25:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  29:	0f b7 55 e4          	movzwl -0x1c(%rbp),%edx
  2d:	66 89 50 0e          	mov    %dx,0xe(%rax)
  31:	90                   	nop
  32:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  36:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  3d:	00 00 
  3f:	74 05                	je     46 <RDMSensor::SetRangeMin(short)+0x46>
  41:	e8 00 00 00 00       	call   46 <RDMSensor::SetRangeMin(short)+0x46>
  46:	c9                   	leave  
  47:	c3                   	ret    

Disassembly of section .text._ZN9RDMSensor11SetRangeMaxEs:

0000000000000000 <RDMSensor::SetRangeMax(short)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	66 89 45 e4          	mov    %ax,-0x1c(%rbp)
  16:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1d:	00 00 
  1f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  23:	31 c0                	xor    %eax,%eax
  25:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  29:	0f b7 55 e4          	movzwl -0x1c(%rbp),%edx
  2d:	66 89 50 10          	mov    %dx,0x10(%rax)
  31:	90                   	nop
  32:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  36:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  3d:	00 00 
  3f:	74 05                	je     46 <RDMSensor::SetRangeMax(short)+0x46>
  41:	e8 00 00 00 00       	call   46 <RDMSensor::SetRangeMax(short)+0x46>
  46:	c9                   	leave  
  47:	c3                   	ret    

Disassembly of section .text._ZN9RDMSensor12SetNormalMinEs:

0000000000000000 <RDMSensor::SetNormalMin(short)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	66 89 45 e4          	mov    %ax,-0x1c(%rbp)
  16:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1d:	00 00 
  1f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  23:	31 c0                	xor    %eax,%eax
  25:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  29:	0f b7 55 e4          	movzwl -0x1c(%rbp),%edx
  2d:	66 89 50 12          	mov    %dx,0x12(%rax)
  31:	90                   	nop
  32:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  36:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  3d:	00 00 
  3f:	74 05                	je     46 <RDMSensor::SetNormalMin(short)+0x46>
  41:	e8 00 00 00 00       	call   46 <RDMSensor::SetNormalMin(short)+0x46>
  46:	c9                   	leave  
  47:	c3                   	ret    

Disassembly of section .text._ZN9RDMSensor12SetNormalMaxEs:

0000000000000000 <RDMSensor::SetNormalMax(short)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	66 89 45 e4          	mov    %ax,-0x1c(%rbp)
  16:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1d:	00 00 
  1f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  23:	31 c0                	xor    %eax,%eax
  25:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  29:	0f b7 55 e4          	movzwl -0x1c(%rbp),%edx
  2d:	66 89 50 14          	mov    %dx,0x14(%rax)
  31:	90                   	nop
  32:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  36:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  3d:	00 00 
  3f:	74 05                	je     46 <RDMSensor::SetNormalMax(short)+0x46>
  41:	e8 00 00 00 00       	call   46 <RDMSensor::SetNormalMax(short)+0x46>
  46:	c9                   	leave  
  47:	c3                   	ret    

Disassembly of section .text._ZN9RDMSensor12GetDefintionEv:

0000000000000000 <RDMSensor::GetDefintion()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	48 83 c0 0a          	add    $0xa,%rax
  27:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  2b:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  32:	00 00 
  34:	74 05                	je     3b <RDMSensor::GetDefintion()+0x3b>
  36:	e8 00 00 00 00       	call   3b <RDMSensor::GetDefintion()+0x3b>
  3b:	c9                   	leave  
  3c:	c3                   	ret    

Disassembly of section .text._ZN8Hardware21GetCoreTemperatureMinEv:

0000000000000000 <Hardware::GetCoreTemperatureMin()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	f3 0f 10 05 00 00 00 	movss  0x0(%rip),%xmm0        # 27 <Hardware::GetCoreTemperatureMin()+0x27>
  26:	00 
  27:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2b:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  32:	00 00 
  34:	74 05                	je     3b <Hardware::GetCoreTemperatureMin()+0x3b>
  36:	e8 00 00 00 00       	call   3b <Hardware::GetCoreTemperatureMin()+0x3b>
  3b:	c9                   	leave  
  3c:	c3                   	ret    

Disassembly of section .text._ZN8Hardware3GetEv:

0000000000000000 <Hardware::Get()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 22 <Hardware::Get()+0x22>
  22:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  26:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  2d:	00 00 
  2f:	74 05                	je     36 <Hardware::Get()+0x36>
  31:	e8 00 00 00 00       	call   36 <Hardware::Get()+0x36>
  36:	c9                   	leave  
  37:	c3                   	ret    

Disassembly of section .text._ZN14CpuTemperatureC2Eh:

0000000000000000 <CpuTemperature::CpuTemperature(unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	53                   	push   %rbx
   9:	48 83 ec 28          	sub    $0x28,%rsp
   d:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  11:	89 f0                	mov    %esi,%eax
  13:	88 45 d4             	mov    %al,-0x2c(%rbp)
  16:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1d:	00 00 
  1f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  23:	31 c0                	xor    %eax,%eax
  25:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  29:	0f b6 55 d4          	movzbl -0x2c(%rbp),%edx
  2d:	89 d6                	mov    %edx,%esi
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	call   37 <CpuTemperature::CpuTemperature(unsigned char)+0x37>
  37:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 3e <CpuTemperature::CpuTemperature(unsigned char)+0x3e>
  3e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  42:	48 89 10             	mov    %rdx,(%rax)
  45:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  49:	be 00 00 00 00       	mov    $0x0,%esi
  4e:	48 89 c7             	mov    %rax,%rdi
  51:	e8 00 00 00 00       	call   56 <CpuTemperature::CpuTemperature(unsigned char)+0x56>
  56:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  5a:	be 01 00 00 00       	mov    $0x1,%esi
  5f:	48 89 c7             	mov    %rax,%rdi
  62:	e8 00 00 00 00       	call   67 <CpuTemperature::CpuTemperature(unsigned char)+0x67>
  67:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  6b:	be 00 00 00 00       	mov    $0x0,%esi
  70:	48 89 c7             	mov    %rax,%rdi
  73:	e8 00 00 00 00       	call   78 <CpuTemperature::CpuTemperature(unsigned char)+0x78>
  78:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
  7c:	e8 00 00 00 00       	call   81 <CpuTemperature::CpuTemperature(unsigned char)+0x81>
  81:	48 89 c7             	mov    %rax,%rdi
  84:	e8 00 00 00 00       	call   89 <CpuTemperature::CpuTemperature(unsigned char)+0x89>
  89:	f3 0f 2c c0          	cvttss2si %xmm0,%eax
  8d:	98                   	cwtl   
  8e:	89 c6                	mov    %eax,%esi
  90:	48 89 df             	mov    %rbx,%rdi
  93:	e8 00 00 00 00       	call   98 <CpuTemperature::CpuTemperature(unsigned char)+0x98>
  98:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
  9c:	e8 00 00 00 00       	call   a1 <CpuTemperature::CpuTemperature(unsigned char)+0xa1>
  a1:	48 89 c7             	mov    %rax,%rdi
  a4:	e8 00 00 00 00       	call   a9 <CpuTemperature::CpuTemperature(unsigned char)+0xa9>
  a9:	f3 0f 2c c0          	cvttss2si %xmm0,%eax
  ad:	98                   	cwtl   
  ae:	89 c6                	mov    %eax,%esi
  b0:	48 89 df             	mov    %rbx,%rdi
  b3:	e8 00 00 00 00       	call   b8 <CpuTemperature::CpuTemperature(unsigned char)+0xb8>
  b8:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
  bc:	e8 00 00 00 00       	call   c1 <CpuTemperature::CpuTemperature(unsigned char)+0xc1>
  c1:	48 89 c7             	mov    %rax,%rdi
  c4:	e8 00 00 00 00       	call   c9 <CpuTemperature::CpuTemperature(unsigned char)+0xc9>
  c9:	f3 0f 2c c0          	cvttss2si %xmm0,%eax
  cd:	98                   	cwtl   
  ce:	89 c6                	mov    %eax,%esi
  d0:	48 89 df             	mov    %rbx,%rdi
  d3:	e8 00 00 00 00       	call   d8 <CpuTemperature::CpuTemperature(unsigned char)+0xd8>
  d8:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
  dc:	e8 00 00 00 00       	call   e1 <CpuTemperature::CpuTemperature(unsigned char)+0xe1>
  e1:	48 89 c7             	mov    %rax,%rdi
  e4:	e8 00 00 00 00       	call   e9 <CpuTemperature::CpuTemperature(unsigned char)+0xe9>
  e9:	f3 0f 2c c0          	cvttss2si %xmm0,%eax
  ed:	98                   	cwtl   
  ee:	89 c6                	mov    %eax,%esi
  f0:	48 89 df             	mov    %rbx,%rdi
  f3:	e8 00 00 00 00       	call   f8 <CpuTemperature::CpuTemperature(unsigned char)+0xf8>
  f8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  fc:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 103 <CpuTemperature::CpuTemperature(unsigned char)+0x103>
 103:	48 89 d6             	mov    %rdx,%rsi
 106:	48 89 c7             	mov    %rax,%rdi
 109:	e8 00 00 00 00       	call   10e <CpuTemperature::CpuTemperature(unsigned char)+0x10e>
 10e:	90                   	nop
 10f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 113:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 11a:	00 00 
 11c:	74 05                	je     123 <CpuTemperature::CpuTemperature(unsigned char)+0x123>
 11e:	e8 00 00 00 00       	call   123 <CpuTemperature::CpuTemperature(unsigned char)+0x123>
 123:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
 127:	c9                   	leave  
 128:	c3                   	ret    

Disassembly of section .text._ZN14CpuTemperature10InitializeEv:

0000000000000000 <CpuTemperature::Initialize()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	b8 01 00 00 00       	mov    $0x1,%eax
  24:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  28:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  2f:	00 00 
  31:	74 05                	je     38 <CpuTemperature::Initialize()+0x38>
  33:	e8 00 00 00 00       	call   38 <CpuTemperature::Initialize()+0x38>
  38:	c9                   	leave  
  39:	c3                   	ret    

Disassembly of section .text._ZN14CpuTemperature8GetValueEv:

0000000000000000 <CpuTemperature::GetValue()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	e8 00 00 00 00       	call   24 <CpuTemperature::GetValue()+0x24>
  24:	48 89 c7             	mov    %rax,%rdi
  27:	e8 00 00 00 00       	call   2c <CpuTemperature::GetValue()+0x2c>
  2c:	f3 0f 2c c0          	cvttss2si %xmm0,%eax
  30:	66 89 45 f6          	mov    %ax,-0xa(%rbp)
  34:	0f b7 45 f6          	movzwl -0xa(%rbp),%eax
  38:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  3c:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  43:	00 00 
  45:	74 05                	je     4c <CpuTemperature::GetValue()+0x4c>
  47:	e8 00 00 00 00       	call   4c <CpuTemperature::GetValue()+0x4c>
  4c:	c9                   	leave  
  4d:	c3                   	ret    

Disassembly of section .text._ZN10RDMSensorsC2Ev:

0000000000000000 <RDMSensors::RDMSensors()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	53                   	push   %rbx
   9:	48 83 ec 28          	sub    $0x28,%rsp
   d:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  11:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  18:	00 00 
  1a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  1e:	31 c0                	xor    %eax,%eax
  20:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  24:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  2b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  2f:	c6 40 08 00          	movb   $0x0,0x8(%rax)
  33:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  37:	48 89 05 00 00 00 00 	mov    %rax,0x0(%rip)        # 3e <RDMSensors::RDMSensors()+0x3e>
  3e:	bf 80 00 00 00       	mov    $0x80,%edi
  43:	e8 00 00 00 00       	call   48 <RDMSensors::RDMSensors()+0x48>
  48:	48 89 c2             	mov    %rax,%rdx
  4b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4f:	48 89 10             	mov    %rdx,(%rax)
  52:	bf 48 00 00 00       	mov    $0x48,%edi
  57:	e8 00 00 00 00       	call   5c <RDMSensors::RDMSensors()+0x5c>
  5c:	48 89 c3             	mov    %rax,%rbx
  5f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  63:	0f b6 40 08          	movzbl 0x8(%rax),%eax
  67:	0f b6 c0             	movzbl %al,%eax
  6a:	89 c6                	mov    %eax,%esi
  6c:	48 89 df             	mov    %rbx,%rdi
  6f:	e8 00 00 00 00       	call   74 <RDMSensors::RDMSensors()+0x74>
  74:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  78:	48 89 de             	mov    %rbx,%rsi
  7b:	48 89 c7             	mov    %rax,%rdi
  7e:	e8 00 00 00 00       	call   83 <RDMSensors::RDMSensors()+0x83>
  83:	90                   	nop
  84:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  88:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  8f:	00 00 
  91:	74 05                	je     98 <RDMSensors::RDMSensors()+0x98>
  93:	e8 00 00 00 00       	call   98 <RDMSensors::RDMSensors()+0x98>
  98:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  9c:	c9                   	leave  
  9d:	c3                   	ret    

Disassembly of section .text._ZN10RDMSensorsD2Ev:

0000000000000000 <RDMSensors::~RDMSensors()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  26:	eb 5d                	jmp    85 <RDMSensors::~RDMSensors()+0x85>
  28:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2c:	48 8b 10             	mov    (%rax),%rdx
  2f:	8b 45 f4             	mov    -0xc(%rbp),%eax
  32:	48 c1 e0 03          	shl    $0x3,%rax
  36:	48 01 d0             	add    %rdx,%rax
  39:	48 8b 00             	mov    (%rax),%rax
  3c:	48 85 c0             	test   %rax,%rax
  3f:	74 40                	je     81 <RDMSensors::~RDMSensors()+0x81>
  41:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  45:	48 8b 10             	mov    (%rax),%rdx
  48:	8b 45 f4             	mov    -0xc(%rbp),%eax
  4b:	48 c1 e0 03          	shl    $0x3,%rax
  4f:	48 01 d0             	add    %rdx,%rax
  52:	48 8b 00             	mov    (%rax),%rax
  55:	48 85 c0             	test   %rax,%rax
  58:	74 0f                	je     69 <RDMSensors::~RDMSensors()+0x69>
  5a:	48 8b 10             	mov    (%rax),%rdx
  5d:	48 83 c2 08          	add    $0x8,%rdx
  61:	48 8b 12             	mov    (%rdx),%rdx
  64:	48 89 c7             	mov    %rax,%rdi
  67:	ff d2                	call   *%rdx
  69:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  6d:	48 8b 10             	mov    (%rax),%rdx
  70:	8b 45 f4             	mov    -0xc(%rbp),%eax
  73:	48 c1 e0 03          	shl    $0x3,%rax
  77:	48 01 d0             	add    %rdx,%rax
  7a:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  81:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  85:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  89:	0f b6 40 08          	movzbl 0x8(%rax),%eax
  8d:	0f b6 c0             	movzbl %al,%eax
  90:	39 45 f4             	cmp    %eax,-0xc(%rbp)
  93:	72 93                	jb     28 <RDMSensors::~RDMSensors()+0x28>
  95:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  99:	48 8b 00             	mov    (%rax),%rax
  9c:	48 85 c0             	test   %rax,%rax
  9f:	74 0f                	je     b0 <RDMSensors::~RDMSensors()+0xb0>
  a1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  a5:	48 8b 00             	mov    (%rax),%rax
  a8:	48 89 c7             	mov    %rax,%rdi
  ab:	e8 00 00 00 00       	call   b0 <RDMSensors::~RDMSensors()+0xb0>
  b0:	90                   	nop
  b1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  b5:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  bc:	00 00 
  be:	74 05                	je     c5 <RDMSensors::~RDMSensors()+0xc5>
  c0:	e8 00 00 00 00       	call   c5 <RDMSensors::~RDMSensors()+0xc5>
  c5:	c9                   	leave  
  c6:	c3                   	ret    

Disassembly of section .text._ZN10RDMSensors12GetDefintionEh:

0000000000000000 <RDMSensors::GetDefintion(unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	88 45 e4             	mov    %al,-0x1c(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  28:	48 8b 10             	mov    (%rax),%rdx
  2b:	0f b6 45 e4          	movzbl -0x1c(%rbp),%eax
  2f:	48 c1 e0 03          	shl    $0x3,%rax
  33:	48 01 d0             	add    %rdx,%rax
  36:	48 8b 00             	mov    (%rax),%rax
  39:	48 89 c7             	mov    %rax,%rdi
  3c:	e8 00 00 00 00       	call   41 <RDMSensors::GetDefintion(unsigned char)+0x41>
  41:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  45:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  4c:	00 00 
  4e:	74 05                	je     55 <RDMSensors::GetDefintion(unsigned char)+0x55>
  50:	e8 00 00 00 00       	call   55 <RDMSensors::GetDefintion(unsigned char)+0x55>
  55:	c9                   	leave  
  56:	c3                   	ret    

Disassembly of section .text._ZN10RDMSensors9GetValuesEh:

0000000000000000 <RDMSensors::GetValues(unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	88 45 e4             	mov    %al,-0x1c(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  28:	48 8b 10             	mov    (%rax),%rdx
  2b:	0f b6 45 e4          	movzbl -0x1c(%rbp),%eax
  2f:	48 c1 e0 03          	shl    $0x3,%rax
  33:	48 01 d0             	add    %rdx,%rax
  36:	48 8b 00             	mov    (%rax),%rax
  39:	48 89 c7             	mov    %rax,%rdi
  3c:	e8 00 00 00 00       	call   41 <RDMSensors::GetValues(unsigned char)+0x41>
  41:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  45:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  4c:	00 00 
  4e:	74 05                	je     55 <RDMSensors::GetValues(unsigned char)+0x55>
  50:	e8 00 00 00 00       	call   55 <RDMSensors::GetValues(unsigned char)+0x55>
  55:	c9                   	leave  
  56:	c3                   	ret    

Disassembly of section .text._ZN10RDMSensors9SetValuesEh:

0000000000000000 <RDMSensors::SetValues(unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	88 45 e4             	mov    %al,-0x1c(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	80 7d e4 ff          	cmpb   $0xff,-0x1c(%rbp)
  28:	75 3b                	jne    65 <RDMSensors::SetValues(unsigned char)+0x65>
  2a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  31:	eb 20                	jmp    53 <RDMSensors::SetValues(unsigned char)+0x53>
  33:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  37:	48 8b 10             	mov    (%rax),%rdx
  3a:	8b 45 f4             	mov    -0xc(%rbp),%eax
  3d:	48 c1 e0 03          	shl    $0x3,%rax
  41:	48 01 d0             	add    %rdx,%rax
  44:	48 8b 00             	mov    (%rax),%rax
  47:	48 89 c7             	mov    %rax,%rdi
  4a:	e8 00 00 00 00       	call   4f <RDMSensors::SetValues(unsigned char)+0x4f>
  4f:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  53:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  57:	0f b6 40 08          	movzbl 0x8(%rax),%eax
  5b:	0f b6 c0             	movzbl %al,%eax
  5e:	39 45 f4             	cmp    %eax,-0xc(%rbp)
  61:	72 d0                	jb     33 <RDMSensors::SetValues(unsigned char)+0x33>
  63:	eb 1d                	jmp    82 <RDMSensors::SetValues(unsigned char)+0x82>
  65:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  69:	48 8b 10             	mov    (%rax),%rdx
  6c:	0f b6 45 e4          	movzbl -0x1c(%rbp),%eax
  70:	48 c1 e0 03          	shl    $0x3,%rax
  74:	48 01 d0             	add    %rdx,%rax
  77:	48 8b 00             	mov    (%rax),%rax
  7a:	48 89 c7             	mov    %rax,%rdi
  7d:	e8 00 00 00 00       	call   82 <RDMSensors::SetValues(unsigned char)+0x82>
  82:	90                   	nop
  83:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  87:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  8e:	00 00 
  90:	74 05                	je     97 <RDMSensors::SetValues(unsigned char)+0x97>
  92:	e8 00 00 00 00       	call   97 <RDMSensors::SetValues(unsigned char)+0x97>
  97:	c9                   	leave  
  98:	c3                   	ret    

Disassembly of section .text._ZN10RDMSensors9SetRecordEh:

0000000000000000 <RDMSensors::SetRecord(unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	88 45 e4             	mov    %al,-0x1c(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	80 7d e4 ff          	cmpb   $0xff,-0x1c(%rbp)
  28:	75 3b                	jne    65 <RDMSensors::SetRecord(unsigned char)+0x65>
  2a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  31:	eb 20                	jmp    53 <RDMSensors::SetRecord(unsigned char)+0x53>
  33:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  37:	48 8b 10             	mov    (%rax),%rdx
  3a:	8b 45 f4             	mov    -0xc(%rbp),%eax
  3d:	48 c1 e0 03          	shl    $0x3,%rax
  41:	48 01 d0             	add    %rdx,%rax
  44:	48 8b 00             	mov    (%rax),%rax
  47:	48 89 c7             	mov    %rax,%rdi
  4a:	e8 00 00 00 00       	call   4f <RDMSensors::SetRecord(unsigned char)+0x4f>
  4f:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  53:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  57:	0f b6 40 08          	movzbl 0x8(%rax),%eax
  5b:	0f b6 c0             	movzbl %al,%eax
  5e:	39 45 f4             	cmp    %eax,-0xc(%rbp)
  61:	72 d0                	jb     33 <RDMSensors::SetRecord(unsigned char)+0x33>
  63:	eb 1d                	jmp    82 <RDMSensors::SetRecord(unsigned char)+0x82>
  65:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  69:	48 8b 10             	mov    (%rax),%rdx
  6c:	0f b6 45 e4          	movzbl -0x1c(%rbp),%eax
  70:	48 c1 e0 03          	shl    $0x3,%rax
  74:	48 01 d0             	add    %rdx,%rax
  77:	48 8b 00             	mov    (%rax),%rax
  7a:	48 89 c7             	mov    %rax,%rdi
  7d:	e8 00 00 00 00       	call   82 <RDMSensors::SetRecord(unsigned char)+0x82>
  82:	90                   	nop
  83:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  87:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  8e:	00 00 
  90:	74 05                	je     97 <RDMSensors::SetRecord(unsigned char)+0x97>
  92:	e8 00 00 00 00       	call   97 <RDMSensors::SetRecord(unsigned char)+0x97>
  97:	c9                   	leave  
  98:	c3                   	ret    

Disassembly of section .text._ZN10RDMSensors3AddEP9RDMSensor:

0000000000000000 <RDMSensors::Add(RDMSensor*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  27:	48 8b 00             	mov    (%rax),%rax
  2a:	48 85 c0             	test   %rax,%rax
  2d:	75 07                	jne    36 <RDMSensors::Add(RDMSensor*)+0x36>
  2f:	b8 00 00 00 00       	mov    $0x0,%eax
  34:	eb 43                	jmp    79 <RDMSensors::Add(RDMSensor*)+0x79>
  36:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3a:	0f b6 40 08          	movzbl 0x8(%rax),%eax
  3e:	3c 10                	cmp    $0x10,%al
  40:	75 07                	jne    49 <RDMSensors::Add(RDMSensor*)+0x49>
  42:	b8 00 00 00 00       	mov    $0x0,%eax
  47:	eb 30                	jmp    79 <RDMSensors::Add(RDMSensor*)+0x79>
  49:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4d:	48 8b 30             	mov    (%rax),%rsi
  50:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  54:	0f b6 40 08          	movzbl 0x8(%rax),%eax
  58:	8d 48 01             	lea    0x1(%rax),%ecx
  5b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  5f:	88 4a 08             	mov    %cl,0x8(%rdx)
  62:	0f b6 c0             	movzbl %al,%eax
  65:	48 c1 e0 03          	shl    $0x3,%rax
  69:	48 8d 14 06          	lea    (%rsi,%rax,1),%rdx
  6d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  71:	48 89 02             	mov    %rax,(%rdx)
  74:	b8 01 00 00 00       	mov    $0x1,%eax
  79:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  7d:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  84:	00 00 
  86:	74 05                	je     8d <RDMSensors::Add(RDMSensor*)+0x8d>
  88:	e8 00 00 00 00       	call   8d <RDMSensors::Add(RDMSensor*)+0x8d>
  8d:	c9                   	leave  
  8e:	c3                   	ret    

Disassembly of section .text._ZN10RDMSensors13GetTypeStringEN3rdm7sensors5TypesE:

0000000000000000 <RDMSensors::GetTypeString(rdm::sensors::Types)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	89 7d ec             	mov    %edi,-0x14(%rbp)
   f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  16:	00 00 
  18:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1c:	31 c0                	xor    %eax,%eax
  1e:	83 7d ec 05          	cmpl   $0x5,-0x14(%rbp)
  22:	7f 19                	jg     3d <RDMSensors::GetTypeString(rdm::sensors::Types)+0x3d>
  24:	8b 45 ec             	mov    -0x14(%rbp),%eax
  27:	89 c0                	mov    %eax,%eax
  29:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  30:	00 
  31:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 38 <RDMSensors::GetTypeString(rdm::sensors::Types)+0x38>
  38:	48 01 d0             	add    %rdx,%rax
  3b:	eb 07                	jmp    44 <RDMSensors::GetTypeString(rdm::sensors::Types)+0x44>
  3d:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 44 <RDMSensors::GetTypeString(rdm::sensors::Types)+0x44>
  44:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  48:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  4f:	00 00 
  51:	74 05                	je     58 <RDMSensors::GetTypeString(rdm::sensors::Types)+0x58>
  53:	e8 00 00 00 00       	call   58 <RDMSensors::GetTypeString(rdm::sensors::Types)+0x58>
  58:	c9                   	leave  
  59:	c3                   	ret    

Disassembly of section .text._ZN10RDMSensors13GetTypeStringEPKc:

0000000000000000 <RDMSensors::GetTypeString(char const*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  26:	eb 31                	jmp    59 <RDMSensors::GetTypeString(char const*)+0x59>
  28:	8b 45 f4             	mov    -0xc(%rbp),%eax
  2b:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  32:	00 
  33:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 3a <RDMSensors::GetTypeString(char const*)+0x3a>
  3a:	48 01 c2             	add    %rax,%rdx
  3d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  41:	48 89 d6             	mov    %rdx,%rsi
  44:	48 89 c7             	mov    %rax,%rdi
  47:	e8 00 00 00 00       	call   4c <RDMSensors::GetTypeString(char const*)+0x4c>
  4c:	85 c0                	test   %eax,%eax
  4e:	75 05                	jne    55 <RDMSensors::GetTypeString(char const*)+0x55>
  50:	8b 45 f4             	mov    -0xc(%rbp),%eax
  53:	eb 0f                	jmp    64 <RDMSensors::GetTypeString(char const*)+0x64>
  55:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  59:	83 7d f4 05          	cmpl   $0x5,-0xc(%rbp)
  5d:	76 c9                	jbe    28 <RDMSensors::GetTypeString(char const*)+0x28>
  5f:	b8 06 00 00 00       	mov    $0x6,%eax
  64:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  68:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  6f:	00 00 
  71:	74 05                	je     78 <RDMSensors::GetTypeString(char const*)+0x78>
  73:	e8 00 00 00 00       	call   78 <RDMSensors::GetTypeString(char const*)+0x78>
  78:	c9                   	leave  
  79:	c3                   	ret    

Disassembly of section .text._ZN14CpuTemperatureD2Ev:

0000000000000000 <CpuTemperature::~CpuTemperature()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 26 <CpuTemperature::~CpuTemperature()+0x26>
  26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2a:	48 89 10             	mov    %rdx,(%rax)
  2d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  31:	48 89 c7             	mov    %rax,%rdi
  34:	e8 00 00 00 00       	call   39 <CpuTemperature::~CpuTemperature()+0x39>
  39:	90                   	nop
  3a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3e:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  45:	00 00 
  47:	74 05                	je     4e <CpuTemperature::~CpuTemperature()+0x4e>
  49:	e8 00 00 00 00       	call   4e <CpuTemperature::~CpuTemperature()+0x4e>
  4e:	c9                   	leave  
  4f:	c3                   	ret    

Disassembly of section .text._ZN14CpuTemperatureD0Ev:

0000000000000000 <CpuTemperature::~CpuTemperature()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	call   2b <CpuTemperature::~CpuTemperature()+0x2b>
  2b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	call   37 <CpuTemperature::~CpuTemperature()+0x37>
  37:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3b:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  42:	00 00 
  44:	74 05                	je     4b <CpuTemperature::~CpuTemperature()+0x4b>
  46:	e8 00 00 00 00       	call   4b <CpuTemperature::~CpuTemperature()+0x4b>
  4b:	c9                   	leave  
  4c:	c3                   	ret    

rdmsensorsparams.o:     file format elf64-x86-64


Disassembly of section .text._ZN10RDMSensors3GetEv:

0000000000000000 <RDMSensors::Get()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 ec 18          	sub    $0x18,%rsp
   8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   f:	00 00 
  11:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  16:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 1d <RDMSensors::Get()+0x1d>
  1d:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  22:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  29:	00 00 
  2b:	74 05                	je     32 <RDMSensors::Get()+0x32>
  2d:	e8 00 00 00 00       	call   32 <RDMSensors::Get()+0x32>
  32:	48 83 c4 18          	add    $0x18,%rsp
  36:	c3                   	ret    

Disassembly of section .text._ZN17PropertiesBuilder7AddHex8EPKchb:

0000000000000000 <PropertiesBuilder::AddHex8(char const*, unsigned char, bool)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 ec 18          	sub    $0x18,%rsp
   8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   f:	00 00 
  11:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  16:	31 c0                	xor    %eax,%eax
  18:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  1d:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  24:	00 00 
  26:	74 05                	je     2d <PropertiesBuilder::AddHex8(char const*, unsigned char, bool)+0x2d>
  28:	e8 00 00 00 00       	call   2d <PropertiesBuilder::AddHex8(char const*, unsigned char, bool)+0x2d>
  2d:	0f b6 c9             	movzbl %cl,%ecx
  30:	0f b6 d2             	movzbl %dl,%edx
  33:	41 b8 02 00 00 00    	mov    $0x2,%r8d
  39:	48 83 c4 18          	add    $0x18,%rsp
  3d:	e9 00 00 00 00       	jmp    42 <PropertiesBuilder::AddHex8(char const*, unsigned char, bool)+0x42>

Disassembly of section .text._ZN17PropertiesBuilder7GetSizeEv:

0000000000000000 <PropertiesBuilder::GetSize()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 ec 18          	sub    $0x18,%rsp
   8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   f:	00 00 
  11:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  16:	31 c0                	xor    %eax,%eax
  18:	80 7f 0c 00          	cmpb   $0x0,0xc(%rdi)
  1c:	74 1b                	je     39 <PropertiesBuilder::GetSize()+0x39>
  1e:	0f b7 47 0a          	movzwl 0xa(%rdi),%eax
  22:	48 8b 17             	mov    (%rdi),%rdx
  25:	c6 44 02 ff 7d       	movb   $0x7d,-0x1(%rdx,%rax,1)
  2a:	0f b7 47 0a          	movzwl 0xa(%rdi),%eax
  2e:	48 8b 17             	mov    (%rdi),%rdx
  31:	c6 04 02 7d          	movb   $0x7d,(%rdx,%rax,1)
  35:	66 ff 47 0a          	incw   0xa(%rdi)
  39:	66 8b 47 0a          	mov    0xa(%rdi),%ax
  3d:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  42:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  49:	00 00 
  4b:	74 05                	je     52 <PropertiesBuilder::GetSize()+0x52>
  4d:	e8 00 00 00 00       	call   52 <PropertiesBuilder::GetSize()+0x52>
  52:	48 83 c4 18          	add    $0x18,%rsp
  56:	c3                   	ret    

Disassembly of section .text._ZN16RDMSensorsParamsC2EP21RDMSensorsParamsStore:

0000000000000000 <RDMSensorsParams::RDMSensorsParams(RDMSensorsParamsStore*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 ec 18          	sub    $0x18,%rsp
   8:	48 8d 57 08          	lea    0x8(%rdi),%rdx
   c:	b9 0f 00 00 00       	mov    $0xf,%ecx
  11:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  18:	00 00 
  1a:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  1f:	31 c0                	xor    %eax,%eax
  21:	48 89 37             	mov    %rsi,(%rdi)
  24:	48 89 d7             	mov    %rdx,%rdi
  27:	f3 ab                	rep stos %eax,%es:(%rdi)
  29:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  2e:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  35:	00 00 
  37:	74 05                	je     3e <RDMSensorsParams::RDMSensorsParams(RDMSensorsParamsStore*)+0x3e>
  39:	e8 00 00 00 00       	call   3e <RDMSensorsParams::RDMSensorsParams(RDMSensorsParamsStore*)+0x3e>
  3e:	48 83 c4 18          	add    $0x18,%rsp
  42:	c3                   	ret    

Disassembly of section .text._ZN16RDMSensorsParams4LoadEv:

0000000000000000 <RDMSensorsParams::Load()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	41 54                	push   %r12
   6:	48 89 fa             	mov    %rdi,%rdx
   9:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 10 <RDMSensorsParams::Load()+0x10>
  10:	55                   	push   %rbp
  11:	53                   	push   %rbx
  12:	48 89 fb             	mov    %rdi,%rbx
  15:	48 83 ec 20          	sub    $0x20,%rsp
  19:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  20:	00 00 
  22:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  27:	31 c0                	xor    %eax,%eax
  29:	c7 47 08 00 00 00 00 	movl   $0x0,0x8(%rdi)
  30:	48 8d 6c 24 08       	lea    0x8(%rsp),%rbp
  35:	48 89 ef             	mov    %rbp,%rdi
  38:	e8 00 00 00 00       	call   3d <RDMSensorsParams::Load()+0x3d>
  3d:	48 89 ef             	mov    %rbp,%rdi
  40:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 47 <RDMSensorsParams::Load()+0x47>
  47:	e8 00 00 00 00       	call   4c <RDMSensorsParams::Load()+0x4c>
  4c:	48 8b 3b             	mov    (%rbx),%rdi
  4f:	84 c0                	test   %al,%al
  51:	41 89 c4             	mov    %eax,%r12d
  54:	74 11                	je     67 <RDMSensorsParams::Load()+0x67>
  56:	48 85 ff             	test   %rdi,%rdi
  59:	74 30                	je     8b <RDMSensorsParams::Load()+0x8b>
  5b:	48 8b 07             	mov    (%rdi),%rax
  5e:	48 8d 73 08          	lea    0x8(%rbx),%rsi
  62:	ff 50 10             	call   *0x10(%rax)
  65:	eb 27                	jmp    8e <RDMSensorsParams::Load()+0x8e>
  67:	48 85 ff             	test   %rdi,%rdi
  6a:	74 22                	je     8e <RDMSensorsParams::Load()+0x8e>
  6c:	48 8b 07             	mov    (%rdi),%rax
  6f:	4c 8d 63 08          	lea    0x8(%rbx),%r12
  73:	4c 89 e6             	mov    %r12,%rsi
  76:	ff 50 18             	call   *0x18(%rax)
  79:	83 7b 08 07          	cmpl   $0x7,0x8(%rbx)
  7d:	76 0c                	jbe    8b <RDMSensorsParams::Load()+0x8b>
  7f:	b9 0f 00 00 00       	mov    $0xf,%ecx
  84:	31 c0                	xor    %eax,%eax
  86:	4c 89 e7             	mov    %r12,%rdi
  89:	f3 ab                	rep stos %eax,%es:(%rdi)
  8b:	41 b4 01             	mov    $0x1,%r12b
  8e:	48 89 ef             	mov    %rbp,%rdi
  91:	e8 00 00 00 00       	call   96 <RDMSensorsParams::Load()+0x96>
  96:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  9b:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  a2:	00 00 
  a4:	74 05                	je     ab <RDMSensorsParams::Load()+0xab>
  a6:	e8 00 00 00 00       	call   ab <RDMSensorsParams::Load()+0xab>
  ab:	48 83 c4 20          	add    $0x20,%rsp
  af:	44 89 e0             	mov    %r12d,%eax
  b2:	5b                   	pop    %rbx
  b3:	5d                   	pop    %rbp
  b4:	41 5c                	pop    %r12
  b6:	c3                   	ret    

Disassembly of section .text._ZN16RDMSensorsParams4LoadEPKcj:

0000000000000000 <RDMSensorsParams::Load(char const*, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	55                   	push   %rbp
   9:	53                   	push   %rbx
   a:	48 83 ec 28          	sub    $0x28,%rsp
   e:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  15:	00 00 
  17:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  1c:	31 c0                	xor    %eax,%eax
  1e:	48 83 3f 00          	cmpq   $0x0,(%rdi)
  22:	74 4a                	je     6e <RDMSensorsParams::Load(char const*, unsigned int)+0x6e>
  24:	c7 47 08 00 00 00 00 	movl   $0x0,0x8(%rdi)
  2b:	48 89 fb             	mov    %rdi,%rbx
  2e:	49 89 f4             	mov    %rsi,%r12
  31:	41 89 d5             	mov    %edx,%r13d
  34:	48 8d 6c 24 08       	lea    0x8(%rsp),%rbp
  39:	48 89 fa             	mov    %rdi,%rdx
  3c:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 43 <RDMSensorsParams::Load(char const*, unsigned int)+0x43>
  43:	48 89 ef             	mov    %rbp,%rdi
  46:	e8 00 00 00 00       	call   4b <RDMSensorsParams::Load(char const*, unsigned int)+0x4b>
  4b:	44 89 ea             	mov    %r13d,%edx
  4e:	4c 89 e6             	mov    %r12,%rsi
  51:	48 89 ef             	mov    %rbp,%rdi
  54:	e8 00 00 00 00       	call   59 <RDMSensorsParams::Load(char const*, unsigned int)+0x59>
  59:	48 8b 3b             	mov    (%rbx),%rdi
  5c:	48 8d 73 08          	lea    0x8(%rbx),%rsi
  60:	48 8b 07             	mov    (%rdi),%rax
  63:	ff 50 10             	call   *0x10(%rax)
  66:	48 89 ef             	mov    %rbp,%rdi
  69:	e8 00 00 00 00       	call   6e <RDMSensorsParams::Load(char const*, unsigned int)+0x6e>
  6e:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  73:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  7a:	00 00 
  7c:	74 05                	je     83 <RDMSensorsParams::Load(char const*, unsigned int)+0x83>
  7e:	e8 00 00 00 00       	call   83 <RDMSensorsParams::Load(char const*, unsigned int)+0x83>
  83:	48 83 c4 28          	add    $0x28,%rsp
  87:	5b                   	pop    %rbx
  88:	5d                   	pop    %rbp
  89:	41 5c                	pop    %r12
  8b:	41 5d                	pop    %r13
  8d:	c3                   	ret    

Disassembly of section .text._ZN16RDMSensorsParams7BuilderEPKN3rdm13sensorsparams6ParamsEPcjRj:

0000000000000000 <RDMSensorsParams::Builder(rdm::sensorsparams::Params const*, char*, unsigned int, unsigned int&)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	41 56                	push   %r14
   6:	41 89 ce             	mov    %ecx,%r14d
   9:	41 55                	push   %r13
   b:	4d 89 c5             	mov    %r8,%r13
   e:	4c 8d 47 08          	lea    0x8(%rdi),%r8
  12:	41 54                	push   %r12
  14:	49 89 d4             	mov    %rdx,%r12
  17:	55                   	push   %rbp
  18:	53                   	push   %rbx
  19:	48 89 fb             	mov    %rdi,%rbx
  1c:	48 83 ec 20          	sub    $0x20,%rsp
  20:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  27:	00 00 
  29:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2e:	31 c0                	xor    %eax,%eax
  30:	48 85 f6             	test   %rsi,%rsi
  33:	74 0c                	je     41 <RDMSensorsParams::Builder(rdm::sensorsparams::Params const*, char*, unsigned int, unsigned int&)+0x41>
  35:	b9 0f 00 00 00       	mov    $0xf,%ecx
  3a:	4c 89 c7             	mov    %r8,%rdi
  3d:	f3 a5                	rep movsl %ds:(%rsi),%es:(%rdi)
  3f:	eb 0c                	jmp    4d <RDMSensorsParams::Builder(rdm::sensorsparams::Params const*, char*, unsigned int, unsigned int&)+0x4d>
  41:	48 8b 3f             	mov    (%rdi),%rdi
  44:	4c 89 c6             	mov    %r8,%rsi
  47:	48 8b 07             	mov    (%rdi),%rax
  4a:	ff 50 18             	call   *0x18(%rax)
  4d:	48 8d 6c 24 08       	lea    0x8(%rsp),%rbp
  52:	4c 89 e2             	mov    %r12,%rdx
  55:	44 89 f1             	mov    %r14d,%ecx
  58:	45 31 e4             	xor    %r12d,%r12d
  5b:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 62 <RDMSensorsParams::Builder(rdm::sensorsparams::Params const*, char*, unsigned int, unsigned int&)+0x62>
  62:	48 89 ef             	mov    %rbp,%rdi
  65:	e8 00 00 00 00       	call   6a <RDMSensorsParams::Builder(rdm::sensorsparams::Params const*, char*, unsigned int, unsigned int&)+0x6a>
  6a:	44 89 e7             	mov    %r12d,%edi
  6d:	41 ff c4             	inc    %r12d
  70:	e8 00 00 00 00       	call   75 <RDMSensorsParams::Builder(rdm::sensorsparams::Params const*, char*, unsigned int, unsigned int&)+0x75>
  75:	31 c9                	xor    %ecx,%ecx
  77:	ba ff 00 00 00       	mov    $0xff,%edx
  7c:	48 89 ef             	mov    %rbp,%rdi
  7f:	48 89 c6             	mov    %rax,%rsi
  82:	e8 00 00 00 00       	call   87 <RDMSensorsParams::Builder(rdm::sensorsparams::Params const*, char*, unsigned int, unsigned int&)+0x87>
  87:	41 83 fc 06          	cmp    $0x6,%r12d
  8b:	75 dd                	jne    6a <RDMSensorsParams::Builder(rdm::sensorsparams::Params const*, char*, unsigned int, unsigned int&)+0x6a>
  8d:	45 31 e4             	xor    %r12d,%r12d
  90:	44 39 63 08          	cmp    %r12d,0x8(%rbx)
  94:	76 31                	jbe    c7 <RDMSensorsParams::Builder(rdm::sensorsparams::Params const*, char*, unsigned int, unsigned int&)+0xc7>
  96:	4b 8d 04 64          	lea    (%r12,%r12,2),%rax
  9a:	0f b6 7c 03 0c       	movzbl 0xc(%rbx,%rax,1),%edi
  9f:	83 ff 05             	cmp    $0x5,%edi
  a2:	7f 1e                	jg     c2 <RDMSensorsParams::Builder(rdm::sensorsparams::Params const*, char*, unsigned int, unsigned int&)+0xc2>
  a4:	44 0f b6 74 03 0d    	movzbl 0xd(%rbx,%rax,1),%r14d
  aa:	e8 00 00 00 00       	call   af <RDMSensorsParams::Builder(rdm::sensorsparams::Params const*, char*, unsigned int, unsigned int&)+0xaf>
  af:	b9 01 00 00 00       	mov    $0x1,%ecx
  b4:	48 89 ef             	mov    %rbp,%rdi
  b7:	48 89 c6             	mov    %rax,%rsi
  ba:	44 89 f2             	mov    %r14d,%edx
  bd:	e8 00 00 00 00       	call   c2 <RDMSensorsParams::Builder(rdm::sensorsparams::Params const*, char*, unsigned int, unsigned int&)+0xc2>
  c2:	49 ff c4             	inc    %r12
  c5:	eb c9                	jmp    90 <RDMSensorsParams::Builder(rdm::sensorsparams::Params const*, char*, unsigned int, unsigned int&)+0x90>
  c7:	48 89 ef             	mov    %rbp,%rdi
  ca:	e8 00 00 00 00       	call   cf <RDMSensorsParams::Builder(rdm::sensorsparams::Params const*, char*, unsigned int, unsigned int&)+0xcf>
  cf:	0f b7 c0             	movzwl %ax,%eax
  d2:	41 89 45 00          	mov    %eax,0x0(%r13)
  d6:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  db:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  e2:	00 00 
  e4:	74 05                	je     eb <RDMSensorsParams::Builder(rdm::sensorsparams::Params const*, char*, unsigned int, unsigned int&)+0xeb>
  e6:	e8 00 00 00 00       	call   eb <RDMSensorsParams::Builder(rdm::sensorsparams::Params const*, char*, unsigned int, unsigned int&)+0xeb>
  eb:	48 83 c4 20          	add    $0x20,%rsp
  ef:	5b                   	pop    %rbx
  f0:	5d                   	pop    %rbp
  f1:	41 5c                	pop    %r12
  f3:	41 5d                	pop    %r13
  f5:	41 5e                	pop    %r14
  f7:	c3                   	ret    

Disassembly of section .text._ZN16RDMSensorsParams4DumpEv:

0000000000000000 <RDMSensorsParams::Dump()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 ec 18          	sub    $0x18,%rsp
   8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   f:	00 00 
  11:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  16:	31 c0                	xor    %eax,%eax
  18:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  1d:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  24:	00 00 
  26:	74 05                	je     2d <RDMSensorsParams::Dump()+0x2d>
  28:	e8 00 00 00 00       	call   2d <RDMSensorsParams::Dump()+0x2d>
  2d:	48 83 c4 18          	add    $0x18,%rsp
  31:	c3                   	ret    

Disassembly of section .text._ZN16RDMSensorsParams3AddEP9RDMSensor:

0000000000000000 <RDMSensorsParams::Add(RDMSensor*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	41 54                	push   %r12
   6:	48 89 f7             	mov    %rsi,%rdi
   9:	55                   	push   %rbp
   a:	48 89 f5             	mov    %rsi,%rbp
   d:	48 83 ec 18          	sub    $0x18,%rsp
  11:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  18:	00 00 
  1a:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  1f:	48 8b 06             	mov    (%rsi),%rax
  22:	ff 50 10             	call   *0x10(%rax)
  25:	41 89 c4             	mov    %eax,%r12d
  28:	84 c0                	test   %al,%al
  2a:	74 12                	je     3e <RDMSensorsParams::Add(RDMSensor*)+0x3e>
  2c:	e8 00 00 00 00       	call   31 <RDMSensorsParams::Add(RDMSensor*)+0x31>
  31:	48 89 ee             	mov    %rbp,%rsi
  34:	48 89 c7             	mov    %rax,%rdi
  37:	e8 00 00 00 00       	call   3c <RDMSensorsParams::Add(RDMSensor*)+0x3c>
  3c:	eb 0a                	jmp    48 <RDMSensorsParams::Add(RDMSensor*)+0x48>
  3e:	48 8b 45 00          	mov    0x0(%rbp),%rax
  42:	48 89 ef             	mov    %rbp,%rdi
  45:	ff 50 08             	call   *0x8(%rax)
  48:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  4d:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  54:	00 00 
  56:	74 05                	je     5d <RDMSensorsParams::Add(RDMSensor*)+0x5d>
  58:	e8 00 00 00 00       	call   5d <RDMSensorsParams::Add(RDMSensor*)+0x5d>
  5d:	48 83 c4 18          	add    $0x18,%rsp
  61:	44 89 e0             	mov    %r12d,%eax
  64:	5d                   	pop    %rbp
  65:	41 5c                	pop    %r12
  67:	c3                   	ret    

Disassembly of section .text._ZN16RDMSensorsParams3SetEP14RDMSensorStore:

0000000000000000 <RDMSensorsParams::Set(RDMSensorStore*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 ec 18          	sub    $0x18,%rsp
   8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   f:	00 00 
  11:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  16:	31 c0                	xor    %eax,%eax
  18:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  1d:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  24:	00 00 
  26:	74 05                	je     2d <RDMSensorsParams::Set(RDMSensorStore*)+0x2d>
  28:	e8 00 00 00 00       	call   2d <RDMSensorsParams::Set(RDMSensorStore*)+0x2d>
  2d:	48 83 c4 18          	add    $0x18,%rsp
  31:	c3                   	ret    

Disassembly of section .text._ZN16RDMSensorsParams16callbackFunctionEPKc:

0000000000000000 <RDMSensorsParams::callbackFunction(char const*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	41 54                	push   %r12
   6:	55                   	push   %rbp
   7:	53                   	push   %rbx
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  1a:	31 c0                	xor    %eax,%eax
  1c:	83 7f 08 08          	cmpl   $0x8,0x8(%rdi)
  20:	0f 84 a0 00 00 00    	je     c6 <RDMSensorsParams::callbackFunction(char const*)+0xc6>
  26:	4c 8d 64 24 08       	lea    0x8(%rsp),%r12
  2b:	48 89 fb             	mov    %rdi,%rbx
  2e:	b9 08 00 00 00       	mov    $0x8,%ecx
  33:	49 89 f1             	mov    %rsi,%r9
  36:	4c 89 e7             	mov    %r12,%rdi
  39:	48 8d 54 24 05       	lea    0x5(%rsp),%rdx
  3e:	4c 8d 44 24 07       	lea    0x7(%rsp),%r8
  43:	4c 89 e6             	mov    %r12,%rsi
  46:	f3 ab                	rep stos %eax,%es:(%rdi)
  48:	48 8d 4c 24 06       	lea    0x6(%rsp),%rcx
  4d:	4c 89 cf             	mov    %r9,%rdi
  50:	c6 44 24 05 1f       	movb   $0x1f,0x5(%rsp)
  55:	c6 44 24 06 00       	movb   $0x0,0x6(%rsp)
  5a:	e8 00 00 00 00       	call   5f <RDMSensorsParams::callbackFunction(char const*)+0x5f>
  5f:	89 c5                	mov    %eax,%ebp
  61:	85 ed                	test   %ebp,%ebp
  63:	75 61                	jne    c6 <RDMSensorsParams::callbackFunction(char const*)+0xc6>
  65:	80 7c 24 08 00       	cmpb   $0x0,0x8(%rsp)
  6a:	74 5a                	je     c6 <RDMSensorsParams::callbackFunction(char const*)+0xc6>
  6c:	80 7c 24 05 00       	cmpb   $0x0,0x5(%rsp)
  71:	74 53                	je     c6 <RDMSensorsParams::callbackFunction(char const*)+0xc6>
  73:	4c 89 e7             	mov    %r12,%rdi
  76:	e8 00 00 00 00       	call   7b <RDMSensorsParams::callbackFunction(char const*)+0x7b>
  7b:	83 f8 06             	cmp    $0x6,%eax
  7e:	74 46                	je     c6 <RDMSensorsParams::callbackFunction(char const*)+0xc6>
  80:	8b 53 08             	mov    0x8(%rbx),%edx
  83:	40 8a 74 24 06       	mov    0x6(%rsp),%sil
  88:	48 8d 4b 0c          	lea    0xc(%rbx),%rcx
  8c:	39 ea                	cmp    %ebp,%edx
  8e:	74 22                	je     b2 <RDMSensorsParams::callbackFunction(char const*)+0xb2>
  90:	40 84 f6             	test   %sil,%sil
  93:	74 11                	je     a6 <RDMSensorsParams::callbackFunction(char const*)+0xa6>
  95:	40 3a 71 01          	cmp    0x1(%rcx),%sil
  99:	75 0f                	jne    aa <RDMSensorsParams::callbackFunction(char const*)+0xaa>
  9b:	48 8d 6c 6d 00       	lea    0x0(%rbp,%rbp,2),%rbp
  a0:	88 44 2b 0c          	mov    %al,0xc(%rbx,%rbp,1)
  a4:	eb 20                	jmp    c6 <RDMSensorsParams::callbackFunction(char const*)+0xc6>
  a6:	38 01                	cmp    %al,(%rcx)
  a8:	74 1c                	je     c6 <RDMSensorsParams::callbackFunction(char const*)+0xc6>
  aa:	ff c5                	inc    %ebp
  ac:	48 83 c1 03          	add    $0x3,%rcx
  b0:	eb da                	jmp    8c <RDMSensorsParams::callbackFunction(char const*)+0x8c>
  b2:	8d 4a 01             	lea    0x1(%rdx),%ecx
  b5:	48 8d 14 52          	lea    (%rdx,%rdx,2),%rdx
  b9:	89 4b 08             	mov    %ecx,0x8(%rbx)
  bc:	48 01 d3             	add    %rdx,%rbx
  bf:	88 43 0c             	mov    %al,0xc(%rbx)
  c2:	40 88 73 0d          	mov    %sil,0xd(%rbx)
  c6:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  cb:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  d2:	00 00 
  d4:	74 05                	je     db <RDMSensorsParams::callbackFunction(char const*)+0xdb>
  d6:	e8 00 00 00 00       	call   db <RDMSensorsParams::callbackFunction(char const*)+0xdb>
  db:	48 83 c4 30          	add    $0x30,%rsp
  df:	5b                   	pop    %rbx
  e0:	5d                   	pop    %rbp
  e1:	41 5c                	pop    %r12
  e3:	c3                   	ret    

Disassembly of section .text._ZN16RDMSensorsParams22staticCallbackFunctionEPvPKc:

0000000000000000 <RDMSensorsParams::staticCallbackFunction(void*, char const*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 ec 18          	sub    $0x18,%rsp
   8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   f:	00 00 
  11:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  16:	31 c0                	xor    %eax,%eax
  18:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  1d:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  24:	00 00 
  26:	74 05                	je     2d <RDMSensorsParams::staticCallbackFunction(void*, char const*)+0x2d>
  28:	e8 00 00 00 00       	call   2d <RDMSensorsParams::staticCallbackFunction(void*, char const*)+0x2d>
  2d:	48 83 c4 18          	add    $0x18,%rsp
  31:	e9 00 00 00 00       	jmp    36 <RDMSensorsParams::staticCallbackFunction(void*, char const*)+0x36>

rmdsensorprint.o:     file format elf64-x86-64


Disassembly of section .text._ZN9RDMSensor5PrintEv:

0000000000000000 <RDMSensor::Print()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	48 8d 48 16          	lea    0x16(%rax),%rcx
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2b:	0f b6 40 36          	movzbl 0x36(%rax),%eax
  2f:	0f b6 d0             	movzbl %al,%edx
  32:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  36:	0f b6 40 0a          	movzbl 0xa(%rax),%eax
  3a:	0f b6 c0             	movzbl %al,%eax
  3d:	89 c6                	mov    %eax,%esi
  3f:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 46 <RDMSensor::Print()+0x46>
  46:	48 89 c7             	mov    %rax,%rdi
  49:	b8 00 00 00 00       	mov    $0x0,%eax
  4e:	e8 00 00 00 00       	call   53 <RDMSensor::Print()+0x53>
  53:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  57:	0f b7 40 0e          	movzwl 0xe(%rax),%eax
  5b:	98                   	cwtl   
  5c:	89 c6                	mov    %eax,%esi
  5e:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 65 <RDMSensor::Print()+0x65>
  65:	48 89 c7             	mov    %rax,%rdi
  68:	b8 00 00 00 00       	mov    $0x0,%eax
  6d:	e8 00 00 00 00       	call   72 <RDMSensor::Print()+0x72>
  72:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  76:	0f b7 40 10          	movzwl 0x10(%rax),%eax
  7a:	98                   	cwtl   
  7b:	89 c6                	mov    %eax,%esi
  7d:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 84 <RDMSensor::Print()+0x84>
  84:	48 89 c7             	mov    %rax,%rdi
  87:	b8 00 00 00 00       	mov    $0x0,%eax
  8c:	e8 00 00 00 00       	call   91 <RDMSensor::Print()+0x91>
  91:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  95:	0f b7 40 12          	movzwl 0x12(%rax),%eax
  99:	98                   	cwtl   
  9a:	89 c6                	mov    %eax,%esi
  9c:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # a3 <RDMSensor::Print()+0xa3>
  a3:	48 89 c7             	mov    %rax,%rdi
  a6:	b8 00 00 00 00       	mov    $0x0,%eax
  ab:	e8 00 00 00 00       	call   b0 <RDMSensor::Print()+0xb0>
  b0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  b4:	0f b7 40 14          	movzwl 0x14(%rax),%eax
  b8:	98                   	cwtl   
  b9:	89 c6                	mov    %eax,%esi
  bb:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # c2 <RDMSensor::Print()+0xc2>
  c2:	48 89 c7             	mov    %rax,%rdi
  c5:	b8 00 00 00 00       	mov    $0x0,%eax
  ca:	e8 00 00 00 00       	call   cf <RDMSensor::Print()+0xcf>
  cf:	90                   	nop
  d0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  d4:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  db:	00 00 
  dd:	74 05                	je     e4 <RDMSensor::Print()+0xe4>
  df:	e8 00 00 00 00       	call   e4 <RDMSensor::Print()+0xe4>
  e4:	c9                   	leave  
  e5:	c3                   	ret    

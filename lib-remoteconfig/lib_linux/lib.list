In archive lib_linux/libremoteconfig.a:

remoteconfigconst.o:     file format elf64-x86-64


remoteconfig.o:     file format elf64-x86-64


Disassembly of section .text._ZN13NetworkParams4SaveEPcjRj:

0000000000000000 <NetworkParams::Save(char*, unsigned int, unsigned int&)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 ec 18          	sub    $0x18,%rsp
   8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   f:	00 00 
  11:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  16:	31 c0                	xor    %eax,%eax
  18:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  1d:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  24:	00 00 
  26:	74 05                	je     2d <NetworkParams::Save(char*, unsigned int, unsigned int&)+0x2d>
  28:	e8 00 00 00 00       	call   2d <NetworkParams::Save(char*, unsigned int, unsigned int&)+0x2d>
  2d:	49 89 c8             	mov    %rcx,%r8
  30:	48 83 c4 18          	add    $0x18,%rsp
  34:	89 d1                	mov    %edx,%ecx
  36:	48 89 f2             	mov    %rsi,%rdx
  39:	31 f6                	xor    %esi,%esi
  3b:	e9 00 00 00 00       	jmp    40 <.LC6+0x12>

Disassembly of section .text._ZNK7Network5GetIpEv:

0000000000000000 <Network::GetIp() const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 ec 18          	sub    $0x18,%rsp
   8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   f:	00 00 
  11:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  16:	8b 47 10             	mov    0x10(%rdi),%eax
  19:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  1e:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  25:	00 00 
  27:	74 05                	je     2e <Network::GetIp() const+0x2e>
  29:	e8 00 00 00 00       	call   2e <Network::GetIp() const+0x2e>
  2e:	48 83 c4 18          	add    $0x18,%rsp
  32:	c3                   	ret    

Disassembly of section .text._ZN7Network3GetEv:

0000000000000000 <Network::Get()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 ec 18          	sub    $0x18,%rsp
   8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   f:	00 00 
  11:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  16:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 1d <Network::Get()+0x1d>
  1d:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  22:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  29:	00 00 
  2b:	74 05                	je     32 <Network::Get()+0x32>
  2d:	e8 00 00 00 00       	call   32 <Network::Get()+0x32>
  32:	48 83 c4 18          	add    $0x18,%rsp
  36:	c3                   	ret    

Disassembly of section .text._ZN12RemoteConfig17HandleGetNoParamsEv:

0000000000000000 <RemoteConfig::HandleGetNoParams()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 ec 18          	sub    $0x18,%rsp
   8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   f:	00 00 
  11:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  16:	31 c0                	xor    %eax,%eax
  18:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  1d:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  24:	00 00 
  26:	74 05                	je     2d <RemoteConfig::HandleGetNoParams()+0x2d>
  28:	e8 00 00 00 00       	call   2d <RemoteConfig::HandleGetNoParams()+0x2d>
  2d:	31 d2                	xor    %edx,%edx
  2f:	31 f6                	xor    %esi,%esi
  31:	48 83 c4 18          	add    $0x18,%rsp
  35:	e9 00 00 00 00       	jmp    3a <.LC6+0xc>

Disassembly of section .text._ZN15FirmwareVersion8GetPrintEv:

0000000000000000 <FirmwareVersion::GetPrint()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 ec 18          	sub    $0x18,%rsp
   8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   f:	00 00 
  11:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  16:	31 c0                	xor    %eax,%eax
  18:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  1d:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  24:	00 00 
  26:	74 05                	je     2d <FirmwareVersion::GetPrint()+0x2d>
  28:	e8 00 00 00 00       	call   2d <FirmwareVersion::GetPrint()+0x2d>
  2d:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 34 <FirmwareVersion::GetPrint()+0x34>
  34:	48 83 c4 18          	add    $0x18,%rsp
  38:	c3                   	ret    

Disassembly of section .text._ZN15FirmwareVersion3GetEv:

0000000000000000 <FirmwareVersion::Get()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 ec 18          	sub    $0x18,%rsp
   8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   f:	00 00 
  11:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  16:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 1d <FirmwareVersion::Get()+0x1d>
  1d:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  22:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  29:	00 00 
  2b:	74 05                	je     32 <FirmwareVersion::Get()+0x32>
  2d:	e8 00 00 00 00       	call   32 <FirmwareVersion::Get()+0x32>
  32:	48 83 c4 18          	add    $0x18,%rsp
  36:	c3                   	ret    

Disassembly of section .text._ZN8Hardware3GetEv:

0000000000000000 <Hardware::Get()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 ec 18          	sub    $0x18,%rsp
   8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   f:	00 00 
  11:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  16:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 1d <Hardware::Get()+0x1d>
  1d:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  22:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  29:	00 00 
  2b:	74 05                	je     32 <Hardware::Get()+0x32>
  2d:	e8 00 00 00 00       	call   32 <Hardware::Get()+0x32>
  32:	48 83 c4 18          	add    $0x18,%rsp
  36:	c3                   	ret    

Disassembly of section .text._ZN7Display8SetSleepEb:

0000000000000000 <Display::SetSleep(bool)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	53                   	push   %rbx
   6:	48 89 fb             	mov    %rdi,%rbx
   9:	48 83 ec 18          	sub    $0x18,%rsp
   d:	48 8b 7f 20          	mov    0x20(%rdi),%rdi
  11:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  18:	00 00 
  1a:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  1f:	31 c0                	xor    %eax,%eax
  21:	48 85 ff             	test   %rdi,%rdi
  24:	74 25                	je     4b <Display::SetSleep(bool)+0x4b>
  26:	48 8b 07             	mov    (%rdi),%rax
  29:	89 f5                	mov    %esi,%ebp
  2b:	40 88 73 10          	mov    %sil,0x10(%rbx)
  2f:	40 0f b6 f6          	movzbl %sil,%esi
  33:	ff 50 50             	call   *0x50(%rax)
  36:	40 84 ed             	test   %bpl,%bpl
  39:	75 10                	jne    4b <Display::SetSleep(bool)+0x4b>
  3b:	e8 00 00 00 00       	call   40 <Display::SetSleep(bool)+0x40>
  40:	48 89 c7             	mov    %rax,%rdi
  43:	e8 00 00 00 00       	call   48 <Display::SetSleep(bool)+0x48>
  48:	89 43 04             	mov    %eax,0x4(%rbx)
  4b:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  50:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  57:	00 00 
  59:	74 05                	je     60 <Display::SetSleep(bool)+0x60>
  5b:	e8 00 00 00 00       	call   60 <Display::SetSleep(bool)+0x60>
  60:	48 83 c4 18          	add    $0x18,%rsp
  64:	5b                   	pop    %rbx
  65:	5d                   	pop    %rbp
  66:	c3                   	ret    

Disassembly of section .text._ZNK7Display7isSleepEv:

0000000000000000 <Display::isSleep() const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 ec 18          	sub    $0x18,%rsp
   8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   f:	00 00 
  11:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  16:	31 c0                	xor    %eax,%eax
  18:	8a 47 10             	mov    0x10(%rdi),%al
  1b:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  20:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  27:	00 00 
  29:	74 05                	je     30 <Display::isSleep() const+0x30>
  2b:	e8 00 00 00 00       	call   30 <Display::isSleep() const+0x30>
  30:	48 83 c4 18          	add    $0x18,%rsp
  34:	c3                   	ret    

Disassembly of section .text._ZN7Display3GetEv:

0000000000000000 <Display::Get()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 ec 18          	sub    $0x18,%rsp
   8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   f:	00 00 
  11:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  16:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 1d <Display::Get()+0x1d>
  1d:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  22:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  29:	00 00 
  2b:	74 05                	je     32 <Display::Get()+0x32>
  2d:	e8 00 00 00 00       	call   32 <Display::Get()+0x32>
  32:	48 83 c4 18          	add    $0x18,%rsp
  36:	c3                   	ret    

Disassembly of section .text._ZN16PropertiesConfig6IsJSONEv:

0000000000000000 <PropertiesConfig::IsJSON()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 ec 18          	sub    $0x18,%rsp
   8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   f:	00 00 
  11:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  16:	31 c0                	xor    %eax,%eax
  18:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  1d:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  24:	00 00 
  26:	74 05                	je     2d <PropertiesConfig::IsJSON()+0x2d>
  28:	e8 00 00 00 00       	call   2d <PropertiesConfig::IsJSON()+0x2d>
  2d:	bf 01 00 00 00       	mov    $0x1,%edi
  32:	48 83 c4 18          	add    $0x18,%rsp
  36:	e9 00 00 00 00       	jmp    3b <.LC6+0xd>

Disassembly of section .text._ZN16PropertiesConfig9isMaskSetEh:

0000000000000000 <PropertiesConfig::isMaskSet(unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 ec 18          	sub    $0x18,%rsp
   8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   f:	00 00 
  11:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  16:	31 c0                	xor    %eax,%eax
  18:	8a 05 00 00 00 00    	mov    0x0(%rip),%al        # 1e <PropertiesConfig::isMaskSet(unsigned char)+0x1e>
  1e:	21 f8                	and    %edi,%eax
  20:	40 38 f8             	cmp    %dil,%al
  23:	0f 94 c0             	sete   %al
  26:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  2b:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  32:	00 00 
  34:	74 05                	je     3b <PropertiesConfig::isMaskSet(unsigned char)+0x3b>
  36:	e8 00 00 00 00       	call   3b <PropertiesConfig::isMaskSet(unsigned char)+0x3b>
  3b:	48 83 c4 18          	add    $0x18,%rsp
  3f:	c3                   	ret    

Disassembly of section .text._ZN18RemoteConfigParams4SaveEPcjRj:

0000000000000000 <RemoteConfigParams::Save(char*, unsigned int, unsigned int&)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 ec 18          	sub    $0x18,%rsp
   8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   f:	00 00 
  11:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  16:	31 c0                	xor    %eax,%eax
  18:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  1d:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  24:	00 00 
  26:	74 05                	je     2d <RemoteConfigParams::Save(char*, unsigned int, unsigned int&)+0x2d>
  28:	e8 00 00 00 00       	call   2d <RemoteConfigParams::Save(char*, unsigned int, unsigned int&)+0x2d>
  2d:	49 89 c8             	mov    %rcx,%r8
  30:	48 83 c4 18          	add    $0x18,%rsp
  34:	89 d1                	mov    %edx,%ecx
  36:	48 89 f2             	mov    %rsi,%rdx
  39:	31 f6                	xor    %esi,%esi
  3b:	e9 00 00 00 00       	jmp    40 <.LC6+0x12>

Disassembly of section .text._ZN17StoreRemoteConfig3GetEv:

0000000000000000 <StoreRemoteConfig::Get()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 ec 18          	sub    $0x18,%rsp
   8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   f:	00 00 
  11:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  16:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 1d <StoreRemoteConfig::Get()+0x1d>
  1d:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  22:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  29:	00 00 
  2b:	74 05                	je     32 <StoreRemoteConfig::Get()+0x32>
  2d:	e8 00 00 00 00       	call   32 <StoreRemoteConfig::Get()+0x32>
  32:	48 83 c4 18          	add    $0x18,%rsp
  36:	c3                   	ret    

Disassembly of section .text._ZN12StoreNetwork3GetEv:

0000000000000000 <StoreNetwork::Get()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 ec 18          	sub    $0x18,%rsp
   8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   f:	00 00 
  11:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  16:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 1d <StoreNetwork::Get()+0x1d>
  1d:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  22:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  29:	00 00 
  2b:	74 05                	je     32 <StoreNetwork::Get()+0x32>
  2d:	e8 00 00 00 00       	call   32 <StoreNetwork::Get()+0x32>
  32:	48 83 c4 18          	add    $0x18,%rsp
  36:	c3                   	ret    

Disassembly of section .text._ZN16DMXMonitorParams4SaveEPcjRj:

0000000000000000 <DMXMonitorParams::Save(char*, unsigned int, unsigned int&)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 ec 18          	sub    $0x18,%rsp
   8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   f:	00 00 
  11:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  16:	31 c0                	xor    %eax,%eax
  18:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  1d:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  24:	00 00 
  26:	74 05                	je     2d <DMXMonitorParams::Save(char*, unsigned int, unsigned int&)+0x2d>
  28:	e8 00 00 00 00       	call   2d <DMXMonitorParams::Save(char*, unsigned int, unsigned int&)+0x2d>
  2d:	49 89 c8             	mov    %rcx,%r8
  30:	48 83 c4 18          	add    $0x18,%rsp
  34:	89 d1                	mov    %edx,%ecx
  36:	48 89 f2             	mov    %rsi,%rdx
  39:	31 f6                	xor    %esi,%esi
  3b:	e9 00 00 00 00       	jmp    40 <.LC6+0x12>

Disassembly of section .text._ZN12StoreMonitor3GetEv:

0000000000000000 <StoreMonitor::Get()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 ec 18          	sub    $0x18,%rsp
   8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   f:	00 00 
  11:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  16:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 1d <StoreMonitor::Get()+0x1d>
  1d:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  22:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  29:	00 00 
  2b:	74 05                	je     32 <StoreMonitor::Get()+0x32>
  2d:	e8 00 00 00 00       	call   32 <StoreMonitor::Get()+0x32>
  32:	48 83 c4 18          	add    $0x18,%rsp
  36:	c3                   	ret    

Disassembly of section .text._ZN15RDMDeviceParams4SaveEPcjRj:

0000000000000000 <RDMDeviceParams::Save(char*, unsigned int, unsigned int&)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 ec 18          	sub    $0x18,%rsp
   8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   f:	00 00 
  11:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  16:	31 c0                	xor    %eax,%eax
  18:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  1d:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  24:	00 00 
  26:	74 05                	je     2d <RDMDeviceParams::Save(char*, unsigned int, unsigned int&)+0x2d>
  28:	e8 00 00 00 00       	call   2d <RDMDeviceParams::Save(char*, unsigned int, unsigned int&)+0x2d>
  2d:	49 89 c8             	mov    %rcx,%r8
  30:	48 83 c4 18          	add    $0x18,%rsp
  34:	89 d1                	mov    %edx,%ecx
  36:	48 89 f2             	mov    %rsi,%rdx
  39:	31 f6                	xor    %esi,%esi
  3b:	e9 00 00 00 00       	jmp    40 <.LC6+0x12>

Disassembly of section .text._ZN14StoreRDMDevice3GetEv:

0000000000000000 <StoreRDMDevice::Get()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 ec 18          	sub    $0x18,%rsp
   8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   f:	00 00 
  11:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  16:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 1d <StoreRDMDevice::Get()+0x1d>
  1d:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  22:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  29:	00 00 
  2b:	74 05                	je     32 <StoreRDMDevice::Get()+0x32>
  2d:	e8 00 00 00 00       	call   32 <StoreRDMDevice::Get()+0x32>
  32:	48 83 c4 18          	add    $0x18,%rsp
  36:	c3                   	ret    

Disassembly of section .text._ZN16RDMSensorsParams4SaveEPcjRj:

0000000000000000 <RDMSensorsParams::Save(char*, unsigned int, unsigned int&)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 ec 18          	sub    $0x18,%rsp
   8:	49 89 c8             	mov    %rcx,%r8
   b:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  12:	00 00 
  14:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 83 3f 00          	cmpq   $0x0,(%rdi)
  1f:	75 18                	jne    39 <RDMSensorsParams::Save(char*, unsigned int, unsigned int&)+0x39>
  21:	c7 01 00 00 00 00    	movl   $0x0,(%rcx)
  27:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  2c:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  33:	00 00 
  35:	74 27                	je     5e <RDMSensorsParams::Save(char*, unsigned int, unsigned int&)+0x5e>
  37:	eb 20                	jmp    59 <RDMSensorsParams::Save(char*, unsigned int, unsigned int&)+0x59>
  39:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  3e:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  45:	00 00 
  47:	75 10                	jne    59 <RDMSensorsParams::Save(char*, unsigned int, unsigned int&)+0x59>
  49:	89 d1                	mov    %edx,%ecx
  4b:	48 83 c4 18          	add    $0x18,%rsp
  4f:	48 89 f2             	mov    %rsi,%rdx
  52:	31 f6                	xor    %esi,%esi
  54:	e9 00 00 00 00       	jmp    59 <RDMSensorsParams::Save(char*, unsigned int, unsigned int&)+0x59>
  59:	e8 00 00 00 00       	call   5e <RDMSensorsParams::Save(char*, unsigned int, unsigned int&)+0x5e>
  5e:	48 83 c4 18          	add    $0x18,%rsp
  62:	c3                   	ret    

Disassembly of section .text._ZN15StoreRDMSensors3GetEv:

0000000000000000 <StoreRDMSensors::Get()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 ec 18          	sub    $0x18,%rsp
   8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   f:	00 00 
  11:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  16:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 1d <StoreRDMSensors::Get()+0x1d>
  1d:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  22:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  29:	00 00 
  2b:	74 05                	je     32 <StoreRDMSensors::Get()+0x32>
  2d:	e8 00 00 00 00       	call   32 <StoreRDMSensors::Get()+0x32>
  32:	48 83 c4 18          	add    $0x18,%rsp
  36:	c3                   	ret    

Disassembly of section .text._ZN12RemoteConfigC2EN12remoteconfig4NodeENS0_6OutputEj:

0000000000000000 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	41 55                	push   %r13
   6:	41 89 f5             	mov    %esi,%r13d
   9:	41 54                	push   %r12
   b:	41 89 d4             	mov    %edx,%r12d
   e:	55                   	push   %rbp
   f:	89 cd                	mov    %ecx,%ebp
  11:	53                   	push   %rbx
  12:	48 89 fb             	mov    %rdi,%rbx
  15:	48 83 ec 18          	sub    $0x18,%rsp
  19:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  20:	00 00 
  22:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  27:	31 c0                	xor    %eax,%eax
  29:	89 57 04             	mov    %edx,0x4(%rdi)
  2c:	89 4f 08             	mov    %ecx,0x8(%rdi)
  2f:	89 37                	mov    %esi,(%rdi)
  31:	c7 47 0c 00 00 00 00 	movl   $0x0,0xc(%rdi)
  38:	66 c7 47 10 00 00    	movw   $0x0,0x10(%rdi)
  3e:	c7 47 14 ff ff ff ff 	movl   $0xffffffff,0x14(%rdi)
  45:	48 c7 47 18 00 00 00 	movq   $0x0,0x18(%rdi)
  4c:	00 
  4d:	48 c7 47 20 00 00 00 	movq   $0x0,0x20(%rdi)
  54:	00 
  55:	c6 47 28 00          	movb   $0x0,0x28(%rdi)
  59:	48 89 3d 00 00 00 00 	mov    %rdi,0x0(%rip)        # 60 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)+0x60>
  60:	e8 00 00 00 00       	call   65 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)+0x65>
  65:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6c <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)+0x6c>
  6c:	48 89 c7             	mov    %rax,%rdi
  6f:	e8 00 00 00 00       	call   74 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)+0x74>
  74:	44 88 2d 00 00 00 00 	mov    %r13b,0x0(%rip)        # 7b <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)+0x7b>
  7b:	44 88 25 00 00 00 00 	mov    %r12b,0x0(%rip)        # 82 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)+0x82>
  82:	40 88 2d 00 00 00 00 	mov    %bpl,0x0(%rip)        # 89 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)+0x89>
  89:	c6 05 00 00 00 00 00 	movb   $0x0,0x0(%rip)        # 90 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)+0x90>
  90:	e8 00 00 00 00       	call   95 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)+0x95>
  95:	be 05 29 00 00       	mov    $0x2905,%esi
  9a:	48 89 c7             	mov    %rax,%rdi
  9d:	e8 00 00 00 00       	call   a2 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)+0xa2>
  a2:	89 43 14             	mov    %eax,0x14(%rbx)
  a5:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  aa:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  b1:	00 00 
  b3:	74 05                	je     ba <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)+0xba>
  b5:	e8 00 00 00 00       	call   ba <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)+0xba>
  ba:	48 83 c4 18          	add    $0x18,%rsp
  be:	5b                   	pop    %rbx
  bf:	5d                   	pop    %rbp
  c0:	41 5c                	pop    %r12
  c2:	41 5d                	pop    %r13
  c4:	c3                   	ret    

Disassembly of section .text._ZN12RemoteConfigD2Ev:

0000000000000000 <RemoteConfig::~RemoteConfig()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 ec 18          	sub    $0x18,%rsp
   8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   f:	00 00 
  11:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  16:	31 c0                	xor    %eax,%eax
  18:	e8 00 00 00 00       	call   1d <RemoteConfig::~RemoteConfig()+0x1d>
  1d:	48 89 c7             	mov    %rax,%rdi
  20:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  25:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  2c:	00 00 
  2e:	74 05                	je     35 <RemoteConfig::~RemoteConfig()+0x35>
  30:	e8 00 00 00 00       	call   35 <RemoteConfig::~RemoteConfig()+0x35>
  35:	be 05 29 00 00       	mov    $0x2905,%esi
  3a:	48 83 c4 18          	add    $0x18,%rsp
  3e:	e9 00 00 00 00       	jmp    43 <.LC6+0x15>

Disassembly of section .text._ZNK12RemoteConfig13GetStringNodeEv:

0000000000000000 <RemoteConfig::GetStringNode() const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 ec 18          	sub    $0x18,%rsp
   8:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # f <RemoteConfig::GetStringNode() const+0xf>
   f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  16:	00 00 
  18:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	0f b6 05 00 00 00 00 	movzbl 0x0(%rip),%eax        # 26 <RemoteConfig::GetStringNode() const+0x26>
  26:	48 6b c0 12          	imul   $0x12,%rax,%rax
  2a:	48 01 d0             	add    %rdx,%rax
  2d:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  32:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  39:	00 00 
  3b:	74 05                	je     42 <RemoteConfig::GetStringNode() const+0x42>
  3d:	e8 00 00 00 00       	call   42 <RemoteConfig::GetStringNode() const+0x42>
  42:	48 83 c4 18          	add    $0x18,%rsp
  46:	c3                   	ret    

Disassembly of section .text._ZNK12RemoteConfig15GetStringOutputEv:

0000000000000000 <RemoteConfig::GetStringOutput() const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 ec 18          	sub    $0x18,%rsp
   8:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # f <RemoteConfig::GetStringOutput() const+0xf>
   f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  16:	00 00 
  18:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	0f b6 05 00 00 00 00 	movzbl 0x0(%rip),%eax        # 26 <RemoteConfig::GetStringOutput() const+0x26>
  26:	48 6b c0 0c          	imul   $0xc,%rax,%rax
  2a:	48 01 d0             	add    %rdx,%rax
  2d:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  32:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  39:	00 00 
  3b:	74 05                	je     42 <RemoteConfig::GetStringOutput() const+0x42>
  3d:	e8 00 00 00 00       	call   42 <RemoteConfig::GetStringOutput() const+0x42>
  42:	48 83 c4 18          	add    $0x18,%rsp
  46:	c3                   	ret    

Disassembly of section .text._ZN12RemoteConfig10SetDisableEb:

0000000000000000 <RemoteConfig::SetDisable(bool)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	53                   	push   %rbx
   5:	48 89 fb             	mov    %rdi,%rbx
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  1a:	31 c0                	xor    %eax,%eax
  1c:	8a 47 0c             	mov    0xc(%rdi),%al
  1f:	40 84 f6             	test   %sil,%sil
  22:	74 23                	je     47 <RemoteConfig::SetDisable(bool)+0x47>
  24:	84 c0                	test   %al,%al
  26:	75 3c                	jne    64 <RemoteConfig::SetDisable(bool)+0x64>
  28:	e8 00 00 00 00       	call   2d <RemoteConfig::SetDisable(bool)+0x2d>
  2d:	be 05 29 00 00       	mov    $0x2905,%esi
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	call   3a <RemoteConfig::SetDisable(bool)+0x3a>
  3a:	c7 43 14 ff ff ff ff 	movl   $0xffffffff,0x14(%rbx)
  41:	c6 43 0c 01          	movb   $0x1,0xc(%rbx)
  45:	eb 1d                	jmp    64 <RemoteConfig::SetDisable(bool)+0x64>
  47:	84 c0                	test   %al,%al
  49:	74 19                	je     64 <RemoteConfig::SetDisable(bool)+0x64>
  4b:	e8 00 00 00 00       	call   50 <RemoteConfig::SetDisable(bool)+0x50>
  50:	be 05 29 00 00       	mov    $0x2905,%esi
  55:	48 89 c7             	mov    %rax,%rdi
  58:	e8 00 00 00 00       	call   5d <RemoteConfig::SetDisable(bool)+0x5d>
  5d:	c6 43 0c 00          	movb   $0x0,0xc(%rbx)
  61:	89 43 14             	mov    %eax,0x14(%rbx)
  64:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  69:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  70:	00 00 
  72:	74 05                	je     79 <RemoteConfig::SetDisable(bool)+0x79>
  74:	e8 00 00 00 00       	call   79 <RemoteConfig::SetDisable(bool)+0x79>
  79:	48 83 c4 10          	add    $0x10,%rsp
  7d:	5b                   	pop    %rbx
  7e:	c3                   	ret    

Disassembly of section .text._ZN12RemoteConfig14SetDisplayNameEPKc:

0000000000000000 <RemoteConfig::SetDisplayName(char const*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 ec 18          	sub    $0x18,%rsp
   8:	ba 17 00 00 00       	mov    $0x17,%edx
   d:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 14 <RemoteConfig::SetDisplayName(char const*)+0x14>
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22:	31 c0                	xor    %eax,%eax
  24:	e8 00 00 00 00       	call   29 <RemoteConfig::SetDisplayName(char const*)+0x29>
  29:	c6 05 00 00 00 00 00 	movb   $0x0,0x0(%rip)        # 30 <RemoteConfig::SetDisplayName(char const*)+0x30>
  30:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  35:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  3c:	00 00 
  3e:	74 05                	je     45 <RemoteConfig::SetDisplayName(char const*)+0x45>
  40:	e8 00 00 00 00       	call   45 <RemoteConfig::SetDisplayName(char const*)+0x45>
  45:	48 83 c4 18          	add    $0x18,%rsp
  49:	c3                   	ret    

Disassembly of section .text._ZN12RemoteConfig13HandleRequestEv:

0000000000000000 <RemoteConfig::HandleRequest()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	41 57                	push   %r15
   6:	41 56                	push   %r14
   8:	41 55                	push   %r13
   a:	41 54                	push   %r12
   c:	55                   	push   %rbp
   d:	48 89 fd             	mov    %rdi,%rbp
  10:	53                   	push   %rbx
  11:	48 83 ec 18          	sub    $0x18,%rsp
  15:	48 8b 3d 00 00 00 00 	mov    0x0(%rip),%rdi        # 1c <RemoteConfig::HandleRequest()+0x1c>
  1c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  23:	00 00 
  25:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  2a:	31 c0                	xor    %eax,%eax
  2c:	8b 45 1c             	mov    0x1c(%rbp),%eax
  2f:	8d 50 ff             	lea    -0x1(%rax),%edx
  32:	80 3c 17 0a          	cmpb   $0xa,(%rdi,%rdx,1)
  36:	75 03                	jne    3b <RemoteConfig::HandleRequest()+0x3b>
  38:	89 55 1c             	mov    %edx,0x1c(%rbp)
  3b:	8a 07                	mov    (%rdi),%al
  3d:	3c 3f                	cmp    $0x3f,%al
  3f:	0f 85 8e 00 00 00    	jne    d3 <RemoteConfig::HandleRequest()+0xd3>
  45:	8b 45 1c             	mov    0x1c(%rbp),%eax
  48:	4c 8d 35 00 00 00 00 	lea    0x0(%rip),%r14        # 4f <RemoteConfig::HandleRequest()+0x4f>
  4f:	31 db                	xor    %ebx,%ebx
  51:	4c 8d 67 01          	lea    0x1(%rdi),%r12
  55:	4d 89 f5             	mov    %r14,%r13
  58:	44 8d 78 ff          	lea    -0x1(%rax),%r15d
  5c:	44 89 7d 1c          	mov    %r15d,0x1c(%rbp)
  60:	41 0f b7 46 18       	movzwl 0x18(%r14),%eax
  65:	41 80 7e 1a 00       	cmpb   $0x0,0x1a(%r14)
  6a:	48 89 c2             	mov    %rax,%rdx
  6d:	74 07                	je     76 <RemoteConfig::HandleRequest()+0x76>
  6f:	41 39 c7             	cmp    %eax,%r15d
  72:	77 07                	ja     7b <RemoteConfig::HandleRequest()+0x7b>
  74:	eb 34                	jmp    aa <RemoteConfig::HandleRequest()+0xaa>
  76:	41 39 c7             	cmp    %eax,%r15d
  79:	75 2f                	jne    aa <RemoteConfig::HandleRequest()+0xaa>
  7b:	49 8b 76 10          	mov    0x10(%r14),%rsi
  7f:	4c 89 e7             	mov    %r12,%rdi
  82:	e8 00 00 00 00       	call   87 <RemoteConfig::HandleRequest()+0x87>
  87:	85 c0                	test   %eax,%eax
  89:	75 1f                	jne    aa <RemoteConfig::HandleRequest()+0xaa>
  8b:	48 c1 e3 05          	shl    $0x5,%rbx
  8f:	4c 01 eb             	add    %r13,%rbx
  92:	48 8b 7b 08          	mov    0x8(%rbx),%rdi
  96:	48 8b 03             	mov    (%rbx),%rax
  99:	48 01 ef             	add    %rbp,%rdi
  9c:	a8 01                	test   $0x1,%al
  9e:	74 1a                	je     ba <RemoteConfig::HandleRequest()+0xba>
  a0:	48 8b 17             	mov    (%rdi),%rdx
  a3:	48 8b 44 02 ff       	mov    -0x1(%rdx,%rax,1),%rax
  a8:	eb 10                	jmp    ba <RemoteConfig::HandleRequest()+0xba>
  aa:	ff c3                	inc    %ebx
  ac:	49 83 c6 20          	add    $0x20,%r14
  b0:	83 fb 08             	cmp    $0x8,%ebx
  b3:	75 ab                	jne    60 <RemoteConfig::HandleRequest()+0x60>
  b5:	e9 27 01 00 00       	jmp    1e1 <RemoteConfig::HandleRequest()+0x1e1>
  ba:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  bf:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  c6:	00 00 
  c8:	0f 84 d0 00 00 00    	je     19e <RemoteConfig::HandleRequest()+0x19e>
  ce:	e9 62 01 00 00       	jmp    235 <RemoteConfig::HandleRequest()+0x235>
  d3:	80 7d 0d 00          	cmpb   $0x0,0xd(%rbp)
  d7:	0f 85 48 01 00 00    	jne    225 <RemoteConfig::HandleRequest()+0x225>
  dd:	3c 23                	cmp    $0x23,%al
  df:	75 2e                	jne    10f <RemoteConfig::HandleRequest()+0x10f>
  e1:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  e6:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  ed:	00 00 
  ef:	0f 85 40 01 00 00    	jne    235 <RemoteConfig::HandleRequest()+0x235>
  f5:	48 83 c4 18          	add    $0x18,%rsp
  f9:	48 89 ef             	mov    %rbp,%rdi
  fc:	31 d2                	xor    %edx,%edx
  fe:	31 f6                	xor    %esi,%esi
 100:	5b                   	pop    %rbx
 101:	5d                   	pop    %rbp
 102:	41 5c                	pop    %r12
 104:	41 5d                	pop    %r13
 106:	41 5e                	pop    %r14
 108:	41 5f                	pop    %r15
 10a:	e9 00 00 00 00       	jmp    10f <RemoteConfig::HandleRequest()+0x10f>
 10f:	3c 21                	cmp    $0x21,%al
 111:	0f 85 0e 01 00 00    	jne    225 <RemoteConfig::HandleRequest()+0x225>
 117:	8b 45 1c             	mov    0x1c(%rbp),%eax
 11a:	8d 58 ff             	lea    -0x1(%rax),%ebx
 11d:	89 5d 1c             	mov    %ebx,0x1c(%rbp)
 120:	83 fb 05             	cmp    $0x5,%ebx
 123:	0f 86 85 00 00 00    	jbe    1ae <RemoteConfig::HandleRequest()+0x1ae>
 129:	4c 8d 67 01          	lea    0x1(%rdi),%r12
 12d:	ba 05 00 00 00       	mov    $0x5,%edx
 132:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 139 <RemoteConfig::HandleRequest()+0x139>
 139:	4c 89 e7             	mov    %r12,%rdi
 13c:	e8 00 00 00 00       	call   141 <RemoteConfig::HandleRequest()+0x141>
 141:	85 c0                	test   %eax,%eax
 143:	74 24                	je     169 <RemoteConfig::HandleRequest()+0x169>
 145:	83 fb 08             	cmp    $0x8,%ebx
 148:	76 64                	jbe    1ae <RemoteConfig::HandleRequest()+0x1ae>
 14a:	ba 08 00 00 00       	mov    $0x8,%edx
 14f:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 156 <RemoteConfig::HandleRequest()+0x156>
 156:	4c 89 e7             	mov    %r12,%rdi
 159:	e8 00 00 00 00       	call   15e <RemoteConfig::HandleRequest()+0x15e>
 15e:	85 c0                	test   %eax,%eax
 160:	75 4c                	jne    1ae <RemoteConfig::HandleRequest()+0x1ae>
 162:	b8 01 00 00 00       	mov    $0x1,%eax
 167:	eb 02                	jmp    16b <RemoteConfig::HandleRequest()+0x16b>
 169:	31 c0                	xor    %eax,%eax
 16b:	48 c1 e0 05          	shl    $0x5,%rax
 16f:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 176 <RemoteConfig::HandleRequest()+0x176>
 176:	48 8b 04 02          	mov    (%rdx,%rax,1),%rax
 17a:	a8 01                	test   $0x1,%al
 17c:	74 09                	je     187 <RemoteConfig::HandleRequest()+0x187>
 17e:	48 8b 55 00          	mov    0x0(%rbp),%rdx
 182:	48 8b 44 02 ff       	mov    -0x1(%rdx,%rax,1),%rax
 187:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
 18c:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
 193:	00 00 
 195:	48 89 ef             	mov    %rbp,%rdi
 198:	0f 85 97 00 00 00    	jne    235 <RemoteConfig::HandleRequest()+0x235>
 19e:	48 83 c4 18          	add    $0x18,%rsp
 1a2:	5b                   	pop    %rbx
 1a3:	5d                   	pop    %rbp
 1a4:	41 5c                	pop    %r12
 1a6:	41 5d                	pop    %r13
 1a8:	41 5e                	pop    %r14
 1aa:	41 5f                	pop    %r15
 1ac:	ff e0                	jmp    *%rax
 1ae:	e8 00 00 00 00       	call   1b3 <RemoteConfig::HandleRequest()+0x1b3>
 1b3:	48 89 c7             	mov    %rax,%rdi
 1b6:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
 1bb:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 1c2:	00 00 
 1c4:	75 6f                	jne    235 <RemoteConfig::HandleRequest()+0x235>
 1c6:	8b 75 14             	mov    0x14(%rbp),%esi
 1c9:	44 8b 45 18          	mov    0x18(%rbp),%r8d
 1cd:	41 b9 05 29 00 00    	mov    $0x2905,%r9d
 1d3:	b9 08 00 00 00       	mov    $0x8,%ecx
 1d8:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 1df <RemoteConfig::HandleRequest()+0x1df>
 1df:	eb 31                	jmp    212 <RemoteConfig::HandleRequest()+0x212>
 1e1:	e8 00 00 00 00       	call   1e6 <RemoteConfig::HandleRequest()+0x1e6>
 1e6:	48 89 c7             	mov    %rax,%rdi
 1e9:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
 1ee:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 1f5:	00 00 
 1f7:	75 3c                	jne    235 <RemoteConfig::HandleRequest()+0x235>
 1f9:	8b 75 14             	mov    0x14(%rbp),%esi
 1fc:	44 8b 45 18          	mov    0x18(%rbp),%r8d
 200:	41 b9 05 29 00 00    	mov    $0x2905,%r9d
 206:	b9 08 00 00 00       	mov    $0x8,%ecx
 20b:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 212 <RemoteConfig::HandleRequest()+0x212>
 212:	48 83 c4 18          	add    $0x18,%rsp
 216:	5b                   	pop    %rbx
 217:	5d                   	pop    %rbp
 218:	41 5c                	pop    %r12
 21a:	41 5d                	pop    %r13
 21c:	41 5e                	pop    %r14
 21e:	41 5f                	pop    %r15
 220:	e9 00 00 00 00       	jmp    225 <RemoteConfig::HandleRequest()+0x225>
 225:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
 22a:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 231:	00 00 
 233:	74 05                	je     23a <RemoteConfig::HandleRequest()+0x23a>
 235:	e8 00 00 00 00       	call   23a <RemoteConfig::HandleRequest()+0x23a>
 23a:	48 83 c4 18          	add    $0x18,%rsp
 23e:	5b                   	pop    %rbx
 23f:	5d                   	pop    %rbp
 240:	41 5c                	pop    %r12
 242:	41 5d                	pop    %r13
 244:	41 5e                	pop    %r14
 246:	41 5f                	pop    %r15
 248:	c3                   	ret    

Disassembly of section .text._ZN12RemoteConfig12HandleUptimeEv:

0000000000000000 <RemoteConfig::HandleUptime()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	41 54                	push   %r12
   6:	53                   	push   %rbx
   7:	48 83 ec 18          	sub    $0x18,%rsp
   b:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  12:	00 00 
  14:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  19:	31 c0                	xor    %eax,%eax
  1b:	80 7f 0f 00          	cmpb   $0x0,0xf(%rdi)
  1f:	74 70                	je     91 <RemoteConfig::HandleUptime()+0x91>
  21:	48 89 fb             	mov    %rdi,%rbx
  24:	e8 00 00 00 00       	call   29 <RemoteConfig::HandleUptime()+0x29>
  29:	48 89 c7             	mov    %rax,%rdi
  2c:	e8 00 00 00 00       	call   31 <RemoteConfig::HandleUptime()+0x31>
  31:	83 7b 1c 07          	cmpl   $0x7,0x1c(%rbx)
  35:	89 c1                	mov    %eax,%ecx
  37:	75 58                	jne    91 <RemoteConfig::HandleUptime()+0x91>
  39:	48 8b 3d 00 00 00 00 	mov    0x0(%rip),%rdi        # 40 <RemoteConfig::HandleUptime()+0x40>
  40:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 47 <RemoteConfig::HandleUptime()+0x47>
  47:	be ff 03 00 00       	mov    $0x3ff,%esi
  4c:	31 c0                	xor    %eax,%eax
  4e:	e8 00 00 00 00       	call   53 <RemoteConfig::HandleUptime()+0x53>
  53:	41 89 c4             	mov    %eax,%r12d
  56:	e8 00 00 00 00       	call   5b <RemoteConfig::HandleUptime()+0x5b>
  5b:	48 89 c7             	mov    %rax,%rdi
  5e:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  63:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  6a:	00 00 
  6c:	75 33                	jne    a1 <RemoteConfig::HandleUptime()+0xa1>
  6e:	8b 73 14             	mov    0x14(%rbx),%esi
  71:	44 8b 43 18          	mov    0x18(%rbx),%r8d
  75:	44 89 e1             	mov    %r12d,%ecx
  78:	41 b9 05 29 00 00    	mov    $0x2905,%r9d
  7e:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 85 <RemoteConfig::HandleUptime()+0x85>
  85:	48 83 c4 18          	add    $0x18,%rsp
  89:	5b                   	pop    %rbx
  8a:	41 5c                	pop    %r12
  8c:	e9 00 00 00 00       	jmp    91 <RemoteConfig::HandleUptime()+0x91>
  91:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  96:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  9d:	00 00 
  9f:	74 05                	je     a6 <RemoteConfig::HandleUptime()+0xa6>
  a1:	e8 00 00 00 00       	call   a6 <RemoteConfig::HandleUptime()+0xa6>
  a6:	48 83 c4 18          	add    $0x18,%rsp
  aa:	5b                   	pop    %rbx
  ab:	41 5c                	pop    %r12
  ad:	c3                   	ret    

Disassembly of section .text._ZN12RemoteConfig13HandleVersionEv:

0000000000000000 <RemoteConfig::HandleVersion()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	53                   	push   %rbx
   6:	48 83 ec 18          	sub    $0x18,%rsp
   a:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  11:	00 00 
  13:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  18:	31 c0                	xor    %eax,%eax
  1a:	83 7f 1c 08          	cmpl   $0x8,0x1c(%rdi)
  1e:	75 69                	jne    89 <RemoteConfig::HandleVersion()+0x89>
  20:	48 89 fd             	mov    %rdi,%rbp
  23:	e8 00 00 00 00       	call   28 <RemoteConfig::HandleVersion()+0x28>
  28:	48 89 c7             	mov    %rax,%rdi
  2b:	e8 00 00 00 00       	call   30 <RemoteConfig::HandleVersion()+0x30>
  30:	48 8b 3d 00 00 00 00 	mov    0x0(%rip),%rdi        # 37 <RemoteConfig::HandleVersion()+0x37>
  37:	be ff 03 00 00       	mov    $0x3ff,%esi
  3c:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 43 <RemoteConfig::HandleVersion()+0x43>
  43:	48 89 c1             	mov    %rax,%rcx
  46:	31 c0                	xor    %eax,%eax
  48:	e8 00 00 00 00       	call   4d <RemoteConfig::HandleVersion()+0x4d>
  4d:	89 c3                	mov    %eax,%ebx
  4f:	e8 00 00 00 00       	call   54 <RemoteConfig::HandleVersion()+0x54>
  54:	48 89 c7             	mov    %rax,%rdi
  57:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  5c:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  63:	00 00 
  65:	75 32                	jne    99 <RemoteConfig::HandleVersion()+0x99>
  67:	8b 75 14             	mov    0x14(%rbp),%esi
  6a:	44 8b 45 18          	mov    0x18(%rbp),%r8d
  6e:	0f b7 cb             	movzwl %bx,%ecx
  71:	41 b9 05 29 00 00    	mov    $0x2905,%r9d
  77:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 7e <RemoteConfig::HandleVersion()+0x7e>
  7e:	48 83 c4 18          	add    $0x18,%rsp
  82:	5b                   	pop    %rbx
  83:	5d                   	pop    %rbp
  84:	e9 00 00 00 00       	jmp    89 <RemoteConfig::HandleVersion()+0x89>
  89:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  8e:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  95:	00 00 
  97:	74 05                	je     9e <RemoteConfig::HandleVersion()+0x9e>
  99:	e8 00 00 00 00       	call   9e <RemoteConfig::HandleVersion()+0x9e>
  9e:	48 83 c4 18          	add    $0x18,%rsp
  a2:	5b                   	pop    %rbx
  a3:	5d                   	pop    %rbp
  a4:	c3                   	ret    

Disassembly of section .text._ZN12RemoteConfig10HandleListEv:

0000000000000000 <RemoteConfig::HandleList()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	41 56                	push   %r14
   6:	41 55                	push   %r13
   8:	41 54                	push   %r12
   a:	55                   	push   %rbp
   b:	53                   	push   %rbx
   c:	48 83 ec 10          	sub    $0x10,%rsp
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  1e:	31 c0                	xor    %eax,%eax
  20:	83 7f 1c 05          	cmpl   $0x5,0x1c(%rdi)
  24:	0f 85 ee 00 00 00    	jne    118 <RemoteConfig::HandleList()+0x118>
  2a:	44 8b 6f 04          	mov    0x4(%rdi),%r13d
  2e:	8b 1f                	mov    (%rdi),%ebx
  30:	48 89 fd             	mov    %rdi,%rbp
  33:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 3a <RemoteConfig::HandleList()+0x3a>
  3a:	44 8b 77 08          	mov    0x8(%rdi),%r14d
  3e:	4d 6b ed 0c          	imul   $0xc,%r13,%r13
  42:	48 6b db 12          	imul   $0x12,%rbx,%rbx
  46:	4c 8d 60 07          	lea    0x7(%rax),%r12
  4a:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 51 <RemoteConfig::HandleList()+0x51>
  51:	49 01 c5             	add    %rax,%r13
  54:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 5b <RemoteConfig::HandleList()+0x5b>
  5b:	48 01 c3             	add    %rax,%rbx
  5e:	e8 00 00 00 00       	call   63 <RemoteConfig::HandleList()+0x63>
  63:	48 89 c7             	mov    %rax,%rdi
  66:	e8 00 00 00 00       	call   6b <RemoteConfig::HandleList()+0x6b>
  6b:	89 c2                	mov    %eax,%edx
  6d:	41 89 c1             	mov    %eax,%r9d
  70:	0f b6 f4             	movzbl %ah,%esi
  73:	0f b6 c8             	movzbl %al,%ecx
  76:	41 c1 e9 10          	shr    $0x10,%r9d
  7a:	c1 ea 18             	shr    $0x18,%edx
  7d:	80 3d 00 00 00 00 00 	cmpb   $0x0,0x0(%rip)        # 84 <RemoteConfig::HandleList()+0x84>
  84:	41 89 f0             	mov    %esi,%r8d
  87:	45 0f b6 c9          	movzbl %r9b,%r9d
  8b:	74 2d                	je     ba <RemoteConfig::HandleList()+0xba>
  8d:	50                   	push   %rax
  8e:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 95 <RemoteConfig::HandleList()+0x95>
  95:	be f8 03 00 00       	mov    $0x3f8,%esi
  9a:	4c 89 e7             	mov    %r12,%rdi
  9d:	50                   	push   %rax
  9e:	31 c0                	xor    %eax,%eax
  a0:	41 56                	push   %r14
  a2:	41 55                	push   %r13
  a4:	53                   	push   %rbx
  a5:	52                   	push   %rdx
  a6:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # ad <RemoteConfig::HandleList()+0xad>
  ad:	e8 00 00 00 00       	call   b2 <RemoteConfig::HandleList()+0xb2>
  b2:	48 83 c4 30          	add    $0x30,%rsp
  b6:	89 c3                	mov    %eax,%ebx
  b8:	eb 22                	jmp    dc <RemoteConfig::HandleList()+0xdc>
  ba:	41 56                	push   %r14
  bc:	be f8 03 00 00       	mov    $0x3f8,%esi
  c1:	4c 89 e7             	mov    %r12,%rdi
  c4:	31 c0                	xor    %eax,%eax
  c6:	41 55                	push   %r13
  c8:	53                   	push   %rbx
  c9:	52                   	push   %rdx
  ca:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # d1 <RemoteConfig::HandleList()+0xd1>
  d1:	e8 00 00 00 00       	call   d6 <RemoteConfig::HandleList()+0xd6>
  d6:	48 83 c4 20          	add    $0x20,%rsp
  da:	89 c3                	mov    %eax,%ebx
  dc:	e8 00 00 00 00       	call   e1 <RemoteConfig::HandleList()+0xe1>
  e1:	48 89 c7             	mov    %rax,%rdi
  e4:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  e9:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  f0:	00 00 
  f2:	75 34                	jne    128 <RemoteConfig::HandleList()+0x128>
  f4:	8b 75 14             	mov    0x14(%rbp),%esi
  f7:	44 8b 45 18          	mov    0x18(%rbp),%r8d
  fb:	48 83 c4 10          	add    $0x10,%rsp
  ff:	0f b7 cb             	movzwl %bx,%ecx
 102:	4c 89 e2             	mov    %r12,%rdx
 105:	5b                   	pop    %rbx
 106:	41 b9 05 29 00 00    	mov    $0x2905,%r9d
 10c:	5d                   	pop    %rbp
 10d:	41 5c                	pop    %r12
 10f:	41 5d                	pop    %r13
 111:	41 5e                	pop    %r14
 113:	e9 00 00 00 00       	jmp    118 <RemoteConfig::HandleList()+0x118>
 118:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
 11d:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 124:	00 00 
 126:	74 05                	je     12d <RemoteConfig::HandleList()+0x12d>
 128:	e8 00 00 00 00       	call   12d <RemoteConfig::HandleList()+0x12d>
 12d:	48 83 c4 10          	add    $0x10,%rsp
 131:	5b                   	pop    %rbx
 132:	5d                   	pop    %rbp
 133:	41 5c                	pop    %r12
 135:	41 5d                	pop    %r13
 137:	41 5e                	pop    %r14
 139:	c3                   	ret    

Disassembly of section .text._ZN12RemoteConfig16HandleDisplaySetEv:

0000000000000000 <RemoteConfig::HandleDisplaySet()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 ec 18          	sub    $0x18,%rsp
   8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   f:	00 00 
  11:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  16:	31 c0                	xor    %eax,%eax
  18:	83 7f 1c 09          	cmpl   $0x9,0x1c(%rdi)
  1c:	75 32                	jne    50 <RemoteConfig::HandleDisplaySet()+0x50>
  1e:	e8 00 00 00 00       	call   23 <RemoteConfig::HandleDisplaySet()+0x23>
  23:	48 89 c7             	mov    %rax,%rdi
  26:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  2b:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  32:	00 00 
  34:	75 2a                	jne    60 <RemoteConfig::HandleDisplaySet()+0x60>
  36:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 3d <RemoteConfig::HandleDisplaySet()+0x3d>
  3d:	31 f6                	xor    %esi,%esi
  3f:	80 78 09 30          	cmpb   $0x30,0x9(%rax)
  43:	40 0f 94 c6          	sete   %sil
  47:	48 83 c4 18          	add    $0x18,%rsp
  4b:	e9 00 00 00 00       	jmp    50 <RemoteConfig::HandleDisplaySet()+0x50>
  50:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  55:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  5c:	00 00 
  5e:	74 05                	je     65 <RemoteConfig::HandleDisplaySet()+0x65>
  60:	e8 00 00 00 00       	call   65 <RemoteConfig::HandleDisplaySet()+0x65>
  65:	48 83 c4 18          	add    $0x18,%rsp
  69:	c3                   	ret    

Disassembly of section .text._ZN12RemoteConfig16HandleDisplayGetEv:

0000000000000000 <RemoteConfig::HandleDisplayGet()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	41 54                	push   %r12
   6:	53                   	push   %rbx
   7:	48 83 ec 18          	sub    $0x18,%rsp
   b:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  12:	00 00 
  14:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  19:	31 c0                	xor    %eax,%eax
  1b:	83 7f 1c 08          	cmpl   $0x8,0x1c(%rdi)
  1f:	75 7c                	jne    9d <RemoteConfig::HandleDisplayGet()+0x9d>
  21:	48 89 fb             	mov    %rdi,%rbx
  24:	e8 00 00 00 00       	call   29 <RemoteConfig::HandleDisplayGet()+0x29>
  29:	48 89 c7             	mov    %rax,%rdi
  2c:	e8 00 00 00 00       	call   31 <RemoteConfig::HandleDisplayGet()+0x31>
  31:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 38 <RemoteConfig::HandleDisplayGet()+0x38>
  38:	be ff 03 00 00       	mov    $0x3ff,%esi
  3d:	48 8b 3d 00 00 00 00 	mov    0x0(%rip),%rdi        # 44 <RemoteConfig::HandleDisplayGet()+0x44>
  44:	84 c0                	test   %al,%al
  46:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 4d <RemoteConfig::HandleDisplayGet()+0x4d>
  4d:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 54 <RemoteConfig::HandleDisplayGet()+0x54>
  54:	48 0f 45 c8          	cmovne %rax,%rcx
  58:	31 c0                	xor    %eax,%eax
  5a:	e8 00 00 00 00       	call   5f <RemoteConfig::HandleDisplayGet()+0x5f>
  5f:	41 89 c4             	mov    %eax,%r12d
  62:	e8 00 00 00 00       	call   67 <RemoteConfig::HandleDisplayGet()+0x67>
  67:	48 89 c7             	mov    %rax,%rdi
  6a:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  6f:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  76:	00 00 
  78:	75 33                	jne    ad <RemoteConfig::HandleDisplayGet()+0xad>
  7a:	8b 73 14             	mov    0x14(%rbx),%esi
  7d:	44 8b 43 18          	mov    0x18(%rbx),%r8d
  81:	44 89 e1             	mov    %r12d,%ecx
  84:	41 b9 05 29 00 00    	mov    $0x2905,%r9d
  8a:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 91 <RemoteConfig::HandleDisplayGet()+0x91>
  91:	48 83 c4 18          	add    $0x18,%rsp
  95:	5b                   	pop    %rbx
  96:	41 5c                	pop    %r12
  98:	e9 00 00 00 00       	jmp    9d <RemoteConfig::HandleDisplayGet()+0x9d>
  9d:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  a2:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  a9:	00 00 
  ab:	74 05                	je     b2 <RemoteConfig::HandleDisplayGet()+0xb2>
  ad:	e8 00 00 00 00       	call   b2 <RemoteConfig::HandleDisplayGet()+0xb2>
  b2:	48 83 c4 18          	add    $0x18,%rsp
  b6:	5b                   	pop    %rbx
  b7:	41 5c                	pop    %r12
  b9:	c3                   	ret    

Disassembly of section .text._ZN12RemoteConfig9HandleGetEPvj:

0000000000000000 <RemoteConfig::HandleGet(void*, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	55                   	push   %rbp
   9:	48 89 f5             	mov    %rsi,%rbp
   c:	53                   	push   %rbx
   d:	48 89 fb             	mov    %rdi,%rbx
  10:	48 83 ec 28          	sub    $0x28,%rsp
  14:	89 54 24 0c          	mov    %edx,0xc(%rsp)
  18:	4c 8d 6c 24 10       	lea    0x10(%rsp),%r13
  1d:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  24:	00 00 
  26:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2b:	31 c0                	xor    %eax,%eax
  2d:	48 85 f6             	test   %rsi,%rsi
  30:	75 47                	jne    79 <RemoteConfig::HandleGet(void*, unsigned int)+0x79>
  32:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 39 <RemoteConfig::HandleGet(void*, unsigned int)+0x39>
  39:	4c 89 ea             	mov    %r13,%rdx
  3c:	c7 44 24 10 fc 03 00 	movl   $0x3fc,0x10(%rsp)
  43:	00 
  44:	48 8d 70 05          	lea    0x5(%rax),%rsi
  48:	e8 00 00 00 00       	call   4d <RemoteConfig::HandleGet(void*, unsigned int)+0x4d>
  4d:	85 c0                	test   %eax,%eax
  4f:	79 6f                	jns    c0 <RemoteConfig::HandleGet(void*, unsigned int)+0xc0>
  51:	e8 00 00 00 00       	call   56 <RemoteConfig::HandleGet(void*, unsigned int)+0x56>
  56:	8b 73 14             	mov    0x14(%rbx),%esi
  59:	44 8b 43 18          	mov    0x18(%rbx),%r8d
  5d:	41 b9 05 29 00 00    	mov    $0x2905,%r9d
  63:	48 89 c7             	mov    %rax,%rdi
  66:	b9 0b 00 00 00       	mov    $0xb,%ecx
  6b:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 72 <RemoteConfig::HandleGet(void*, unsigned int)+0x72>
  72:	e8 00 00 00 00       	call   77 <RemoteConfig::HandleGet(void*, unsigned int)+0x77>
  77:	eb 40                	jmp    b9 <RemoteConfig::HandleGet(void*, unsigned int)+0xb9>
  79:	8b 44 24 0c          	mov    0xc(%rsp),%eax
  7d:	4c 89 ea             	mov    %r13,%rdx
  80:	48 89 35 00 00 00 00 	mov    %rsi,0x0(%rip)        # 87 <RemoteConfig::HandleGet(void*, unsigned int)+0x87>
  87:	89 44 24 10          	mov    %eax,0x10(%rsp)
  8b:	e8 00 00 00 00       	call   90 <RemoteConfig::HandleGet(void*, unsigned int)+0x90>
  90:	85 c0                	test   %eax,%eax
  92:	79 2c                	jns    c0 <RemoteConfig::HandleGet(void*, unsigned int)+0xc0>
  94:	48 8d 74 24 0c       	lea    0xc(%rsp),%rsi
  99:	48 8d 7c 24 14       	lea    0x14(%rsp),%rdi
  9e:	c7 44 24 14 0b 00 00 	movl   $0xb,0x14(%rsp)
  a5:	00 
  a6:	e8 00 00 00 00       	call   ab <RemoteConfig::HandleGet(void*, unsigned int)+0xab>
  ab:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # b2 <RemoteConfig::HandleGet(void*, unsigned int)+0xb2>
  b2:	48 89 ef             	mov    %rbp,%rdi
  b5:	8b 08                	mov    (%rax),%ecx
  b7:	f3 a4                	rep movsb %ds:(%rsi),%es:(%rdi)
  b9:	b8 0c 00 00 00       	mov    $0xc,%eax
  be:	eb 76                	jmp    136 <RemoteConfig::HandleGet(void*, unsigned int)+0x136>
  c0:	48 98                	cltq   
  c2:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # c9 <RemoteConfig::HandleGet(void*, unsigned int)+0xc9>
  c9:	48 6b c0 30          	imul   $0x30,%rax,%rax
  cd:	48 01 d0             	add    %rdx,%rax
  d0:	48 8b 78 08          	mov    0x8(%rax),%rdi
  d4:	48 8b 00             	mov    (%rax),%rax
  d7:	48 01 df             	add    %rbx,%rdi
  da:	a8 01                	test   $0x1,%al
  dc:	74 08                	je     e6 <RemoteConfig::HandleGet(void*, unsigned int)+0xe6>
  de:	48 8b 17             	mov    (%rdi),%rdx
  e1:	48 8b 44 02 ff       	mov    -0x1(%rdx,%rax,1),%rax
  e6:	4c 89 ee             	mov    %r13,%rsi
  e9:	ff d0                	call   *%rax
  eb:	48 85 ed             	test   %rbp,%rbp
  ee:	4c 8b 25 00 00 00 00 	mov    0x0(%rip),%r12        # f5 <RemoteConfig::HandleGet(void*, unsigned int)+0xf5>
  f5:	75 24                	jne    11b <RemoteConfig::HandleGet(void*, unsigned int)+0x11b>
  f7:	e8 00 00 00 00       	call   fc <RemoteConfig::HandleGet(void*, unsigned int)+0xfc>
  fc:	0f b7 4c 24 10       	movzwl 0x10(%rsp),%ecx
 101:	8b 73 14             	mov    0x14(%rbx),%esi
 104:	4c 89 e2             	mov    %r12,%rdx
 107:	44 8b 43 18          	mov    0x18(%rbx),%r8d
 10b:	48 89 c7             	mov    %rax,%rdi
 10e:	41 b9 05 29 00 00    	mov    $0x2905,%r9d
 114:	e8 00 00 00 00       	call   119 <RemoteConfig::HandleGet(void*, unsigned int)+0x119>
 119:	eb 17                	jmp    132 <RemoteConfig::HandleGet(void*, unsigned int)+0x132>
 11b:	48 8d 74 24 0c       	lea    0xc(%rsp),%rsi
 120:	4c 89 ef             	mov    %r13,%rdi
 123:	e8 00 00 00 00       	call   128 <RemoteConfig::HandleGet(void*, unsigned int)+0x128>
 128:	48 89 ef             	mov    %rbp,%rdi
 12b:	4c 89 e6             	mov    %r12,%rsi
 12e:	8b 08                	mov    (%rax),%ecx
 130:	f3 a4                	rep movsb %ds:(%rsi),%es:(%rdi)
 132:	8b 44 24 10          	mov    0x10(%rsp),%eax
 136:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
 13b:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
 142:	00 00 
 144:	74 05                	je     14b <RemoteConfig::HandleGet(void*, unsigned int)+0x14b>
 146:	e8 00 00 00 00       	call   14b <RemoteConfig::HandleGet(void*, unsigned int)+0x14b>
 14b:	48 83 c4 28          	add    $0x28,%rsp
 14f:	5b                   	pop    %rbx
 150:	5d                   	pop    %rbp
 151:	41 5c                	pop    %r12
 153:	41 5d                	pop    %r13
 155:	c3                   	ret    

Disassembly of section .text._ZN12RemoteConfig19HandleGetRconfigTxtERj:

0000000000000000 <RemoteConfig::HandleGetRconfigTxt(unsigned int&)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	41 54                	push   %r12
   6:	49 89 f4             	mov    %rsi,%r12
   9:	55                   	push   %rbp
   a:	48 83 ec 38          	sub    $0x38,%rsp
   e:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  15:	00 00 
  17:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  1c:	31 c0                	xor    %eax,%eax
  1e:	48 89 e5             	mov    %rsp,%rbp
  21:	e8 00 00 00 00       	call   26 <RemoteConfig::HandleGetRconfigTxt(unsigned int&)+0x26>
  26:	48 89 ef             	mov    %rbp,%rdi
  29:	48 89 c6             	mov    %rax,%rsi
  2c:	e8 00 00 00 00       	call   31 <RemoteConfig::HandleGetRconfigTxt(unsigned int&)+0x31>
  31:	4c 89 e1             	mov    %r12,%rcx
  34:	ba 00 04 00 00       	mov    $0x400,%edx
  39:	48 89 ef             	mov    %rbp,%rdi
  3c:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 43 <RemoteConfig::HandleGetRconfigTxt(unsigned int&)+0x43>
  43:	e8 00 00 00 00       	call   48 <RemoteConfig::HandleGetRconfigTxt(unsigned int&)+0x48>
  48:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  4d:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  54:	00 00 
  56:	74 05                	je     5d <RemoteConfig::HandleGetRconfigTxt(unsigned int&)+0x5d>
  58:	e8 00 00 00 00       	call   5d <RemoteConfig::HandleGetRconfigTxt(unsigned int&)+0x5d>
  5d:	48 83 c4 38          	add    $0x38,%rsp
  61:	5d                   	pop    %rbp
  62:	41 5c                	pop    %r12
  64:	c3                   	ret    

Disassembly of section .text._ZN12RemoteConfig19HandleGetNetworkTxtERj:

0000000000000000 <RemoteConfig::HandleGetNetworkTxt(unsigned int&)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	41 54                	push   %r12
   6:	49 89 f4             	mov    %rsi,%r12
   9:	55                   	push   %rbp
   a:	48 83 ec 78          	sub    $0x78,%rsp
   e:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  15:	00 00 
  17:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  1c:	31 c0                	xor    %eax,%eax
  1e:	48 89 e5             	mov    %rsp,%rbp
  21:	e8 00 00 00 00       	call   26 <RemoteConfig::HandleGetNetworkTxt(unsigned int&)+0x26>
  26:	48 89 ef             	mov    %rbp,%rdi
  29:	48 89 c6             	mov    %rax,%rsi
  2c:	e8 00 00 00 00       	call   31 <RemoteConfig::HandleGetNetworkTxt(unsigned int&)+0x31>
  31:	4c 89 e1             	mov    %r12,%rcx
  34:	ba 00 04 00 00       	mov    $0x400,%edx
  39:	48 89 ef             	mov    %rbp,%rdi
  3c:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 43 <RemoteConfig::HandleGetNetworkTxt(unsigned int&)+0x43>
  43:	e8 00 00 00 00       	call   48 <RemoteConfig::HandleGetNetworkTxt(unsigned int&)+0x48>
  48:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  4d:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  54:	00 00 
  56:	74 05                	je     5d <RemoteConfig::HandleGetNetworkTxt(unsigned int&)+0x5d>
  58:	e8 00 00 00 00       	call   5d <RemoteConfig::HandleGetNetworkTxt(unsigned int&)+0x5d>
  5d:	48 83 c4 78          	add    $0x78,%rsp
  61:	5d                   	pop    %rbp
  62:	41 5c                	pop    %r12
  64:	c3                   	ret    

Disassembly of section .text._ZN12RemoteConfig21HandleGetRdmDeviceTxtERj:

0000000000000000 <RemoteConfig::HandleGetRdmDeviceTxt(unsigned int&)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	41 54                	push   %r12
   6:	49 89 f4             	mov    %rsi,%r12
   9:	55                   	push   %rbp
   a:	48 83 ec 48          	sub    $0x48,%rsp
   e:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  15:	00 00 
  17:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  1c:	31 c0                	xor    %eax,%eax
  1e:	48 89 e5             	mov    %rsp,%rbp
  21:	e8 00 00 00 00       	call   26 <RemoteConfig::HandleGetRdmDeviceTxt(unsigned int&)+0x26>
  26:	48 89 ef             	mov    %rbp,%rdi
  29:	48 89 c6             	mov    %rax,%rsi
  2c:	e8 00 00 00 00       	call   31 <RemoteConfig::HandleGetRdmDeviceTxt(unsigned int&)+0x31>
  31:	4c 89 e1             	mov    %r12,%rcx
  34:	ba 00 04 00 00       	mov    $0x400,%edx
  39:	48 89 ef             	mov    %rbp,%rdi
  3c:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 43 <RemoteConfig::HandleGetRdmDeviceTxt(unsigned int&)+0x43>
  43:	e8 00 00 00 00       	call   48 <RemoteConfig::HandleGetRdmDeviceTxt(unsigned int&)+0x48>
  48:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  4d:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  54:	00 00 
  56:	74 05                	je     5d <RemoteConfig::HandleGetRdmDeviceTxt(unsigned int&)+0x5d>
  58:	e8 00 00 00 00       	call   5d <RemoteConfig::HandleGetRdmDeviceTxt(unsigned int&)+0x5d>
  5d:	48 83 c4 48          	add    $0x48,%rsp
  61:	5d                   	pop    %rbp
  62:	41 5c                	pop    %r12
  64:	c3                   	ret    

Disassembly of section .text._ZN12RemoteConfig22HandleGetRdmSensorsTxtERj:

0000000000000000 <RemoteConfig::HandleGetRdmSensorsTxt(unsigned int&)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	41 54                	push   %r12
   6:	49 89 f4             	mov    %rsi,%r12
   9:	55                   	push   %rbp
   a:	48 83 ec 58          	sub    $0x58,%rsp
   e:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  15:	00 00 
  17:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  1c:	31 c0                	xor    %eax,%eax
  1e:	48 89 e5             	mov    %rsp,%rbp
  21:	e8 00 00 00 00       	call   26 <RemoteConfig::HandleGetRdmSensorsTxt(unsigned int&)+0x26>
  26:	48 89 ef             	mov    %rbp,%rdi
  29:	48 89 c6             	mov    %rax,%rsi
  2c:	e8 00 00 00 00       	call   31 <RemoteConfig::HandleGetRdmSensorsTxt(unsigned int&)+0x31>
  31:	4c 89 e1             	mov    %r12,%rcx
  34:	ba 00 04 00 00       	mov    $0x400,%edx
  39:	48 89 ef             	mov    %rbp,%rdi
  3c:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 43 <RemoteConfig::HandleGetRdmSensorsTxt(unsigned int&)+0x43>
  43:	e8 00 00 00 00       	call   48 <RemoteConfig::HandleGetRdmSensorsTxt(unsigned int&)+0x48>
  48:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  4d:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  54:	00 00 
  56:	74 05                	je     5d <RemoteConfig::HandleGetRdmSensorsTxt(unsigned int&)+0x5d>
  58:	e8 00 00 00 00       	call   5d <RemoteConfig::HandleGetRdmSensorsTxt(unsigned int&)+0x5d>
  5d:	48 83 c4 58          	add    $0x58,%rsp
  61:	5d                   	pop    %rbp
  62:	41 5c                	pop    %r12
  64:	c3                   	ret    

Disassembly of section .text._ZN12RemoteConfig15HandleGetMonTxtERj:

0000000000000000 <RemoteConfig::HandleGetMonTxt(unsigned int&)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	41 54                	push   %r12
   6:	49 89 f4             	mov    %rsi,%r12
   9:	55                   	push   %rbp
   a:	48 83 ec 28          	sub    $0x28,%rsp
   e:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  15:	00 00 
  17:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  1c:	31 c0                	xor    %eax,%eax
  1e:	48 89 e5             	mov    %rsp,%rbp
  21:	e8 00 00 00 00       	call   26 <RemoteConfig::HandleGetMonTxt(unsigned int&)+0x26>
  26:	48 89 ef             	mov    %rbp,%rdi
  29:	48 89 c6             	mov    %rax,%rsi
  2c:	e8 00 00 00 00       	call   31 <RemoteConfig::HandleGetMonTxt(unsigned int&)+0x31>
  31:	4c 89 e1             	mov    %r12,%rcx
  34:	ba 00 04 00 00       	mov    $0x400,%edx
  39:	48 89 ef             	mov    %rbp,%rdi
  3c:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 43 <RemoteConfig::HandleGetMonTxt(unsigned int&)+0x43>
  43:	e8 00 00 00 00       	call   48 <RemoteConfig::HandleGetMonTxt(unsigned int&)+0x48>
  48:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  4d:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  54:	00 00 
  56:	74 05                	je     5d <RemoteConfig::HandleGetMonTxt(unsigned int&)+0x5d>
  58:	e8 00 00 00 00       	call   5d <RemoteConfig::HandleGetMonTxt(unsigned int&)+0x5d>
  5d:	48 83 c4 28          	add    $0x28,%rsp
  61:	5d                   	pop    %rbp
  62:	41 5c                	pop    %r12
  64:	c3                   	ret    

Disassembly of section .text._ZN12RemoteConfig9HandleSetEPvj:

0000000000000000 <RemoteConfig::HandleSet(void*, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	41 54                	push   %r12
   6:	55                   	push   %rbp
   7:	48 89 fd             	mov    %rdi,%rbp
   a:	53                   	push   %rbx
   b:	48 83 ec 20          	sub    $0x20,%rsp
   f:	89 54 24 0c          	mov    %edx,0xc(%rsp)
  13:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1a:	00 00 
  1c:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  21:	31 c0                	xor    %eax,%eax
  23:	48 85 f6             	test   %rsi,%rsi
  26:	75 1a                	jne    42 <RemoteConfig::HandleSet(void*, unsigned int)+0x42>
  28:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 2f <RemoteConfig::HandleSet(void*, unsigned int)+0x2f>
  2f:	c7 44 24 14 ff 03 00 	movl   $0x3ff,0x14(%rsp)
  36:	00 
  37:	48 8d 54 24 14       	lea    0x14(%rsp),%rdx
  3c:	48 8d 70 01          	lea    0x1(%rax),%rsi
  40:	eb 49                	jmp    8b <RemoteConfig::HandleSet(void*, unsigned int)+0x8b>
  42:	8b 5c 24 0c          	mov    0xc(%rsp),%ebx
  46:	81 fb 00 04 00 00    	cmp    $0x400,%ebx
  4c:	77 72                	ja     c0 <RemoteConfig::HandleSet(void*, unsigned int)+0xc0>
  4e:	49 89 f4             	mov    %rsi,%r12
  51:	e8 00 00 00 00       	call   56 <RemoteConfig::HandleSet(void*, unsigned int)+0x56>
  56:	84 c0                	test   %al,%al
  58:	74 1d                	je     77 <RemoteConfig::HandleSet(void*, unsigned int)+0x77>
  5a:	41 80 3c 24 7b       	cmpb   $0x7b,(%r12)
  5f:	75 16                	jne    77 <RemoteConfig::HandleSet(void*, unsigned int)+0x77>
  61:	ff cb                	dec    %ebx
  63:	31 d2                	xor    %edx,%edx
  65:	4c 89 e7             	mov    %r12,%rdi
  68:	0f b7 f3             	movzwl %bx,%esi
  6b:	e8 00 00 00 00       	call   70 <RemoteConfig::HandleSet(void*, unsigned int)+0x70>
  70:	85 c0                	test   %eax,%eax
  72:	7e 4c                	jle    c0 <RemoteConfig::HandleSet(void*, unsigned int)+0xc0>
  74:	0f b7 d8             	movzwl %ax,%ebx
  77:	89 5d 1c             	mov    %ebx,0x1c(%rbp)
  7a:	48 8d 54 24 0c       	lea    0xc(%rsp),%rdx
  7f:	49 8d 74 24 01       	lea    0x1(%r12),%rsi
  84:	4c 89 25 00 00 00 00 	mov    %r12,0x0(%rip)        # 8b <RemoteConfig::HandleSet(void*, unsigned int)+0x8b>
  8b:	48 89 ef             	mov    %rbp,%rdi
  8e:	e8 00 00 00 00       	call   93 <RemoteConfig::HandleSet(void*, unsigned int)+0x93>
  93:	85 c0                	test   %eax,%eax
  95:	78 29                	js     c0 <RemoteConfig::HandleSet(void*, unsigned int)+0xc0>
  97:	48 98                	cltq   
  99:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # a0 <RemoteConfig::HandleSet(void*, unsigned int)+0xa0>
  a0:	48 6b c0 30          	imul   $0x30,%rax,%rax
  a4:	48 01 d0             	add    %rdx,%rax
  a7:	48 8b 78 18          	mov    0x18(%rax),%rdi
  ab:	48 8b 40 10          	mov    0x10(%rax),%rax
  af:	48 01 ef             	add    %rbp,%rdi
  b2:	a8 01                	test   $0x1,%al
  b4:	74 08                	je     be <RemoteConfig::HandleSet(void*, unsigned int)+0xbe>
  b6:	48 8b 17             	mov    (%rdi),%rdx
  b9:	48 8b 44 02 ff       	mov    -0x1(%rdx,%rax,1),%rax
  be:	ff d0                	call   *%rax
  c0:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  c5:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  cc:	00 00 
  ce:	74 05                	je     d5 <RemoteConfig::HandleSet(void*, unsigned int)+0xd5>
  d0:	e8 00 00 00 00       	call   d5 <RemoteConfig::HandleSet(void*, unsigned int)+0xd5>
  d5:	48 83 c4 20          	add    $0x20,%rsp
  d9:	5b                   	pop    %rbx
  da:	5d                   	pop    %rbp
  db:	41 5c                	pop    %r12
  dd:	c3                   	ret    

Disassembly of section .text._ZN12RemoteConfig16HandleSetRconfigEv:

0000000000000000 <RemoteConfig::HandleSetRconfig()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	41 54                	push   %r12
   6:	55                   	push   %rbp
   7:	48 89 fd             	mov    %rdi,%rbp
   a:	48 83 ec 38          	sub    $0x38,%rsp
   e:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  15:	00 00 
  17:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  1c:	31 c0                	xor    %eax,%eax
  1e:	49 89 e4             	mov    %rsp,%r12
  21:	e8 00 00 00 00       	call   26 <RemoteConfig::HandleSetRconfig()+0x26>
  26:	4c 89 e7             	mov    %r12,%rdi
  29:	48 89 c6             	mov    %rax,%rsi
  2c:	e8 00 00 00 00       	call   31 <RemoteConfig::HandleSetRconfig()+0x31>
  31:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 38 <RemoteConfig::HandleSetRconfig()+0x38>
  38:	8b 55 1c             	mov    0x1c(%rbp),%edx
  3b:	4c 89 e7             	mov    %r12,%rdi
  3e:	e8 00 00 00 00       	call   43 <RemoteConfig::HandleSetRconfig()+0x43>
  43:	48 89 ee             	mov    %rbp,%rsi
  46:	4c 89 e7             	mov    %r12,%rdi
  49:	e8 00 00 00 00       	call   4e <RemoteConfig::HandleSetRconfig()+0x4e>
  4e:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  53:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  5a:	00 00 
  5c:	74 05                	je     63 <RemoteConfig::HandleSetRconfig()+0x63>
  5e:	e8 00 00 00 00       	call   63 <RemoteConfig::HandleSetRconfig()+0x63>
  63:	48 83 c4 38          	add    $0x38,%rsp
  67:	5d                   	pop    %rbp
  68:	41 5c                	pop    %r12
  6a:	c3                   	ret    

Disassembly of section .text._ZN12RemoteConfig19HandleSetNetworkTxtEv:

0000000000000000 <RemoteConfig::HandleSetNetworkTxt()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	53                   	push   %rbx
   6:	48 89 fb             	mov    %rdi,%rbx
   9:	48 83 ec 78          	sub    $0x78,%rsp
   d:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  14:	00 00 
  16:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  1b:	31 c0                	xor    %eax,%eax
  1d:	48 89 e5             	mov    %rsp,%rbp
  20:	e8 00 00 00 00       	call   25 <RemoteConfig::HandleSetNetworkTxt()+0x25>
  25:	48 89 ef             	mov    %rbp,%rdi
  28:	48 89 c6             	mov    %rax,%rsi
  2b:	e8 00 00 00 00       	call   30 <RemoteConfig::HandleSetNetworkTxt()+0x30>
  30:	8b 53 1c             	mov    0x1c(%rbx),%edx
  33:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 3a <RemoteConfig::HandleSetNetworkTxt()+0x3a>
  3a:	48 89 ef             	mov    %rbp,%rdi
  3d:	e8 00 00 00 00       	call   42 <RemoteConfig::HandleSetNetworkTxt()+0x42>
  42:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  47:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  4e:	00 00 
  50:	74 05                	je     57 <RemoteConfig::HandleSetNetworkTxt()+0x57>
  52:	e8 00 00 00 00       	call   57 <RemoteConfig::HandleSetNetworkTxt()+0x57>
  57:	48 83 c4 78          	add    $0x78,%rsp
  5b:	5b                   	pop    %rbx
  5c:	5d                   	pop    %rbp
  5d:	c3                   	ret    

Disassembly of section .text._ZN12RemoteConfig15HandleSetMonTxtEv:

0000000000000000 <RemoteConfig::HandleSetMonTxt()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	53                   	push   %rbx
   6:	48 89 fb             	mov    %rdi,%rbx
   9:	48 83 ec 28          	sub    $0x28,%rsp
   d:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  14:	00 00 
  16:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  1b:	31 c0                	xor    %eax,%eax
  1d:	48 89 e5             	mov    %rsp,%rbp
  20:	e8 00 00 00 00       	call   25 <RemoteConfig::HandleSetMonTxt()+0x25>
  25:	48 89 ef             	mov    %rbp,%rdi
  28:	48 89 c6             	mov    %rax,%rsi
  2b:	e8 00 00 00 00       	call   30 <RemoteConfig::HandleSetMonTxt()+0x30>
  30:	8b 53 1c             	mov    0x1c(%rbx),%edx
  33:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 3a <RemoteConfig::HandleSetMonTxt()+0x3a>
  3a:	48 89 ef             	mov    %rbp,%rdi
  3d:	e8 00 00 00 00       	call   42 <RemoteConfig::HandleSetMonTxt()+0x42>
  42:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  47:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  4e:	00 00 
  50:	74 05                	je     57 <RemoteConfig::HandleSetMonTxt()+0x57>
  52:	e8 00 00 00 00       	call   57 <RemoteConfig::HandleSetMonTxt()+0x57>
  57:	48 83 c4 28          	add    $0x28,%rsp
  5b:	5b                   	pop    %rbx
  5c:	5d                   	pop    %rbp
  5d:	c3                   	ret    

Disassembly of section .text._ZN12RemoteConfig21HandleSetRdmDeviceTxtEv:

0000000000000000 <RemoteConfig::HandleSetRdmDeviceTxt()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	53                   	push   %rbx
   6:	48 89 fb             	mov    %rdi,%rbx
   9:	48 83 ec 48          	sub    $0x48,%rsp
   d:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  14:	00 00 
  16:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  1b:	31 c0                	xor    %eax,%eax
  1d:	48 89 e5             	mov    %rsp,%rbp
  20:	e8 00 00 00 00       	call   25 <RemoteConfig::HandleSetRdmDeviceTxt()+0x25>
  25:	48 89 ef             	mov    %rbp,%rdi
  28:	48 89 c6             	mov    %rax,%rsi
  2b:	e8 00 00 00 00       	call   30 <RemoteConfig::HandleSetRdmDeviceTxt()+0x30>
  30:	8b 53 1c             	mov    0x1c(%rbx),%edx
  33:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 3a <RemoteConfig::HandleSetRdmDeviceTxt()+0x3a>
  3a:	48 89 ef             	mov    %rbp,%rdi
  3d:	e8 00 00 00 00       	call   42 <RemoteConfig::HandleSetRdmDeviceTxt()+0x42>
  42:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  47:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  4e:	00 00 
  50:	74 05                	je     57 <RemoteConfig::HandleSetRdmDeviceTxt()+0x57>
  52:	e8 00 00 00 00       	call   57 <RemoteConfig::HandleSetRdmDeviceTxt()+0x57>
  57:	48 83 c4 48          	add    $0x48,%rsp
  5b:	5b                   	pop    %rbx
  5c:	5d                   	pop    %rbp
  5d:	c3                   	ret    

Disassembly of section .text._ZN12RemoteConfig22HandleSetRdmSensorsTxtEv:

0000000000000000 <RemoteConfig::HandleSetRdmSensorsTxt()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	53                   	push   %rbx
   6:	48 89 fb             	mov    %rdi,%rbx
   9:	48 83 ec 58          	sub    $0x58,%rsp
   d:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  14:	00 00 
  16:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  1b:	31 c0                	xor    %eax,%eax
  1d:	48 89 e5             	mov    %rsp,%rbp
  20:	e8 00 00 00 00       	call   25 <RemoteConfig::HandleSetRdmSensorsTxt()+0x25>
  25:	48 89 ef             	mov    %rbp,%rdi
  28:	48 89 c6             	mov    %rax,%rsi
  2b:	e8 00 00 00 00       	call   30 <RemoteConfig::HandleSetRdmSensorsTxt()+0x30>
  30:	8b 53 1c             	mov    0x1c(%rbx),%edx
  33:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 3a <RemoteConfig::HandleSetRdmSensorsTxt()+0x3a>
  3a:	48 89 ef             	mov    %rbp,%rdi
  3d:	e8 00 00 00 00       	call   42 <RemoteConfig::HandleSetRdmSensorsTxt()+0x42>
  42:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  47:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  4e:	00 00 
  50:	74 05                	je     57 <RemoteConfig::HandleSetRdmSensorsTxt()+0x57>
  52:	e8 00 00 00 00       	call   57 <RemoteConfig::HandleSetRdmSensorsTxt()+0x57>
  57:	48 83 c4 58          	add    $0x58,%rsp
  5b:	5b                   	pop    %rbx
  5c:	5d                   	pop    %rbp
  5d:	c3                   	ret    

Disassembly of section .text._ZN12RemoteConfig8TftpExitEv:

0000000000000000 <RemoteConfig::TftpExit()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 ec 18          	sub    $0x18,%rsp
   8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   f:	00 00 
  11:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  16:	31 c0                	xor    %eax,%eax
  18:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 1f <RemoteConfig::TftpExit()+0x1f>
  1f:	c7 47 1c 06 00 00 00 	movl   $0x6,0x1c(%rdi)
  26:	c6 40 06 30          	movb   $0x30,0x6(%rax)
  2a:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  2f:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  36:	00 00 
  38:	74 05                	je     3f <RemoteConfig::TftpExit()+0x3f>
  3a:	e8 00 00 00 00       	call   3f <RemoteConfig::TftpExit()+0x3f>
  3f:	48 83 c4 18          	add    $0x18,%rsp
  43:	e9 00 00 00 00       	jmp    48 <.LC6+0x1a>

Disassembly of section .text._ZN12RemoteConfig13HandleTftpSetEv:

0000000000000000 <RemoteConfig::HandleTftpSet()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 83 ec 10          	sub    $0x10,%rsp
   9:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  10:	00 00 
  12:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  17:	31 c0                	xor    %eax,%eax
  19:	83 7f 1c 06          	cmpl   $0x6,0x1c(%rdi)
  1d:	75 40                	jne    5f <RemoteConfig::HandleTftpSet()+0x5f>
  1f:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 26 <RemoteConfig::HandleTftpSet()+0x26>
  26:	48 89 fd             	mov    %rdi,%rbp
  29:	80 78 06 30          	cmpb   $0x30,0x6(%rax)
  2d:	0f 95 47 28          	setne  0x28(%rdi)
  31:	74 0f                	je     42 <RemoteConfig::HandleTftpSet()+0x42>
  33:	e8 00 00 00 00       	call   38 <RemoteConfig::HandleTftpSet()+0x38>
  38:	31 f6                	xor    %esi,%esi
  3a:	48 89 c7             	mov    %rax,%rdi
  3d:	e8 00 00 00 00       	call   42 <RemoteConfig::HandleTftpSet()+0x42>
  42:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  47:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  4e:	00 00 
  50:	75 1d                	jne    6f <RemoteConfig::HandleTftpSet()+0x6f>
  52:	48 83 c4 10          	add    $0x10,%rsp
  56:	48 89 ef             	mov    %rbp,%rdi
  59:	5d                   	pop    %rbp
  5a:	e9 00 00 00 00       	jmp    5f <RemoteConfig::HandleTftpSet()+0x5f>
  5f:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  64:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  6b:	00 00 
  6d:	74 05                	je     74 <RemoteConfig::HandleTftpSet()+0x74>
  6f:	e8 00 00 00 00       	call   74 <RemoteConfig::HandleTftpSet()+0x74>
  74:	48 83 c4 10          	add    $0x10,%rsp
  78:	5d                   	pop    %rbp
  79:	c3                   	ret    

Disassembly of section .text._ZN12RemoteConfig13HandleTftpGetEv:

0000000000000000 <RemoteConfig::HandleTftpGet()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	41 54                	push   %r12
   6:	53                   	push   %rbx
   7:	48 89 fb             	mov    %rdi,%rbx
   a:	48 83 ec 18          	sub    $0x18,%rsp
   e:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  15:	00 00 
  17:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  1c:	31 c0                	xor    %eax,%eax
  1e:	e8 00 00 00 00       	call   23 <RemoteConfig::HandleTftpGet()+0x23>
  23:	83 7b 1c 05          	cmpl   $0x5,0x1c(%rbx)
  27:	75 6e                	jne    97 <RemoteConfig::HandleTftpGet()+0x97>
  29:	80 7b 28 00          	cmpb   $0x0,0x28(%rbx)
  2d:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 34 <RemoteConfig::HandleTftpGet()+0x34>
  34:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 3b <RemoteConfig::HandleTftpGet()+0x3b>
  3b:	48 8b 3d 00 00 00 00 	mov    0x0(%rip),%rdi        # 42 <RemoteConfig::HandleTftpGet()+0x42>
  42:	48 0f 44 c8          	cmove  %rax,%rcx
  46:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 4d <RemoteConfig::HandleTftpGet()+0x4d>
  4d:	be ff 03 00 00       	mov    $0x3ff,%esi
  52:	31 c0                	xor    %eax,%eax
  54:	e8 00 00 00 00       	call   59 <RemoteConfig::HandleTftpGet()+0x59>
  59:	41 89 c4             	mov    %eax,%r12d
  5c:	e8 00 00 00 00       	call   61 <RemoteConfig::HandleTftpGet()+0x61>
  61:	48 89 c7             	mov    %rax,%rdi
  64:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  69:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  70:	00 00 
  72:	75 33                	jne    a7 <RemoteConfig::HandleTftpGet()+0xa7>
  74:	8b 73 14             	mov    0x14(%rbx),%esi
  77:	44 8b 43 18          	mov    0x18(%rbx),%r8d
  7b:	44 89 e1             	mov    %r12d,%ecx
  7e:	41 b9 05 29 00 00    	mov    $0x2905,%r9d
  84:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 8b <RemoteConfig::HandleTftpGet()+0x8b>
  8b:	48 83 c4 18          	add    $0x18,%rsp
  8f:	5b                   	pop    %rbx
  90:	41 5c                	pop    %r12
  92:	e9 00 00 00 00       	jmp    97 <RemoteConfig::HandleTftpGet()+0x97>
  97:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  9c:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  a3:	00 00 
  a5:	74 05                	je     ac <RemoteConfig::HandleTftpGet()+0xac>
  a7:	e8 00 00 00 00       	call   ac <RemoteConfig::HandleTftpGet()+0xac>
  ac:	48 83 c4 18          	add    $0x18,%rsp
  b0:	5b                   	pop    %rbx
  b1:	41 5c                	pop    %r12
  b3:	c3                   	ret    

Disassembly of section .text._ZSt3minIjERKT_S2_S2_:

0000000000000000 <unsigned int const& std::min<unsigned int>(unsigned int const&, unsigned int const&)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 ec 18          	sub    $0x18,%rsp
   8:	48 89 f0             	mov    %rsi,%rax
   b:	8b 0f                	mov    (%rdi),%ecx
   d:	64 48 8b 14 25 28 00 	mov    %fs:0x28,%rdx
  14:	00 00 
  16:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  1b:	31 d2                	xor    %edx,%edx
  1d:	39 0e                	cmp    %ecx,(%rsi)
  1f:	72 03                	jb     24 <unsigned int const& std::min<unsigned int>(unsigned int const&, unsigned int const&)+0x24>
  21:	48 89 f8             	mov    %rdi,%rax
  24:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  29:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  30:	00 00 
  32:	74 05                	je     39 <unsigned int const& std::min<unsigned int>(unsigned int const&, unsigned int const&)+0x39>
  34:	e8 00 00 00 00       	call   39 <unsigned int const& std::min<unsigned int>(unsigned int const&, unsigned int const&)+0x39>
  39:	48 83 c4 18          	add    $0x18,%rsp
  3d:	c3                   	ret    

remoteconfigfactory.o:     file format elf64-x86-64


Disassembly of section .text._ZN11ConfigStore3GetEv:

0000000000000000 <ConfigStore::Get()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 22 <ConfigStore::Get()+0x22>
  22:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  26:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  2d:	00 00 
  2f:	74 05                	je     36 <ConfigStore::Get()+0x36>
  31:	e8 00 00 00 00       	call   36 <ConfigStore::Get()+0x36>
  36:	c9                   	leave  
  37:	c3                   	ret    

Disassembly of section .text._ZN12RemoteConfig13HandleFactoryEv:

0000000000000000 <RemoteConfig::HandleFactory()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  26:	eb 19                	jmp    41 <RemoteConfig::HandleFactory()+0x41>
  28:	e8 00 00 00 00       	call   2d <RemoteConfig::HandleFactory()+0x2d>
  2d:	48 89 c2             	mov    %rax,%rdx
  30:	8b 45 f4             	mov    -0xc(%rbp),%eax
  33:	89 c6                	mov    %eax,%esi
  35:	48 89 d7             	mov    %rdx,%rdi
  38:	e8 00 00 00 00       	call   3d <RemoteConfig::HandleFactory()+0x3d>
  3d:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  41:	83 7d f4 19          	cmpl   $0x19,-0xc(%rbp)
  45:	76 e1                	jbe    28 <RemoteConfig::HandleFactory()+0x28>
  47:	90                   	nop
  48:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4c:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  53:	00 00 
  55:	74 05                	je     5c <RemoteConfig::HandleFactory()+0x5c>
  57:	e8 00 00 00 00       	call   5c <RemoteConfig::HandleFactory()+0x5c>
  5c:	c9                   	leave  
  5d:	c3                   	ret    

remoteconfigjson.o:     file format elf64-x86-64


Disassembly of section .text._ZNK7Network5GetIpEv:

0000000000000000 <Network::GetIp() const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	8b 40 10             	mov    0x10(%rax),%eax
  26:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  2a:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  31:	00 00 
  33:	74 05                	je     3a <Network::GetIp() const+0x3a>
  35:	e8 00 00 00 00       	call   3a <Network::GetIp() const+0x3a>
  3a:	c9                   	leave  
  3b:	c3                   	ret    

Disassembly of section .text._ZN7Network3GetEv:

0000000000000000 <Network::Get()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 22 <Network::Get()+0x22>
  22:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  26:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  2d:	00 00 
  2f:	74 05                	je     36 <Network::Get()+0x36>
  31:	e8 00 00 00 00       	call   36 <Network::Get()+0x36>
  36:	c9                   	leave  
  37:	c3                   	ret    

Disassembly of section .text._ZNK12RemoteConfig10GetOutputsEv:

0000000000000000 <RemoteConfig::GetOutputs() const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	0f b6 05 00 00 00 00 	movzbl 0x0(%rip),%eax        # 26 <RemoteConfig::GetOutputs() const+0x26>
  26:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  2a:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  31:	00 00 
  33:	74 05                	je     3a <RemoteConfig::GetOutputs() const+0x3a>
  35:	e8 00 00 00 00       	call   3a <RemoteConfig::GetOutputs() const+0x3a>
  3a:	c9                   	leave  
  3b:	c3                   	ret    

Disassembly of section .text._ZNK12RemoteConfig14GetDisplayNameEv:

0000000000000000 <RemoteConfig::GetDisplayName() const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 26 <RemoteConfig::GetDisplayName() const+0x26>
  26:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  2a:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  31:	00 00 
  33:	74 05                	je     3a <RemoteConfig::GetDisplayName() const+0x3a>
  35:	e8 00 00 00 00       	call   3a <RemoteConfig::GetDisplayName() const+0x3a>
  3a:	c9                   	leave  
  3b:	c3                   	ret    

Disassembly of section .text._ZN12RemoteConfig3GetEv:

0000000000000000 <RemoteConfig::Get()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 22 <RemoteConfig::Get()+0x22>
  22:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  26:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  2d:	00 00 
  2f:	74 05                	je     36 <RemoteConfig::Get()+0x36>
  31:	e8 00 00 00 00       	call   36 <RemoteConfig::Get()+0x36>
  36:	c9                   	leave  
  37:	c3                   	ret    

Disassembly of section .text._ZN8Hardware3GetEv:

0000000000000000 <Hardware::Get()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 22 <Hardware::Get()+0x22>
  22:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  26:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  2d:	00 00 
  2f:	74 05                	je     36 <Hardware::Get()+0x36>
  31:	e8 00 00 00 00       	call   36 <Hardware::Get()+0x36>
  36:	c9                   	leave  
  37:	c3                   	ret    

Disassembly of section .text._ZNK7Display7isSleepEv:

0000000000000000 <Display::isSleep() const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	0f b6 40 10          	movzbl 0x10(%rax),%eax
  27:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  2b:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  32:	00 00 
  34:	74 05                	je     3b <Display::isSleep() const+0x3b>
  36:	e8 00 00 00 00       	call   3b <Display::isSleep() const+0x3b>
  3b:	c9                   	leave  
  3c:	c3                   	ret    

Disassembly of section .text._ZN7Display3GetEv:

0000000000000000 <Display::Get()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 22 <Display::Get()+0x22>
  22:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  26:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  2d:	00 00 
  2f:	74 05                	je     36 <Display::Get()+0x36>
  31:	e8 00 00 00 00       	call   36 <Display::Get()+0x36>
  36:	c9                   	leave  
  37:	c3                   	ret    

Disassembly of section .text._ZN15FirmwareVersion10GetVersionEv:

0000000000000000 <FirmwareVersion::GetVersion()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 26 <FirmwareVersion::GetVersion()+0x26>
  26:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  2a:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  31:	00 00 
  33:	74 05                	je     3a <FirmwareVersion::GetVersion()+0x3a>
  35:	e8 00 00 00 00       	call   3a <FirmwareVersion::GetVersion()+0x3a>
  3a:	c9                   	leave  
  3b:	c3                   	ret    

Disassembly of section .text._ZN15FirmwareVersion3GetEv:

0000000000000000 <FirmwareVersion::Get()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 22 <FirmwareVersion::Get()+0x22>
  22:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  26:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  2d:	00 00 
  2f:	74 05                	je     36 <FirmwareVersion::Get()+0x36>
  31:	e8 00 00 00 00       	call   36 <FirmwareVersion::Get()+0x36>
  36:	c9                   	leave  
  37:	c3                   	ret    

Disassembly of section .text._ZN12remoteconfig13json_get_listEPct:

0000000000000000 <remoteconfig::json_get_list(char*, unsigned short)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	41 57                	push   %r15
   a:	41 56                	push   %r14
   c:	41 55                	push   %r13
   e:	41 54                	push   %r12
  10:	53                   	push   %rbx
  11:	48 83 ec 38          	sub    $0x38,%rsp
  15:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  19:	89 f0                	mov    %esi,%eax
  1b:	66 89 45 b4          	mov    %ax,-0x4c(%rbp)
  1f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  26:	00 00 
  28:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  2c:	31 c0                	xor    %eax,%eax
  2e:	e8 00 00 00 00       	call   33 <remoteconfig::json_get_list(char*, unsigned short)+0x33>
  33:	48 89 c7             	mov    %rax,%rdi
  36:	e8 00 00 00 00       	call   3b <remoteconfig::json_get_list(char*, unsigned short)+0x3b>
  3b:	44 0f b6 f8          	movzbl %al,%r15d
  3f:	e8 00 00 00 00       	call   44 <remoteconfig::json_get_list(char*, unsigned short)+0x44>
  44:	48 89 c7             	mov    %rax,%rdi
  47:	e8 00 00 00 00       	call   4c <remoteconfig::json_get_list(char*, unsigned short)+0x4c>
  4c:	49 89 c5             	mov    %rax,%r13
  4f:	e8 00 00 00 00       	call   54 <remoteconfig::json_get_list(char*, unsigned short)+0x54>
  54:	48 89 c7             	mov    %rax,%rdi
  57:	e8 00 00 00 00       	call   5c <remoteconfig::json_get_list(char*, unsigned short)+0x5c>
  5c:	49 89 c4             	mov    %rax,%r12
  5f:	e8 00 00 00 00       	call   64 <remoteconfig::json_get_list(char*, unsigned short)+0x64>
  64:	48 89 c7             	mov    %rax,%rdi
  67:	e8 00 00 00 00       	call   6c <remoteconfig::json_get_list(char*, unsigned short)+0x6c>
  6c:	48 89 c3             	mov    %rax,%rbx
  6f:	e8 00 00 00 00       	call   74 <remoteconfig::json_get_list(char*, unsigned short)+0x74>
  74:	48 89 c7             	mov    %rax,%rdi
  77:	e8 00 00 00 00       	call   7c <remoteconfig::json_get_list(char*, unsigned short)+0x7c>
  7c:	c1 e8 18             	shr    $0x18,%eax
  7f:	44 0f b6 f0          	movzbl %al,%r14d
  83:	e8 00 00 00 00       	call   88 <remoteconfig::json_get_list(char*, unsigned short)+0x88>
  88:	48 89 c7             	mov    %rax,%rdi
  8b:	e8 00 00 00 00       	call   90 <remoteconfig::json_get_list(char*, unsigned short)+0x90>
  90:	c1 e8 10             	shr    $0x10,%eax
  93:	0f b6 c0             	movzbl %al,%eax
  96:	89 45 b0             	mov    %eax,-0x50(%rbp)
  99:	e8 00 00 00 00       	call   9e <remoteconfig::json_get_list(char*, unsigned short)+0x9e>
  9e:	48 89 c7             	mov    %rax,%rdi
  a1:	e8 00 00 00 00       	call   a6 <remoteconfig::json_get_list(char*, unsigned short)+0xa6>
  a6:	c1 e8 08             	shr    $0x8,%eax
  a9:	0f b6 c8             	movzbl %al,%ecx
  ac:	89 4d ac             	mov    %ecx,-0x54(%rbp)
  af:	e8 00 00 00 00       	call   b4 <remoteconfig::json_get_list(char*, unsigned short)+0xb4>
  b4:	48 89 c7             	mov    %rax,%rdi
  b7:	e8 00 00 00 00       	call   bc <remoteconfig::json_get_list(char*, unsigned short)+0xbc>
  bc:	0f b6 d0             	movzbl %al,%edx
  bf:	0f b7 75 b4          	movzwl -0x4c(%rbp),%esi
  c3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  c7:	48 83 ec 08          	sub    $0x8,%rsp
  cb:	41 57                	push   %r15
  cd:	41 55                	push   %r13
  cf:	41 54                	push   %r12
  d1:	53                   	push   %rbx
  d2:	41 56                	push   %r14
  d4:	44 8b 4d b0          	mov    -0x50(%rbp),%r9d
  d8:	44 8b 45 ac          	mov    -0x54(%rbp),%r8d
  dc:	89 d1                	mov    %edx,%ecx
  de:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # e5 <remoteconfig::json_get_list(char*, unsigned short)+0xe5>
  e5:	48 89 c7             	mov    %rax,%rdi
  e8:	b8 00 00 00 00       	mov    $0x0,%eax
  ed:	e8 00 00 00 00       	call   f2 <remoteconfig::json_get_list(char*, unsigned short)+0xf2>
  f2:	48 83 c4 30          	add    $0x30,%rsp
  f6:	66 89 45 c6          	mov    %ax,-0x3a(%rbp)
  fa:	0f b7 45 c6          	movzwl -0x3a(%rbp),%eax
  fe:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
 102:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
 109:	00 00 
 10b:	74 05                	je     112 <remoteconfig::json_get_list(char*, unsigned short)+0x112>
 10d:	e8 00 00 00 00       	call   112 <remoteconfig::json_get_list(char*, unsigned short)+0x112>
 112:	48 8d 65 d8          	lea    -0x28(%rbp),%rsp
 116:	5b                   	pop    %rbx
 117:	41 5c                	pop    %r12
 119:	41 5d                	pop    %r13
 11b:	41 5e                	pop    %r14
 11d:	41 5f                	pop    %r15
 11f:	5d                   	pop    %rbp
 120:	c3                   	ret    

Disassembly of section .text._ZN12remoteconfig16json_get_versionEPct:

0000000000000000 <remoteconfig::json_get_version(char*, unsigned short)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	41 54                	push   %r12
   a:	53                   	push   %rbx
   b:	48 83 ec 30          	sub    $0x30,%rsp
   f:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  13:	89 f0                	mov    %esi,%eax
  15:	66 89 45 c4          	mov    %ax,-0x3c(%rbp)
  19:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  20:	00 00 
  22:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  26:	31 c0                	xor    %eax,%eax
  28:	e8 00 00 00 00       	call   2d <remoteconfig::json_get_version(char*, unsigned short)+0x2d>
  2d:	48 89 c7             	mov    %rax,%rdi
  30:	e8 00 00 00 00       	call   35 <remoteconfig::json_get_version(char*, unsigned short)+0x35>
  35:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  39:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  3d:	4c 8d 60 0e          	lea    0xe(%rax),%r12
  41:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  45:	48 8d 58 03          	lea    0x3(%rax),%rbx
  49:	e8 00 00 00 00       	call   4e <remoteconfig::json_get_version(char*, unsigned short)+0x4e>
  4e:	48 89 c2             	mov    %rax,%rdx
  51:	48 8d 45 dd          	lea    -0x23(%rbp),%rax
  55:	48 89 c6             	mov    %rax,%rsi
  58:	48 89 d7             	mov    %rdx,%rdi
  5b:	e8 00 00 00 00       	call   60 <remoteconfig::json_get_version(char*, unsigned short)+0x60>
  60:	48 89 c2             	mov    %rax,%rdx
  63:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  67:	0f b7 75 c4          	movzwl -0x3c(%rbp),%esi
  6b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  6f:	41 54                	push   %r12
  71:	6a 08                	push   $0x8
  73:	53                   	push   %rbx
  74:	6a 0b                	push   $0xb
  76:	49 89 d1             	mov    %rdx,%r9
  79:	49 89 c8             	mov    %rcx,%r8
  7c:	b9 03 00 00 00       	mov    $0x3,%ecx
  81:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 88 <remoteconfig::json_get_version(char*, unsigned short)+0x88>
  88:	48 89 c7             	mov    %rax,%rdi
  8b:	b8 00 00 00 00       	mov    $0x0,%eax
  90:	e8 00 00 00 00       	call   95 <remoteconfig::json_get_version(char*, unsigned short)+0x95>
  95:	48 83 c4 20          	add    $0x20,%rsp
  99:	66 89 45 de          	mov    %ax,-0x22(%rbp)
  9d:	0f b7 45 de          	movzwl -0x22(%rbp),%eax
  a1:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  a5:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  ac:	00 00 
  ae:	74 05                	je     b5 <remoteconfig::json_get_version(char*, unsigned short)+0xb5>
  b0:	e8 00 00 00 00       	call   b5 <remoteconfig::json_get_version(char*, unsigned short)+0xb5>
  b5:	48 8d 65 f0          	lea    -0x10(%rbp),%rsp
  b9:	5b                   	pop    %rbx
  ba:	41 5c                	pop    %r12
  bc:	5d                   	pop    %rbp
  bd:	c3                   	ret    

Disassembly of section .text._ZN12remoteconfig15json_get_uptimeEPct:

0000000000000000 <remoteconfig::json_get_uptime(char*, unsigned short)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	66 89 45 e4          	mov    %ax,-0x1c(%rbp)
  16:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1d:	00 00 
  1f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  23:	31 c0                	xor    %eax,%eax
  25:	e8 00 00 00 00       	call   2a <remoteconfig::json_get_uptime(char*, unsigned short)+0x2a>
  2a:	48 89 c7             	mov    %rax,%rdi
  2d:	e8 00 00 00 00       	call   32 <remoteconfig::json_get_uptime(char*, unsigned short)+0x32>
  32:	89 45 f4             	mov    %eax,-0xc(%rbp)
  35:	0f b7 75 e4          	movzwl -0x1c(%rbp),%esi
  39:	8b 55 f4             	mov    -0xc(%rbp),%edx
  3c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40:	89 d1                	mov    %edx,%ecx
  42:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 49 <remoteconfig::json_get_uptime(char*, unsigned short)+0x49>
  49:	48 89 c7             	mov    %rax,%rdi
  4c:	b8 00 00 00 00       	mov    $0x0,%eax
  51:	e8 00 00 00 00       	call   56 <remoteconfig::json_get_uptime(char*, unsigned short)+0x56>
  56:	66 89 45 f2          	mov    %ax,-0xe(%rbp)
  5a:	0f b7 45 f2          	movzwl -0xe(%rbp),%eax
  5e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  62:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  69:	00 00 
  6b:	74 05                	je     72 <remoteconfig::json_get_uptime(char*, unsigned short)+0x72>
  6d:	e8 00 00 00 00       	call   72 <remoteconfig::json_get_uptime(char*, unsigned short)+0x72>
  72:	c9                   	leave  
  73:	c3                   	ret    

Disassembly of section .text._ZN12remoteconfig16json_get_displayEPct:

0000000000000000 <remoteconfig::json_get_display(char*, unsigned short)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	66 89 45 e4          	mov    %ax,-0x1c(%rbp)
  16:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1d:	00 00 
  1f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  23:	31 c0                	xor    %eax,%eax
  25:	e8 00 00 00 00       	call   2a <remoteconfig::json_get_display(char*, unsigned short)+0x2a>
  2a:	48 89 c7             	mov    %rax,%rdi
  2d:	e8 00 00 00 00       	call   32 <remoteconfig::json_get_display(char*, unsigned short)+0x32>
  32:	83 f0 01             	xor    $0x1,%eax
  35:	88 45 f5             	mov    %al,-0xb(%rbp)
  38:	0f b6 55 f5          	movzbl -0xb(%rbp),%edx
  3c:	0f b7 75 e4          	movzwl -0x1c(%rbp),%esi
  40:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  44:	89 d1                	mov    %edx,%ecx
  46:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 4d <remoteconfig::json_get_display(char*, unsigned short)+0x4d>
  4d:	48 89 c7             	mov    %rax,%rdi
  50:	b8 00 00 00 00       	mov    $0x0,%eax
  55:	e8 00 00 00 00       	call   5a <remoteconfig::json_get_display(char*, unsigned short)+0x5a>
  5a:	66 89 45 f6          	mov    %ax,-0xa(%rbp)
  5e:	0f b7 45 f6          	movzwl -0xa(%rbp),%eax
  62:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  66:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  6d:	00 00 
  6f:	74 05                	je     76 <remoteconfig::json_get_display(char*, unsigned short)+0x76>
  71:	e8 00 00 00 00       	call   76 <remoteconfig::json_get_display(char*, unsigned short)+0x76>
  76:	c9                   	leave  
  77:	c3                   	ret    

Disassembly of section .text._ZN12remoteconfig18json_get_directoryEPct:

0000000000000000 <remoteconfig::json_get_directory(char*, unsigned short)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	66 89 45 e4          	mov    %ax,-0x1c(%rbp)
  16:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1d:	00 00 
  1f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  23:	31 c0                	xor    %eax,%eax
  25:	0f b7 4d e4          	movzwl -0x1c(%rbp),%ecx
  29:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2d:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 34 <remoteconfig::json_get_directory(char*, unsigned short)+0x34>
  34:	48 89 ce             	mov    %rcx,%rsi
  37:	48 89 c7             	mov    %rax,%rdi
  3a:	b8 00 00 00 00       	mov    $0x0,%eax
  3f:	e8 00 00 00 00       	call   44 <remoteconfig::json_get_directory(char*, unsigned short)+0x44>
  44:	66 89 45 f6          	mov    %ax,-0xa(%rbp)
  48:	0f b7 45 f6          	movzwl -0xa(%rbp),%eax
  4c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  50:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  57:	00 00 
  59:	74 05                	je     60 <remoteconfig::json_get_directory(char*, unsigned short)+0x60>
  5b:	e8 00 00 00 00       	call   60 <remoteconfig::json_get_directory(char*, unsigned short)+0x60>
  60:	c9                   	leave  
  61:	c3                   	ret    

remoteconfigparams.o:     file format elf64-x86-64


Disassembly of section .text._ZN12RemoteConfig15SetDisableWriteEb:

0000000000000000 <RemoteConfig::SetDisableWrite(bool)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 ec 18          	sub    $0x18,%rsp
   8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   f:	00 00 
  11:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  16:	31 c0                	xor    %eax,%eax
  18:	40 88 77 0d          	mov    %sil,0xd(%rdi)
  1c:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  21:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  28:	00 00 
  2a:	74 05                	je     31 <RemoteConfig::SetDisableWrite(bool)+0x31>
  2c:	e8 00 00 00 00       	call   31 <RemoteConfig::SetDisableWrite(bool)+0x31>
  31:	48 83 c4 18          	add    $0x18,%rsp
  35:	c3                   	ret    

Disassembly of section .text._ZN12RemoteConfig15SetEnableRebootEb:

0000000000000000 <RemoteConfig::SetEnableReboot(bool)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 ec 18          	sub    $0x18,%rsp
   8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   f:	00 00 
  11:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  16:	31 c0                	xor    %eax,%eax
  18:	40 88 77 0e          	mov    %sil,0xe(%rdi)
  1c:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  21:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  28:	00 00 
  2a:	74 05                	je     31 <RemoteConfig::SetEnableReboot(bool)+0x31>
  2c:	e8 00 00 00 00       	call   31 <RemoteConfig::SetEnableReboot(bool)+0x31>
  31:	48 83 c4 18          	add    $0x18,%rsp
  35:	c3                   	ret    

Disassembly of section .text._ZN12RemoteConfig15SetEnableUptimeEb:

0000000000000000 <RemoteConfig::SetEnableUptime(bool)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 ec 18          	sub    $0x18,%rsp
   8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   f:	00 00 
  11:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  16:	31 c0                	xor    %eax,%eax
  18:	40 88 77 0f          	mov    %sil,0xf(%rdi)
  1c:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  21:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  28:	00 00 
  2a:	74 05                	je     31 <RemoteConfig::SetEnableUptime(bool)+0x31>
  2c:	e8 00 00 00 00       	call   31 <RemoteConfig::SetEnableUptime(bool)+0x31>
  31:	48 83 c4 18          	add    $0x18,%rsp
  35:	c3                   	ret    

Disassembly of section .text._ZN12RemoteConfig16SetEnableFactoryEb:

0000000000000000 <RemoteConfig::SetEnableFactory(bool)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 ec 18          	sub    $0x18,%rsp
   8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   f:	00 00 
  11:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  16:	31 c0                	xor    %eax,%eax
  18:	40 88 77 10          	mov    %sil,0x10(%rdi)
  1c:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  21:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  28:	00 00 
  2a:	74 05                	je     31 <RemoteConfig::SetEnableFactory(bool)+0x31>
  2c:	e8 00 00 00 00       	call   31 <RemoteConfig::SetEnableFactory(bool)+0x31>
  31:	48 83 c4 18          	add    $0x18,%rsp
  35:	c3                   	ret    

Disassembly of section .text._ZNK18RemoteConfigParams9isMaskSetEj:

0000000000000000 <RemoteConfigParams::isMaskSet(unsigned int) const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 ec 18          	sub    $0x18,%rsp
   8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   f:	00 00 
  11:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  16:	89 f0                	mov    %esi,%eax
  18:	23 47 08             	and    0x8(%rdi),%eax
  1b:	39 f0                	cmp    %esi,%eax
  1d:	0f 94 c0             	sete   %al
  20:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  25:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  2c:	00 00 
  2e:	74 05                	je     35 <RemoteConfigParams::isMaskSet(unsigned int) const+0x35>
  30:	e8 00 00 00 00       	call   35 <RemoteConfigParams::isMaskSet(unsigned int) const+0x35>
  35:	48 83 c4 18          	add    $0x18,%rsp
  39:	c3                   	ret    

Disassembly of section .text._ZN17PropertiesBuilder3AddEPKcb:

0000000000000000 <PropertiesBuilder::Add(char const*, bool)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 ec 18          	sub    $0x18,%rsp
   8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   f:	00 00 
  11:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  16:	31 c0                	xor    %eax,%eax
  18:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  1d:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  24:	00 00 
  26:	74 05                	je     2d <PropertiesBuilder::Add(char const*, bool)+0x2d>
  28:	e8 00 00 00 00       	call   2d <PropertiesBuilder::Add(char const*, bool)+0x2d>
  2d:	0f b6 d2             	movzbl %dl,%edx
  30:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  36:	48 83 c4 18          	add    $0x18,%rsp
  3a:	89 d1                	mov    %edx,%ecx
  3c:	e9 00 00 00 00       	jmp    41 <.LC2+0x2f>

Disassembly of section .text._ZN17PropertiesBuilder7GetSizeEv:

0000000000000000 <PropertiesBuilder::GetSize()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 ec 18          	sub    $0x18,%rsp
   8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   f:	00 00 
  11:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  16:	31 c0                	xor    %eax,%eax
  18:	80 7f 0c 00          	cmpb   $0x0,0xc(%rdi)
  1c:	74 1b                	je     39 <PropertiesBuilder::GetSize()+0x39>
  1e:	0f b7 47 0a          	movzwl 0xa(%rdi),%eax
  22:	48 8b 17             	mov    (%rdi),%rdx
  25:	c6 44 02 ff 7d       	movb   $0x7d,-0x1(%rdx,%rax,1)
  2a:	0f b7 47 0a          	movzwl 0xa(%rdi),%eax
  2e:	48 8b 17             	mov    (%rdi),%rdx
  31:	c6 04 02 7d          	movb   $0x7d,(%rdx,%rax,1)
  35:	66 ff 47 0a          	incw   0xa(%rdi)
  39:	66 8b 47 0a          	mov    0xa(%rdi),%ax
  3d:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  42:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  49:	00 00 
  4b:	74 05                	je     52 <PropertiesBuilder::GetSize()+0x52>
  4d:	e8 00 00 00 00       	call   52 <PropertiesBuilder::GetSize()+0x52>
  52:	48 83 c4 18          	add    $0x18,%rsp
  56:	c3                   	ret    

Disassembly of section .text._ZN17PropertiesBuilder8add_partIPcEEiS1_jPKcT_bj:

0000000000000000 <int PropertiesBuilder::add_part<char*>(char*, unsigned int, char const*, char*, bool, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 ec 18          	sub    $0x18,%rsp
   8:	49 89 fa             	mov    %rdi,%r10
   b:	48 89 f7             	mov    %rsi,%rdi
   e:	89 d6                	mov    %edx,%esi
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  1e:	31 c0                	xor    %eax,%eax
  20:	41 8a 42 0c          	mov    0xc(%r10),%al
  24:	45 84 c9             	test   %r9b,%r9b
  27:	75 06                	jne    2f <int PropertiesBuilder::add_part<char*>(char*, unsigned int, char const*, char*, bool, unsigned int)+0x2f>
  29:	84 c0                	test   %al,%al
  2b:	75 06                	jne    33 <int PropertiesBuilder::add_part<char*>(char*, unsigned int, char const*, char*, bool, unsigned int)+0x33>
  2d:	eb 36                	jmp    65 <int PropertiesBuilder::add_part<char*>(char*, unsigned int, char const*, char*, bool, unsigned int)+0x65>
  2f:	84 c0                	test   %al,%al
  31:	74 19                	je     4c <int PropertiesBuilder::add_part<char*>(char*, unsigned int, char const*, char*, bool, unsigned int)+0x4c>
  33:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  38:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  3f:	00 00 
  41:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 48 <int PropertiesBuilder::add_part<char*>(char*, unsigned int, char const*, char*, bool, unsigned int)+0x48>
  48:	74 37                	je     81 <int PropertiesBuilder::add_part<char*>(char*, unsigned int, char const*, char*, bool, unsigned int)+0x81>
  4a:	eb 30                	jmp    7c <int PropertiesBuilder::add_part<char*>(char*, unsigned int, char const*, char*, bool, unsigned int)+0x7c>
  4c:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  51:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  58:	00 00 
  5a:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 61 <int PropertiesBuilder::add_part<char*>(char*, unsigned int, char const*, char*, bool, unsigned int)+0x61>
  61:	74 1e                	je     81 <int PropertiesBuilder::add_part<char*>(char*, unsigned int, char const*, char*, bool, unsigned int)+0x81>
  63:	eb 17                	jmp    7c <int PropertiesBuilder::add_part<char*>(char*, unsigned int, char const*, char*, bool, unsigned int)+0x7c>
  65:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  6a:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  71:	00 00 
  73:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 7a <int PropertiesBuilder::add_part<char*>(char*, unsigned int, char const*, char*, bool, unsigned int)+0x7a>
  7a:	74 05                	je     81 <int PropertiesBuilder::add_part<char*>(char*, unsigned int, char const*, char*, bool, unsigned int)+0x81>
  7c:	e8 00 00 00 00       	call   81 <int PropertiesBuilder::add_part<char*>(char*, unsigned int, char const*, char*, bool, unsigned int)+0x81>
  81:	31 c0                	xor    %eax,%eax
  83:	48 83 c4 18          	add    $0x18,%rsp
  87:	e9 00 00 00 00       	jmp    8c <.LC2+0x7a>

Disassembly of section .text._ZN18RemoteConfigParamsC2EP23RemoteConfigParamsStore:

0000000000000000 <RemoteConfigParams::RemoteConfigParams(RemoteConfigParamsStore*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 ec 18          	sub    $0x18,%rsp
   8:	48 8d 57 08          	lea    0x8(%rdi),%rdx
   c:	b9 08 00 00 00       	mov    $0x8,%ecx
  11:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  18:	00 00 
  1a:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  1f:	31 c0                	xor    %eax,%eax
  21:	48 89 37             	mov    %rsi,(%rdi)
  24:	48 89 d7             	mov    %rdx,%rdi
  27:	f3 ab                	rep stos %eax,%es:(%rdi)
  29:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  2e:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  35:	00 00 
  37:	74 05                	je     3e <RemoteConfigParams::RemoteConfigParams(RemoteConfigParamsStore*)+0x3e>
  39:	e8 00 00 00 00       	call   3e <RemoteConfigParams::RemoteConfigParams(RemoteConfigParamsStore*)+0x3e>
  3e:	48 83 c4 18          	add    $0x18,%rsp
  42:	c3                   	ret    

Disassembly of section .text._ZN18RemoteConfigParams4LoadEv:

0000000000000000 <RemoteConfigParams::Load()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	41 54                	push   %r12
   6:	48 89 fa             	mov    %rdi,%rdx
   9:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 10 <RemoteConfigParams::Load()+0x10>
  10:	55                   	push   %rbp
  11:	53                   	push   %rbx
  12:	48 89 fb             	mov    %rdi,%rbx
  15:	48 83 ec 20          	sub    $0x20,%rsp
  19:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  20:	00 00 
  22:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  27:	31 c0                	xor    %eax,%eax
  29:	c7 47 08 00 00 00 00 	movl   $0x0,0x8(%rdi)
  30:	48 8d 6c 24 08       	lea    0x8(%rsp),%rbp
  35:	48 89 ef             	mov    %rbp,%rdi
  38:	e8 00 00 00 00       	call   3d <RemoteConfigParams::Load()+0x3d>
  3d:	48 89 ef             	mov    %rbp,%rdi
  40:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 47 <RemoteConfigParams::Load()+0x47>
  47:	e8 00 00 00 00       	call   4c <RemoteConfigParams::Load()+0x4c>
  4c:	48 8b 3b             	mov    (%rbx),%rdi
  4f:	84 c0                	test   %al,%al
  51:	41 89 c4             	mov    %eax,%r12d
  54:	74 11                	je     67 <RemoteConfigParams::Load()+0x67>
  56:	48 85 ff             	test   %rdi,%rdi
  59:	74 1e                	je     79 <RemoteConfigParams::Load()+0x79>
  5b:	48 8b 07             	mov    (%rdi),%rax
  5e:	48 8d 73 08          	lea    0x8(%rbx),%rsi
  62:	ff 50 10             	call   *0x10(%rax)
  65:	eb 12                	jmp    79 <RemoteConfigParams::Load()+0x79>
  67:	48 85 ff             	test   %rdi,%rdi
  6a:	74 0d                	je     79 <RemoteConfigParams::Load()+0x79>
  6c:	48 8b 07             	mov    (%rdi),%rax
  6f:	48 8d 73 08          	lea    0x8(%rbx),%rsi
  73:	41 b4 01             	mov    $0x1,%r12b
  76:	ff 50 18             	call   *0x18(%rax)
  79:	48 89 ef             	mov    %rbp,%rdi
  7c:	e8 00 00 00 00       	call   81 <RemoteConfigParams::Load()+0x81>
  81:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  86:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  8d:	00 00 
  8f:	74 05                	je     96 <RemoteConfigParams::Load()+0x96>
  91:	e8 00 00 00 00       	call   96 <RemoteConfigParams::Load()+0x96>
  96:	48 83 c4 20          	add    $0x20,%rsp
  9a:	44 89 e0             	mov    %r12d,%eax
  9d:	5b                   	pop    %rbx
  9e:	5d                   	pop    %rbp
  9f:	41 5c                	pop    %r12
  a1:	c3                   	ret    

Disassembly of section .text._ZN18RemoteConfigParams4LoadEPKcj:

0000000000000000 <RemoteConfigParams::Load(char const*, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	41 55                	push   %r13
   6:	41 89 d5             	mov    %edx,%r13d
   9:	48 89 fa             	mov    %rdi,%rdx
   c:	41 54                	push   %r12
   e:	49 89 f4             	mov    %rsi,%r12
  11:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 18 <RemoteConfigParams::Load(char const*, unsigned int)+0x18>
  18:	55                   	push   %rbp
  19:	53                   	push   %rbx
  1a:	48 89 fb             	mov    %rdi,%rbx
  1d:	48 83 ec 28          	sub    $0x28,%rsp
  21:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  28:	00 00 
  2a:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2f:	31 c0                	xor    %eax,%eax
  31:	c7 47 08 00 00 00 00 	movl   $0x0,0x8(%rdi)
  38:	48 8d 6c 24 08       	lea    0x8(%rsp),%rbp
  3d:	48 89 ef             	mov    %rbp,%rdi
  40:	e8 00 00 00 00       	call   45 <RemoteConfigParams::Load(char const*, unsigned int)+0x45>
  45:	44 89 ea             	mov    %r13d,%edx
  48:	4c 89 e6             	mov    %r12,%rsi
  4b:	48 89 ef             	mov    %rbp,%rdi
  4e:	e8 00 00 00 00       	call   53 <RemoteConfigParams::Load(char const*, unsigned int)+0x53>
  53:	48 8b 3b             	mov    (%rbx),%rdi
  56:	48 8d 73 08          	lea    0x8(%rbx),%rsi
  5a:	48 8b 07             	mov    (%rdi),%rax
  5d:	ff 50 10             	call   *0x10(%rax)
  60:	48 89 ef             	mov    %rbp,%rdi
  63:	e8 00 00 00 00       	call   68 <RemoteConfigParams::Load(char const*, unsigned int)+0x68>
  68:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  6d:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  74:	00 00 
  76:	74 05                	je     7d <RemoteConfigParams::Load(char const*, unsigned int)+0x7d>
  78:	e8 00 00 00 00       	call   7d <RemoteConfigParams::Load(char const*, unsigned int)+0x7d>
  7d:	48 83 c4 28          	add    $0x28,%rsp
  81:	5b                   	pop    %rbx
  82:	5d                   	pop    %rbp
  83:	41 5c                	pop    %r12
  85:	41 5d                	pop    %r13
  87:	c3                   	ret    

Disassembly of section .text._ZN18RemoteConfigParams7SetBoolEhj:

0000000000000000 <RemoteConfigParams::SetBool(unsigned char, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 ec 18          	sub    $0x18,%rsp
   8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   f:	00 00 
  11:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  16:	8b 47 08             	mov    0x8(%rdi),%eax
  19:	40 84 f6             	test   %sil,%sil
  1c:	74 04                	je     22 <RemoteConfigParams::SetBool(unsigned char, unsigned int)+0x22>
  1e:	09 d0                	or     %edx,%eax
  20:	eb 04                	jmp    26 <RemoteConfigParams::SetBool(unsigned char, unsigned int)+0x26>
  22:	f7 d2                	not    %edx
  24:	21 d0                	and    %edx,%eax
  26:	89 47 08             	mov    %eax,0x8(%rdi)
  29:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  2e:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  35:	00 00 
  37:	74 05                	je     3e <RemoteConfigParams::SetBool(unsigned char, unsigned int)+0x3e>
  39:	e8 00 00 00 00       	call   3e <RemoteConfigParams::SetBool(unsigned char, unsigned int)+0x3e>
  3e:	48 83 c4 18          	add    $0x18,%rsp
  42:	c3                   	ret    

Disassembly of section .text._ZN18RemoteConfigParams16callbackFunctionEPKc:

0000000000000000 <RemoteConfigParams::callbackFunction(char const*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	49 89 f4             	mov    %rsi,%r12
   b:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 12 <RemoteConfigParams::callbackFunction(char const*)+0x12>
  12:	55                   	push   %rbp
  13:	48 89 fd             	mov    %rdi,%rbp
  16:	4c 89 e7             	mov    %r12,%rdi
  19:	48 83 ec 10          	sub    $0x10,%rsp
  1d:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  24:	00 00 
  26:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  2b:	31 c0                	xor    %eax,%eax
  2d:	4c 8d 6c 24 03       	lea    0x3(%rsp),%r13
  32:	4c 89 ea             	mov    %r13,%rdx
  35:	e8 00 00 00 00       	call   3a <RemoteConfigParams::callbackFunction(char const*)+0x3a>
  3a:	85 c0                	test   %eax,%eax
  3c:	75 23                	jne    61 <RemoteConfigParams::callbackFunction(char const*)+0x61>
  3e:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  43:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  4a:	00 00 
  4c:	0f 85 36 01 00 00    	jne    188 <RemoteConfigParams::callbackFunction(char const*)+0x188>
  52:	0f b6 74 24 03       	movzbl 0x3(%rsp),%esi
  57:	ba 01 00 00 00       	mov    $0x1,%edx
  5c:	e9 d5 00 00 00       	jmp    136 <RemoteConfigParams::callbackFunction(char const*)+0x136>
  61:	4c 89 ea             	mov    %r13,%rdx
  64:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6b <RemoteConfigParams::callbackFunction(char const*)+0x6b>
  6b:	4c 89 e7             	mov    %r12,%rdi
  6e:	e8 00 00 00 00       	call   73 <RemoteConfigParams::callbackFunction(char const*)+0x73>
  73:	85 c0                	test   %eax,%eax
  75:	75 23                	jne    9a <RemoteConfigParams::callbackFunction(char const*)+0x9a>
  77:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  7c:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  83:	00 00 
  85:	0f 85 fd 00 00 00    	jne    188 <RemoteConfigParams::callbackFunction(char const*)+0x188>
  8b:	0f b6 74 24 03       	movzbl 0x3(%rsp),%esi
  90:	ba 02 00 00 00       	mov    $0x2,%edx
  95:	e9 9c 00 00 00       	jmp    136 <RemoteConfigParams::callbackFunction(char const*)+0x136>
  9a:	4c 89 ea             	mov    %r13,%rdx
  9d:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # a4 <RemoteConfigParams::callbackFunction(char const*)+0xa4>
  a4:	4c 89 e7             	mov    %r12,%rdi
  a7:	e8 00 00 00 00       	call   ac <RemoteConfigParams::callbackFunction(char const*)+0xac>
  ac:	85 c0                	test   %eax,%eax
  ae:	75 20                	jne    d0 <RemoteConfigParams::callbackFunction(char const*)+0xd0>
  b0:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  b5:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  bc:	00 00 
  be:	0f 85 c4 00 00 00    	jne    188 <RemoteConfigParams::callbackFunction(char const*)+0x188>
  c4:	0f b6 74 24 03       	movzbl 0x3(%rsp),%esi
  c9:	ba 04 00 00 00       	mov    $0x4,%edx
  ce:	eb 66                	jmp    136 <RemoteConfigParams::callbackFunction(char const*)+0x136>
  d0:	4c 89 ea             	mov    %r13,%rdx
  d3:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # da <RemoteConfigParams::callbackFunction(char const*)+0xda>
  da:	4c 89 e7             	mov    %r12,%rdi
  dd:	e8 00 00 00 00       	call   e2 <RemoteConfigParams::callbackFunction(char const*)+0xe2>
  e2:	85 c0                	test   %eax,%eax
  e4:	75 20                	jne    106 <RemoteConfigParams::callbackFunction(char const*)+0x106>
  e6:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  eb:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  f2:	00 00 
  f4:	0f 85 8e 00 00 00    	jne    188 <RemoteConfigParams::callbackFunction(char const*)+0x188>
  fa:	0f b6 74 24 03       	movzbl 0x3(%rsp),%esi
  ff:	ba 08 00 00 00       	mov    $0x8,%edx
 104:	eb 30                	jmp    136 <RemoteConfigParams::callbackFunction(char const*)+0x136>
 106:	4c 89 ea             	mov    %r13,%rdx
 109:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 110 <RemoteConfigParams::callbackFunction(char const*)+0x110>
 110:	4c 89 e7             	mov    %r12,%rdi
 113:	e8 00 00 00 00       	call   118 <RemoteConfigParams::callbackFunction(char const*)+0x118>
 118:	85 c0                	test   %eax,%eax
 11a:	75 2b                	jne    147 <RemoteConfigParams::callbackFunction(char const*)+0x147>
 11c:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
 121:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 128:	00 00 
 12a:	75 5c                	jne    188 <RemoteConfigParams::callbackFunction(char const*)+0x188>
 12c:	0f b6 74 24 03       	movzbl 0x3(%rsp),%esi
 131:	ba 20 00 00 00       	mov    $0x20,%edx
 136:	48 83 c4 10          	add    $0x10,%rsp
 13a:	48 89 ef             	mov    %rbp,%rdi
 13d:	5d                   	pop    %rbp
 13e:	41 5c                	pop    %r12
 140:	41 5d                	pop    %r13
 142:	e9 00 00 00 00       	jmp    147 <RemoteConfigParams::callbackFunction(char const*)+0x147>
 147:	48 8d 4c 24 04       	lea    0x4(%rsp),%rcx
 14c:	48 8d 55 10          	lea    0x10(%rbp),%rdx
 150:	4c 89 e7             	mov    %r12,%rdi
 153:	c7 44 24 04 17 00 00 	movl   $0x17,0x4(%rsp)
 15a:	00 
 15b:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 162 <RemoteConfigParams::callbackFunction(char const*)+0x162>
 162:	e8 00 00 00 00       	call   167 <RemoteConfigParams::callbackFunction(char const*)+0x167>
 167:	85 c0                	test   %eax,%eax
 169:	75 0d                	jne    178 <RemoteConfigParams::callbackFunction(char const*)+0x178>
 16b:	8b 44 24 04          	mov    0x4(%rsp),%eax
 16f:	c6 44 05 10 00       	movb   $0x0,0x10(%rbp,%rax,1)
 174:	83 4d 08 10          	orl    $0x10,0x8(%rbp)
 178:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
 17d:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 184:	00 00 
 186:	74 05                	je     18d <RemoteConfigParams::callbackFunction(char const*)+0x18d>
 188:	e8 00 00 00 00       	call   18d <RemoteConfigParams::callbackFunction(char const*)+0x18d>
 18d:	48 83 c4 10          	add    $0x10,%rsp
 191:	5d                   	pop    %rbp
 192:	41 5c                	pop    %r12
 194:	41 5d                	pop    %r13
 196:	c3                   	ret    

Disassembly of section .text._ZN18RemoteConfigParams7BuilderEPK19TRemoteConfigParamsPcjRj:

0000000000000000 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	41 56                	push   %r14
   6:	41 89 ce             	mov    %ecx,%r14d
   9:	41 55                	push   %r13
   b:	49 89 d5             	mov    %rdx,%r13
   e:	41 54                	push   %r12
  10:	4d 89 c4             	mov    %r8,%r12
  13:	4c 8d 47 08          	lea    0x8(%rdi),%r8
  17:	55                   	push   %rbp
  18:	53                   	push   %rbx
  19:	48 89 fb             	mov    %rdi,%rbx
  1c:	48 83 ec 20          	sub    $0x20,%rsp
  20:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  27:	00 00 
  29:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2e:	31 c0                	xor    %eax,%eax
  30:	48 85 f6             	test   %rsi,%rsi
  33:	74 12                	je     47 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x47>
  35:	0f 10 06             	movups (%rsi),%xmm0
  38:	0f 11 47 08          	movups %xmm0,0x8(%rdi)
  3c:	0f 10 4e 10          	movups 0x10(%rsi),%xmm1
  40:	41 0f 11 48 10       	movups %xmm1,0x10(%r8)
  45:	eb 0c                	jmp    53 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x53>
  47:	48 8b 3f             	mov    (%rdi),%rdi
  4a:	4c 89 c6             	mov    %r8,%rsi
  4d:	48 8b 07             	mov    (%rdi),%rax
  50:	ff 50 18             	call   *0x18(%rax)
  53:	48 8d 6c 24 08       	lea    0x8(%rsp),%rbp
  58:	44 89 f1             	mov    %r14d,%ecx
  5b:	4c 89 ea             	mov    %r13,%rdx
  5e:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 65 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x65>
  65:	48 89 ef             	mov    %rbp,%rdi
  68:	e8 00 00 00 00       	call   6d <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x6d>
  6d:	be 01 00 00 00       	mov    $0x1,%esi
  72:	48 89 df             	mov    %rbx,%rdi
  75:	e8 00 00 00 00       	call   7a <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x7a>
  7a:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 81 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x81>
  81:	48 89 ef             	mov    %rbp,%rdi
  84:	0f b6 d0             	movzbl %al,%edx
  87:	e8 00 00 00 00       	call   8c <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x8c>
  8c:	be 02 00 00 00       	mov    $0x2,%esi
  91:	48 89 df             	mov    %rbx,%rdi
  94:	e8 00 00 00 00       	call   99 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x99>
  99:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # a0 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xa0>
  a0:	48 89 ef             	mov    %rbp,%rdi
  a3:	0f b6 d0             	movzbl %al,%edx
  a6:	e8 00 00 00 00       	call   ab <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xab>
  ab:	be 04 00 00 00       	mov    $0x4,%esi
  b0:	48 89 df             	mov    %rbx,%rdi
  b3:	e8 00 00 00 00       	call   b8 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xb8>
  b8:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # bf <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xbf>
  bf:	48 89 ef             	mov    %rbp,%rdi
  c2:	0f b6 d0             	movzbl %al,%edx
  c5:	e8 00 00 00 00       	call   ca <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xca>
  ca:	be 08 00 00 00       	mov    $0x8,%esi
  cf:	48 89 df             	mov    %rbx,%rdi
  d2:	e8 00 00 00 00       	call   d7 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xd7>
  d7:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # de <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xde>
  de:	48 89 ef             	mov    %rbp,%rdi
  e1:	0f b6 d0             	movzbl %al,%edx
  e4:	e8 00 00 00 00       	call   e9 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xe9>
  e9:	be 20 00 00 00       	mov    $0x20,%esi
  ee:	48 89 df             	mov    %rbx,%rdi
  f1:	e8 00 00 00 00       	call   f6 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xf6>
  f6:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # fd <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xfd>
  fd:	48 89 ef             	mov    %rbp,%rdi
 100:	0f b6 d0             	movzbl %al,%edx
 103:	e8 00 00 00 00       	call   108 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x108>
 108:	be 10 00 00 00       	mov    $0x10,%esi
 10d:	48 89 df             	mov    %rbx,%rdi
 110:	e8 00 00 00 00       	call   115 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x115>
 115:	48 8d 53 10          	lea    0x10(%rbx),%rdx
 119:	41 b8 01 00 00 00    	mov    $0x1,%r8d
 11f:	48 89 ef             	mov    %rbp,%rdi
 122:	0f b6 c8             	movzbl %al,%ecx
 125:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 12c <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x12c>
 12c:	e8 00 00 00 00       	call   131 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x131>
 131:	48 89 ef             	mov    %rbp,%rdi
 134:	e8 00 00 00 00       	call   139 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x139>
 139:	0f b7 c0             	movzwl %ax,%eax
 13c:	41 89 04 24          	mov    %eax,(%r12)
 140:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
 145:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 14c:	00 00 
 14e:	74 05                	je     155 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x155>
 150:	e8 00 00 00 00       	call   155 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x155>
 155:	48 83 c4 20          	add    $0x20,%rsp
 159:	5b                   	pop    %rbx
 15a:	5d                   	pop    %rbp
 15b:	41 5c                	pop    %r12
 15d:	41 5d                	pop    %r13
 15f:	41 5e                	pop    %r14
 161:	c3                   	ret    

Disassembly of section .text._ZN18RemoteConfigParams3SetEP12RemoteConfig:

0000000000000000 <RemoteConfigParams::Set(RemoteConfig*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 f5             	mov    %rsi,%rbp
   8:	be 01 00 00 00       	mov    $0x1,%esi
   d:	53                   	push   %rbx
   e:	48 89 fb             	mov    %rdi,%rbx
  11:	48 83 ec 18          	sub    $0x18,%rsp
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  23:	31 c0                	xor    %eax,%eax
  25:	e8 00 00 00 00       	call   2a <RemoteConfigParams::Set(RemoteConfig*)+0x2a>
  2a:	48 89 ef             	mov    %rbp,%rdi
  2d:	0f b6 f0             	movzbl %al,%esi
  30:	e8 00 00 00 00       	call   35 <RemoteConfigParams::Set(RemoteConfig*)+0x35>
  35:	be 02 00 00 00       	mov    $0x2,%esi
  3a:	48 89 df             	mov    %rbx,%rdi
  3d:	e8 00 00 00 00       	call   42 <RemoteConfigParams::Set(RemoteConfig*)+0x42>
  42:	48 89 ef             	mov    %rbp,%rdi
  45:	0f b6 f0             	movzbl %al,%esi
  48:	e8 00 00 00 00       	call   4d <RemoteConfigParams::Set(RemoteConfig*)+0x4d>
  4d:	be 04 00 00 00       	mov    $0x4,%esi
  52:	48 89 df             	mov    %rbx,%rdi
  55:	e8 00 00 00 00       	call   5a <RemoteConfigParams::Set(RemoteConfig*)+0x5a>
  5a:	48 89 ef             	mov    %rbp,%rdi
  5d:	0f b6 f0             	movzbl %al,%esi
  60:	e8 00 00 00 00       	call   65 <RemoteConfigParams::Set(RemoteConfig*)+0x65>
  65:	be 08 00 00 00       	mov    $0x8,%esi
  6a:	48 89 df             	mov    %rbx,%rdi
  6d:	e8 00 00 00 00       	call   72 <RemoteConfigParams::Set(RemoteConfig*)+0x72>
  72:	48 89 ef             	mov    %rbp,%rdi
  75:	0f b6 f0             	movzbl %al,%esi
  78:	e8 00 00 00 00       	call   7d <RemoteConfigParams::Set(RemoteConfig*)+0x7d>
  7d:	be 20 00 00 00       	mov    $0x20,%esi
  82:	48 89 df             	mov    %rbx,%rdi
  85:	e8 00 00 00 00       	call   8a <RemoteConfigParams::Set(RemoteConfig*)+0x8a>
  8a:	48 89 ef             	mov    %rbp,%rdi
  8d:	0f b6 f0             	movzbl %al,%esi
  90:	e8 00 00 00 00       	call   95 <RemoteConfigParams::Set(RemoteConfig*)+0x95>
  95:	be 10 00 00 00       	mov    $0x10,%esi
  9a:	48 89 df             	mov    %rbx,%rdi
  9d:	e8 00 00 00 00       	call   a2 <RemoteConfigParams::Set(RemoteConfig*)+0xa2>
  a2:	84 c0                	test   %al,%al
  a4:	74 22                	je     c8 <RemoteConfigParams::Set(RemoteConfig*)+0xc8>
  a6:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  ab:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  b2:	00 00 
  b4:	75 22                	jne    d8 <RemoteConfigParams::Set(RemoteConfig*)+0xd8>
  b6:	48 83 c4 18          	add    $0x18,%rsp
  ba:	48 8d 73 10          	lea    0x10(%rbx),%rsi
  be:	48 89 ef             	mov    %rbp,%rdi
  c1:	5b                   	pop    %rbx
  c2:	5d                   	pop    %rbp
  c3:	e9 00 00 00 00       	jmp    c8 <RemoteConfigParams::Set(RemoteConfig*)+0xc8>
  c8:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  cd:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  d4:	00 00 
  d6:	74 05                	je     dd <RemoteConfigParams::Set(RemoteConfig*)+0xdd>
  d8:	e8 00 00 00 00       	call   dd <RemoteConfigParams::Set(RemoteConfig*)+0xdd>
  dd:	48 83 c4 18          	add    $0x18,%rsp
  e1:	5b                   	pop    %rbx
  e2:	5d                   	pop    %rbp
  e3:	c3                   	ret    

Disassembly of section .text._ZN18RemoteConfigParams22staticCallbackFunctionEPvPKc:

0000000000000000 <RemoteConfigParams::staticCallbackFunction(void*, char const*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 ec 18          	sub    $0x18,%rsp
   8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   f:	00 00 
  11:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  16:	31 c0                	xor    %eax,%eax
  18:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  1d:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  24:	00 00 
  26:	74 05                	je     2d <RemoteConfigParams::staticCallbackFunction(void*, char const*)+0x2d>
  28:	e8 00 00 00 00       	call   2d <RemoteConfigParams::staticCallbackFunction(void*, char const*)+0x2d>
  2d:	48 83 c4 18          	add    $0x18,%rsp
  31:	e9 00 00 00 00       	jmp    36 <.LC2+0x24>

Disassembly of section .text._ZN17PropertiesBuilder3AddIbEEbPKcT_bj:

0000000000000000 <bool PropertiesBuilder::Add<bool>(char const*, bool, bool, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	49 89 f2             	mov    %rsi,%r10
   8:	89 d0                	mov    %edx,%eax
   a:	53                   	push   %rbx
   b:	48 83 ec 18          	sub    $0x18,%rsp
   f:	0f b7 77 0a          	movzwl 0xa(%rdi),%esi
  13:	0f b7 6f 08          	movzwl 0x8(%rdi),%ebp
  17:	64 48 8b 14 25 28 00 	mov    %fs:0x28,%rdx
  1e:	00 00 
  20:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  25:	31 d2                	xor    %edx,%edx
  27:	66 39 ee             	cmp    %bp,%si
  2a:	72 04                	jb     30 <bool PropertiesBuilder::Add<bool>(char const*, bool, bool, unsigned int)+0x30>
  2c:	31 c0                	xor    %eax,%eax
  2e:	eb 2c                	jmp    5c <bool PropertiesBuilder::Add<bool>(char const*, bool, bool, unsigned int)+0x5c>
  30:	0f b7 d6             	movzwl %si,%edx
  33:	44 0f b6 c9          	movzbl %cl,%r9d
  37:	48 03 37             	add    (%rdi),%rsi
  3a:	4c 89 d1             	mov    %r10,%rcx
  3d:	29 d5                	sub    %edx,%ebp
  3f:	52                   	push   %rdx
  40:	48 89 fb             	mov    %rdi,%rbx
  43:	41 50                	push   %r8
  45:	89 ea                	mov    %ebp,%edx
  47:	44 0f b6 c0          	movzbl %al,%r8d
  4b:	e8 00 00 00 00       	call   50 <bool PropertiesBuilder::Add<bool>(char const*, bool, bool, unsigned int)+0x50>
  50:	59                   	pop    %rcx
  51:	5e                   	pop    %rsi
  52:	39 c5                	cmp    %eax,%ebp
  54:	7c d6                	jl     2c <bool PropertiesBuilder::Add<bool>(char const*, bool, bool, unsigned int)+0x2c>
  56:	66 01 43 0a          	add    %ax,0xa(%rbx)
  5a:	b0 01                	mov    $0x1,%al
  5c:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  61:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  68:	00 00 
  6a:	74 05                	je     71 <bool PropertiesBuilder::Add<bool>(char const*, bool, bool, unsigned int)+0x71>
  6c:	e8 00 00 00 00       	call   71 <bool PropertiesBuilder::Add<bool>(char const*, bool, bool, unsigned int)+0x71>
  71:	48 83 c4 18          	add    $0x18,%rsp
  75:	5b                   	pop    %rbx
  76:	5d                   	pop    %rbp
  77:	c3                   	ret    

Disassembly of section .text._ZN17PropertiesBuilder3AddIPcEEbPKcT_bj:

0000000000000000 <bool PropertiesBuilder::Add<char*>(char const*, char*, bool, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	49 89 f2             	mov    %rsi,%r10
   8:	48 89 d0             	mov    %rdx,%rax
   b:	53                   	push   %rbx
   c:	48 83 ec 18          	sub    $0x18,%rsp
  10:	0f b7 77 0a          	movzwl 0xa(%rdi),%esi
  14:	0f b7 6f 08          	movzwl 0x8(%rdi),%ebp
  18:	64 48 8b 14 25 28 00 	mov    %fs:0x28,%rdx
  1f:	00 00 
  21:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  26:	31 d2                	xor    %edx,%edx
  28:	66 39 ee             	cmp    %bp,%si
  2b:	72 04                	jb     31 <bool PropertiesBuilder::Add<char*>(char const*, char*, bool, unsigned int)+0x31>
  2d:	31 c0                	xor    %eax,%eax
  2f:	eb 2b                	jmp    5c <bool PropertiesBuilder::Add<char*>(char const*, char*, bool, unsigned int)+0x5c>
  31:	0f b7 d6             	movzwl %si,%edx
  34:	44 0f b6 c9          	movzbl %cl,%r9d
  38:	48 03 37             	add    (%rdi),%rsi
  3b:	4c 89 d1             	mov    %r10,%rcx
  3e:	29 d5                	sub    %edx,%ebp
  40:	52                   	push   %rdx
  41:	48 89 fb             	mov    %rdi,%rbx
  44:	41 50                	push   %r8
  46:	89 ea                	mov    %ebp,%edx
  48:	49 89 c0             	mov    %rax,%r8
  4b:	e8 00 00 00 00       	call   50 <bool PropertiesBuilder::Add<char*>(char const*, char*, bool, unsigned int)+0x50>
  50:	59                   	pop    %rcx
  51:	5e                   	pop    %rsi
  52:	39 c5                	cmp    %eax,%ebp
  54:	7c d7                	jl     2d <bool PropertiesBuilder::Add<char*>(char const*, char*, bool, unsigned int)+0x2d>
  56:	66 01 43 0a          	add    %ax,0xa(%rbx)
  5a:	b0 01                	mov    $0x1,%al
  5c:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  61:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  68:	00 00 
  6a:	74 05                	je     71 <bool PropertiesBuilder::Add<char*>(char const*, char*, bool, unsigned int)+0x71>
  6c:	e8 00 00 00 00       	call   71 <bool PropertiesBuilder::Add<char*>(char const*, char*, bool, unsigned int)+0x71>
  71:	48 83 c4 18          	add    $0x18,%rsp
  75:	5b                   	pop    %rbx
  76:	5d                   	pop    %rbp
  77:	c3                   	ret    

Disassembly of section .text._ZN17PropertiesBuilder8add_partIbEEiPcjPKcT_bj:

0000000000000000 <int PropertiesBuilder::add_part<bool>(char*, unsigned int, char const*, bool, bool, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 ec 18          	sub    $0x18,%rsp
   8:	49 89 fa             	mov    %rdi,%r10
   b:	45 0f b6 c0          	movzbl %r8b,%r8d
   f:	48 89 f7             	mov    %rsi,%rdi
  12:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  19:	00 00 
  1b:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20:	31 c0                	xor    %eax,%eax
  22:	89 d6                	mov    %edx,%esi
  24:	41 8a 42 0c          	mov    0xc(%r10),%al
  28:	45 84 c9             	test   %r9b,%r9b
  2b:	75 06                	jne    33 <int PropertiesBuilder::add_part<bool>(char*, unsigned int, char const*, bool, bool, unsigned int)+0x33>
  2d:	84 c0                	test   %al,%al
  2f:	75 06                	jne    37 <int PropertiesBuilder::add_part<bool>(char*, unsigned int, char const*, bool, bool, unsigned int)+0x37>
  31:	eb 36                	jmp    69 <int PropertiesBuilder::add_part<bool>(char*, unsigned int, char const*, bool, bool, unsigned int)+0x69>
  33:	84 c0                	test   %al,%al
  35:	74 19                	je     50 <int PropertiesBuilder::add_part<bool>(char*, unsigned int, char const*, bool, bool, unsigned int)+0x50>
  37:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  3c:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  43:	00 00 
  45:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 4c <int PropertiesBuilder::add_part<bool>(char*, unsigned int, char const*, bool, bool, unsigned int)+0x4c>
  4c:	74 37                	je     85 <int PropertiesBuilder::add_part<bool>(char*, unsigned int, char const*, bool, bool, unsigned int)+0x85>
  4e:	eb 30                	jmp    80 <int PropertiesBuilder::add_part<bool>(char*, unsigned int, char const*, bool, bool, unsigned int)+0x80>
  50:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  55:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  5c:	00 00 
  5e:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 65 <int PropertiesBuilder::add_part<bool>(char*, unsigned int, char const*, bool, bool, unsigned int)+0x65>
  65:	74 1e                	je     85 <int PropertiesBuilder::add_part<bool>(char*, unsigned int, char const*, bool, bool, unsigned int)+0x85>
  67:	eb 17                	jmp    80 <int PropertiesBuilder::add_part<bool>(char*, unsigned int, char const*, bool, bool, unsigned int)+0x80>
  69:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  6e:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  75:	00 00 
  77:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 7e <int PropertiesBuilder::add_part<bool>(char*, unsigned int, char const*, bool, bool, unsigned int)+0x7e>
  7e:	74 05                	je     85 <int PropertiesBuilder::add_part<bool>(char*, unsigned int, char const*, bool, bool, unsigned int)+0x85>
  80:	e8 00 00 00 00       	call   85 <int PropertiesBuilder::add_part<bool>(char*, unsigned int, char const*, bool, bool, unsigned int)+0x85>
  85:	31 c0                	xor    %eax,%eax
  87:	48 83 c4 18          	add    $0x18,%rsp
  8b:	e9 00 00 00 00       	jmp    90 <.LC2+0x7e>

remoteconfigparamsdump.o:     file format elf64-x86-64


Disassembly of section .text._ZN18RemoteConfigParams4DumpEv:

0000000000000000 <RemoteConfigParams::Dump()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 ec 18          	sub    $0x18,%rsp
   8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   f:	00 00 
  11:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  16:	31 c0                	xor    %eax,%eax
  18:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  1d:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  24:	00 00 
  26:	74 05                	je     2d <RemoteConfigParams::Dump()+0x2d>
  28:	e8 00 00 00 00       	call   2d <RemoteConfigParams::Dump()+0x2d>
  2d:	48 83 c4 18          	add    $0x18,%rsp
  31:	c3                   	ret    

remoteconfigreboot.o:     file format elf64-x86-64


Disassembly of section .text._ZN11ConfigStore3GetEv:

0000000000000000 <ConfigStore::Get()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 22 <ConfigStore::Get()+0x22>
  22:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  26:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  2d:	00 00 
  2f:	74 05                	je     36 <ConfigStore::Get()+0x36>
  31:	e8 00 00 00 00       	call   36 <ConfigStore::Get()+0x36>
  36:	c9                   	leave  
  37:	c3                   	ret    

Disassembly of section .text._ZN7Network8ShutdownEv:

0000000000000000 <Network::Shutdown()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	90                   	nop
  20:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  24:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  2b:	00 00 
  2d:	74 05                	je     34 <Network::Shutdown()+0x34>
  2f:	e8 00 00 00 00       	call   34 <Network::Shutdown()+0x34>
  34:	c9                   	leave  
  35:	c3                   	ret    

Disassembly of section .text._ZN7Network3GetEv:

0000000000000000 <Network::Get()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 22 <Network::Get()+0x22>
  22:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  26:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  2d:	00 00 
  2f:	74 05                	je     36 <Network::Get()+0x36>
  31:	e8 00 00 00 00       	call   36 <Network::Get()+0x36>
  36:	c9                   	leave  
  37:	c3                   	ret    

Disassembly of section .text._ZN8Hardware3GetEv:

0000000000000000 <Hardware::Get()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 22 <Hardware::Get()+0x22>
  22:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  26:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  2d:	00 00 
  2f:	74 05                	je     36 <Hardware::Get()+0x36>
  31:	e8 00 00 00 00       	call   36 <Hardware::Get()+0x36>
  36:	c9                   	leave  
  37:	c3                   	ret    

Disassembly of section .text._ZNK10DisplaySet10GetColumnsEv:

0000000000000000 <DisplaySet::GetColumns() const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	8b 40 08             	mov    0x8(%rax),%eax
  26:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  2a:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  31:	00 00 
  33:	74 05                	je     3a <DisplaySet::GetColumns() const+0x3a>
  35:	e8 00 00 00 00       	call   3a <DisplaySet::GetColumns() const+0x3a>
  3a:	c9                   	leave  
  3b:	c3                   	ret    

Disassembly of section .text._ZNK10DisplaySet7GetRowsEv:

0000000000000000 <DisplaySet::GetRows() const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	8b 40 0c             	mov    0xc(%rax),%eax
  26:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  2a:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  31:	00 00 
  33:	74 05                	je     3a <DisplaySet::GetRows() const+0x3a>
  35:	e8 00 00 00 00       	call   3a <DisplaySet::GetRows() const+0x3a>
  3a:	c9                   	leave  
  3b:	c3                   	ret    

Disassembly of section .text._ZL16i2c_set_baudratej:

0000000000000000 <i2c_set_baudrate(unsigned int)>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	89 7d ec             	mov    %edi,-0x14(%rbp)
   b:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  12:	00 00 
  14:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  18:	31 c0                	xor    %eax,%eax
  1a:	90                   	nop
  1b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1f:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  26:	00 00 
  28:	74 05                	je     2f <i2c_set_baudrate(unsigned int)+0x2f>
  2a:	e8 00 00 00 00       	call   2f <i2c_set_baudrate(unsigned int)+0x2f>
  2f:	c9                   	leave  
  30:	c3                   	ret    

Disassembly of section .text._ZL15i2c_set_addressh:

0000000000000000 <i2c_set_address(unsigned char)>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	89 f8                	mov    %edi,%eax
   a:	88 45 ec             	mov    %al,-0x14(%rbp)
   d:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  14:	00 00 
  16:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1a:	31 c0                	xor    %eax,%eax
  1c:	90                   	nop
  1d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  21:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  28:	00 00 
  2a:	74 05                	je     31 <i2c_set_address(unsigned char)+0x31>
  2c:	e8 00 00 00 00       	call   31 <i2c_set_address(unsigned char)+0x31>
  31:	c9                   	leave  
  32:	c3                   	ret    

Disassembly of section .text._ZL9i2c_writePKcj:

0000000000000000 <i2c_write(char const*, unsigned int)>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	89 75 e4             	mov    %esi,-0x1c(%rbp)
   f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  16:	00 00 
  18:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1c:	31 c0                	xor    %eax,%eax
  1e:	b8 01 00 00 00       	mov    $0x1,%eax
  23:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  27:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  2e:	00 00 
  30:	74 05                	je     37 <i2c_write(char const*, unsigned int)+0x37>
  32:	e8 00 00 00 00       	call   37 <i2c_write(char const*, unsigned int)+0x37>
  37:	c9                   	leave  
  38:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2C13WriteRegisterEht:

0000000000000000 <HAL_I2C::WriteRegister(unsigned char, unsigned short)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f1                	mov    %esi,%ecx
  12:	89 d0                	mov    %edx,%eax
  14:	89 ca                	mov    %ecx,%edx
  16:	88 55 e4             	mov    %dl,-0x1c(%rbp)
  19:	66 89 45 e0          	mov    %ax,-0x20(%rbp)
  1d:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  24:	00 00 
  26:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  2a:	31 c0                	xor    %eax,%eax
  2c:	0f b6 45 e4          	movzbl -0x1c(%rbp),%eax
  30:	88 45 f5             	mov    %al,-0xb(%rbp)
  33:	0f b7 45 e0          	movzwl -0x20(%rbp),%eax
  37:	66 c1 e8 08          	shr    $0x8,%ax
  3b:	88 45 f6             	mov    %al,-0xa(%rbp)
  3e:	0f b7 45 e0          	movzwl -0x20(%rbp),%eax
  42:	88 45 f7             	mov    %al,-0x9(%rbp)
  45:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  49:	48 89 c7             	mov    %rax,%rdi
  4c:	e8 00 00 00 00       	call   51 <HAL_I2C::WriteRegister(unsigned char, unsigned short)+0x51>
  51:	48 8d 45 f5          	lea    -0xb(%rbp),%rax
  55:	be 03 00 00 00       	mov    $0x3,%esi
  5a:	48 89 c7             	mov    %rax,%rdi
  5d:	e8 00 00 00 00       	call   62 <HAL_I2C::WriteRegister(unsigned char, unsigned short)+0x62>
  62:	90                   	nop
  63:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  67:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  6e:	00 00 
  70:	74 05                	je     77 <HAL_I2C::WriteRegister(unsigned char, unsigned short)+0x77>
  72:	e8 00 00 00 00       	call   77 <HAL_I2C::WriteRegister(unsigned char, unsigned short)+0x77>
  77:	c9                   	leave  
  78:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2C5SetupEv:

0000000000000000 <HAL_I2C::Setup()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	0f b6 00             	movzbl (%rax),%eax
  26:	0f b6 c0             	movzbl %al,%eax
  29:	89 c7                	mov    %eax,%edi
  2b:	e8 00 00 00 00       	call   30 <HAL_I2C::Setup()+0x30>
  30:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  34:	8b 40 04             	mov    0x4(%rax),%eax
  37:	89 c7                	mov    %eax,%edi
  39:	e8 00 00 00 00       	call   3e <HAL_I2C::Setup()+0x3e>
  3e:	90                   	nop
  3f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  4a:	00 00 
  4c:	74 05                	je     53 <HAL_I2C::Setup()+0x53>
  4e:	e8 00 00 00 00       	call   53 <HAL_I2C::Setup()+0x53>
  53:	c9                   	leave  
  54:	c3                   	ret    

Disassembly of section .text._ZN7Display3ClsEv:

0000000000000000 <Display::Cls()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	48 8b 40 20          	mov    0x20(%rax),%rax
  27:	48 85 c0             	test   %rax,%rax
  2a:	74 21                	je     4d <Display::Cls()+0x4d>
  2c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  30:	48 8b 40 20          	mov    0x20(%rax),%rax
  34:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  38:	48 8b 52 20          	mov    0x20(%rdx),%rdx
  3c:	48 8b 12             	mov    (%rdx),%rdx
  3f:	48 83 c2 18          	add    $0x18,%rdx
  43:	48 8b 12             	mov    (%rdx),%rdx
  46:	48 89 c7             	mov    %rax,%rdi
  49:	ff d2                	call   *%rdx
  4b:	eb 01                	jmp    4e <Display::Cls()+0x4e>
  4d:	90                   	nop
  4e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  52:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  59:	00 00 
  5b:	74 05                	je     62 <Display::Cls()+0x62>
  5d:	e8 00 00 00 00       	call   62 <Display::Cls()+0x62>
  62:	c9                   	leave  
  63:	c3                   	ret    

Disassembly of section .text._ZN7Display7PutCharEi:

0000000000000000 <Display::PutChar(int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  13:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1a:	00 00 
  1c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  20:	31 c0                	xor    %eax,%eax
  22:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  26:	48 8b 40 20          	mov    0x20(%rax),%rax
  2a:	48 85 c0             	test   %rax,%rax
  2d:	74 26                	je     55 <Display::PutChar(int)+0x55>
  2f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  33:	48 8b 40 20          	mov    0x20(%rax),%rax
  37:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  3b:	48 8b 52 20          	mov    0x20(%rdx),%rdx
  3f:	48 8b 12             	mov    (%rdx),%rdx
  42:	48 83 c2 28          	add    $0x28,%rdx
  46:	48 8b 0a             	mov    (%rdx),%rcx
  49:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  4c:	89 d6                	mov    %edx,%esi
  4e:	48 89 c7             	mov    %rax,%rdi
  51:	ff d1                	call   *%rcx
  53:	eb 01                	jmp    56 <Display::PutChar(int)+0x56>
  55:	90                   	nop
  56:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  5a:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  61:	00 00 
  63:	74 05                	je     6a <Display::PutChar(int)+0x6a>
  65:	e8 00 00 00 00       	call   6a <Display::PutChar(int)+0x6a>
  6a:	c9                   	leave  
  6b:	c3                   	ret    

Disassembly of section .text._ZN7Display5WriteEjPKc:

0000000000000000 <Display::Write(unsigned int, char const*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 40          	sub    $0x40,%rsp
   c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10:	89 75 d4             	mov    %esi,-0x2c(%rbp)
  13:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  17:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1e:	00 00 
  20:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  24:	31 c0                	xor    %eax,%eax
  26:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  2a:	48 8b 40 20          	mov    0x20(%rax),%rax
  2e:	48 85 c0             	test   %rax,%rax
  31:	75 07                	jne    3a <Display::Write(unsigned int, char const*)+0x3a>
  33:	b8 00 00 00 00       	mov    $0x0,%eax
  38:	eb 7f                	jmp    b9 <Display::Write(unsigned int, char const*)+0xb9>
  3a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  3e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  42:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%rbp)
  49:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4d:	48 8b 40 20          	mov    0x20(%rax),%rax
  51:	48 89 c7             	mov    %rax,%rdi
  54:	e8 00 00 00 00       	call   59 <Display::Write(unsigned int, char const*)+0x59>
  59:	89 45 ec             	mov    %eax,-0x14(%rbp)
  5c:	eb 05                	jmp    63 <Display::Write(unsigned int, char const*)+0x63>
  5e:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
  63:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  67:	0f b6 00             	movzbl (%rax),%eax
  6a:	84 c0                	test   %al,%al
  6c:	74 15                	je     83 <Display::Write(unsigned int, char const*)+0x83>
  6e:	8b 45 e8             	mov    -0x18(%rbp),%eax
  71:	8d 50 01             	lea    0x1(%rax),%edx
  74:	89 55 e8             	mov    %edx,-0x18(%rbp)
  77:	39 45 ec             	cmp    %eax,-0x14(%rbp)
  7a:	76 07                	jbe    83 <Display::Write(unsigned int, char const*)+0x83>
  7c:	b8 01 00 00 00       	mov    $0x1,%eax
  81:	eb 05                	jmp    88 <Display::Write(unsigned int, char const*)+0x88>
  83:	b8 00 00 00 00       	mov    $0x0,%eax
  88:	84 c0                	test   %al,%al
  8a:	75 d2                	jne    5e <Display::Write(unsigned int, char const*)+0x5e>
  8c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  90:	48 8b 40 20          	mov    0x20(%rax),%rax
  94:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  98:	48 8b 52 20          	mov    0x20(%rdx),%rdx
  9c:	48 8b 12             	mov    (%rdx),%rdx
  9f:	48 83 c2 38          	add    $0x38,%rdx
  a3:	4c 8b 02             	mov    (%rdx),%r8
  a6:	8b 4d e8             	mov    -0x18(%rbp),%ecx
  a9:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  ad:	8b 75 d4             	mov    -0x2c(%rbp),%esi
  b0:	48 89 c7             	mov    %rax,%rdi
  b3:	41 ff d0             	call   *%r8
  b6:	8b 45 e8             	mov    -0x18(%rbp),%eax
  b9:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  bd:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  c4:	00 00 
  c6:	74 05                	je     cd <Display::Write(unsigned int, char const*)+0xcd>
  c8:	e8 00 00 00 00       	call   cd <Display::Write(unsigned int, char const*)+0xcd>
  cd:	c9                   	leave  
  ce:	c3                   	ret    

Disassembly of section .text._ZN7Display10TextStatusEPKc:

0000000000000000 <Display::TextStatus(char const*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  27:	48 8b 40 20          	mov    0x20(%rax),%rax
  2b:	48 85 c0             	test   %rax,%rax
  2e:	0f 84 94 00 00 00    	je     c8 <Display::TextStatus(char const*)+0xc8>
  34:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  38:	48 8b 40 20          	mov    0x20(%rax),%rax
  3c:	48 89 c7             	mov    %rax,%rdi
  3f:	e8 00 00 00 00       	call   44 <Display::TextStatus(char const*)+0x44>
  44:	89 45 f0             	mov    %eax,-0x10(%rbp)
  47:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4b:	48 8b 40 20          	mov    0x20(%rax),%rax
  4f:	48 89 c7             	mov    %rax,%rdi
  52:	e8 00 00 00 00       	call   57 <Display::TextStatus(char const*)+0x57>
  57:	89 45 f4             	mov    %eax,-0xc(%rbp)
  5a:	8b 45 f4             	mov    -0xc(%rbp),%eax
  5d:	8d 50 ff             	lea    -0x1(%rax),%edx
  60:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  64:	be 00 00 00 00       	mov    $0x0,%esi
  69:	48 89 c7             	mov    %rax,%rdi
  6c:	e8 00 00 00 00       	call   71 <Display::TextStatus(char const*)+0x71>
  71:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  78:	eb 15                	jmp    8f <Display::TextStatus(char const*)+0x8f>
  7a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  7e:	be 20 00 00 00       	mov    $0x20,%esi
  83:	48 89 c7             	mov    %rax,%rdi
  86:	e8 00 00 00 00       	call   8b <Display::TextStatus(char const*)+0x8b>
  8b:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
  8f:	8b 45 f0             	mov    -0x10(%rbp),%eax
  92:	83 e8 01             	sub    $0x1,%eax
  95:	39 45 ec             	cmp    %eax,-0x14(%rbp)
  98:	72 e0                	jb     7a <Display::TextStatus(char const*)+0x7a>
  9a:	8b 45 f4             	mov    -0xc(%rbp),%eax
  9d:	8d 50 ff             	lea    -0x1(%rax),%edx
  a0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  a4:	be 00 00 00 00       	mov    $0x0,%esi
  a9:	48 89 c7             	mov    %rax,%rdi
  ac:	e8 00 00 00 00       	call   b1 <Display::TextStatus(char const*)+0xb1>
  b1:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  b5:	8b 4d f4             	mov    -0xc(%rbp),%ecx
  b8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  bc:	89 ce                	mov    %ecx,%esi
  be:	48 89 c7             	mov    %rax,%rdi
  c1:	e8 00 00 00 00       	call   c6 <Display::TextStatus(char const*)+0xc6>
  c6:	eb 01                	jmp    c9 <Display::TextStatus(char const*)+0xc9>
  c8:	90                   	nop
  c9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  cd:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  d4:	00 00 
  d6:	74 05                	je     dd <Display::TextStatus(char const*)+0xdd>
  d8:	e8 00 00 00 00       	call   dd <Display::TextStatus(char const*)+0xdd>
  dd:	c9                   	leave  
  de:	c3                   	ret    

Disassembly of section .text._ZN7Display10TextStatusEPKc22Display7SegmentMessagej:

0000000000000000 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  14:	89 55 dc             	mov    %edx,-0x24(%rbp)
  17:	89 4d d8             	mov    %ecx,-0x28(%rbp)
  1a:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  21:	00 00 
  23:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  27:	31 c0                	xor    %eax,%eax
  29:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  2d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  31:	48 89 d6             	mov    %rdx,%rsi
  34:	48 89 c7             	mov    %rax,%rdi
  37:	e8 00 00 00 00       	call   3c <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)+0x3c>
  3c:	8b 55 dc             	mov    -0x24(%rbp),%edx
  3f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43:	89 d6                	mov    %edx,%esi
  45:	48 89 c7             	mov    %rax,%rdi
  48:	e8 00 00 00 00       	call   4d <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)+0x4d>
  4d:	83 7d d8 ff          	cmpl   $0xffffffff,-0x28(%rbp)
  51:	74 13                	je     66 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)+0x66>
  53:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  57:	8b 45 d8             	mov    -0x28(%rbp),%eax
  5a:	48 89 d6             	mov    %rdx,%rsi
  5d:	89 c7                	mov    %eax,%edi
  5f:	e8 00 00 00 00       	call   64 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)+0x64>
  64:	eb 01                	jmp    67 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)+0x67>
  66:	90                   	nop
  67:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  6b:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  72:	00 00 
  74:	74 05                	je     7b <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)+0x7b>
  76:	e8 00 00 00 00       	call   7b <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)+0x7b>
  7b:	c9                   	leave  
  7c:	c3                   	ret    

Disassembly of section .text._ZN7Display12SetCursorPosEjj:

0000000000000000 <Display::SetCursorPos(unsigned int, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  13:	89 55 e0             	mov    %edx,-0x20(%rbp)
  16:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1d:	00 00 
  1f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  23:	31 c0                	xor    %eax,%eax
  25:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  29:	48 8b 40 20          	mov    0x20(%rax),%rax
  2d:	48 85 c0             	test   %rax,%rax
  30:	74 2a                	je     5c <Display::SetCursorPos(unsigned int, unsigned int)+0x5c>
  32:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  36:	48 8b 40 20          	mov    0x20(%rax),%rax
  3a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  3e:	48 8b 52 20          	mov    0x20(%rdx),%rdx
  42:	48 8b 12             	mov    (%rdx),%rdx
  45:	48 83 c2 40          	add    $0x40,%rdx
  49:	4c 8b 02             	mov    (%rdx),%r8
  4c:	8b 55 e0             	mov    -0x20(%rbp),%edx
  4f:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
  52:	89 ce                	mov    %ecx,%esi
  54:	48 89 c7             	mov    %rax,%rdi
  57:	41 ff d0             	call   *%r8
  5a:	eb 01                	jmp    5d <Display::SetCursorPos(unsigned int, unsigned int)+0x5d>
  5c:	90                   	nop
  5d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  61:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  68:	00 00 
  6a:	74 05                	je     71 <Display::SetCursorPos(unsigned int, unsigned int)+0x71>
  6c:	e8 00 00 00 00       	call   71 <Display::SetCursorPos(unsigned int, unsigned int)+0x71>
  71:	c9                   	leave  
  72:	c3                   	ret    

Disassembly of section .text._ZN7Display6StatusE22Display7SegmentMessage:

0000000000000000 <Display::Status(Display7SegmentMessage)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  13:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1a:	00 00 
  1c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  20:	31 c0                	xor    %eax,%eax
  22:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  26:	0f b6 40 11          	movzbl 0x11(%rax),%eax
  2a:	84 c0                	test   %al,%al
  2c:	74 1f                	je     4d <Display::Status(Display7SegmentMessage)+0x4d>
  2e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  32:	48 8d 48 08          	lea    0x8(%rax),%rcx
  36:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  39:	f7 d0                	not    %eax
  3b:	0f b7 c0             	movzwl %ax,%eax
  3e:	89 c2                	mov    %eax,%edx
  40:	be 12 00 00 00       	mov    $0x12,%esi
  45:	48 89 cf             	mov    %rcx,%rdi
  48:	e8 00 00 00 00       	call   4d <Display::Status(Display7SegmentMessage)+0x4d>
  4d:	90                   	nop
  4e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  52:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  59:	00 00 
  5b:	74 05                	je     62 <Display::Status(Display7SegmentMessage)+0x62>
  5d:	e8 00 00 00 00       	call   62 <Display::Status(Display7SegmentMessage)+0x62>
  62:	c9                   	leave  
  63:	c3                   	ret    

Disassembly of section .text._ZN7Display8SetSleepEb:

0000000000000000 <Display::SetSleep(bool)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	88 45 e4             	mov    %al,-0x1c(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  28:	48 8b 40 20          	mov    0x20(%rax),%rax
  2c:	48 85 c0             	test   %rax,%rax
  2f:	74 51                	je     82 <Display::SetSleep(bool)+0x82>
  31:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  35:	0f b6 55 e4          	movzbl -0x1c(%rbp),%edx
  39:	88 50 10             	mov    %dl,0x10(%rax)
  3c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40:	48 8b 40 20          	mov    0x20(%rax),%rax
  44:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  48:	48 8b 52 20          	mov    0x20(%rdx),%rdx
  4c:	48 8b 12             	mov    (%rdx),%rdx
  4f:	48 83 c2 50          	add    $0x50,%rdx
  53:	48 8b 0a             	mov    (%rdx),%rcx
  56:	0f b6 55 e4          	movzbl -0x1c(%rbp),%edx
  5a:	89 d6                	mov    %edx,%esi
  5c:	48 89 c7             	mov    %rax,%rdi
  5f:	ff d1                	call   *%rcx
  61:	0f b6 45 e4          	movzbl -0x1c(%rbp),%eax
  65:	83 f0 01             	xor    $0x1,%eax
  68:	84 c0                	test   %al,%al
  6a:	74 17                	je     83 <Display::SetSleep(bool)+0x83>
  6c:	e8 00 00 00 00       	call   71 <Display::SetSleep(bool)+0x71>
  71:	48 89 c7             	mov    %rax,%rdi
  74:	e8 00 00 00 00       	call   79 <Display::SetSleep(bool)+0x79>
  79:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  7d:	89 42 04             	mov    %eax,0x4(%rdx)
  80:	eb 01                	jmp    83 <Display::SetSleep(bool)+0x83>
  82:	90                   	nop
  83:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  87:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  8e:	00 00 
  90:	74 05                	je     97 <Display::SetSleep(bool)+0x97>
  92:	e8 00 00 00 00       	call   97 <Display::SetSleep(bool)+0x97>
  97:	c9                   	leave  
  98:	c3                   	ret    

Disassembly of section .text._ZN7Display3GetEv:

0000000000000000 <Display::Get()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 22 <Display::Get()+0x22>
  22:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  26:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  2d:	00 00 
  2f:	74 05                	je     36 <Display::Get()+0x36>
  31:	e8 00 00 00 00       	call   36 <Display::Get()+0x36>
  36:	c9                   	leave  
  37:	c3                   	ret    

Disassembly of section .text._ZN12RemoteConfig12HandleRebootEv:

0000000000000000 <RemoteConfig::HandleReboot()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	0f b6 40 0e          	movzbl 0xe(%rax),%eax
  27:	83 f0 01             	xor    $0x1,%eax
  2a:	84 c0                	test   %al,%al
  2c:	75 74                	jne    a2 <RemoteConfig::HandleReboot()+0xa2>
  2e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  32:	c6 40 11 01          	movb   $0x1,0x11(%rax)
  36:	e8 00 00 00 00       	call   3b <RemoteConfig::HandleReboot()+0x3b>
  3b:	be 00 00 00 00       	mov    $0x0,%esi
  40:	48 89 c7             	mov    %rax,%rdi
  43:	e8 00 00 00 00       	call   48 <RemoteConfig::HandleReboot()+0x48>
  48:	90                   	nop
  49:	e8 00 00 00 00       	call   4e <RemoteConfig::HandleReboot()+0x4e>
  4e:	48 89 c7             	mov    %rax,%rdi
  51:	e8 00 00 00 00       	call   56 <RemoteConfig::HandleReboot()+0x56>
  56:	84 c0                	test   %al,%al
  58:	75 ef                	jne    49 <RemoteConfig::HandleReboot()+0x49>
  5a:	e8 00 00 00 00       	call   5f <RemoteConfig::HandleReboot()+0x5f>
  5f:	48 89 c7             	mov    %rax,%rdi
  62:	e8 00 00 00 00       	call   67 <RemoteConfig::HandleReboot()+0x67>
  67:	e8 00 00 00 00       	call   6c <RemoteConfig::HandleReboot()+0x6c>
  6c:	48 89 c7             	mov    %rax,%rdi
  6f:	e8 00 00 00 00       	call   74 <RemoteConfig::HandleReboot()+0x74>
  74:	e8 00 00 00 00       	call   79 <RemoteConfig::HandleReboot()+0x79>
  79:	48 89 c7             	mov    %rax,%rdi
  7c:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
  81:	ba 40 40 00 00       	mov    $0x4040,%edx
  86:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 8d <RemoteConfig::HandleReboot()+0x8d>
  8d:	48 89 c6             	mov    %rax,%rsi
  90:	e8 00 00 00 00       	call   95 <RemoteConfig::HandleReboot()+0x95>
  95:	e8 00 00 00 00       	call   9a <RemoteConfig::HandleReboot()+0x9a>
  9a:	48 89 c7             	mov    %rax,%rdi
  9d:	e8 00 00 00 00       	call   a2 <RemoteConfig::HandleReboot()+0xa2>
  a2:	90                   	nop
  a3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  a7:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  ae:	00 00 
  b0:	74 05                	je     b7 <RemoteConfig::HandleReboot()+0xb7>
  b2:	e8 00 00 00 00       	call   b7 <RemoteConfig::HandleReboot()+0xb7>
  b7:	c9                   	leave  
  b8:	c3                   	ret    

remoteconfigstatic.o:     file format elf64-x86-64


Disassembly of section .text._ZN12RemoteConfig8GetIndexEPKvRj:

0000000000000000 <RemoteConfig::GetIndex(void const*, unsigned int&)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 40          	sub    $0x40,%rsp
   c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  14:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  18:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1f:	00 00 
  21:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  25:	31 c0                	xor    %eax,%eax
  27:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  2e:	e9 80 00 00 00       	jmp    b3 <RemoteConfig::GetIndex(void const*, unsigned int&)+0xb3>
  33:	8b 45 ec             	mov    -0x14(%rbp),%eax
  36:	48 63 d0             	movslq %eax,%rdx
  39:	48 89 d0             	mov    %rdx,%rax
  3c:	48 01 c0             	add    %rax,%rax
  3f:	48 01 d0             	add    %rdx,%rax
  42:	48 c1 e0 04          	shl    $0x4,%rax
  46:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 4d <RemoteConfig::GetIndex(void const*, unsigned int&)+0x4d>
  4d:	48 01 d0             	add    %rdx,%rax
  50:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  54:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  58:	0f b6 40 28          	movzbl 0x28(%rax),%eax
  5c:	0f b6 c0             	movzbl %al,%eax
  5f:	89 45 e8             	mov    %eax,-0x18(%rbp)
  62:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  66:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
  6a:	48 89 d6             	mov    %rdx,%rsi
  6d:	48 89 c7             	mov    %rax,%rdi
  70:	e8 00 00 00 00       	call   75 <RemoteConfig::GetIndex(void const*, unsigned int&)+0x75>
  75:	8b 00                	mov    (%rax),%eax
  77:	89 c2                	mov    %eax,%edx
  79:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  7d:	48 8b 48 20          	mov    0x20(%rax),%rcx
  81:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  85:	48 89 ce             	mov    %rcx,%rsi
  88:	48 89 c7             	mov    %rax,%rdi
  8b:	e8 00 00 00 00       	call   90 <RemoteConfig::GetIndex(void const*, unsigned int&)+0x90>
  90:	85 c0                	test   %eax,%eax
  92:	0f 94 c0             	sete   %al
  95:	84 c0                	test   %al,%al
  97:	74 16                	je     af <RemoteConfig::GetIndex(void const*, unsigned int&)+0xaf>
  99:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  9d:	0f b6 40 28          	movzbl 0x28(%rax),%eax
  a1:	0f b6 d0             	movzbl %al,%edx
  a4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  a8:	89 10                	mov    %edx,(%rax)
  aa:	8b 45 ec             	mov    -0x14(%rbp),%eax
  ad:	eb 13                	jmp    c2 <RemoteConfig::GetIndex(void const*, unsigned int&)+0xc2>
  af:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
  b3:	83 7d ec 04          	cmpl   $0x4,-0x14(%rbp)
  b7:	0f 8e 76 ff ff ff    	jle    33 <RemoteConfig::GetIndex(void const*, unsigned int&)+0x33>
  bd:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  c2:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  c6:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  cd:	00 00 
  cf:	74 05                	je     d6 <RemoteConfig::GetIndex(void const*, unsigned int&)+0xd6>
  d1:	e8 00 00 00 00       	call   d6 <RemoteConfig::GetIndex(void const*, unsigned int&)+0xd6>
  d6:	c9                   	leave  
  d7:	c3                   	ret    

Disassembly of section .text._ZSt3minIjERKT_S2_S2_:

0000000000000000 <unsigned int const& std::min<unsigned int>(unsigned int const&, unsigned int const&)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  27:	8b 10                	mov    (%rax),%edx
  29:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2d:	8b 00                	mov    (%rax),%eax
  2f:	39 c2                	cmp    %eax,%edx
  31:	73 06                	jae    39 <unsigned int const& std::min<unsigned int>(unsigned int const&, unsigned int const&)+0x39>
  33:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  37:	eb 04                	jmp    3d <unsigned int const& std::min<unsigned int>(unsigned int const&, unsigned int const&)+0x3d>
  39:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  41:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  48:	00 00 
  4a:	74 05                	je     51 <unsigned int const& std::min<unsigned int>(unsigned int const&, unsigned int const&)+0x51>
  4c:	e8 00 00 00 00       	call   51 <unsigned int const& std::min<unsigned int>(unsigned int const&, unsigned int const&)+0x51>
  51:	c9                   	leave  
  52:	c3                   	ret    

remoteconfig.o:     file format elf64-x86-64


Disassembly of section .text._ZN12RemoteConfig21PlatformHandleTftpSetEv:

0000000000000000 <RemoteConfig::PlatformHandleTftpSet()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	90                   	nop
  20:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  24:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  2b:	00 00 
  2d:	74 05                	je     34 <RemoteConfig::PlatformHandleTftpSet()+0x34>
  2f:	e8 00 00 00 00       	call   34 <RemoteConfig::PlatformHandleTftpSet()+0x34>
  34:	c9                   	leave  
  35:	c3                   	ret    

Disassembly of section .text._ZN12RemoteConfig21PlatformHandleTftpGetEv:

0000000000000000 <RemoteConfig::PlatformHandleTftpGet()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	90                   	nop
  20:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  24:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  2b:	00 00 
  2d:	74 05                	je     34 <RemoteConfig::PlatformHandleTftpGet()+0x34>
  2f:	e8 00 00 00 00       	call   34 <RemoteConfig::PlatformHandleTftpGet()+0x34>
  34:	c9                   	leave  
  35:	c3                   	ret    

tftpfileserver.o:     file format elf64-x86-64


Disassembly of section .text._ZN14TFTPFileServerD2Ev:

0000000000000000 <TFTPFileServer::~TFTPFileServer()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 26 <TFTPFileServer::~TFTPFileServer()+0x26>
  26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2a:	48 89 10             	mov    %rdx,(%rax)
  2d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  31:	48 89 c7             	mov    %rax,%rdi
  34:	e8 00 00 00 00       	call   39 <TFTPFileServer::~TFTPFileServer()+0x39>
  39:	90                   	nop
  3a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3e:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  45:	00 00 
  47:	74 05                	je     4e <TFTPFileServer::~TFTPFileServer()+0x4e>
  49:	e8 00 00 00 00       	call   4e <TFTPFileServer::~TFTPFileServer()+0x4e>
  4e:	c9                   	leave  
  4f:	c3                   	ret    

Disassembly of section .text._ZN14TFTPFileServerD0Ev:

0000000000000000 <TFTPFileServer::~TFTPFileServer()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	call   2b <TFTPFileServer::~TFTPFileServer()+0x2b>
  2b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	call   37 <TFTPFileServer::~TFTPFileServer()+0x37>
  37:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3b:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  42:	00 00 
  44:	74 05                	je     4b <TFTPFileServer::~TFTPFileServer()+0x4b>
  46:	e8 00 00 00 00       	call   4b <TFTPFileServer::~TFTPFileServer()+0x4b>
  4b:	c9                   	leave  
  4c:	c3                   	ret    

Disassembly of section .text._ZN14TFTPFileServerC2EPhj:

0000000000000000 <TFTPFileServer::TFTPFileServer(unsigned char*, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  14:	89 55 dc             	mov    %edx,-0x24(%rbp)
  17:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1e:	00 00 
  20:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  24:	31 c0                	xor    %eax,%eax
  26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2a:	48 89 c7             	mov    %rax,%rdi
  2d:	e8 00 00 00 00       	call   32 <TFTPFileServer::TFTPFileServer(unsigned char*, unsigned int)+0x32>
  32:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 39 <TFTPFileServer::TFTPFileServer(unsigned char*, unsigned int)+0x39>
  39:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3d:	48 89 10             	mov    %rdx,(%rax)
  40:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  44:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  48:	48 89 50 40          	mov    %rdx,0x40(%rax)
  4c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  50:	8b 55 dc             	mov    -0x24(%rbp),%edx
  53:	89 50 48             	mov    %edx,0x48(%rax)
  56:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5a:	c7 40 4c 00 00 00 00 	movl   $0x0,0x4c(%rax)
  61:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  65:	c6 40 50 00          	movb   $0x0,0x50(%rax)
  69:	90                   	nop
  6a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  6e:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  75:	00 00 
  77:	74 05                	je     7e <TFTPFileServer::TFTPFileServer(unsigned char*, unsigned int)+0x7e>
  79:	e8 00 00 00 00       	call   7e <TFTPFileServer::TFTPFileServer(unsigned char*, unsigned int)+0x7e>
  7e:	c9                   	leave  
  7f:	c3                   	ret    

Disassembly of section .text._ZN14TFTPFileServer4ExitEv:

0000000000000000 <TFTPFileServer::Exit()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	90                   	nop
  20:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  24:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  2b:	00 00 
  2d:	74 05                	je     34 <TFTPFileServer::Exit()+0x34>
  2f:	e8 00 00 00 00       	call   34 <TFTPFileServer::Exit()+0x34>
  34:	c9                   	leave  
  35:	c3                   	ret    

Disassembly of section .text._ZN14TFTPFileServer8FileOpenEPKcN4tftp4ModeE:

0000000000000000 <TFTPFileServer::FileOpen(char const*, tftp::Mode)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  14:	89 55 dc             	mov    %edx,-0x24(%rbp)
  17:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1e:	00 00 
  20:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  24:	31 c0                	xor    %eax,%eax
  26:	b8 00 00 00 00       	mov    $0x0,%eax
  2b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  2f:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  36:	00 00 
  38:	74 05                	je     3f <TFTPFileServer::FileOpen(char const*, tftp::Mode)+0x3f>
  3a:	e8 00 00 00 00       	call   3f <TFTPFileServer::FileOpen(char const*, tftp::Mode)+0x3f>
  3f:	c9                   	leave  
  40:	c3                   	ret    

Disassembly of section .text._ZN14TFTPFileServer10FileCreateEPKcN4tftp4ModeE:

0000000000000000 <TFTPFileServer::FileCreate(char const*, tftp::Mode)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  14:	89 55 dc             	mov    %edx,-0x24(%rbp)
  17:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1e:	00 00 
  20:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  24:	31 c0                	xor    %eax,%eax
  26:	b8 00 00 00 00       	mov    $0x0,%eax
  2b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  2f:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  36:	00 00 
  38:	74 05                	je     3f <TFTPFileServer::FileCreate(char const*, tftp::Mode)+0x3f>
  3a:	e8 00 00 00 00       	call   3f <TFTPFileServer::FileCreate(char const*, tftp::Mode)+0x3f>
  3f:	c9                   	leave  
  40:	c3                   	ret    

Disassembly of section .text._ZN14TFTPFileServer9FileCloseEv:

0000000000000000 <TFTPFileServer::FileClose()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	b8 00 00 00 00       	mov    $0x0,%eax
  24:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  28:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  2f:	00 00 
  31:	74 05                	je     38 <TFTPFileServer::FileClose()+0x38>
  33:	e8 00 00 00 00       	call   38 <TFTPFileServer::FileClose()+0x38>
  38:	c9                   	leave  
  39:	c3                   	ret    

Disassembly of section .text._ZN14TFTPFileServer8FileReadEPvmj:

0000000000000000 <TFTPFileServer::FileRead(void*, unsigned long, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  14:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  18:	89 4d d4             	mov    %ecx,-0x2c(%rbp)
  1b:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  22:	00 00 
  24:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  28:	31 c0                	xor    %eax,%eax
  2a:	b8 00 00 00 00       	mov    $0x0,%eax
  2f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  33:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  3a:	00 00 
  3c:	74 05                	je     43 <TFTPFileServer::FileRead(void*, unsigned long, unsigned int)+0x43>
  3e:	e8 00 00 00 00       	call   43 <TFTPFileServer::FileRead(void*, unsigned long, unsigned int)+0x43>
  43:	c9                   	leave  
  44:	c3                   	ret    

Disassembly of section .text._ZN14TFTPFileServer9FileWriteEPKvmj:

0000000000000000 <TFTPFileServer::FileWrite(void const*, unsigned long, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  14:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  18:	89 4d d4             	mov    %ecx,-0x2c(%rbp)
  1b:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  22:	00 00 
  24:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  28:	31 c0                	xor    %eax,%eax
  2a:	b8 00 00 00 00       	mov    $0x0,%eax
  2f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  33:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  3a:	00 00 
  3c:	74 05                	je     43 <TFTPFileServer::FileWrite(void const*, unsigned long, unsigned int)+0x43>
  3e:	e8 00 00 00 00       	call   43 <TFTPFileServer::FileWrite(void const*, unsigned long, unsigned int)+0x43>
  43:	c9                   	leave  
  44:	c3                   	ret    

get_file_content.o:     file format elf64-x86-64


Disassembly of section .text._Z16get_file_contentPKcPcRN4http12contentTypesE:

0000000000000000 <get_file_content(char const*, char*, http::contentTypes&)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 50          	sub    $0x50,%rsp
   c:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  10:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  14:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  18:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1f:	00 00 
  21:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  25:	31 c0                	xor    %eax,%eax
  27:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 2e <get_file_content(char const*, char*, http::contentTypes&)+0x2e>
  2e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  32:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 39 <get_file_content(char const*, char*, http::contentTypes&)+0x39>
  39:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  3d:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 44 <get_file_content(char const*, char*, http::contentTypes&)+0x44>
  44:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  48:	eb 5d                	jmp    a7 <get_file_content(char const*, char*, http::contentTypes&)+0xa7>
  4a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  52:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  56:	48 8b 10             	mov    (%rax),%rdx
  59:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  5d:	48 89 d6             	mov    %rdx,%rsi
  60:	48 89 c7             	mov    %rax,%rdi
  63:	e8 00 00 00 00       	call   68 <get_file_content(char const*, char*, http::contentTypes&)+0x68>
  68:	85 c0                	test   %eax,%eax
  6a:	75 36                	jne    a2 <get_file_content(char const*, char*, http::contentTypes&)+0xa2>
  6c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  70:	8b 40 10             	mov    0x10(%rax),%eax
  73:	89 c2                	mov    %eax,%edx
  75:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  79:	48 8b 48 08          	mov    0x8(%rax),%rcx
  7d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  81:	48 89 ce             	mov    %rcx,%rsi
  84:	48 89 c7             	mov    %rax,%rdi
  87:	e8 00 00 00 00       	call   8c <get_file_content(char const*, char*, http::contentTypes&)+0x8c>
  8c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  90:	8b 50 14             	mov    0x14(%rax),%edx
  93:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  97:	89 10                	mov    %edx,(%rax)
  99:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  9d:	8b 40 10             	mov    0x10(%rax),%eax
  a0:	eb 14                	jmp    b6 <get_file_content(char const*, char*, http::contentTypes&)+0xb6>
  a2:	48 83 45 d8 18       	addq   $0x18,-0x28(%rbp)
  a7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  ab:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  af:	75 99                	jne    4a <get_file_content(char const*, char*, http::contentTypes&)+0x4a>
  b1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  b6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  ba:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  c1:	00 00 
  c3:	74 05                	je     ca <get_file_content(char const*, char*, http::contentTypes&)+0xca>
  c5:	e8 00 00 00 00       	call   ca <get_file_content(char const*, char*, http::contentTypes&)+0xca>
  ca:	c9                   	leave  
  cb:	c3                   	ret    

httd.o:     file format elf64-x86-64


Disassembly of section .text._ZN7Network3GetEv:

0000000000000000 <Network::Get()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 22 <Network::Get()+0x22>
  22:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  26:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  2d:	00 00 
  2f:	74 05                	je     36 <Network::Get()+0x36>
  31:	e8 00 00 00 00       	call   36 <Network::Get()+0x36>
  36:	c9                   	leave  
  37:	c3                   	ret    

Disassembly of section .text._ZNK12RemoteConfig14IsEnableRebootEv:

0000000000000000 <RemoteConfig::IsEnableReboot() const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	0f b6 40 0e          	movzbl 0xe(%rax),%eax
  27:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  2b:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  32:	00 00 
  34:	74 05                	je     3b <RemoteConfig::IsEnableReboot() const+0x3b>
  36:	e8 00 00 00 00       	call   3b <RemoteConfig::IsEnableReboot() const+0x3b>
  3b:	c9                   	leave  
  3c:	c3                   	ret    

Disassembly of section .text._ZNK12RemoteConfig14IsEnableUptimeEv:

0000000000000000 <RemoteConfig::IsEnableUptime() const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	0f b6 40 0f          	movzbl 0xf(%rax),%eax
  27:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  2b:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  32:	00 00 
  34:	74 05                	je     3b <RemoteConfig::IsEnableUptime() const+0x3b>
  36:	e8 00 00 00 00       	call   3b <RemoteConfig::IsEnableUptime() const+0x3b>
  3b:	c9                   	leave  
  3c:	c3                   	ret    

Disassembly of section .text._ZN12RemoteConfig6RebootEv:

0000000000000000 <RemoteConfig::Reboot()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	call   2b <RemoteConfig::Reboot()+0x2b>
  2b:	90                   	nop
  2c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  30:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  37:	00 00 
  39:	74 05                	je     40 <RemoteConfig::Reboot()+0x40>
  3b:	e8 00 00 00 00       	call   40 <RemoteConfig::Reboot()+0x40>
  40:	c9                   	leave  
  41:	c3                   	ret    

Disassembly of section .text._ZN12RemoteConfig3GetEv:

0000000000000000 <RemoteConfig::Get()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 22 <RemoteConfig::Get()+0x22>
  22:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  26:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  2d:	00 00 
  2f:	74 05                	je     36 <RemoteConfig::Get()+0x36>
  31:	e8 00 00 00 00       	call   36 <RemoteConfig::Get()+0x36>
  36:	c9                   	leave  
  37:	c3                   	ret    

Disassembly of section .text._ZN16PropertiesConfig10EnableJSONEb:

0000000000000000 <PropertiesConfig::EnableJSON(bool)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	89 f8                	mov    %edi,%eax
   e:	88 45 ec             	mov    %al,-0x14(%rbp)
  11:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  18:	00 00 
  1a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1e:	31 c0                	xor    %eax,%eax
  20:	80 7d ec 00          	cmpb   $0x0,-0x14(%rbp)
  24:	74 12                	je     38 <PropertiesConfig::EnableJSON(bool)+0x38>
  26:	0f b6 05 00 00 00 00 	movzbl 0x0(%rip),%eax        # 2d <PropertiesConfig::EnableJSON(bool)+0x2d>
  2d:	83 c8 01             	or     $0x1,%eax
  30:	88 05 00 00 00 00    	mov    %al,0x0(%rip)        # 36 <PropertiesConfig::EnableJSON(bool)+0x36>
  36:	eb 10                	jmp    48 <PropertiesConfig::EnableJSON(bool)+0x48>
  38:	0f b6 05 00 00 00 00 	movzbl 0x0(%rip),%eax        # 3f <PropertiesConfig::EnableJSON(bool)+0x3f>
  3f:	83 e0 fe             	and    $0xfffffffe,%eax
  42:	88 05 00 00 00 00    	mov    %al,0x0(%rip)        # 48 <PropertiesConfig::EnableJSON(bool)+0x48>
  48:	90                   	nop
  49:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4d:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  54:	00 00 
  56:	74 05                	je     5d <PropertiesConfig::EnableJSON(bool)+0x5d>
  58:	e8 00 00 00 00       	call   5d <PropertiesConfig::EnableJSON(bool)+0x5d>
  5d:	c9                   	leave  
  5e:	c3                   	ret    

Disassembly of section .text._ZN16PropertiesConfig6IsJSONEv:

0000000000000000 <PropertiesConfig::IsJSON()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	bf 01 00 00 00       	mov    $0x1,%edi
  20:	e8 00 00 00 00       	call   25 <PropertiesConfig::IsJSON()+0x25>
  25:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  29:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  30:	00 00 
  32:	74 05                	je     39 <PropertiesConfig::IsJSON()+0x39>
  34:	e8 00 00 00 00       	call   39 <PropertiesConfig::IsJSON()+0x39>
  39:	c9                   	leave  
  3a:	c3                   	ret    

Disassembly of section .text._ZN16PropertiesConfig9isMaskSetEh:

0000000000000000 <PropertiesConfig::isMaskSet(unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	89 f8                	mov    %edi,%eax
   e:	88 45 ec             	mov    %al,-0x14(%rbp)
  11:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  18:	00 00 
  1a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1e:	31 c0                	xor    %eax,%eax
  20:	0f b6 05 00 00 00 00 	movzbl 0x0(%rip),%eax        # 27 <PropertiesConfig::isMaskSet(unsigned char)+0x27>
  27:	22 45 ec             	and    -0x14(%rbp),%al
  2a:	38 45 ec             	cmp    %al,-0x14(%rbp)
  2d:	0f 94 c0             	sete   %al
  30:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  34:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  3b:	00 00 
  3d:	74 05                	je     44 <PropertiesConfig::isMaskSet(unsigned char)+0x44>
  3f:	e8 00 00 00 00       	call   44 <PropertiesConfig::isMaskSet(unsigned char)+0x44>
  44:	c9                   	leave  
  45:	c3                   	ret    

Disassembly of section .text._ZN4http8get_uintEPKc:

0000000000000000 <http::get_uint(char const*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	66 c7 45 f4 05 15    	movw   $0x1505,-0xc(%rbp)
  25:	eb 19                	jmp    40 <http::get_uint(char const*)+0x40>
  27:	0f b7 45 f4          	movzwl -0xc(%rbp),%eax
  2b:	c1 e0 05             	shl    $0x5,%eax
  2e:	89 c2                	mov    %eax,%edx
  30:	0f b7 45 f4          	movzwl -0xc(%rbp),%eax
  34:	01 c2                	add    %eax,%edx
  36:	0f b7 45 f6          	movzwl -0xa(%rbp),%eax
  3a:	01 d0                	add    %edx,%eax
  3c:	66 89 45 f4          	mov    %ax,-0xc(%rbp)
  40:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  44:	48 8d 50 01          	lea    0x1(%rax),%rdx
  48:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  4c:	0f b6 00             	movzbl (%rax),%eax
  4f:	66 98                	cbtw   
  51:	66 89 45 f6          	mov    %ax,-0xa(%rbp)
  55:	66 83 7d f6 00       	cmpw   $0x0,-0xa(%rbp)
  5a:	0f 95 c0             	setne  %al
  5d:	84 c0                	test   %al,%al
  5f:	75 c6                	jne    27 <http::get_uint(char const*)+0x27>
  61:	0f b7 45 f4          	movzwl -0xc(%rbp),%eax
  65:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  69:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  70:	00 00 
  72:	74 05                	je     79 <http::get_uint(char const*)+0x79>
  74:	e8 00 00 00 00       	call   79 <http::get_uint(char const*)+0x79>
  79:	c9                   	leave  
  7a:	c3                   	ret    

Disassembly of section .text._ZN8Hardware3GetEv:

0000000000000000 <Hardware::Get()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 22 <Hardware::Get()+0x22>
  22:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  26:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  2d:	00 00 
  2f:	74 05                	je     36 <Hardware::Get()+0x36>
  31:	e8 00 00 00 00       	call   36 <Hardware::Get()+0x36>
  36:	c9                   	leave  
  37:	c3                   	ret    

Disassembly of section .text._ZN7Display8SetSleepEb:

0000000000000000 <Display::SetSleep(bool)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	88 45 e4             	mov    %al,-0x1c(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  28:	48 8b 40 20          	mov    0x20(%rax),%rax
  2c:	48 85 c0             	test   %rax,%rax
  2f:	74 51                	je     82 <Display::SetSleep(bool)+0x82>
  31:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  35:	0f b6 55 e4          	movzbl -0x1c(%rbp),%edx
  39:	88 50 10             	mov    %dl,0x10(%rax)
  3c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40:	48 8b 40 20          	mov    0x20(%rax),%rax
  44:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  48:	48 8b 52 20          	mov    0x20(%rdx),%rdx
  4c:	48 8b 12             	mov    (%rdx),%rdx
  4f:	48 83 c2 50          	add    $0x50,%rdx
  53:	48 8b 0a             	mov    (%rdx),%rcx
  56:	0f b6 55 e4          	movzbl -0x1c(%rbp),%edx
  5a:	89 d6                	mov    %edx,%esi
  5c:	48 89 c7             	mov    %rax,%rdi
  5f:	ff d1                	call   *%rcx
  61:	0f b6 45 e4          	movzbl -0x1c(%rbp),%eax
  65:	83 f0 01             	xor    $0x1,%eax
  68:	84 c0                	test   %al,%al
  6a:	74 17                	je     83 <Display::SetSleep(bool)+0x83>
  6c:	e8 00 00 00 00       	call   71 <Display::SetSleep(bool)+0x71>
  71:	48 89 c7             	mov    %rax,%rdi
  74:	e8 00 00 00 00       	call   79 <Display::SetSleep(bool)+0x79>
  79:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  7d:	89 42 04             	mov    %eax,0x4(%rdx)
  80:	eb 01                	jmp    83 <Display::SetSleep(bool)+0x83>
  82:	90                   	nop
  83:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  87:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  8e:	00 00 
  90:	74 05                	je     97 <Display::SetSleep(bool)+0x97>
  92:	e8 00 00 00 00       	call   97 <Display::SetSleep(bool)+0x97>
  97:	c9                   	leave  
  98:	c3                   	ret    

Disassembly of section .text._ZN7Display3GetEv:

0000000000000000 <Display::Get()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 22 <Display::Get()+0x22>
  22:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  26:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  2d:	00 00 
  2f:	74 05                	je     36 <Display::Get()+0x36>
  31:	e8 00 00 00 00       	call   36 <Display::Get()+0x36>
  36:	c9                   	leave  
  37:	c3                   	ret    

Disassembly of section .text._ZN10HttpDaemonC2Ev:

0000000000000000 <HttpDaemon::HttpDaemon()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 2a <HttpDaemon::HttpDaemon()+0x2a>
  2a:	48 89 10             	mov    %rdx,(%rax)
  2d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  31:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  38:	00 
  39:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3d:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  44:	00 
  45:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  49:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
  50:	00 
  51:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  55:	c7 40 20 00 00 00 00 	movl   $0x0,0x20(%rax)
  5c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  60:	c7 40 24 00 00 00 00 	movl   $0x0,0x24(%rax)
  67:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  6b:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%rax)
  72:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  76:	c7 40 2c ff ff ff ff 	movl   $0xffffffff,0x2c(%rax)
  7d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  81:	c7 40 30 00 00 00 00 	movl   $0x0,0x30(%rax)
  88:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8c:	c7 40 34 08 02 00 00 	movl   $0x208,0x34(%rax)
  93:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  97:	c7 40 38 02 00 00 00 	movl   $0x2,0x38(%rax)
  9e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  a2:	c6 40 3c 00          	movb   $0x0,0x3c(%rax)
  a6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  aa:	c6 40 3d 00          	movb   $0x0,0x3d(%rax)
  ae:	e8 00 00 00 00       	call   b3 <HttpDaemon::HttpDaemon()+0xb3>
  b3:	be 50 00 00 00       	mov    $0x50,%esi
  b8:	48 89 c7             	mov    %rax,%rdi
  bb:	e8 00 00 00 00       	call   c0 <HttpDaemon::HttpDaemon()+0xc0>
  c0:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  c4:	89 42 2c             	mov    %eax,0x2c(%rdx)
  c7:	90                   	nop
  c8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  cc:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  d3:	00 00 
  d5:	74 05                	je     dc <HttpDaemon::HttpDaemon()+0xdc>
  d7:	e8 00 00 00 00       	call   dc <HttpDaemon::HttpDaemon()+0xdc>
  dc:	c9                   	leave  
  dd:	c3                   	ret    

Disassembly of section .text._ZN10HttpDaemon13HandleRequestEj:

0000000000000000 <HttpDaemon::HandleRequest(unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	41 54                	push   %r12
   a:	53                   	push   %rbx
   b:	48 83 ec 30          	sub    $0x30,%rsp
   f:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  13:	89 75 c4             	mov    %esi,-0x3c(%rbp)
  16:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1d:	00 00 
  1f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  23:	31 c0                	xor    %eax,%eax
  25:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 2c <HttpDaemon::HandleRequest(unsigned int)+0x2c>
  2c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  30:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  34:	8b 40 34             	mov    0x34(%rax),%eax
  37:	3d 08 02 00 00       	cmp    $0x208,%eax
  3c:	0f 85 87 00 00 00    	jne    c9 <HttpDaemon::HandleRequest(unsigned int)+0xc9>
  42:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  46:	48 89 c7             	mov    %rax,%rdi
  49:	e8 00 00 00 00       	call   4e <HttpDaemon::HandleRequest(unsigned int)+0x4e>
  4e:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  52:	89 42 34             	mov    %eax,0x34(%rdx)
  55:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  59:	8b 40 34             	mov    0x34(%rax),%eax
  5c:	3d c8 00 00 00       	cmp    $0xc8,%eax
  61:	0f 85 94 00 00 00    	jne    fb <HttpDaemon::HandleRequest(unsigned int)+0xfb>
  67:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  6b:	8b 40 38             	mov    0x38(%rax),%eax
  6e:	85 c0                	test   %eax,%eax
  70:	75 15                	jne    87 <HttpDaemon::HandleRequest(unsigned int)+0x87>
  72:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  76:	48 89 c7             	mov    %rax,%rdi
  79:	e8 00 00 00 00       	call   7e <HttpDaemon::HandleRequest(unsigned int)+0x7e>
  7e:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  82:	89 42 34             	mov    %eax,0x34(%rdx)
  85:	eb 74                	jmp    fb <HttpDaemon::HandleRequest(unsigned int)+0xfb>
  87:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8b:	8b 40 38             	mov    0x38(%rax),%eax
  8e:	83 f8 01             	cmp    $0x1,%eax
  91:	75 68                	jne    fb <HttpDaemon::HandleRequest(unsigned int)+0xfb>
  93:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  97:	be 00 00 00 00       	mov    $0x0,%esi
  9c:	48 89 c7             	mov    %rax,%rdi
  9f:	e8 00 00 00 00       	call   a4 <HttpDaemon::HandleRequest(unsigned int)+0xa4>
  a4:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  a8:	89 42 34             	mov    %eax,0x34(%rdx)
  ab:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  af:	8b 40 34             	mov    0x34(%rax),%eax
  b2:	3d c8 00 00 00       	cmp    $0xc8,%eax
  b7:	75 42                	jne    fb <HttpDaemon::HandleRequest(unsigned int)+0xfb>
  b9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  bd:	8b 40 24             	mov    0x24(%rax),%eax
  c0:	85 c0                	test   %eax,%eax
  c2:	75 37                	jne    fb <HttpDaemon::HandleRequest(unsigned int)+0xfb>
  c4:	e9 45 02 00 00       	jmp    30e <HttpDaemon::HandleRequest(unsigned int)+0x30e>
  c9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  cd:	8b 40 34             	mov    0x34(%rax),%eax
  d0:	3d c8 00 00 00       	cmp    $0xc8,%eax
  d5:	75 24                	jne    fb <HttpDaemon::HandleRequest(unsigned int)+0xfb>
  d7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  db:	8b 40 38             	mov    0x38(%rax),%eax
  de:	83 f8 01             	cmp    $0x1,%eax
  e1:	75 18                	jne    fb <HttpDaemon::HandleRequest(unsigned int)+0xfb>
  e3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  e7:	be 01 00 00 00       	mov    $0x1,%esi
  ec:	48 89 c7             	mov    %rax,%rdi
  ef:	e8 00 00 00 00       	call   f4 <HttpDaemon::HandleRequest(unsigned int)+0xf4>
  f4:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  f8:	89 42 34             	mov    %eax,0x34(%rdx)
  fb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  ff:	8b 40 34             	mov    0x34(%rax),%eax
 102:	3d c8 00 00 00       	cmp    $0xc8,%eax
 107:	0f 84 29 01 00 00    	je     236 <HttpDaemon::HandleRequest(unsigned int)+0x236>
 10d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 111:	8b 40 34             	mov    0x34(%rax),%eax
 114:	3d f9 01 00 00       	cmp    $0x1f9,%eax
 119:	0f 84 ad 00 00 00    	je     1cc <HttpDaemon::HandleRequest(unsigned int)+0x1cc>
 11f:	3d f9 01 00 00       	cmp    $0x1f9,%eax
 124:	0f 8f af 00 00 00    	jg     1d9 <HttpDaemon::HandleRequest(unsigned int)+0x1d9>
 12a:	3d f5 01 00 00       	cmp    $0x1f5,%eax
 12f:	0f 84 8a 00 00 00    	je     1bf <HttpDaemon::HandleRequest(unsigned int)+0x1bf>
 135:	3d f5 01 00 00       	cmp    $0x1f5,%eax
 13a:	0f 8f 99 00 00 00    	jg     1d9 <HttpDaemon::HandleRequest(unsigned int)+0x1d9>
 140:	3d f4 01 00 00       	cmp    $0x1f4,%eax
 145:	74 6b                	je     1b2 <HttpDaemon::HandleRequest(unsigned int)+0x1b2>
 147:	3d f4 01 00 00       	cmp    $0x1f4,%eax
 14c:	0f 8f 87 00 00 00    	jg     1d9 <HttpDaemon::HandleRequest(unsigned int)+0x1d9>
 152:	3d 9e 01 00 00       	cmp    $0x19e,%eax
 157:	74 4c                	je     1a5 <HttpDaemon::HandleRequest(unsigned int)+0x1a5>
 159:	3d 9e 01 00 00       	cmp    $0x19e,%eax
 15e:	7f 79                	jg     1d9 <HttpDaemon::HandleRequest(unsigned int)+0x1d9>
 160:	3d 9d 01 00 00       	cmp    $0x19d,%eax
 165:	74 31                	je     198 <HttpDaemon::HandleRequest(unsigned int)+0x198>
 167:	3d 9d 01 00 00       	cmp    $0x19d,%eax
 16c:	7f 6b                	jg     1d9 <HttpDaemon::HandleRequest(unsigned int)+0x1d9>
 16e:	3d 90 01 00 00       	cmp    $0x190,%eax
 173:	74 09                	je     17e <HttpDaemon::HandleRequest(unsigned int)+0x17e>
 175:	3d 94 01 00 00       	cmp    $0x194,%eax
 17a:	74 0f                	je     18b <HttpDaemon::HandleRequest(unsigned int)+0x18b>
 17c:	eb 5b                	jmp    1d9 <HttpDaemon::HandleRequest(unsigned int)+0x1d9>
 17e:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 185 <HttpDaemon::HandleRequest(unsigned int)+0x185>
 185:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
 189:	eb 5a                	jmp    1e5 <HttpDaemon::HandleRequest(unsigned int)+0x1e5>
 18b:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 192 <HttpDaemon::HandleRequest(unsigned int)+0x192>
 192:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
 196:	eb 4d                	jmp    1e5 <HttpDaemon::HandleRequest(unsigned int)+0x1e5>
 198:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 19f <HttpDaemon::HandleRequest(unsigned int)+0x19f>
 19f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
 1a3:	eb 40                	jmp    1e5 <HttpDaemon::HandleRequest(unsigned int)+0x1e5>
 1a5:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 1ac <HttpDaemon::HandleRequest(unsigned int)+0x1ac>
 1ac:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
 1b0:	eb 33                	jmp    1e5 <HttpDaemon::HandleRequest(unsigned int)+0x1e5>
 1b2:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 1b9 <HttpDaemon::HandleRequest(unsigned int)+0x1b9>
 1b9:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
 1bd:	eb 26                	jmp    1e5 <HttpDaemon::HandleRequest(unsigned int)+0x1e5>
 1bf:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 1c6 <HttpDaemon::HandleRequest(unsigned int)+0x1c6>
 1c6:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
 1ca:	eb 19                	jmp    1e5 <HttpDaemon::HandleRequest(unsigned int)+0x1e5>
 1cc:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 1d3 <HttpDaemon::HandleRequest(unsigned int)+0x1d3>
 1d3:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
 1d7:	eb 0c                	jmp    1e5 <HttpDaemon::HandleRequest(unsigned int)+0x1e5>
 1d9:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 1e0 <HttpDaemon::HandleRequest(unsigned int)+0x1e0>
 1e0:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
 1e4:	90                   	nop
 1e5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 1e9:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 1f0 <HttpDaemon::HandleRequest(unsigned int)+0x1f0>
 1f0:	48 89 10             	mov    %rdx,(%rax)
 1f3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 1f7:	8b 40 34             	mov    0x34(%rax),%eax
 1fa:	89 c1                	mov    %eax,%ecx
 1fc:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
 200:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
 204:	49 89 d1             	mov    %rdx,%r9
 207:	49 89 c0             	mov    %rax,%r8
 20a:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 211 <HttpDaemon::HandleRequest(unsigned int)+0x211>
 211:	48 89 c2             	mov    %rax,%rdx
 214:	be 9f 05 00 00       	mov    $0x59f,%esi
 219:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 220 <HttpDaemon::HandleRequest(unsigned int)+0x220>
 220:	48 89 c7             	mov    %rax,%rdi
 223:	b8 00 00 00 00       	mov    $0x0,%eax
 228:	e8 00 00 00 00       	call   22d <HttpDaemon::HandleRequest(unsigned int)+0x22d>
 22d:	89 c2                	mov    %eax,%edx
 22f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 233:	89 50 20             	mov    %edx,0x20(%rax)
 236:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 23a:	44 8b 60 20          	mov    0x20(%rax),%r12d
 23e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 242:	48 8b 18             	mov    (%rax),%rbx
 245:	e8 00 00 00 00       	call   24a <HttpDaemon::HandleRequest(unsigned int)+0x24a>
 24a:	48 89 c2             	mov    %rax,%rdx
 24d:	48 8d 45 db          	lea    -0x25(%rbp),%rax
 251:	48 89 c6             	mov    %rax,%rsi
 254:	48 89 d7             	mov    %rdx,%rdi
 257:	e8 00 00 00 00       	call   25c <HttpDaemon::HandleRequest(unsigned int)+0x25c>
 25c:	48 89 c2             	mov    %rax,%rdx
 25f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 263:	8b 40 34             	mov    0x34(%rax),%eax
 266:	89 c6                	mov    %eax,%esi
 268:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 26c:	48 8b 40 18          	mov    0x18(%rax),%rax
 270:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
 274:	41 54                	push   %r12
 276:	53                   	push   %rbx
 277:	49 89 d1             	mov    %rdx,%r9
 27a:	49 89 c8             	mov    %rcx,%r8
 27d:	89 f1                	mov    %esi,%ecx
 27f:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 286 <HttpDaemon::HandleRequest(unsigned int)+0x286>
 286:	be 9f 05 00 00       	mov    $0x59f,%esi
 28b:	48 89 c7             	mov    %rax,%rdi
 28e:	b8 00 00 00 00       	mov    $0x0,%eax
 293:	e8 00 00 00 00       	call   298 <HttpDaemon::HandleRequest(unsigned int)+0x298>
 298:	48 83 c4 10          	add    $0x10,%rsp
 29c:	89 45 dc             	mov    %eax,-0x24(%rbp)
 29f:	e8 00 00 00 00       	call   2a4 <HttpDaemon::HandleRequest(unsigned int)+0x2a4>
 2a4:	48 89 c7             	mov    %rax,%rdi
 2a7:	8b 45 dc             	mov    -0x24(%rbp),%eax
 2aa:	0f b7 c8             	movzwl %ax,%ecx
 2ad:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 2b1:	48 8b 50 18          	mov    0x18(%rax),%rdx
 2b5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 2b9:	8b 40 2c             	mov    0x2c(%rax),%eax
 2bc:	8b 75 c4             	mov    -0x3c(%rbp),%esi
 2bf:	41 89 f0             	mov    %esi,%r8d
 2c2:	89 c6                	mov    %eax,%esi
 2c4:	e8 00 00 00 00       	call   2c9 <HttpDaemon::HandleRequest(unsigned int)+0x2c9>
 2c9:	e8 00 00 00 00       	call   2ce <HttpDaemon::HandleRequest(unsigned int)+0x2ce>
 2ce:	48 89 c7             	mov    %rax,%rdi
 2d1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 2d5:	8b 40 20             	mov    0x20(%rax),%eax
 2d8:	0f b7 d0             	movzwl %ax,%edx
 2db:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 2df:	8b 40 2c             	mov    0x2c(%rax),%eax
 2e2:	8b 4d c4             	mov    -0x3c(%rbp),%ecx
 2e5:	41 89 c8             	mov    %ecx,%r8d
 2e8:	89 d1                	mov    %edx,%ecx
 2ea:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 2f1 <HttpDaemon::HandleRequest(unsigned int)+0x2f1>
 2f1:	89 c6                	mov    %eax,%esi
 2f3:	e8 00 00 00 00       	call   2f8 <HttpDaemon::HandleRequest(unsigned int)+0x2f8>
 2f8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 2fc:	c7 40 34 08 02 00 00 	movl   $0x208,0x34(%rax)
 303:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 307:	c7 40 38 02 00 00 00 	movl   $0x2,0x38(%rax)
 30e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 312:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 319:	00 00 
 31b:	74 05                	je     322 <HttpDaemon::HandleRequest(unsigned int)+0x322>
 31d:	e8 00 00 00 00       	call   322 <HttpDaemon::HandleRequest(unsigned int)+0x322>
 322:	48 8d 65 f0          	lea    -0x10(%rbp),%rsp
 326:	5b                   	pop    %rbx
 327:	41 5c                	pop    %r12
 329:	5d                   	pop    %rbp
 32a:	c3                   	ret    

Disassembly of section .text._ZN10HttpDaemon12ParseRequestEv:

0000000000000000 <HttpDaemon::ParseRequest()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  23:	48 8b 40 18          	mov    0x18(%rax),%rax
  27:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  2b:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  32:	c7 45 e8 08 02 00 00 	movl   $0x208,-0x18(%rbp)
  39:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  3d:	c6 40 3c 00          	movb   $0x0,0x3c(%rax)
  41:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  45:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%rax)
  4c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  50:	c7 40 24 00 00 00 00 	movl   $0x0,0x24(%rax)
  57:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  5e:	e9 08 01 00 00       	jmp    16b <HttpDaemon::ParseRequest()+0x16b>
  63:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  67:	48 8b 50 18          	mov    0x18(%rax),%rdx
  6b:	8b 45 ec             	mov    -0x14(%rbp),%eax
  6e:	48 01 d0             	add    %rdx,%rax
  71:	0f b6 00             	movzbl (%rax),%eax
  74:	3c 0a                	cmp    $0xa,%al
  76:	0f 85 eb 00 00 00    	jne    167 <HttpDaemon::ParseRequest()+0x167>
  7c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80:	48 8b 50 18          	mov    0x18(%rax),%rdx
  84:	8b 45 ec             	mov    -0x14(%rbp),%eax
  87:	83 e8 01             	sub    $0x1,%eax
  8a:	89 c0                	mov    %eax,%eax
  8c:	48 01 d0             	add    %rdx,%rax
  8f:	c6 00 00             	movb   $0x0,(%rax)
  92:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  95:	8d 50 01             	lea    0x1(%rax),%edx
  98:	89 55 e4             	mov    %edx,-0x1c(%rbp)
  9b:	85 c0                	test   %eax,%eax
  9d:	0f 94 c0             	sete   %al
  a0:	84 c0                	test   %al,%al
  a2:	74 1b                	je     bf <HttpDaemon::ParseRequest()+0xbf>
  a4:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  a8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  ac:	48 89 d6             	mov    %rdx,%rsi
  af:	48 89 c7             	mov    %rax,%rdi
  b2:	e8 00 00 00 00       	call   b7 <HttpDaemon::ParseRequest()+0xb7>
  b7:	89 45 e8             	mov    %eax,-0x18(%rbp)
  ba:	e9 84 00 00 00       	jmp    143 <HttpDaemon::ParseRequest()+0x143>
  bf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  c3:	0f b6 00             	movzbl (%rax),%eax
  c6:	84 c0                	test   %al,%al
  c8:	75 63                	jne    12d <HttpDaemon::ParseRequest()+0x12d>
  ca:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  ce:	8b 40 30             	mov    0x30(%rax),%eax
  d1:	89 c2                	mov    %eax,%edx
  d3:	8b 45 ec             	mov    -0x14(%rbp),%eax
  d6:	89 c1                	mov    %eax,%ecx
  d8:	89 d0                	mov    %edx,%eax
  da:	29 c8                	sub    %ecx,%eax
  dc:	83 e8 01             	sub    $0x1,%eax
  df:	0f b7 d0             	movzwl %ax,%edx
  e2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  e6:	89 50 24             	mov    %edx,0x24(%rax)
  e9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  ed:	8b 40 24             	mov    0x24(%rax),%eax
  f0:	85 c0                	test   %eax,%eax
  f2:	74 32                	je     126 <HttpDaemon::ParseRequest()+0x126>
  f4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  f8:	48 8b 50 18          	mov    0x18(%rax),%rdx
  fc:	8b 45 ec             	mov    -0x14(%rbp),%eax
  ff:	83 c0 01             	add    $0x1,%eax
 102:	89 c0                	mov    %eax,%eax
 104:	48 01 c2             	add    %rax,%rdx
 107:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 10b:	48 89 50 10          	mov    %rdx,0x10(%rax)
 10f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 113:	48 8b 50 10          	mov    0x10(%rax),%rdx
 117:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 11b:	8b 40 24             	mov    0x24(%rax),%eax
 11e:	89 c0                	mov    %eax,%eax
 120:	48 01 d0             	add    %rdx,%rax
 123:	c6 00 00             	movb   $0x0,(%rax)
 126:	b8 c8 00 00 00       	mov    $0xc8,%eax
 12b:	eb 53                	jmp    180 <HttpDaemon::ParseRequest()+0x180>
 12d:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
 131:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 135:	48 89 d6             	mov    %rdx,%rsi
 138:	48 89 c7             	mov    %rax,%rdi
 13b:	e8 00 00 00 00       	call   140 <HttpDaemon::ParseRequest()+0x140>
 140:	89 45 e8             	mov    %eax,-0x18(%rbp)
 143:	81 7d e8 c8 00 00 00 	cmpl   $0xc8,-0x18(%rbp)
 14a:	74 05                	je     151 <HttpDaemon::ParseRequest()+0x151>
 14c:	8b 45 e8             	mov    -0x18(%rbp),%eax
 14f:	eb 2f                	jmp    180 <HttpDaemon::ParseRequest()+0x180>
 151:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 155:	48 8b 50 18          	mov    0x18(%rax),%rdx
 159:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
 15d:	8b 45 ec             	mov    -0x14(%rbp),%eax
 160:	48 01 d0             	add    %rdx,%rax
 163:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
 167:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
 16b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 16f:	8b 40 30             	mov    0x30(%rax),%eax
 172:	39 45 ec             	cmp    %eax,-0x14(%rbp)
 175:	0f 82 e8 fe ff ff    	jb     63 <HttpDaemon::ParseRequest()+0x63>
 17b:	b8 c8 00 00 00       	mov    $0xc8,%eax
 180:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
 184:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
 18b:	00 00 
 18d:	74 05                	je     194 <HttpDaemon::ParseRequest()+0x194>
 18f:	e8 00 00 00 00       	call   194 <HttpDaemon::ParseRequest()+0x194>
 194:	c9                   	leave  
 195:	c3                   	ret    

Disassembly of section .text._ZN10HttpDaemon11ParseMethodEPc:

0000000000000000 <HttpDaemon::ParseMethod(char*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  27:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 2e <HttpDaemon::ParseMethod(char*)+0x2e>
  2e:	48 89 d6             	mov    %rdx,%rsi
  31:	48 89 c7             	mov    %rax,%rdi
  34:	e8 00 00 00 00       	call   39 <HttpDaemon::ParseMethod(char*)+0x39>
  39:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  3d:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  42:	0f 94 c0             	sete   %al
  45:	84 c0                	test   %al,%al
  47:	74 0a                	je     53 <HttpDaemon::ParseMethod(char*)+0x53>
  49:	b8 f5 01 00 00       	mov    $0x1f5,%eax
  4e:	e9 33 01 00 00       	jmp    186 <HttpDaemon::ParseMethod(char*)+0x186>
  53:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  57:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 5e <HttpDaemon::ParseMethod(char*)+0x5e>
  5e:	48 89 d6             	mov    %rdx,%rsi
  61:	48 89 c7             	mov    %rax,%rdi
  64:	e8 00 00 00 00       	call   69 <HttpDaemon::ParseMethod(char*)+0x69>
  69:	85 c0                	test   %eax,%eax
  6b:	75 0d                	jne    7a <HttpDaemon::ParseMethod(char*)+0x7a>
  6d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  71:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%rax)
  78:	eb 31                	jmp    ab <HttpDaemon::ParseMethod(char*)+0xab>
  7a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  7e:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 85 <HttpDaemon::ParseMethod(char*)+0x85>
  85:	48 89 d6             	mov    %rdx,%rsi
  88:	48 89 c7             	mov    %rax,%rdi
  8b:	e8 00 00 00 00       	call   90 <HttpDaemon::ParseMethod(char*)+0x90>
  90:	85 c0                	test   %eax,%eax
  92:	75 0d                	jne    a1 <HttpDaemon::ParseMethod(char*)+0xa1>
  94:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  98:	c7 40 38 01 00 00 00 	movl   $0x1,0x38(%rax)
  9f:	eb 0a                	jmp    ab <HttpDaemon::ParseMethod(char*)+0xab>
  a1:	b8 f5 01 00 00       	mov    $0x1f5,%eax
  a6:	e9 db 00 00 00       	jmp    186 <HttpDaemon::ParseMethod(char*)+0x186>
  ab:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # b2 <HttpDaemon::ParseMethod(char*)+0xb2>
  b2:	48 89 c6             	mov    %rax,%rsi
  b5:	bf 00 00 00 00       	mov    $0x0,%edi
  ba:	e8 00 00 00 00       	call   bf <HttpDaemon::ParseMethod(char*)+0xbf>
  bf:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  c3:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  c8:	0f 94 c0             	sete   %al
  cb:	84 c0                	test   %al,%al
  cd:	74 0a                	je     d9 <HttpDaemon::ParseMethod(char*)+0xd9>
  cf:	b8 90 01 00 00       	mov    $0x190,%eax
  d4:	e9 ad 00 00 00       	jmp    186 <HttpDaemon::ParseMethod(char*)+0x186>
  d9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  dd:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  e1:	48 89 50 08          	mov    %rdx,0x8(%rax)
  e5:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # ec <HttpDaemon::ParseMethod(char*)+0xec>
  ec:	48 89 c6             	mov    %rax,%rsi
  ef:	bf 00 00 00 00       	mov    $0x0,%edi
  f4:	e8 00 00 00 00       	call   f9 <HttpDaemon::ParseMethod(char*)+0xf9>
  f9:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  fd:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
 102:	74 1a                	je     11e <HttpDaemon::ParseMethod(char*)+0x11e>
 104:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 108:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 10f <HttpDaemon::ParseMethod(char*)+0x10f>
 10f:	48 89 d6             	mov    %rdx,%rsi
 112:	48 89 c7             	mov    %rax,%rdi
 115:	e8 00 00 00 00       	call   11a <HttpDaemon::ParseMethod(char*)+0x11a>
 11a:	85 c0                	test   %eax,%eax
 11c:	74 07                	je     125 <HttpDaemon::ParseMethod(char*)+0x125>
 11e:	b8 01 00 00 00       	mov    $0x1,%eax
 123:	eb 05                	jmp    12a <HttpDaemon::ParseMethod(char*)+0x12a>
 125:	b8 00 00 00 00       	mov    $0x0,%eax
 12a:	84 c0                	test   %al,%al
 12c:	74 07                	je     135 <HttpDaemon::ParseMethod(char*)+0x135>
 12e:	b8 90 01 00 00       	mov    $0x190,%eax
 133:	eb 51                	jmp    186 <HttpDaemon::ParseMethod(char*)+0x186>
 135:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 13c <HttpDaemon::ParseMethod(char*)+0x13c>
 13c:	48 89 c6             	mov    %rax,%rsi
 13f:	bf 00 00 00 00       	mov    $0x0,%edi
 144:	e8 00 00 00 00       	call   149 <HttpDaemon::ParseMethod(char*)+0x149>
 149:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
 14d:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
 152:	0f 94 c0             	sete   %al
 155:	84 c0                	test   %al,%al
 157:	74 07                	je     160 <HttpDaemon::ParseMethod(char*)+0x160>
 159:	b8 90 01 00 00       	mov    $0x190,%eax
 15e:	eb 26                	jmp    186 <HttpDaemon::ParseMethod(char*)+0x186>
 160:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 164:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 16b <HttpDaemon::ParseMethod(char*)+0x16b>
 16b:	48 89 d6             	mov    %rdx,%rsi
 16e:	48 89 c7             	mov    %rax,%rdi
 171:	e8 00 00 00 00       	call   176 <HttpDaemon::ParseMethod(char*)+0x176>
 176:	85 c0                	test   %eax,%eax
 178:	74 07                	je     181 <HttpDaemon::ParseMethod(char*)+0x181>
 17a:	b8 f9 01 00 00       	mov    $0x1f9,%eax
 17f:	eb 05                	jmp    186 <HttpDaemon::ParseMethod(char*)+0x186>
 181:	b8 c8 00 00 00       	mov    $0xc8,%eax
 186:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
 18a:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
 191:	00 00 
 193:	74 05                	je     19a <HttpDaemon::ParseMethod(char*)+0x19a>
 195:	e8 00 00 00 00       	call   19a <HttpDaemon::ParseMethod(char*)+0x19a>
 19a:	c9                   	leave  
 19b:	c3                   	ret    

Disassembly of section .text._ZN10HttpDaemon16ParseHeaderFieldEPc:

0000000000000000 <HttpDaemon::ParseHeaderField(char*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  27:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 2e <HttpDaemon::ParseHeaderField(char*)+0x2e>
  2e:	48 89 d6             	mov    %rdx,%rsi
  31:	48 89 c7             	mov    %rax,%rdi
  34:	e8 00 00 00 00       	call   39 <HttpDaemon::ParseHeaderField(char*)+0x39>
  39:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  3d:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  42:	0f 94 c0             	sete   %al
  45:	84 c0                	test   %al,%al
  47:	74 0a                	je     53 <HttpDaemon::ParseHeaderField(char*)+0x53>
  49:	b8 90 01 00 00       	mov    $0x190,%eax
  4e:	e9 29 01 00 00       	jmp    17c <HttpDaemon::ParseHeaderField(char*)+0x17c>
  53:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  57:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 5e <HttpDaemon::ParseHeaderField(char*)+0x5e>
  5e:	48 89 d6             	mov    %rdx,%rsi
  61:	48 89 c7             	mov    %rax,%rdi
  64:	e8 00 00 00 00       	call   69 <HttpDaemon::ParseHeaderField(char*)+0x69>
  69:	85 c0                	test   %eax,%eax
  6b:	75 59                	jne    c6 <HttpDaemon::ParseHeaderField(char*)+0xc6>
  6d:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 74 <HttpDaemon::ParseHeaderField(char*)+0x74>
  74:	48 89 c6             	mov    %rax,%rsi
  77:	bf 00 00 00 00       	mov    $0x0,%edi
  7c:	e8 00 00 00 00       	call   81 <HttpDaemon::ParseHeaderField(char*)+0x81>
  81:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  85:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  8a:	0f 94 c0             	sete   %al
  8d:	84 c0                	test   %al,%al
  8f:	74 0a                	je     9b <HttpDaemon::ParseHeaderField(char*)+0x9b>
  91:	b8 90 01 00 00       	mov    $0x190,%eax
  96:	e9 e1 00 00 00       	jmp    17c <HttpDaemon::ParseHeaderField(char*)+0x17c>
  9b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  9f:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # a6 <HttpDaemon::ParseHeaderField(char*)+0xa6>
  a6:	48 89 d6             	mov    %rdx,%rsi
  a9:	48 89 c7             	mov    %rax,%rdi
  ac:	e8 00 00 00 00       	call   b1 <HttpDaemon::ParseHeaderField(char*)+0xb1>
  b1:	85 c0                	test   %eax,%eax
  b3:	0f 85 be 00 00 00    	jne    177 <HttpDaemon::ParseHeaderField(char*)+0x177>
  b9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  bd:	c6 40 3c 01          	movb   $0x1,0x3c(%rax)
  c1:	e9 b1 00 00 00       	jmp    177 <HttpDaemon::ParseHeaderField(char*)+0x177>
  c6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  ca:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # d1 <HttpDaemon::ParseHeaderField(char*)+0xd1>
  d1:	48 89 d6             	mov    %rdx,%rsi
  d4:	48 89 c7             	mov    %rax,%rdi
  d7:	e8 00 00 00 00       	call   dc <HttpDaemon::ParseHeaderField(char*)+0xdc>
  dc:	85 c0                	test   %eax,%eax
  de:	0f 85 93 00 00 00    	jne    177 <HttpDaemon::ParseHeaderField(char*)+0x177>
  e4:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # eb <HttpDaemon::ParseHeaderField(char*)+0xeb>
  eb:	48 89 c6             	mov    %rax,%rsi
  ee:	bf 00 00 00 00       	mov    $0x0,%edi
  f3:	e8 00 00 00 00       	call   f8 <HttpDaemon::ParseHeaderField(char*)+0xf8>
  f8:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  fc:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
 101:	0f 94 c0             	sete   %al
 104:	84 c0                	test   %al,%al
 106:	74 07                	je     10f <HttpDaemon::ParseHeaderField(char*)+0x10f>
 108:	b8 90 01 00 00       	mov    $0x190,%eax
 10d:	eb 6d                	jmp    17c <HttpDaemon::ParseHeaderField(char*)+0x17c>
 10f:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%rbp)
 116:	eb 4a                	jmp    162 <HttpDaemon::ParseHeaderField(char*)+0x162>
 118:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 11c:	48 8d 50 01          	lea    0x1(%rax),%rdx
 120:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
 124:	0f b6 00             	movzbl (%rax),%eax
 127:	0f be c0             	movsbl %al,%eax
 12a:	83 e8 30             	sub    $0x30,%eax
 12d:	89 45 ec             	mov    %eax,-0x14(%rbp)
 130:	83 7d ec 09          	cmpl   $0x9,-0x14(%rbp)
 134:	76 07                	jbe    13d <HttpDaemon::ParseHeaderField(char*)+0x13d>
 136:	b8 90 01 00 00       	mov    $0x190,%eax
 13b:	eb 3f                	jmp    17c <HttpDaemon::ParseHeaderField(char*)+0x17c>
 13d:	8b 55 e8             	mov    -0x18(%rbp),%edx
 140:	89 d0                	mov    %edx,%eax
 142:	c1 e0 02             	shl    $0x2,%eax
 145:	01 d0                	add    %edx,%eax
 147:	01 c0                	add    %eax,%eax
 149:	89 45 e8             	mov    %eax,-0x18(%rbp)
 14c:	8b 45 ec             	mov    -0x14(%rbp),%eax
 14f:	01 45 e8             	add    %eax,-0x18(%rbp)
 152:	81 7d e8 a0 05 00 00 	cmpl   $0x5a0,-0x18(%rbp)
 159:	76 07                	jbe    162 <HttpDaemon::ParseHeaderField(char*)+0x162>
 15b:	b8 9d 01 00 00       	mov    $0x19d,%eax
 160:	eb 1a                	jmp    17c <HttpDaemon::ParseHeaderField(char*)+0x17c>
 162:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 166:	0f b6 00             	movzbl (%rax),%eax
 169:	84 c0                	test   %al,%al
 16b:	75 ab                	jne    118 <HttpDaemon::ParseHeaderField(char*)+0x118>
 16d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 171:	8b 55 e8             	mov    -0x18(%rbp),%edx
 174:	89 50 28             	mov    %edx,0x28(%rax)
 177:	b8 c8 00 00 00       	mov    $0xc8,%eax
 17c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
 180:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
 187:	00 00 
 189:	74 05                	je     190 <HttpDaemon::ParseHeaderField(char*)+0x190>
 18b:	e8 00 00 00 00       	call   190 <HttpDaemon::ParseHeaderField(char*)+0x190>
 190:	c9                   	leave  
 191:	c3                   	ret    

Disassembly of section .text._ZN10HttpDaemon9HandleGetEv:

0000000000000000 <HttpDaemon::HandleGet()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  26:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  2a:	48 8b 40 08          	mov    0x8(%rax),%rax
  2e:	ba 06 00 00 00       	mov    $0x6,%edx
  33:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 3a <HttpDaemon::HandleGet()+0x3a>
  3a:	48 89 ce             	mov    %rcx,%rsi
  3d:	48 89 c7             	mov    %rax,%rdi
  40:	e8 00 00 00 00       	call   45 <HttpDaemon::HandleGet()+0x45>
  45:	85 c0                	test   %eax,%eax
  47:	0f 85 4b 01 00 00    	jne    198 <HttpDaemon::HandleGet()+0x198>
  4d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  51:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 58 <HttpDaemon::HandleGet()+0x58>
  58:	48 89 10             	mov    %rdx,(%rax)
  5b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  5f:	48 8b 40 08          	mov    0x8(%rax),%rax
  63:	48 83 c0 06          	add    $0x6,%rax
  67:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  6b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  6f:	48 89 c7             	mov    %rax,%rdi
  72:	e8 00 00 00 00       	call   77 <HttpDaemon::HandleGet()+0x77>
  77:	0f b7 c0             	movzwl %ax,%eax
  7a:	3d d9 b7 00 00       	cmp    $0xb7d9,%eax
  7f:	0f 84 87 00 00 00    	je     10c <HttpDaemon::HandleGet()+0x10c>
  85:	3d d9 b7 00 00       	cmp    $0xb7d9,%eax
  8a:	0f 8f f7 00 00 00    	jg     187 <HttpDaemon::HandleGet()+0x187>
  90:	3d 4b 6c 00 00       	cmp    $0x6c4b,%eax
  95:	74 56                	je     ed <HttpDaemon::HandleGet()+0xed>
  97:	3d 4b 6c 00 00       	cmp    $0x6c4b,%eax
  9c:	0f 8f e5 00 00 00    	jg     187 <HttpDaemon::HandleGet()+0x187>
  a2:	3d 9b 47 00 00       	cmp    $0x479b,%eax
  a7:	0f 84 9c 00 00 00    	je     149 <HttpDaemon::HandleGet()+0x149>
  ad:	3d 9b 47 00 00       	cmp    $0x479b,%eax
  b2:	0f 8f cf 00 00 00    	jg     187 <HttpDaemon::HandleGet()+0x187>
  b8:	3d fa 11 00 00       	cmp    $0x11fa,%eax
  bd:	0f 84 a5 00 00 00    	je     168 <HttpDaemon::HandleGet()+0x168>
  c3:	3d 61 16 00 00       	cmp    $0x1661,%eax
  c8:	0f 85 b9 00 00 00    	jne    187 <HttpDaemon::HandleGet()+0x187>
  ce:	be a0 05 00 00       	mov    $0x5a0,%esi
  d3:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # da <HttpDaemon::HandleGet()+0xda>
  da:	48 89 c7             	mov    %rax,%rdi
  dd:	e8 00 00 00 00       	call   e2 <HttpDaemon::HandleGet()+0xe2>
  e2:	0f b7 c0             	movzwl %ax,%eax
  e5:	89 45 ec             	mov    %eax,-0x14(%rbp)
  e8:	e9 50 01 00 00       	jmp    23d <HttpDaemon::HandleGet()+0x23d>
  ed:	be a0 05 00 00       	mov    $0x5a0,%esi
  f2:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # f9 <HttpDaemon::HandleGet()+0xf9>
  f9:	48 89 c7             	mov    %rax,%rdi
  fc:	e8 00 00 00 00       	call   101 <HttpDaemon::HandleGet()+0x101>
 101:	0f b7 c0             	movzwl %ax,%eax
 104:	89 45 ec             	mov    %eax,-0x14(%rbp)
 107:	e9 31 01 00 00       	jmp    23d <HttpDaemon::HandleGet()+0x23d>
 10c:	e8 00 00 00 00       	call   111 <HttpDaemon::HandleGet()+0x111>
 111:	48 89 c7             	mov    %rax,%rdi
 114:	e8 00 00 00 00       	call   119 <HttpDaemon::HandleGet()+0x119>
 119:	83 f0 01             	xor    $0x1,%eax
 11c:	84 c0                	test   %al,%al
 11e:	74 0a                	je     12a <HttpDaemon::HandleGet()+0x12a>
 120:	b8 90 01 00 00       	mov    $0x190,%eax
 125:	e9 32 01 00 00       	jmp    25c <HttpDaemon::HandleGet()+0x25c>
 12a:	be a0 05 00 00       	mov    $0x5a0,%esi
 12f:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 136 <HttpDaemon::HandleGet()+0x136>
 136:	48 89 c7             	mov    %rax,%rdi
 139:	e8 00 00 00 00       	call   13e <HttpDaemon::HandleGet()+0x13e>
 13e:	0f b7 c0             	movzwl %ax,%eax
 141:	89 45 ec             	mov    %eax,-0x14(%rbp)
 144:	e9 f4 00 00 00       	jmp    23d <HttpDaemon::HandleGet()+0x23d>
 149:	be a0 05 00 00       	mov    $0x5a0,%esi
 14e:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 155 <HttpDaemon::HandleGet()+0x155>
 155:	48 89 c7             	mov    %rax,%rdi
 158:	e8 00 00 00 00       	call   15d <HttpDaemon::HandleGet()+0x15d>
 15d:	0f b7 c0             	movzwl %ax,%eax
 160:	89 45 ec             	mov    %eax,-0x14(%rbp)
 163:	e9 d5 00 00 00       	jmp    23d <HttpDaemon::HandleGet()+0x23d>
 168:	be a0 05 00 00       	mov    $0x5a0,%esi
 16d:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 174 <HttpDaemon::HandleGet()+0x174>
 174:	48 89 c7             	mov    %rax,%rdi
 177:	e8 00 00 00 00       	call   17c <HttpDaemon::HandleGet()+0x17c>
 17c:	0f b7 c0             	movzwl %ax,%eax
 17f:	89 45 ec             	mov    %eax,-0x14(%rbp)
 182:	e9 b6 00 00 00       	jmp    23d <HttpDaemon::HandleGet()+0x23d>
 187:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 18b:	48 89 c7             	mov    %rax,%rdi
 18e:	e8 00 00 00 00       	call   193 <HttpDaemon::HandleGet()+0x193>
 193:	e9 c4 00 00 00       	jmp    25c <HttpDaemon::HandleGet()+0x25c>
 198:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 19c:	48 8b 40 08          	mov    0x8(%rax),%rax
 1a0:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 1a7 <HttpDaemon::HandleGet()+0x1a7>
 1a7:	48 89 d6             	mov    %rdx,%rsi
 1aa:	48 89 c7             	mov    %rax,%rdi
 1ad:	e8 00 00 00 00       	call   1b2 <HttpDaemon::HandleGet()+0x1b2>
 1b2:	85 c0                	test   %eax,%eax
 1b4:	75 42                	jne    1f8 <HttpDaemon::HandleGet()+0x1f8>
 1b6:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
 1ba:	48 89 c2             	mov    %rax,%rdx
 1bd:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 1c4 <HttpDaemon::HandleGet()+0x1c4>
 1c4:	48 89 c6             	mov    %rax,%rsi
 1c7:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 1ce <HttpDaemon::HandleGet()+0x1ce>
 1ce:	48 89 c7             	mov    %rax,%rdi
 1d1:	e8 00 00 00 00       	call   1d6 <HttpDaemon::HandleGet()+0x1d6>
 1d6:	89 45 ec             	mov    %eax,-0x14(%rbp)
 1d9:	8b 45 e8             	mov    -0x18(%rbp),%eax
 1dc:	89 c0                	mov    %eax,%eax
 1de:	48 c1 e0 05          	shl    $0x5,%rax
 1e2:	48 89 c2             	mov    %rax,%rdx
 1e5:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 1ec <HttpDaemon::HandleGet()+0x1ec>
 1ec:	48 01 c2             	add    %rax,%rdx
 1ef:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 1f3:	48 89 10             	mov    %rdx,(%rax)
 1f6:	eb 45                	jmp    23d <HttpDaemon::HandleGet()+0x23d>
 1f8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 1fc:	48 8b 40 08          	mov    0x8(%rax),%rax
 200:	48 8d 48 01          	lea    0x1(%rax),%rcx
 204:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
 208:	48 89 c2             	mov    %rax,%rdx
 20b:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 212 <HttpDaemon::HandleGet()+0x212>
 212:	48 89 c6             	mov    %rax,%rsi
 215:	48 89 cf             	mov    %rcx,%rdi
 218:	e8 00 00 00 00       	call   21d <HttpDaemon::HandleGet()+0x21d>
 21d:	89 45 ec             	mov    %eax,-0x14(%rbp)
 220:	8b 45 e8             	mov    -0x18(%rbp),%eax
 223:	89 c0                	mov    %eax,%eax
 225:	48 c1 e0 05          	shl    $0x5,%rax
 229:	48 89 c2             	mov    %rax,%rdx
 22c:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 233 <HttpDaemon::HandleGet()+0x233>
 233:	48 01 c2             	add    %rax,%rdx
 236:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 23a:	48 89 10             	mov    %rdx,(%rax)
 23d:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
 241:	7f 07                	jg     24a <HttpDaemon::HandleGet()+0x24a>
 243:	b8 94 01 00 00       	mov    $0x194,%eax
 248:	eb 12                	jmp    25c <HttpDaemon::HandleGet()+0x25c>
 24a:	8b 45 ec             	mov    -0x14(%rbp),%eax
 24d:	0f b7 d0             	movzwl %ax,%edx
 250:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 254:	89 50 20             	mov    %edx,0x20(%rax)
 257:	b8 c8 00 00 00       	mov    $0xc8,%eax
 25c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
 260:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
 267:	00 00 
 269:	74 05                	je     270 <HttpDaemon::HandleGet()+0x270>
 26b:	e8 00 00 00 00       	call   270 <HttpDaemon::HandleGet()+0x270>
 270:	c9                   	leave  
 271:	c3                   	ret    

Disassembly of section .text._ZN10HttpDaemon12HandleGetTxtEv:

0000000000000000 <HttpDaemon::HandleGetTxt()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  23:	48 8b 40 08          	mov    0x8(%rax),%rax
  27:	48 83 c0 06          	add    $0x6,%rax
  2b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  2f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  33:	48 89 c7             	mov    %rax,%rdi
  36:	e8 00 00 00 00       	call   3b <HttpDaemon::HandleGetTxt()+0x3b>
  3b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  3f:	48 83 7d f0 04       	cmpq   $0x4,-0x10(%rbp)
  44:	77 0a                	ja     50 <HttpDaemon::HandleGetTxt()+0x50>
  46:	b8 90 01 00 00       	mov    $0x190,%eax
  4b:	e9 a0 00 00 00       	jmp    f0 <HttpDaemon::HandleGetTxt()+0xf0>
  50:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  54:	48 8d 50 fc          	lea    -0x4(%rax),%rdx
  58:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5c:	48 01 d0             	add    %rdx,%rax
  5f:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 66 <HttpDaemon::HandleGetTxt()+0x66>
  66:	48 89 d6             	mov    %rdx,%rsi
  69:	48 89 c7             	mov    %rax,%rdi
  6c:	e8 00 00 00 00       	call   71 <HttpDaemon::HandleGetTxt()+0x71>
  71:	85 c0                	test   %eax,%eax
  73:	74 07                	je     7c <HttpDaemon::HandleGetTxt()+0x7c>
  75:	b8 90 01 00 00       	mov    $0x190,%eax
  7a:	eb 74                	jmp    f0 <HttpDaemon::HandleGetTxt()+0xf0>
  7c:	e8 00 00 00 00       	call   81 <HttpDaemon::HandleGetTxt()+0x81>
  81:	88 45 e3             	mov    %al,-0x1d(%rbp)
  84:	bf 01 00 00 00       	mov    $0x1,%edi
  89:	e8 00 00 00 00       	call   8e <HttpDaemon::HandleGetTxt()+0x8e>
  8e:	e8 00 00 00 00       	call   93 <HttpDaemon::HandleGetTxt()+0x93>
  93:	48 89 c1             	mov    %rax,%rcx
  96:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  9a:	ba 9b 05 00 00       	mov    $0x59b,%edx
  9f:	48 89 c6             	mov    %rax,%rsi
  a2:	48 89 cf             	mov    %rcx,%rdi
  a5:	e8 00 00 00 00       	call   aa <HttpDaemon::HandleGetTxt()+0xaa>
  aa:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  ad:	0f b6 45 e3          	movzbl -0x1d(%rbp),%eax
  b1:	89 c7                	mov    %eax,%edi
  b3:	e8 00 00 00 00       	call   b8 <HttpDaemon::HandleGetTxt()+0xb8>
  b8:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  bc:	75 07                	jne    c5 <HttpDaemon::HandleGetTxt()+0xc5>
  be:	b8 90 01 00 00       	mov    $0x190,%eax
  c3:	eb 2b                	jmp    f0 <HttpDaemon::HandleGetTxt()+0xf0>
  c5:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  c8:	0f b7 d0             	movzwl %ax,%edx
  cb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  cf:	89 50 20             	mov    %edx,0x20(%rax)
  d2:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  d5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  d9:	48 89 c6             	mov    %rax,%rsi
  dc:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # e3 <HttpDaemon::HandleGetTxt()+0xe3>
  e3:	48 89 c7             	mov    %rax,%rdi
  e6:	e8 00 00 00 00       	call   eb <HttpDaemon::HandleGetTxt()+0xeb>
  eb:	b8 c8 00 00 00       	mov    $0xc8,%eax
  f0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  f4:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  fb:	00 00 
  fd:	74 05                	je     104 <HttpDaemon::HandleGetTxt()+0x104>
  ff:	e8 00 00 00 00       	call   104 <HttpDaemon::HandleGetTxt()+0x104>
 104:	c9                   	leave  
 105:	c3                   	ret    

Disassembly of section .text._ZN10HttpDaemon10HandlePostEb:

0000000000000000 <HttpDaemon::HandlePost(bool)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	88 45 e4             	mov    %al,-0x1c(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	0f b6 45 e4          	movzbl -0x1c(%rbp),%eax
  28:	83 f0 01             	xor    $0x1,%eax
  2b:	84 c0                	test   %al,%al
  2d:	74 76                	je     a5 <HttpDaemon::HandlePost(bool)+0xa5>
  2f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  33:	0f b6 40 3c          	movzbl 0x3c(%rax),%eax
  37:	83 f0 01             	xor    $0x1,%eax
  3a:	84 c0                	test   %al,%al
  3c:	74 0a                	je     48 <HttpDaemon::HandlePost(bool)+0x48>
  3e:	b8 90 01 00 00       	mov    $0x190,%eax
  43:	e9 91 02 00 00       	jmp    2d9 <HttpDaemon::HandlePost(bool)+0x2d9>
  48:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4c:	48 8b 40 08          	mov    0x8(%rax),%rax
  50:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 57 <HttpDaemon::HandlePost(bool)+0x57>
  57:	48 89 d6             	mov    %rdx,%rsi
  5a:	48 89 c7             	mov    %rax,%rdi
  5d:	e8 00 00 00 00       	call   62 <HttpDaemon::HandlePost(bool)+0x62>
  62:	85 c0                	test   %eax,%eax
  64:	0f 94 c2             	sete   %dl
  67:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  6b:	88 50 3d             	mov    %dl,0x3d(%rax)
  6e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  72:	0f b6 40 3d          	movzbl 0x3d(%rax),%eax
  76:	83 f0 01             	xor    $0x1,%eax
  79:	84 c0                	test   %al,%al
  7b:	74 28                	je     a5 <HttpDaemon::HandlePost(bool)+0xa5>
  7d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  81:	48 8b 40 08          	mov    0x8(%rax),%rax
  85:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 8c <HttpDaemon::HandlePost(bool)+0x8c>
  8c:	48 89 d6             	mov    %rdx,%rsi
  8f:	48 89 c7             	mov    %rax,%rdi
  92:	e8 00 00 00 00       	call   97 <HttpDaemon::HandlePost(bool)+0x97>
  97:	85 c0                	test   %eax,%eax
  99:	74 0a                	je     a5 <HttpDaemon::HandlePost(bool)+0xa5>
  9b:	b8 94 01 00 00       	mov    $0x194,%eax
  a0:	e9 34 02 00 00       	jmp    2d9 <HttpDaemon::HandlePost(bool)+0x2d9>
  a5:	0f b6 45 e4          	movzbl -0x1c(%rbp),%eax
  a9:	83 f0 01             	xor    $0x1,%eax
  ac:	84 c0                	test   %al,%al
  ae:	74 24                	je     d4 <HttpDaemon::HandlePost(bool)+0xd4>
  b0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  b4:	8b 50 30             	mov    0x30(%rax),%edx
  b7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  bb:	8b 40 28             	mov    0x28(%rax),%eax
  be:	39 c2                	cmp    %eax,%edx
  c0:	72 0b                	jb     cd <HttpDaemon::HandlePost(bool)+0xcd>
  c2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  c6:	8b 40 24             	mov    0x24(%rax),%eax
  c9:	85 c0                	test   %eax,%eax
  cb:	75 07                	jne    d4 <HttpDaemon::HandlePost(bool)+0xd4>
  cd:	b8 01 00 00 00       	mov    $0x1,%eax
  d2:	eb 05                	jmp    d9 <HttpDaemon::HandlePost(bool)+0xd9>
  d4:	b8 00 00 00 00       	mov    $0x0,%eax
  d9:	88 45 f6             	mov    %al,-0xa(%rbp)
  dc:	80 7d f6 00          	cmpb   $0x0,-0xa(%rbp)
  e0:	74 0a                	je     ec <HttpDaemon::HandlePost(bool)+0xec>
  e2:	b8 c8 00 00 00       	mov    $0xc8,%eax
  e7:	e9 ed 01 00 00       	jmp    2d9 <HttpDaemon::HandlePost(bool)+0x2d9>
  ec:	80 7d e4 00          	cmpb   $0x0,-0x1c(%rbp)
  f0:	74 21                	je     113 <HttpDaemon::HandlePost(bool)+0x113>
  f2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  f6:	48 8b 50 18          	mov    0x18(%rax),%rdx
  fa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  fe:	48 89 50 10          	mov    %rdx,0x10(%rax)
 102:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 106:	8b 40 30             	mov    0x30(%rax),%eax
 109:	0f b7 d0             	movzwl %ax,%edx
 10c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 110:	89 50 24             	mov    %edx,0x24(%rax)
 113:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 117:	0f b6 40 3d          	movzbl 0x3d(%rax),%eax
 11b:	84 c0                	test   %al,%al
 11d:	0f 84 37 01 00 00    	je     25a <HttpDaemon::HandlePost(bool)+0x25a>
 123:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 127:	8b 48 24             	mov    0x24(%rax),%ecx
 12a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 12e:	48 8b 40 10          	mov    0x10(%rax),%rax
 132:	ba 01 00 00 00       	mov    $0x1,%edx
 137:	89 ce                	mov    %ecx,%esi
 139:	48 89 c7             	mov    %rax,%rdi
 13c:	e8 00 00 00 00       	call   141 <HttpDaemon::HandlePost(bool)+0x141>
 141:	85 c0                	test   %eax,%eax
 143:	0f 9e c0             	setle  %al
 146:	84 c0                	test   %al,%al
 148:	74 0a                	je     154 <HttpDaemon::HandlePost(bool)+0x154>
 14a:	b8 90 01 00 00       	mov    $0x190,%eax
 14f:	e9 85 01 00 00       	jmp    2d9 <HttpDaemon::HandlePost(bool)+0x2d9>
 154:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 158:	48 8b 40 10          	mov    0x10(%rax),%rax
 15c:	48 8d 55 f5          	lea    -0xb(%rbp),%rdx
 160:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 167 <HttpDaemon::HandlePost(bool)+0x167>
 167:	48 89 ce             	mov    %rcx,%rsi
 16a:	48 89 c7             	mov    %rax,%rdi
 16d:	e8 00 00 00 00       	call   172 <HttpDaemon::HandlePost(bool)+0x172>
 172:	85 c0                	test   %eax,%eax
 174:	0f 94 c0             	sete   %al
 177:	84 c0                	test   %al,%al
 179:	74 37                	je     1b2 <HttpDaemon::HandlePost(bool)+0x1b2>
 17b:	0f b6 45 f5          	movzbl -0xb(%rbp),%eax
 17f:	84 c0                	test   %al,%al
 181:	0f 84 12 01 00 00    	je     299 <HttpDaemon::HandlePost(bool)+0x299>
 187:	e8 00 00 00 00       	call   18c <HttpDaemon::HandlePost(bool)+0x18c>
 18c:	48 89 c7             	mov    %rax,%rdi
 18f:	e8 00 00 00 00       	call   194 <HttpDaemon::HandlePost(bool)+0x194>
 194:	83 f0 01             	xor    $0x1,%eax
 197:	84 c0                	test   %al,%al
 199:	74 0a                	je     1a5 <HttpDaemon::HandlePost(bool)+0x1a5>
 19b:	b8 90 01 00 00       	mov    $0x190,%eax
 1a0:	e9 34 01 00 00       	jmp    2d9 <HttpDaemon::HandlePost(bool)+0x2d9>
 1a5:	e8 00 00 00 00       	call   1aa <HttpDaemon::HandlePost(bool)+0x1aa>
 1aa:	48 89 c7             	mov    %rax,%rdi
 1ad:	e8 00 00 00 00       	call   1b2 <HttpDaemon::HandlePost(bool)+0x1b2>
 1b2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 1b6:	48 8b 40 10          	mov    0x10(%rax),%rax
 1ba:	48 8d 55 f5          	lea    -0xb(%rbp),%rdx
 1be:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 1c5 <HttpDaemon::HandlePost(bool)+0x1c5>
 1c5:	48 89 ce             	mov    %rcx,%rsi
 1c8:	48 89 c7             	mov    %rax,%rdi
 1cb:	e8 00 00 00 00       	call   1d0 <HttpDaemon::HandlePost(bool)+0x1d0>
 1d0:	85 c0                	test   %eax,%eax
 1d2:	0f 94 c0             	sete   %al
 1d5:	84 c0                	test   %al,%al
 1d7:	74 23                	je     1fc <HttpDaemon::HandlePost(bool)+0x1fc>
 1d9:	e8 00 00 00 00       	call   1de <HttpDaemon::HandlePost(bool)+0x1de>
 1de:	48 89 c2             	mov    %rax,%rdx
 1e1:	0f b6 45 f5          	movzbl -0xb(%rbp),%eax
 1e5:	84 c0                	test   %al,%al
 1e7:	0f 94 c0             	sete   %al
 1ea:	0f b6 c0             	movzbl %al,%eax
 1ed:	89 c6                	mov    %eax,%esi
 1ef:	48 89 d7             	mov    %rdx,%rdi
 1f2:	e8 00 00 00 00       	call   1f7 <HttpDaemon::HandlePost(bool)+0x1f7>
 1f7:	e9 9d 00 00 00       	jmp    299 <HttpDaemon::HandlePost(bool)+0x299>
 1fc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 200:	48 8b 40 10          	mov    0x10(%rax),%rax
 204:	48 8d 55 f5          	lea    -0xb(%rbp),%rdx
 208:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 20f <HttpDaemon::HandlePost(bool)+0x20f>
 20f:	48 89 ce             	mov    %rcx,%rsi
 212:	48 89 c7             	mov    %rax,%rdi
 215:	e8 00 00 00 00       	call   21a <HttpDaemon::HandlePost(bool)+0x21a>
 21a:	85 c0                	test   %eax,%eax
 21c:	0f 94 c0             	sete   %al
 21f:	84 c0                	test   %al,%al
 221:	74 30                	je     253 <HttpDaemon::HandlePost(bool)+0x253>
 223:	0f b6 45 f5          	movzbl -0xb(%rbp),%eax
 227:	84 c0                	test   %al,%al
 229:	74 14                	je     23f <HttpDaemon::HandlePost(bool)+0x23f>
 22b:	e8 00 00 00 00       	call   230 <HttpDaemon::HandlePost(bool)+0x230>
 230:	be 04 00 00 00       	mov    $0x4,%esi
 235:	48 89 c7             	mov    %rax,%rdi
 238:	e8 00 00 00 00       	call   23d <HttpDaemon::HandlePost(bool)+0x23d>
 23d:	eb 5a                	jmp    299 <HttpDaemon::HandlePost(bool)+0x299>
 23f:	e8 00 00 00 00       	call   244 <HttpDaemon::HandlePost(bool)+0x244>
 244:	be 02 00 00 00       	mov    $0x2,%esi
 249:	48 89 c7             	mov    %rax,%rdi
 24c:	e8 00 00 00 00       	call   251 <HttpDaemon::HandlePost(bool)+0x251>
 251:	eb 46                	jmp    299 <HttpDaemon::HandlePost(bool)+0x299>
 253:	b8 90 01 00 00       	mov    $0x190,%eax
 258:	eb 7f                	jmp    2d9 <HttpDaemon::HandlePost(bool)+0x2d9>
 25a:	e8 00 00 00 00       	call   25f <HttpDaemon::HandlePost(bool)+0x25f>
 25f:	88 45 f7             	mov    %al,-0x9(%rbp)
 262:	bf 01 00 00 00       	mov    $0x1,%edi
 267:	e8 00 00 00 00       	call   26c <HttpDaemon::HandlePost(bool)+0x26c>
 26c:	e8 00 00 00 00       	call   271 <HttpDaemon::HandlePost(bool)+0x271>
 271:	48 89 c1             	mov    %rax,%rcx
 274:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 278:	8b 50 24             	mov    0x24(%rax),%edx
 27b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 27f:	48 8b 40 10          	mov    0x10(%rax),%rax
 283:	48 89 c6             	mov    %rax,%rsi
 286:	48 89 cf             	mov    %rcx,%rdi
 289:	e8 00 00 00 00       	call   28e <HttpDaemon::HandlePost(bool)+0x28e>
 28e:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
 292:	89 c7                	mov    %eax,%edi
 294:	e8 00 00 00 00       	call   299 <HttpDaemon::HandlePost(bool)+0x299>
 299:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 29d:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 2a4 <HttpDaemon::HandlePost(bool)+0x2a4>
 2a4:	48 89 10             	mov    %rdx,(%rax)
 2a7:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 2ae <HttpDaemon::HandlePost(bool)+0x2ae>
 2ae:	48 89 c2             	mov    %rax,%rdx
 2b1:	be 9f 05 00 00       	mov    $0x59f,%esi
 2b6:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 2bd <HttpDaemon::HandlePost(bool)+0x2bd>
 2bd:	48 89 c7             	mov    %rax,%rdi
 2c0:	b8 00 00 00 00       	mov    $0x0,%eax
 2c5:	e8 00 00 00 00       	call   2ca <HttpDaemon::HandlePost(bool)+0x2ca>
 2ca:	0f b7 d0             	movzwl %ax,%edx
 2cd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 2d1:	89 50 20             	mov    %edx,0x20(%rax)
 2d4:	b8 c8 00 00 00       	mov    $0xc8,%eax
 2d9:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
 2dd:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
 2e4:	00 00 
 2e6:	74 05                	je     2ed <HttpDaemon::HandlePost(bool)+0x2ed>
 2e8:	e8 00 00 00 00       	call   2ed <HttpDaemon::HandlePost(bool)+0x2ed>
 2ed:	c9                   	leave  
 2ee:	c3                   	ret    

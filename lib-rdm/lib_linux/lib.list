In archive lib_linux/librdm.a:

rdmconst.o:     file format elf64-x86-64


rdmdevice.o:     file format elf64-x86-64


Disassembly of section .text._ZNK7Network5GetIpEv:

0000000000000000 <Network::GetIp() const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	8b 40 10             	mov    0x10(%rax),%eax
  26:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  2a:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  31:	00 00 
  33:	74 05                	je     3a <Network::GetIp() const+0x3a>
  35:	e8 00 00 00 00       	call   3a <Network::GetIp() const+0x3a>
  3a:	c9                   	leave  
  3b:	c3                   	ret    

Disassembly of section .text._ZN7Network3GetEv:

0000000000000000 <Network::Get()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 22 <Network::Get()+0x22>
  22:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  26:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  2d:	00 00 
  2f:	74 05                	je     36 <Network::Get()+0x36>
  31:	e8 00 00 00 00       	call   36 <Network::Get()+0x36>
  36:	c9                   	leave  
  37:	c3                   	ret    

Disassembly of section .text._ZN9RDMDeviceC2Ev:

0000000000000000 <RDMDevice::RDMDevice()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	48 c7 40 40 00 00 00 	movq   $0x0,0x40(%rax)
  2a:	00 
  2b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2f:	66 c7 40 48 ff 7f    	movw   $0x7fff,0x48(%rax)
  35:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  39:	66 c7 40 4a ff 7f    	movw   $0x7fff,0x4a(%rax)
  3f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43:	66 c7 40 4c 00 00    	movw   $0x0,0x4c(%rax)
  49:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4d:	c6 40 58 00          	movb   $0x0,0x58(%rax)
  51:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  55:	c6 40 59 00          	movb   $0x0,0x59(%rax)
  59:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5d:	c6 40 5a 00          	movb   $0x0,0x5a(%rax)
  61:	e8 00 00 00 00       	call   66 <RDMDevice::RDMDevice()+0x66>
  66:	48 89 c7             	mov    %rax,%rdi
  69:	e8 00 00 00 00       	call   6e <RDMDevice::RDMDevice()+0x6e>
  6e:	89 45 f4             	mov    %eax,-0xc(%rbp)
  71:	8b 45 f4             	mov    -0xc(%rbp),%eax
  74:	c1 e8 18             	shr    $0x18,%eax
  77:	89 c2                	mov    %eax,%edx
  79:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7d:	88 50 53             	mov    %dl,0x53(%rax)
  80:	8b 45 f4             	mov    -0xc(%rbp),%eax
  83:	c1 e8 10             	shr    $0x10,%eax
  86:	89 c2                	mov    %eax,%edx
  88:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8c:	88 50 52             	mov    %dl,0x52(%rax)
  8f:	8b 45 f4             	mov    -0xc(%rbp),%eax
  92:	c1 e8 08             	shr    $0x8,%eax
  95:	89 c2                	mov    %eax,%edx
  97:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  9b:	88 50 51             	mov    %dl,0x51(%rax)
  9e:	8b 45 f4             	mov    -0xc(%rbp),%eax
  a1:	89 c2                	mov    %eax,%edx
  a3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  a7:	88 50 50             	mov    %dl,0x50(%rax)
  aa:	0f b6 15 00 00 00 00 	movzbl 0x0(%rip),%edx        # b1 <RDMDevice::RDMDevice()+0xb1>
  b1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  b5:	88 50 4e             	mov    %dl,0x4e(%rax)
  b8:	0f b6 15 00 00 00 00 	movzbl 0x0(%rip),%edx        # bf <RDMDevice::RDMDevice()+0xbf>
  bf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  c3:	88 50 4f             	mov    %dl,0x4f(%rax)
  c6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  ca:	0f b6 50 53          	movzbl 0x53(%rax),%edx
  ce:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  d2:	88 50 54             	mov    %dl,0x54(%rax)
  d5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  d9:	0f b6 50 52          	movzbl 0x52(%rax),%edx
  dd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  e1:	88 50 55             	mov    %dl,0x55(%rax)
  e4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  e8:	0f b6 50 51          	movzbl 0x51(%rax),%edx
  ec:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  f0:	88 50 56             	mov    %dl,0x56(%rax)
  f3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  f7:	0f b6 50 50          	movzbl 0x50(%rax),%edx
  fb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  ff:	88 50 57             	mov    %dl,0x57(%rax)
 102:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 106:	c6 40 59 10          	movb   $0x10,0x59(%rax)
 10a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 10e:	0f b6 40 59          	movzbl 0x59(%rax),%eax
 112:	0f b6 d0             	movzbl %al,%edx
 115:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 119:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 120 <RDMDevice::RDMDevice()+0x120>
 120:	48 89 ce             	mov    %rcx,%rsi
 123:	48 89 c7             	mov    %rax,%rdi
 126:	e8 00 00 00 00       	call   12b <RDMDevice::RDMDevice()+0x12b>
 12b:	90                   	nop
 12c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 130:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 137:	00 00 
 139:	74 05                	je     140 <RDMDevice::RDMDevice()+0x140>
 13b:	e8 00 00 00 00       	call   140 <RDMDevice::RDMDevice()+0x140>
 140:	c9                   	leave  
 141:	c3                   	ret    

Disassembly of section .text._ZN9RDMDevice5PrintEv:

0000000000000000 <RDMDevice::Print()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 26 <RDMDevice::Print()+0x26>
  26:	48 89 c7             	mov    %rax,%rdi
  29:	e8 00 00 00 00       	call   2e <RDMDevice::Print()+0x2e>
  2e:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 35 <RDMDevice::Print()+0x35>
  35:	48 89 c7             	mov    %rax,%rdi
  38:	e8 00 00 00 00       	call   3d <RDMDevice::Print()+0x3d>
  3d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  41:	48 c7 45 e8 20 00 00 	movq   $0x20,-0x18(%rbp)
  48:	00 
  49:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
  4d:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
  51:	48 89 d6             	mov    %rdx,%rsi
  54:	48 89 c7             	mov    %rax,%rdi
  57:	e8 00 00 00 00       	call   5c <RDMDevice::Print()+0x5c>
  5c:	48 8b 00             	mov    (%rax),%rax
  5f:	88 45 e7             	mov    %al,-0x19(%rbp)
  62:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  66:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 6d <RDMDevice::Print()+0x6d>
  6d:	89 c6                	mov    %eax,%esi
  6f:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 76 <RDMDevice::Print()+0x76>
  76:	48 89 c7             	mov    %rax,%rdi
  79:	b8 00 00 00 00       	mov    $0x0,%eax
  7e:	e8 00 00 00 00       	call   83 <RDMDevice::Print()+0x83>
  83:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  87:	0f b6 40 4f          	movzbl 0x4f(%rax),%eax
  8b:	0f b6 d0             	movzbl %al,%edx
  8e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  92:	0f b6 40 4e          	movzbl 0x4e(%rax),%eax
  96:	0f b6 c0             	movzbl %al,%eax
  99:	89 c6                	mov    %eax,%esi
  9b:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # a2 <RDMDevice::Print()+0xa2>
  a2:	48 89 c7             	mov    %rax,%rdi
  a5:	b8 00 00 00 00       	mov    $0x0,%eax
  aa:	e8 00 00 00 00       	call   af <RDMDevice::Print()+0xaf>
  af:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  b3:	0f b6 40 54          	movzbl 0x54(%rax),%eax
  b7:	0f b6 f0             	movzbl %al,%esi
  ba:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  be:	0f b6 40 55          	movzbl 0x55(%rax),%eax
  c2:	0f b6 c8             	movzbl %al,%ecx
  c5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  c9:	0f b6 40 56          	movzbl 0x56(%rax),%eax
  cd:	0f b6 d0             	movzbl %al,%edx
  d0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  d4:	0f b6 40 57          	movzbl 0x57(%rax),%eax
  d8:	0f b6 c0             	movzbl %al,%eax
  db:	41 89 f0             	mov    %esi,%r8d
  de:	89 c6                	mov    %eax,%esi
  e0:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # e7 <RDMDevice::Print()+0xe7>
  e7:	48 89 c7             	mov    %rax,%rdi
  ea:	b8 00 00 00 00       	mov    $0x0,%eax
  ef:	e8 00 00 00 00       	call   f4 <RDMDevice::Print()+0xf4>
  f4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  f8:	48 8d 50 20          	lea    0x20(%rax),%rdx
  fc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 100:	0f b6 40 58          	movzbl 0x58(%rax),%eax
 104:	0f b6 c0             	movzbl %al,%eax
 107:	89 c6                	mov    %eax,%esi
 109:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 110 <RDMDevice::Print()+0x110>
 110:	48 89 c7             	mov    %rax,%rdi
 113:	b8 00 00 00 00       	mov    $0x0,%eax
 118:	e8 00 00 00 00       	call   11d <RDMDevice::Print()+0x11d>
 11d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 121:	0f b7 40 48          	movzwl 0x48(%rax),%eax
 125:	0f b7 c0             	movzwl %ax,%eax
 128:	0f b6 d0             	movzbl %al,%edx
 12b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 12f:	0f b7 40 48          	movzwl 0x48(%rax),%eax
 133:	66 c1 e8 08          	shr    $0x8,%ax
 137:	0f b7 c0             	movzwl %ax,%eax
 13a:	89 c6                	mov    %eax,%esi
 13c:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 143 <RDMDevice::Print()+0x143>
 143:	48 89 c7             	mov    %rax,%rdi
 146:	b8 00 00 00 00       	mov    $0x0,%eax
 14b:	e8 00 00 00 00       	call   150 <RDMDevice::Print()+0x150>
 150:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 154:	0f b7 40 4a          	movzwl 0x4a(%rax),%eax
 158:	0f b7 c0             	movzwl %ax,%eax
 15b:	0f b6 d0             	movzbl %al,%edx
 15e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 162:	0f b7 40 4a          	movzwl 0x4a(%rax),%eax
 166:	66 c1 e8 08          	shr    $0x8,%ax
 16a:	0f b7 c0             	movzwl %ax,%eax
 16d:	89 c6                	mov    %eax,%esi
 16f:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 176 <RDMDevice::Print()+0x176>
 176:	48 89 c7             	mov    %rax,%rdi
 179:	b8 00 00 00 00       	mov    $0x0,%eax
 17e:	e8 00 00 00 00       	call   183 <RDMDevice::Print()+0x183>
 183:	90                   	nop
 184:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 188:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 18f:	00 00 
 191:	74 05                	je     198 <RDMDevice::Print()+0x198>
 193:	e8 00 00 00 00       	call   198 <RDMDevice::Print()+0x198>
 198:	c9                   	leave  
 199:	c3                   	ret    

Disassembly of section .text._ZSt3minImERKT_S2_S2_:

0000000000000000 <unsigned long const& std::min<unsigned long>(unsigned long const&, unsigned long const&)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  27:	48 8b 10             	mov    (%rax),%rdx
  2a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2e:	48 8b 00             	mov    (%rax),%rax
  31:	48 39 c2             	cmp    %rax,%rdx
  34:	73 06                	jae    3c <unsigned long const& std::min<unsigned long>(unsigned long const&, unsigned long const&)+0x3c>
  36:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  3a:	eb 04                	jmp    40 <unsigned long const& std::min<unsigned long>(unsigned long const&, unsigned long const&)+0x40>
  3c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  44:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  4b:	00 00 
  4d:	74 05                	je     54 <unsigned long const& std::min<unsigned long>(unsigned long const&, unsigned long const&)+0x54>
  4f:	e8 00 00 00 00       	call   54 <unsigned long const& std::min<unsigned long>(unsigned long const&, unsigned long const&)+0x54>
  54:	c9                   	leave  
  55:	c3                   	ret    

rdmdeviceparamsconst.o:     file format elf64-x86-64


rdmdeviceparams.o:     file format elf64-x86-64


Disassembly of section .text._ZN9RDMDevice8SetLabelEPK18TRDMDeviceInfoData:

0000000000000000 <RDMDevice::SetLabel(TRDMDeviceInfoData const*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 f5             	mov    %rsi,%rbp
   8:	48 83 c6 08          	add    $0x8,%rsi
   c:	53                   	push   %rbx
   d:	48 89 fb             	mov    %rdi,%rbx
  10:	48 83 ec 18          	sub    $0x18,%rsp
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  22:	31 c0                	xor    %eax,%eax
  24:	48 8d 7c 24 07       	lea    0x7(%rsp),%rdi
  29:	c6 44 24 07 20       	movb   $0x20,0x7(%rsp)
  2e:	e8 00 00 00 00       	call   33 <RDMDevice::SetLabel(TRDMDeviceInfoData const*)+0x33>
  33:	80 7b 5a 00          	cmpb   $0x0,0x5a(%rbx)
  37:	48 8b 75 00          	mov    0x0(%rbp),%rsi
  3b:	0f b6 08             	movzbl (%rax),%ecx
  3e:	48 89 c8             	mov    %rcx,%rax
  41:	74 3a                	je     7d <RDMDevice::SetLabel(TRDMDeviceInfoData const*)+0x7d>
  43:	4c 8d 43 20          	lea    0x20(%rbx),%r8
  47:	4c 89 c7             	mov    %r8,%rdi
  4a:	f3 a4                	rep movsb %ds:(%rsi),%es:(%rdi)
  4c:	88 43 58             	mov    %al,0x58(%rbx)
  4f:	48 8b 7b 40          	mov    0x40(%rbx),%rdi
  53:	48 85 ff             	test   %rdi,%rdi
  56:	74 2d                	je     85 <RDMDevice::SetLabel(TRDMDeviceInfoData const*)+0x85>
  58:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  5d:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  64:	00 00 
  66:	75 2d                	jne    95 <RDMDevice::SetLabel(TRDMDeviceInfoData const*)+0x95>
  68:	0f b6 d0             	movzbl %al,%edx
  6b:	48 8b 07             	mov    (%rdi),%rax
  6e:	4c 89 c6             	mov    %r8,%rsi
  71:	48 8b 48 10          	mov    0x10(%rax),%rcx
  75:	48 83 c4 18          	add    $0x18,%rsp
  79:	5b                   	pop    %rbx
  7a:	5d                   	pop    %rbp
  7b:	ff e1                	jmp    *%rcx
  7d:	48 89 df             	mov    %rbx,%rdi
  80:	f3 a4                	rep movsb %ds:(%rsi),%es:(%rdi)
  82:	88 43 59             	mov    %al,0x59(%rbx)
  85:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  8a:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  91:	00 00 
  93:	74 05                	je     9a <RDMDevice::SetLabel(TRDMDeviceInfoData const*)+0x9a>
  95:	e8 00 00 00 00       	call   9a <RDMDevice::SetLabel(TRDMDeviceInfoData const*)+0x9a>
  9a:	48 83 c4 18          	add    $0x18,%rsp
  9e:	5b                   	pop    %rbx
  9f:	5d                   	pop    %rbp
  a0:	c3                   	ret    

Disassembly of section .text._ZN9RDMDevice18SetProductCategoryEt:

0000000000000000 <RDMDevice::SetProductCategory(unsigned short)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 ec 18          	sub    $0x18,%rsp
   8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   f:	00 00 
  11:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  16:	31 c0                	xor    %eax,%eax
  18:	66 89 77 48          	mov    %si,0x48(%rdi)
  1c:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  21:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  28:	00 00 
  2a:	74 05                	je     31 <RDMDevice::SetProductCategory(unsigned short)+0x31>
  2c:	e8 00 00 00 00       	call   31 <RDMDevice::SetProductCategory(unsigned short)+0x31>
  31:	48 83 c4 18          	add    $0x18,%rsp
  35:	c3                   	ret    

Disassembly of section .text._ZN9RDMDevice16SetProductDetailEt:

0000000000000000 <RDMDevice::SetProductDetail(unsigned short)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 ec 18          	sub    $0x18,%rsp
   8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   f:	00 00 
  11:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  16:	31 c0                	xor    %eax,%eax
  18:	66 89 77 4a          	mov    %si,0x4a(%rdi)
  1c:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  21:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  28:	00 00 
  2a:	74 05                	je     31 <RDMDevice::SetProductDetail(unsigned short)+0x31>
  2c:	e8 00 00 00 00       	call   31 <RDMDevice::SetProductDetail(unsigned short)+0x31>
  31:	48 83 c4 18          	add    $0x18,%rsp
  35:	c3                   	ret    

Disassembly of section .text._ZNK15RDMDeviceParams9isMaskSetEj:

0000000000000000 <RDMDeviceParams::isMaskSet(unsigned int) const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 ec 18          	sub    $0x18,%rsp
   8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   f:	00 00 
  11:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  16:	89 f0                	mov    %esi,%eax
  18:	23 47 08             	and    0x8(%rdi),%eax
  1b:	39 f0                	cmp    %esi,%eax
  1d:	0f 94 c0             	sete   %al
  20:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  25:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  2c:	00 00 
  2e:	74 05                	je     35 <RDMDeviceParams::isMaskSet(unsigned int) const+0x35>
  30:	e8 00 00 00 00       	call   35 <RDMDeviceParams::isMaskSet(unsigned int) const+0x35>
  35:	48 83 c4 18          	add    $0x18,%rsp
  39:	c3                   	ret    

Disassembly of section .text._ZN17PropertiesBuilder8AddHex16EPKctb:

0000000000000000 <PropertiesBuilder::AddHex16(char const*, unsigned short, bool)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 ec 18          	sub    $0x18,%rsp
   8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   f:	00 00 
  11:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  16:	31 c0                	xor    %eax,%eax
  18:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  1d:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  24:	00 00 
  26:	74 05                	je     2d <PropertiesBuilder::AddHex16(char const*, unsigned short, bool)+0x2d>
  28:	e8 00 00 00 00       	call   2d <PropertiesBuilder::AddHex16(char const*, unsigned short, bool)+0x2d>
  2d:	0f b6 c9             	movzbl %cl,%ecx
  30:	0f b7 d2             	movzwl %dx,%edx
  33:	41 b8 04 00 00 00    	mov    $0x4,%r8d
  39:	48 83 c4 18          	add    $0x18,%rsp
  3d:	e9 00 00 00 00       	jmp    42 <PropertiesBuilder::AddHex16(char const*, unsigned short, bool)+0x42>

Disassembly of section .text._ZN17PropertiesBuilder7GetSizeEv:

0000000000000000 <PropertiesBuilder::GetSize()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 ec 18          	sub    $0x18,%rsp
   8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   f:	00 00 
  11:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  16:	31 c0                	xor    %eax,%eax
  18:	80 7f 0c 00          	cmpb   $0x0,0xc(%rdi)
  1c:	74 1b                	je     39 <PropertiesBuilder::GetSize()+0x39>
  1e:	0f b7 47 0a          	movzwl 0xa(%rdi),%eax
  22:	48 8b 17             	mov    (%rdi),%rdx
  25:	c6 44 02 ff 7d       	movb   $0x7d,-0x1(%rdx,%rax,1)
  2a:	0f b7 47 0a          	movzwl 0xa(%rdi),%eax
  2e:	48 8b 17             	mov    (%rdi),%rdx
  31:	c6 04 02 7d          	movb   $0x7d,(%rdx,%rax,1)
  35:	66 ff 47 0a          	incw   0xa(%rdi)
  39:	66 8b 47 0a          	mov    0xa(%rdi),%ax
  3d:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  42:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  49:	00 00 
  4b:	74 05                	je     52 <PropertiesBuilder::GetSize()+0x52>
  4d:	e8 00 00 00 00       	call   52 <PropertiesBuilder::GetSize()+0x52>
  52:	48 83 c4 18          	add    $0x18,%rsp
  56:	c3                   	ret    

Disassembly of section .text._ZN15RDMDeviceParamsC2EP20RDMDeviceParamsStore:

0000000000000000 <RDMDeviceParams::RDMDeviceParams(RDMDeviceParamsStore*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 ec 18          	sub    $0x18,%rsp
   8:	48 89 fa             	mov    %rdi,%rdx
   b:	b9 25 00 00 00       	mov    $0x25,%ecx
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  1e:	31 c0                	xor    %eax,%eax
  20:	48 89 37             	mov    %rsi,(%rdi)
  23:	48 8d 77 08          	lea    0x8(%rdi),%rsi
  27:	48 89 f7             	mov    %rsi,%rdi
  2a:	f3 aa                	rep stos %al,%es:(%rdi)
  2c:	c7 42 2d ff 7f ff 7f 	movl   $0x7fff7fff,0x2d(%rdx)
  33:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  38:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  3f:	00 00 
  41:	74 05                	je     48 <RDMDeviceParams::RDMDeviceParams(RDMDeviceParamsStore*)+0x48>
  43:	e8 00 00 00 00       	call   48 <RDMDeviceParams::RDMDeviceParams(RDMDeviceParamsStore*)+0x48>
  48:	48 83 c4 18          	add    $0x18,%rsp
  4c:	c3                   	ret    

Disassembly of section .text._ZN15RDMDeviceParams4LoadEv:

0000000000000000 <RDMDeviceParams::Load()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	41 54                	push   %r12
   6:	48 89 fa             	mov    %rdi,%rdx
   9:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 10 <RDMDeviceParams::Load()+0x10>
  10:	55                   	push   %rbp
  11:	53                   	push   %rbx
  12:	48 89 fb             	mov    %rdi,%rbx
  15:	48 83 ec 20          	sub    $0x20,%rsp
  19:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  20:	00 00 
  22:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  27:	31 c0                	xor    %eax,%eax
  29:	c7 47 08 00 00 00 00 	movl   $0x0,0x8(%rdi)
  30:	48 8d 6c 24 08       	lea    0x8(%rsp),%rbp
  35:	48 89 ef             	mov    %rbp,%rdi
  38:	e8 00 00 00 00       	call   3d <RDMDeviceParams::Load()+0x3d>
  3d:	48 89 ef             	mov    %rbp,%rdi
  40:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 47 <RDMDeviceParams::Load()+0x47>
  47:	e8 00 00 00 00       	call   4c <RDMDeviceParams::Load()+0x4c>
  4c:	48 8b 3b             	mov    (%rbx),%rdi
  4f:	84 c0                	test   %al,%al
  51:	41 89 c4             	mov    %eax,%r12d
  54:	74 11                	je     67 <RDMDeviceParams::Load()+0x67>
  56:	48 85 ff             	test   %rdi,%rdi
  59:	74 1e                	je     79 <RDMDeviceParams::Load()+0x79>
  5b:	48 8b 07             	mov    (%rdi),%rax
  5e:	48 8d 73 08          	lea    0x8(%rbx),%rsi
  62:	ff 50 10             	call   *0x10(%rax)
  65:	eb 12                	jmp    79 <RDMDeviceParams::Load()+0x79>
  67:	48 85 ff             	test   %rdi,%rdi
  6a:	74 0d                	je     79 <RDMDeviceParams::Load()+0x79>
  6c:	48 8b 07             	mov    (%rdi),%rax
  6f:	48 8d 73 08          	lea    0x8(%rbx),%rsi
  73:	41 b4 01             	mov    $0x1,%r12b
  76:	ff 50 18             	call   *0x18(%rax)
  79:	48 89 ef             	mov    %rbp,%rdi
  7c:	e8 00 00 00 00       	call   81 <RDMDeviceParams::Load()+0x81>
  81:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  86:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  8d:	00 00 
  8f:	74 05                	je     96 <RDMDeviceParams::Load()+0x96>
  91:	e8 00 00 00 00       	call   96 <RDMDeviceParams::Load()+0x96>
  96:	48 83 c4 20          	add    $0x20,%rsp
  9a:	44 89 e0             	mov    %r12d,%eax
  9d:	5b                   	pop    %rbx
  9e:	5d                   	pop    %rbp
  9f:	41 5c                	pop    %r12
  a1:	c3                   	ret    

Disassembly of section .text._ZN15RDMDeviceParams4LoadEPKcj:

0000000000000000 <RDMDeviceParams::Load(char const*, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	41 55                	push   %r13
   6:	41 89 d5             	mov    %edx,%r13d
   9:	48 89 fa             	mov    %rdi,%rdx
   c:	41 54                	push   %r12
   e:	49 89 f4             	mov    %rsi,%r12
  11:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 18 <RDMDeviceParams::Load(char const*, unsigned int)+0x18>
  18:	55                   	push   %rbp
  19:	53                   	push   %rbx
  1a:	48 89 fb             	mov    %rdi,%rbx
  1d:	48 83 ec 28          	sub    $0x28,%rsp
  21:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  28:	00 00 
  2a:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2f:	31 c0                	xor    %eax,%eax
  31:	c7 47 08 00 00 00 00 	movl   $0x0,0x8(%rdi)
  38:	48 8d 6c 24 08       	lea    0x8(%rsp),%rbp
  3d:	48 89 ef             	mov    %rbp,%rdi
  40:	e8 00 00 00 00       	call   45 <RDMDeviceParams::Load(char const*, unsigned int)+0x45>
  45:	44 89 ea             	mov    %r13d,%edx
  48:	4c 89 e6             	mov    %r12,%rsi
  4b:	48 89 ef             	mov    %rbp,%rdi
  4e:	e8 00 00 00 00       	call   53 <RDMDeviceParams::Load(char const*, unsigned int)+0x53>
  53:	48 8b 3b             	mov    (%rbx),%rdi
  56:	48 8d 73 08          	lea    0x8(%rbx),%rsi
  5a:	48 8b 07             	mov    (%rdi),%rax
  5d:	ff 50 10             	call   *0x10(%rax)
  60:	48 89 ef             	mov    %rbp,%rdi
  63:	e8 00 00 00 00       	call   68 <RDMDeviceParams::Load(char const*, unsigned int)+0x68>
  68:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  6d:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  74:	00 00 
  76:	74 05                	je     7d <RDMDeviceParams::Load(char const*, unsigned int)+0x7d>
  78:	e8 00 00 00 00       	call   7d <RDMDeviceParams::Load(char const*, unsigned int)+0x7d>
  7d:	48 83 c4 28          	add    $0x28,%rsp
  81:	5b                   	pop    %rbx
  82:	5d                   	pop    %rbp
  83:	41 5c                	pop    %r12
  85:	41 5d                	pop    %r13
  87:	c3                   	ret    

Disassembly of section .text._ZN15RDMDeviceParams16callbackFunctionEPKc:

0000000000000000 <RDMDeviceParams::callbackFunction(char const*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	41 54                	push   %r12
   6:	48 8d 57 0c          	lea    0xc(%rdi),%rdx
   a:	55                   	push   %rbp
   b:	48 89 f5             	mov    %rsi,%rbp
   e:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 15 <RDMDeviceParams::callbackFunction(char const*)+0x15>
  15:	53                   	push   %rbx
  16:	48 89 fb             	mov    %rdi,%rbx
  19:	48 89 ef             	mov    %rbp,%rdi
  1c:	48 83 ec 10          	sub    $0x10,%rsp
  20:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  27:	00 00 
  29:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  2e:	31 c0                	xor    %eax,%eax
  30:	48 8d 4c 24 04       	lea    0x4(%rsp),%rcx
  35:	c7 44 24 04 20 00 00 	movl   $0x20,0x4(%rsp)
  3c:	00 
  3d:	e8 00 00 00 00       	call   42 <RDMDeviceParams::callbackFunction(char const*)+0x42>
  42:	85 c0                	test   %eax,%eax
  44:	75 0d                	jne    53 <RDMDeviceParams::callbackFunction(char const*)+0x53>
  46:	8b 44 24 04          	mov    0x4(%rsp),%eax
  4a:	83 4b 08 01          	orl    $0x1,0x8(%rbx)
  4e:	88 43 2c             	mov    %al,0x2c(%rbx)
  51:	eb 66                	jmp    b9 <RDMDeviceParams::callbackFunction(char const*)+0xb9>
  53:	4c 8d 64 24 02       	lea    0x2(%rsp),%r12
  58:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5f <RDMDeviceParams::callbackFunction(char const*)+0x5f>
  5f:	48 89 ef             	mov    %rbp,%rdi
  62:	4c 89 e2             	mov    %r12,%rdx
  65:	e8 00 00 00 00       	call   6a <RDMDeviceParams::callbackFunction(char const*)+0x6a>
  6a:	85 c0                	test   %eax,%eax
  6c:	75 16                	jne    84 <RDMDeviceParams::callbackFunction(char const*)+0x84>
  6e:	8b 43 08             	mov    0x8(%rbx),%eax
  71:	66 8b 54 24 02       	mov    0x2(%rsp),%dx
  76:	89 c1                	mov    %eax,%ecx
  78:	66 89 53 2d          	mov    %dx,0x2d(%rbx)
  7c:	83 e0 fd             	and    $0xfffffffd,%eax
  7f:	83 c9 02             	or     $0x2,%ecx
  82:	eb 2a                	jmp    ae <RDMDeviceParams::callbackFunction(char const*)+0xae>
  84:	4c 89 e2             	mov    %r12,%rdx
  87:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 8e <RDMDeviceParams::callbackFunction(char const*)+0x8e>
  8e:	48 89 ef             	mov    %rbp,%rdi
  91:	e8 00 00 00 00       	call   96 <RDMDeviceParams::callbackFunction(char const*)+0x96>
  96:	85 c0                	test   %eax,%eax
  98:	75 1f                	jne    b9 <RDMDeviceParams::callbackFunction(char const*)+0xb9>
  9a:	66 8b 54 24 02       	mov    0x2(%rsp),%dx
  9f:	8b 43 08             	mov    0x8(%rbx),%eax
  a2:	66 89 53 2f          	mov    %dx,0x2f(%rbx)
  a6:	89 c1                	mov    %eax,%ecx
  a8:	83 e0 fb             	and    $0xfffffffb,%eax
  ab:	83 c9 04             	or     $0x4,%ecx
  ae:	66 81 fa ff 7f       	cmp    $0x7fff,%dx
  b3:	0f 45 c1             	cmovne %ecx,%eax
  b6:	89 43 08             	mov    %eax,0x8(%rbx)
  b9:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  be:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  c5:	00 00 
  c7:	74 05                	je     ce <RDMDeviceParams::callbackFunction(char const*)+0xce>
  c9:	e8 00 00 00 00       	call   ce <RDMDeviceParams::callbackFunction(char const*)+0xce>
  ce:	48 83 c4 10          	add    $0x10,%rsp
  d2:	5b                   	pop    %rbx
  d3:	5d                   	pop    %rbp
  d4:	41 5c                	pop    %r12
  d6:	c3                   	ret    

Disassembly of section .text._ZN15RDMDeviceParams3SetEP9RDMDevice:

0000000000000000 <RDMDeviceParams::Set(RDMDevice*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 f5             	mov    %rsi,%rbp
   8:	be 01 00 00 00       	mov    $0x1,%esi
   d:	53                   	push   %rbx
   e:	48 89 fb             	mov    %rdi,%rbx
  11:	48 83 ec 28          	sub    $0x28,%rsp
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  23:	31 c0                	xor    %eax,%eax
  25:	e8 00 00 00 00       	call   2a <RDMDeviceParams::Set(RDMDevice*)+0x2a>
  2a:	84 c0                	test   %al,%al
  2c:	74 1d                	je     4b <RDMDeviceParams::Set(RDMDevice*)+0x4b>
  2e:	48 8d 43 0c          	lea    0xc(%rbx),%rax
  32:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
  37:	48 89 ef             	mov    %rbp,%rdi
  3a:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  3f:	8a 43 2c             	mov    0x2c(%rbx),%al
  42:	88 44 24 10          	mov    %al,0x10(%rsp)
  46:	e8 00 00 00 00       	call   4b <RDMDeviceParams::Set(RDMDevice*)+0x4b>
  4b:	be 02 00 00 00       	mov    $0x2,%esi
  50:	48 89 df             	mov    %rbx,%rdi
  53:	e8 00 00 00 00       	call   58 <RDMDeviceParams::Set(RDMDevice*)+0x58>
  58:	84 c0                	test   %al,%al
  5a:	74 0c                	je     68 <RDMDeviceParams::Set(RDMDevice*)+0x68>
  5c:	0f b7 73 2d          	movzwl 0x2d(%rbx),%esi
  60:	48 89 ef             	mov    %rbp,%rdi
  63:	e8 00 00 00 00       	call   68 <RDMDeviceParams::Set(RDMDevice*)+0x68>
  68:	be 04 00 00 00       	mov    $0x4,%esi
  6d:	48 89 df             	mov    %rbx,%rdi
  70:	e8 00 00 00 00       	call   75 <RDMDeviceParams::Set(RDMDevice*)+0x75>
  75:	84 c0                	test   %al,%al
  77:	74 22                	je     9b <RDMDeviceParams::Set(RDMDevice*)+0x9b>
  79:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  7e:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  85:	00 00 
  87:	75 22                	jne    ab <RDMDeviceParams::Set(RDMDevice*)+0xab>
  89:	0f b7 73 2f          	movzwl 0x2f(%rbx),%esi
  8d:	48 83 c4 28          	add    $0x28,%rsp
  91:	48 89 ef             	mov    %rbp,%rdi
  94:	5b                   	pop    %rbx
  95:	5d                   	pop    %rbp
  96:	e9 00 00 00 00       	jmp    9b <RDMDeviceParams::Set(RDMDevice*)+0x9b>
  9b:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  a0:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  a7:	00 00 
  a9:	74 05                	je     b0 <RDMDeviceParams::Set(RDMDevice*)+0xb0>
  ab:	e8 00 00 00 00       	call   b0 <RDMDeviceParams::Set(RDMDevice*)+0xb0>
  b0:	48 83 c4 28          	add    $0x28,%rsp
  b4:	5b                   	pop    %rbx
  b5:	5d                   	pop    %rbp
  b6:	c3                   	ret    

Disassembly of section .text._ZN15RDMDeviceParams4DumpEv:

0000000000000000 <RDMDeviceParams::Dump()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 ec 18          	sub    $0x18,%rsp
   8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   f:	00 00 
  11:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  16:	31 c0                	xor    %eax,%eax
  18:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  1d:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  24:	00 00 
  26:	74 05                	je     2d <RDMDeviceParams::Dump()+0x2d>
  28:	e8 00 00 00 00       	call   2d <RDMDeviceParams::Dump()+0x2d>
  2d:	48 83 c4 18          	add    $0x18,%rsp
  31:	c3                   	ret    

Disassembly of section .text._ZN15RDMDeviceParams22staticCallbackFunctionEPvPKc:

0000000000000000 <RDMDeviceParams::staticCallbackFunction(void*, char const*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 ec 18          	sub    $0x18,%rsp
   8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   f:	00 00 
  11:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  16:	31 c0                	xor    %eax,%eax
  18:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  1d:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  24:	00 00 
  26:	74 05                	je     2d <RDMDeviceParams::staticCallbackFunction(void*, char const*)+0x2d>
  28:	e8 00 00 00 00       	call   2d <RDMDeviceParams::staticCallbackFunction(void*, char const*)+0x2d>
  2d:	48 83 c4 18          	add    $0x18,%rsp
  31:	e9 00 00 00 00       	jmp    36 <RDMDeviceParams::staticCallbackFunction(void*, char const*)+0x36>

Disassembly of section .text._ZN15RDMDeviceParams7BuilderEPKN3rdm12deviceparams6ParamsEPcjRj:

0000000000000000 <RDMDeviceParams::Builder(rdm::deviceparams::Params const*, char*, unsigned int, unsigned int&)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	41 56                	push   %r14
   6:	41 89 ce             	mov    %ecx,%r14d
   9:	41 55                	push   %r13
   b:	49 89 d5             	mov    %rdx,%r13
   e:	41 54                	push   %r12
  10:	4d 89 c4             	mov    %r8,%r12
  13:	4c 8d 47 08          	lea    0x8(%rdi),%r8
  17:	55                   	push   %rbp
  18:	53                   	push   %rbx
  19:	48 89 fb             	mov    %rdi,%rbx
  1c:	48 83 ec 20          	sub    $0x20,%rsp
  20:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  27:	00 00 
  29:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2e:	31 c0                	xor    %eax,%eax
  30:	48 85 f6             	test   %rsi,%rsi
  33:	74 0c                	je     41 <RDMDeviceParams::Builder(rdm::deviceparams::Params const*, char*, unsigned int, unsigned int&)+0x41>
  35:	b9 29 00 00 00       	mov    $0x29,%ecx
  3a:	4c 89 c7             	mov    %r8,%rdi
  3d:	f3 a4                	rep movsb %ds:(%rsi),%es:(%rdi)
  3f:	eb 0c                	jmp    4d <RDMDeviceParams::Builder(rdm::deviceparams::Params const*, char*, unsigned int, unsigned int&)+0x4d>
  41:	48 8b 3f             	mov    (%rdi),%rdi
  44:	4c 89 c6             	mov    %r8,%rsi
  47:	48 8b 07             	mov    (%rdi),%rax
  4a:	ff 50 18             	call   *0x18(%rax)
  4d:	48 8d 6c 24 08       	lea    0x8(%rsp),%rbp
  52:	44 89 f1             	mov    %r14d,%ecx
  55:	4c 89 ea             	mov    %r13,%rdx
  58:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5f <RDMDeviceParams::Builder(rdm::deviceparams::Params const*, char*, unsigned int, unsigned int&)+0x5f>
  5f:	48 89 ef             	mov    %rbp,%rdi
  62:	e8 00 00 00 00       	call   67 <RDMDeviceParams::Builder(rdm::deviceparams::Params const*, char*, unsigned int, unsigned int&)+0x67>
  67:	be 02 00 00 00       	mov    $0x2,%esi
  6c:	48 89 df             	mov    %rbx,%rdi
  6f:	e8 00 00 00 00       	call   74 <RDMDeviceParams::Builder(rdm::deviceparams::Params const*, char*, unsigned int, unsigned int&)+0x74>
  74:	0f b7 53 2d          	movzwl 0x2d(%rbx),%edx
  78:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 7f <RDMDeviceParams::Builder(rdm::deviceparams::Params const*, char*, unsigned int, unsigned int&)+0x7f>
  7f:	48 89 ef             	mov    %rbp,%rdi
  82:	0f b6 c8             	movzbl %al,%ecx
  85:	e8 00 00 00 00       	call   8a <RDMDeviceParams::Builder(rdm::deviceparams::Params const*, char*, unsigned int, unsigned int&)+0x8a>
  8a:	be 04 00 00 00       	mov    $0x4,%esi
  8f:	48 89 df             	mov    %rbx,%rdi
  92:	e8 00 00 00 00       	call   97 <RDMDeviceParams::Builder(rdm::deviceparams::Params const*, char*, unsigned int, unsigned int&)+0x97>
  97:	0f b7 53 2f          	movzwl 0x2f(%rbx),%edx
  9b:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # a2 <RDMDeviceParams::Builder(rdm::deviceparams::Params const*, char*, unsigned int, unsigned int&)+0xa2>
  a2:	48 89 ef             	mov    %rbp,%rdi
  a5:	0f b6 c8             	movzbl %al,%ecx
  a8:	e8 00 00 00 00       	call   ad <RDMDeviceParams::Builder(rdm::deviceparams::Params const*, char*, unsigned int, unsigned int&)+0xad>
  ad:	48 89 ef             	mov    %rbp,%rdi
  b0:	e8 00 00 00 00       	call   b5 <RDMDeviceParams::Builder(rdm::deviceparams::Params const*, char*, unsigned int, unsigned int&)+0xb5>
  b5:	0f b7 c0             	movzwl %ax,%eax
  b8:	41 89 04 24          	mov    %eax,(%r12)
  bc:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  c1:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  c8:	00 00 
  ca:	74 05                	je     d1 <RDMDeviceParams::Builder(rdm::deviceparams::Params const*, char*, unsigned int, unsigned int&)+0xd1>
  cc:	e8 00 00 00 00       	call   d1 <RDMDeviceParams::Builder(rdm::deviceparams::Params const*, char*, unsigned int, unsigned int&)+0xd1>
  d1:	48 83 c4 20          	add    $0x20,%rsp
  d5:	5b                   	pop    %rbx
  d6:	5d                   	pop    %rbp
  d7:	41 5c                	pop    %r12
  d9:	41 5d                	pop    %r13
  db:	41 5e                	pop    %r14
  dd:	c3                   	ret    

Disassembly of section .text._ZSt3minIhERKT_S2_S2_:

0000000000000000 <unsigned char const& std::min<unsigned char>(unsigned char const&, unsigned char const&)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 ec 18          	sub    $0x18,%rsp
   8:	48 89 f0             	mov    %rsi,%rax
   b:	8a 0f                	mov    (%rdi),%cl
   d:	64 48 8b 14 25 28 00 	mov    %fs:0x28,%rdx
  14:	00 00 
  16:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  1b:	31 d2                	xor    %edx,%edx
  1d:	38 0e                	cmp    %cl,(%rsi)
  1f:	72 03                	jb     24 <unsigned char const& std::min<unsigned char>(unsigned char const&, unsigned char const&)+0x24>
  21:	48 89 f8             	mov    %rdi,%rax
  24:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  29:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  30:	00 00 
  32:	74 05                	je     39 <unsigned char const& std::min<unsigned char>(unsigned char const&, unsigned char const&)+0x39>
  34:	e8 00 00 00 00       	call   39 <unsigned char const& std::min<unsigned char>(unsigned char const&, unsigned char const&)+0x39>
  39:	48 83 c4 18          	add    $0x18,%rsp
  3d:	c3                   	ret    

rdmdeviceresponder.o:     file format elf64-x86-64


Disassembly of section .text._ZN9RDMDevice4InitEv:

0000000000000000 <RDMDevice::Init()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	c6 40 5a 01          	movb   $0x1,0x5a(%rax)
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2b:	48 89 c7             	mov    %rax,%rdi
  2e:	e8 00 00 00 00       	call   33 <RDMDevice::Init()+0x33>
  33:	90                   	nop
  34:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  38:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  3f:	00 00 
  41:	74 05                	je     48 <RDMDevice::Init()+0x48>
  43:	e8 00 00 00 00       	call   48 <RDMDevice::Init()+0x48>
  48:	c9                   	leave  
  49:	c3                   	ret    

Disassembly of section .text._ZN9RDMDevice18SetFactoryDefaultsEv:

0000000000000000 <RDMDevice::SetFactoryDefaults()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  23:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  27:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  2b:	0f b6 40 59          	movzbl 0x59(%rax),%eax
  2f:	88 45 e8             	mov    %al,-0x18(%rbp)
  32:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
  36:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  3a:	48 89 d6             	mov    %rdx,%rsi
  3d:	48 89 c7             	mov    %rax,%rdi
  40:	e8 00 00 00 00       	call   45 <RDMDevice::SetFactoryDefaults()+0x45>
  45:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  49:	48 89 c7             	mov    %rax,%rdi
  4c:	e8 00 00 00 00       	call   51 <RDMDevice::SetFactoryDefaults()+0x51>
  51:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  55:	66 89 42 4c          	mov    %ax,0x4c(%rdx)
  59:	90                   	nop
  5a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  5e:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  65:	00 00 
  67:	74 05                	je     6e <RDMDevice::SetFactoryDefaults()+0x6e>
  69:	e8 00 00 00 00       	call   6e <RDMDevice::SetFactoryDefaults()+0x6e>
  6e:	c9                   	leave  
  6f:	c3                   	ret    

Disassembly of section .text._ZN9RDMDevice8SetLabelEPK18TRDMDeviceInfoData:

0000000000000000 <RDMDevice::SetLabel(TRDMDeviceInfoData const*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  27:	48 8d 50 08          	lea    0x8(%rax),%rdx
  2b:	c6 45 f6 20          	movb   $0x20,-0xa(%rbp)
  2f:	48 8d 45 f6          	lea    -0xa(%rbp),%rax
  33:	48 89 d6             	mov    %rdx,%rsi
  36:	48 89 c7             	mov    %rax,%rdi
  39:	e8 00 00 00 00       	call   3e <RDMDevice::SetLabel(TRDMDeviceInfoData const*)+0x3e>
  3e:	0f b6 00             	movzbl (%rax),%eax
  41:	88 45 f7             	mov    %al,-0x9(%rbp)
  44:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  48:	0f b6 40 5a          	movzbl 0x5a(%rax),%eax
  4c:	84 c0                	test   %al,%al
  4e:	74 6a                	je     ba <RDMDevice::SetLabel(TRDMDeviceInfoData const*)+0xba>
  50:	0f b6 55 f7          	movzbl -0x9(%rbp),%edx
  54:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  58:	48 8b 00             	mov    (%rax),%rax
  5b:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  5f:	48 83 c1 20          	add    $0x20,%rcx
  63:	48 89 c6             	mov    %rax,%rsi
  66:	48 89 cf             	mov    %rcx,%rdi
  69:	e8 00 00 00 00       	call   6e <RDMDevice::SetLabel(TRDMDeviceInfoData const*)+0x6e>
  6e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  72:	0f b6 55 f7          	movzbl -0x9(%rbp),%edx
  76:	88 50 58             	mov    %dl,0x58(%rax)
  79:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7d:	48 8b 40 40          	mov    0x40(%rax),%rax
  81:	48 85 c0             	test   %rax,%rax
  84:	74 59                	je     df <RDMDevice::SetLabel(TRDMDeviceInfoData const*)+0xdf>
  86:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8a:	48 8b 40 40          	mov    0x40(%rax),%rax
  8e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  92:	48 8b 52 40          	mov    0x40(%rdx),%rdx
  96:	48 8b 12             	mov    (%rdx),%rdx
  99:	48 83 c2 10          	add    $0x10,%rdx
  9d:	48 8b 0a             	mov    (%rdx),%rcx
  a0:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  a4:	0f b6 52 58          	movzbl 0x58(%rdx),%edx
  a8:	0f b6 d2             	movzbl %dl,%edx
  ab:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  af:	48 83 c6 20          	add    $0x20,%rsi
  b3:	48 89 c7             	mov    %rax,%rdi
  b6:	ff d1                	call   *%rcx
  b8:	eb 25                	jmp    df <RDMDevice::SetLabel(TRDMDeviceInfoData const*)+0xdf>
  ba:	0f b6 55 f7          	movzbl -0x9(%rbp),%edx
  be:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  c2:	48 8b 08             	mov    (%rax),%rcx
  c5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  c9:	48 89 ce             	mov    %rcx,%rsi
  cc:	48 89 c7             	mov    %rax,%rdi
  cf:	e8 00 00 00 00       	call   d4 <RDMDevice::SetLabel(TRDMDeviceInfoData const*)+0xd4>
  d4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  d8:	0f b6 55 f7          	movzbl -0x9(%rbp),%edx
  dc:	88 50 59             	mov    %dl,0x59(%rax)
  df:	90                   	nop
  e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  e4:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  eb:	00 00 
  ed:	74 05                	je     f4 <RDMDevice::SetLabel(TRDMDeviceInfoData const*)+0xf4>
  ef:	e8 00 00 00 00       	call   f4 <RDMDevice::SetLabel(TRDMDeviceInfoData const*)+0xf4>
  f4:	c9                   	leave  
  f5:	c3                   	ret    

Disassembly of section .text._ZNK9RDMDevice18GetProductCategoryEv:

0000000000000000 <RDMDevice::GetProductCategory() const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	0f b7 40 48          	movzwl 0x48(%rax),%eax
  27:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  2b:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  32:	00 00 
  34:	74 05                	je     3b <RDMDevice::GetProductCategory() const+0x3b>
  36:	e8 00 00 00 00       	call   3b <RDMDevice::GetProductCategory() const+0x3b>
  3b:	c9                   	leave  
  3c:	c3                   	ret    

Disassembly of section .text._ZN9RDMDevice17CalculateChecksumEv:

0000000000000000 <RDMDevice::CalculateChecksum()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	0f b6 40 59          	movzbl 0x59(%rax),%eax
  27:	0f b6 c0             	movzbl %al,%eax
  2a:	66 89 45 f2          	mov    %ax,-0xe(%rbp)
  2e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  35:	eb 16                	jmp    4d <RDMDevice::CalculateChecksum()+0x4d>
  37:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  3b:	8b 45 f4             	mov    -0xc(%rbp),%eax
  3e:	0f b6 44 02 20       	movzbl 0x20(%rdx,%rax,1),%eax
  43:	66 98                	cbtw   
  45:	66 01 45 f2          	add    %ax,-0xe(%rbp)
  49:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  4d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  51:	0f b6 40 58          	movzbl 0x58(%rax),%eax
  55:	0f b6 c0             	movzbl %al,%eax
  58:	39 45 f4             	cmp    %eax,-0xc(%rbp)
  5b:	72 da                	jb     37 <RDMDevice::CalculateChecksum()+0x37>
  5d:	0f b7 45 f2          	movzwl -0xe(%rbp),%eax
  61:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  65:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  6c:	00 00 
  6e:	74 05                	je     75 <RDMDevice::CalculateChecksum()+0x75>
  70:	e8 00 00 00 00       	call   75 <RDMDevice::CalculateChecksum()+0x75>
  75:	c9                   	leave  
  76:	c3                   	ret    

Disassembly of section .text._ZN8Hardware10GetBoardIdEv:

0000000000000000 <Hardware::GetBoardId()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	8b 80 4c 02 00 00    	mov    0x24c(%rax),%eax
  29:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  2d:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  34:	00 00 
  36:	74 05                	je     3d <Hardware::GetBoardId()+0x3d>
  38:	e8 00 00 00 00       	call   3d <Hardware::GetBoardId()+0x3d>
  3d:	c9                   	leave  
  3e:	c3                   	ret    

Disassembly of section .text._ZN8Hardware3GetEv:

0000000000000000 <Hardware::Get()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 22 <Hardware::Get()+0x22>
  22:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  26:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  2d:	00 00 
  2f:	74 05                	je     36 <Hardware::Get()+0x36>
  31:	e8 00 00 00 00       	call   36 <Hardware::Get()+0x36>
  36:	c9                   	leave  
  37:	c3                   	ret    

Disassembly of section .text._ZN11RDMIdentifyD2Ev:

0000000000000000 <RDMIdentify::~RDMIdentify()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	90                   	nop
  20:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  24:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  2b:	00 00 
  2d:	74 05                	je     34 <RDMIdentify::~RDMIdentify()+0x34>
  2f:	e8 00 00 00 00       	call   34 <RDMIdentify::~RDMIdentify()+0x34>
  34:	c9                   	leave  
  35:	c3                   	ret    

Disassembly of section .text._ZNK14RDMPersonality11GetLightSetEv:

0000000000000000 <RDMPersonality::GetLightSet() const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	48 8b 40 08          	mov    0x8(%rax),%rax
  27:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  2b:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  32:	00 00 
  34:	74 05                	je     3b <RDMPersonality::GetLightSet() const+0x3b>
  36:	e8 00 00 00 00       	call   3b <RDMPersonality::GetLightSet() const+0x3b>
  3b:	c9                   	leave  
  3c:	c3                   	ret    

Disassembly of section .text._ZNK14RDMPersonality14GetDescriptionEv:

0000000000000000 <RDMPersonality::GetDescription() const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	48 83 c0 10          	add    $0x10,%rax
  27:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  2b:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  32:	00 00 
  34:	74 05                	je     3b <RDMPersonality::GetDescription() const+0x3b>
  36:	e8 00 00 00 00       	call   3b <RDMPersonality::GetDescription() const+0x3b>
  3b:	c9                   	leave  
  3c:	c3                   	ret    

Disassembly of section .text._ZNK14RDMPersonality20GetDescriptionLengthEv:

0000000000000000 <RDMPersonality::GetDescriptionLength() const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	8b 40 30             	mov    0x30(%rax),%eax
  26:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  2a:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  31:	00 00 
  33:	74 05                	je     3a <RDMPersonality::GetDescriptionLength() const+0x3a>
  35:	e8 00 00 00 00       	call   3a <RDMPersonality::GetDescriptionLength() const+0x3a>
  3a:	c9                   	leave  
  3b:	c3                   	ret    

Disassembly of section .text._ZNK10RDMSensors8GetCountEv:

0000000000000000 <RDMSensors::GetCount() const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	0f b6 40 08          	movzbl 0x8(%rax),%eax
  27:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  2b:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  32:	00 00 
  34:	74 05                	je     3b <RDMSensors::GetCount() const+0x3b>
  36:	e8 00 00 00 00       	call   3b <RDMSensors::GetCount() const+0x3b>
  3b:	c9                   	leave  
  3c:	c3                   	ret    

Disassembly of section .text._ZNK13RDMSubDevices8GetCountEv:

0000000000000000 <RDMSubDevices::GetCount() const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  27:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  2b:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  32:	00 00 
  34:	74 05                	je     3b <RDMSubDevices::GetCount() const+0x3b>
  36:	e8 00 00 00 00       	call   3b <RDMSubDevices::GetCount() const+0x3b>
  3b:	c9                   	leave  
  3c:	c3                   	ret    

Disassembly of section .text._ZN18RDMDeviceResponderD2Ev:

0000000000000000 <RDMDeviceResponder::~RDMDeviceResponder()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 26 <RDMDeviceResponder::~RDMDeviceResponder()+0x26>
  26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2a:	48 89 10             	mov    %rdx,(%rax)
  2d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  31:	48 83 c0 78          	add    $0x78,%rax
  35:	48 89 c7             	mov    %rax,%rdi
  38:	e8 00 00 00 00       	call   3d <RDMDeviceResponder::~RDMDeviceResponder()+0x3d>
  3d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  41:	48 83 c0 68          	add    $0x68,%rax
  45:	48 89 c7             	mov    %rax,%rdi
  48:	e8 00 00 00 00       	call   4d <RDMDeviceResponder::~RDMDeviceResponder()+0x4d>
  4d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  51:	48 83 c0 63          	add    $0x63,%rax
  55:	48 89 c7             	mov    %rax,%rdi
  58:	e8 00 00 00 00       	call   5d <RDMDeviceResponder::~RDMDeviceResponder()+0x5d>
  5d:	90                   	nop
  5e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  62:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  69:	00 00 
  6b:	74 05                	je     72 <RDMDeviceResponder::~RDMDeviceResponder()+0x72>
  6d:	e8 00 00 00 00       	call   72 <RDMDeviceResponder::~RDMDeviceResponder()+0x72>
  72:	c9                   	leave  
  73:	c3                   	ret    

Disassembly of section .text._ZN18RDMDeviceResponderD0Ev:

0000000000000000 <RDMDeviceResponder::~RDMDeviceResponder()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	call   2b <RDMDeviceResponder::~RDMDeviceResponder()+0x2b>
  2b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	call   37 <RDMDeviceResponder::~RDMDeviceResponder()+0x37>
  37:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3b:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  42:	00 00 
  44:	74 05                	je     4b <RDMDeviceResponder::~RDMDeviceResponder()+0x4b>
  46:	e8 00 00 00 00       	call   4b <RDMDeviceResponder::~RDMDeviceResponder()+0x4b>
  4b:	c9                   	leave  
  4c:	c3                   	ret    

Disassembly of section .text._ZN18RDMDeviceResponder13GetDeviceInfoEt:

0000000000000000 <RDMDeviceResponder::GetDeviceInfo(unsigned short)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	66 89 45 e4          	mov    %ax,-0x1c(%rbp)
  16:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1d:	00 00 
  1f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  23:	31 c0                	xor    %eax,%eax
  25:	66 83 7d e4 00       	cmpw   $0x0,-0x1c(%rbp)
  2a:	0f 84 bd 00 00 00    	je     ed <RDMDeviceResponder::GetDeviceInfo(unsigned short)+0xed>
  30:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  34:	48 8d 50 78          	lea    0x78(%rax),%rdx
  38:	0f b7 45 e4          	movzwl -0x1c(%rbp),%eax
  3c:	89 c6                	mov    %eax,%esi
  3e:	48 89 d7             	mov    %rdx,%rdi
  41:	e8 00 00 00 00       	call   46 <RDMDeviceResponder::GetDeviceInfo(unsigned short)+0x46>
  46:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  4a:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  4f:	0f 84 8c 00 00 00    	je     e1 <RDMDeviceResponder::GetDeviceInfo(unsigned short)+0xe1>
  55:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  59:	0f b7 00             	movzwl (%rax),%eax
  5c:	66 c1 e8 08          	shr    $0x8,%ax
  60:	89 c2                	mov    %eax,%edx
  62:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  66:	88 90 b6 00 00 00    	mov    %dl,0xb6(%rax)
  6c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  70:	0f b7 00             	movzwl (%rax),%eax
  73:	89 c2                	mov    %eax,%edx
  75:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  79:	88 90 b7 00 00 00    	mov    %dl,0xb7(%rax)
  7f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  83:	0f b6 50 04          	movzbl 0x4(%rax),%edx
  87:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8b:	88 90 b8 00 00 00    	mov    %dl,0xb8(%rax)
  91:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  95:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  99:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  9d:	88 90 b9 00 00 00    	mov    %dl,0xb9(%rax)
  a3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  a7:	0f b7 40 02          	movzwl 0x2(%rax),%eax
  ab:	66 c1 e8 08          	shr    $0x8,%ax
  af:	89 c2                	mov    %eax,%edx
  b1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  b5:	88 90 ba 00 00 00    	mov    %dl,0xba(%rax)
  bb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  bf:	0f b7 40 02          	movzwl 0x2(%rax),%eax
  c3:	89 c2                	mov    %eax,%edx
  c5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  c9:	88 90 bb 00 00 00    	mov    %dl,0xbb(%rax)
  cf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  d3:	0f b6 50 27          	movzbl 0x27(%rax),%edx
  d7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  db:	88 90 be 00 00 00    	mov    %dl,0xbe(%rax)
  e1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  e5:	48 05 ac 00 00 00    	add    $0xac,%rax
  eb:	eb 0a                	jmp    f7 <RDMDeviceResponder::GetDeviceInfo(unsigned short)+0xf7>
  ed:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  f1:	48 05 99 00 00 00    	add    $0x99,%rax
  f7:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  fb:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
 102:	00 00 
 104:	74 05                	je     10b <RDMDeviceResponder::GetDeviceInfo(unsigned short)+0x10b>
 106:	e8 00 00 00 00       	call   10b <RDMDeviceResponder::GetDeviceInfo(unsigned short)+0x10b>
 10b:	c9                   	leave  
 10c:	c3                   	ret    

Disassembly of section .text._ZN18RDMDeviceResponder17CalculateChecksumEv:

0000000000000000 <RDMDeviceResponder::CalculateChecksum()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	0f b6 80 a7 00 00 00 	movzbl 0xa7(%rax),%eax
  2a:	0f b6 c0             	movzbl %al,%eax
  2d:	c1 f8 08             	sar    $0x8,%eax
  30:	89 c2                	mov    %eax,%edx
  32:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  36:	0f b6 80 a8 00 00 00 	movzbl 0xa8(%rax),%eax
  3d:	0f b6 c0             	movzbl %al,%eax
  40:	01 d0                	add    %edx,%eax
  42:	66 89 45 f6          	mov    %ax,-0xa(%rbp)
  46:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4a:	0f b6 80 a5 00 00 00 	movzbl 0xa5(%rax),%eax
  51:	0f b6 c0             	movzbl %al,%eax
  54:	66 01 45 f6          	add    %ax,-0xa(%rbp)
  58:	0f b7 45 f6          	movzwl -0xa(%rbp),%eax
  5c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  60:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  67:	00 00 
  69:	74 05                	je     70 <RDMDeviceResponder::CalculateChecksum()+0x70>
  6b:	e8 00 00 00 00       	call   70 <RDMDeviceResponder::CalculateChecksum()+0x70>
  70:	c9                   	leave  
  71:	c3                   	ret    

Disassembly of section .text._ZN18RDMDeviceResponderC2EPP14RDMPersonalityj:

0000000000000000 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  14:	89 55 dc             	mov    %edx,-0x24(%rbp)
  17:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1e:	00 00 
  20:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  24:	31 c0                	xor    %eax,%eax
  26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2a:	48 83 c0 08          	add    $0x8,%rax
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	call   36 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0x36>
  36:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 3d <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0x3d>
  3d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  41:	48 89 10             	mov    %rdx,(%rax)
  44:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  48:	48 83 c0 63          	add    $0x63,%rax
  4c:	48 89 c7             	mov    %rax,%rdi
  4f:	e8 00 00 00 00       	call   54 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0x54>
  54:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  58:	48 83 c0 68          	add    $0x68,%rax
  5c:	48 89 c7             	mov    %rax,%rdi
  5f:	e8 00 00 00 00       	call   64 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0x64>
  64:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  68:	48 83 c0 78          	add    $0x78,%rax
  6c:	48 89 c7             	mov    %rax,%rdi
  6f:	e8 00 00 00 00       	call   74 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0x74>
  74:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  78:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  7c:	48 89 90 88 00 00 00 	mov    %rdx,0x88(%rax)
  83:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  87:	c6 80 c1 00 00 00 01 	movb   $0x1,0xc1(%rax)
  8e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  92:	66 c7 80 c2 00 00 00 	movw   $0x0,0xc2(%rax)
  99:	00 00 
  9b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  9f:	66 c7 80 c4 00 00 00 	movw   $0x1,0xc4(%rax)
  a6:	01 00 
  a8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  ac:	48 89 05 00 00 00 00 	mov    %rax,0x0(%rip)        # b3 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0xb3>
  b3:	ba 65 00 00 00       	mov    $0x65,%edx
  b8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  bc:	88 90 bf 00 00 00    	mov    %dl,0xbf(%rax)
  c2:	ba 6e 00 00 00       	mov    $0x6e,%edx
  c7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  cb:	88 90 c0 00 00 00    	mov    %dl,0xc0(%rax)
  d1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  d5:	48 05 99 00 00 00    	add    $0x99,%rax
  db:	ba 13 00 00 00       	mov    $0x13,%edx
  e0:	be 00 00 00 00       	mov    $0x0,%esi
  e5:	48 89 c7             	mov    %rax,%rdi
  e8:	e8 00 00 00 00       	call   ed <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0xed>
  ed:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  f1:	48 05 ac 00 00 00    	add    $0xac,%rax
  f7:	ba 13 00 00 00       	mov    $0x13,%edx
  fc:	be 00 00 00 00       	mov    $0x0,%esi
 101:	48 89 c7             	mov    %rax,%rdi
 104:	e8 00 00 00 00       	call   109 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0x109>
 109:	8b 45 dc             	mov    -0x24(%rbp),%eax
 10c:	89 c2                	mov    %eax,%edx
 10e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 112:	88 90 a6 00 00 00    	mov    %dl,0xa6(%rax)
 118:	e8 00 00 00 00       	call   11d <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0x11d>
 11d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
 121:	48 89 82 90 00 00 00 	mov    %rax,0x90(%rdx)
 128:	e8 00 00 00 00       	call   12d <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0x12d>
 12d:	89 c2                	mov    %eax,%edx
 12f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 133:	88 90 98 00 00 00    	mov    %dl,0x98(%rax)
 139:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 13d:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
 144:	48 8b 00             	mov    (%rax),%rax
 147:	48 89 c7             	mov    %rax,%rdi
 14a:	e8 00 00 00 00       	call   14f <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0x14f>
 14f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
 153:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
 158:	75 0d                	jne    167 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0x167>
 15a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 15e:	66 c7 80 c4 00 00 00 	movw   $0xffff,0xc4(%rax)
 165:	ff ff 
 167:	90                   	nop
 168:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 16c:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 173:	00 00 
 175:	74 05                	je     17c <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0x17c>
 177:	e8 00 00 00 00       	call   17c <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0x17c>
 17c:	c9                   	leave  
 17d:	c3                   	ret    

Disassembly of section .text._ZN18RDMDeviceResponder4InitEv:

0000000000000000 <RDMDeviceResponder::Init()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  23:	48 83 c0 08          	add    $0x8,%rax
  27:	48 89 c7             	mov    %rax,%rdi
  2a:	e8 00 00 00 00       	call   2f <RDMDeviceResponder::Init()+0x2f>
  2f:	e8 00 00 00 00       	call   34 <RDMDeviceResponder::Init()+0x34>
  34:	89 45 e8             	mov    %eax,-0x18(%rbp)
  37:	e8 00 00 00 00       	call   3c <RDMDeviceResponder::Init()+0x3c>
  3c:	48 89 c7             	mov    %rax,%rdi
  3f:	e8 00 00 00 00       	call   44 <RDMDeviceResponder::Init()+0x44>
  44:	89 45 ec             	mov    %eax,-0x14(%rbp)
  47:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4b:	48 83 c0 08          	add    $0x8,%rax
  4f:	48 89 c7             	mov    %rax,%rdi
  52:	e8 00 00 00 00       	call   57 <RDMDeviceResponder::Init()+0x57>
  57:	66 89 45 e4          	mov    %ax,-0x1c(%rbp)
  5b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  5f:	48 83 c0 78          	add    $0x78,%rax
  63:	48 89 c7             	mov    %rax,%rdi
  66:	e8 00 00 00 00       	call   6b <RDMDeviceResponder::Init()+0x6b>
  6b:	66 89 45 e6          	mov    %ax,-0x1a(%rbp)
  6f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  73:	c6 80 99 00 00 00 01 	movb   $0x1,0x99(%rax)
  7a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  7e:	c6 80 9a 00 00 00 00 	movb   $0x0,0x9a(%rax)
  85:	8b 45 ec             	mov    -0x14(%rbp),%eax
  88:	c1 e8 08             	shr    $0x8,%eax
  8b:	89 c2                	mov    %eax,%edx
  8d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  91:	88 90 9b 00 00 00    	mov    %dl,0x9b(%rax)
  97:	8b 45 ec             	mov    -0x14(%rbp),%eax
  9a:	89 c2                	mov    %eax,%edx
  9c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  a0:	88 90 9c 00 00 00    	mov    %dl,0x9c(%rax)
  a6:	0f b7 45 e4          	movzwl -0x1c(%rbp),%eax
  aa:	66 c1 e8 08          	shr    $0x8,%ax
  ae:	89 c2                	mov    %eax,%edx
  b0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  b4:	88 90 9d 00 00 00    	mov    %dl,0x9d(%rax)
  ba:	0f b7 45 e4          	movzwl -0x1c(%rbp),%eax
  be:	89 c2                	mov    %eax,%edx
  c0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  c4:	88 90 9e 00 00 00    	mov    %dl,0x9e(%rax)
  ca:	8b 45 e8             	mov    -0x18(%rbp),%eax
  cd:	c1 e8 18             	shr    $0x18,%eax
  d0:	89 c2                	mov    %eax,%edx
  d2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  d6:	88 90 9f 00 00 00    	mov    %dl,0x9f(%rax)
  dc:	8b 45 e8             	mov    -0x18(%rbp),%eax
  df:	c1 e8 10             	shr    $0x10,%eax
  e2:	89 c2                	mov    %eax,%edx
  e4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  e8:	88 90 a0 00 00 00    	mov    %dl,0xa0(%rax)
  ee:	8b 45 e8             	mov    -0x18(%rbp),%eax
  f1:	c1 e8 08             	shr    $0x8,%eax
  f4:	89 c2                	mov    %eax,%edx
  f6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  fa:	88 90 a1 00 00 00    	mov    %dl,0xa1(%rax)
 100:	8b 45 e8             	mov    -0x18(%rbp),%eax
 103:	89 c2                	mov    %eax,%edx
 105:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 109:	88 90 a2 00 00 00    	mov    %dl,0xa2(%rax)
 10f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 113:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
 11a:	48 8b 00             	mov    (%rax),%rax
 11d:	48 89 c7             	mov    %rax,%rdi
 120:	e8 00 00 00 00       	call   125 <RDMDeviceResponder::Init()+0x125>
 125:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
 129:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
 12e:	75 4d                	jne    17d <RDMDeviceResponder::Init()+0x17d>
 130:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 134:	c6 80 a3 00 00 00 00 	movb   $0x0,0xa3(%rax)
 13b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 13f:	c6 80 a4 00 00 00 00 	movb   $0x0,0xa4(%rax)
 146:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 14a:	0f b7 80 c4 00 00 00 	movzwl 0xc4(%rax),%eax
 151:	66 c1 e8 08          	shr    $0x8,%ax
 155:	89 c2                	mov    %eax,%edx
 157:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 15b:	88 90 a7 00 00 00    	mov    %dl,0xa7(%rax)
 161:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 165:	0f b7 80 c4 00 00 00 	movzwl 0xc4(%rax),%eax
 16c:	89 c2                	mov    %eax,%edx
 16e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 172:	88 90 a8 00 00 00    	mov    %dl,0xa8(%rax)
 178:	e9 94 00 00 00       	jmp    211 <RDMDeviceResponder::Init()+0x211>
 17d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 181:	48 8b 00             	mov    (%rax),%rax
 184:	48 83 c0 60          	add    $0x60,%rax
 188:	48 8b 10             	mov    (%rax),%rdx
 18b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 18f:	48 89 c7             	mov    %rax,%rdi
 192:	ff d2                	call   *%rdx
 194:	66 c1 e8 08          	shr    $0x8,%ax
 198:	89 c2                	mov    %eax,%edx
 19a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 19e:	88 90 a3 00 00 00    	mov    %dl,0xa3(%rax)
 1a4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 1a8:	48 8b 00             	mov    (%rax),%rax
 1ab:	48 83 c0 60          	add    $0x60,%rax
 1af:	48 8b 10             	mov    (%rax),%rdx
 1b2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 1b6:	48 89 c7             	mov    %rax,%rdi
 1b9:	ff d2                	call   *%rdx
 1bb:	89 c2                	mov    %eax,%edx
 1bd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 1c1:	88 90 a4 00 00 00    	mov    %dl,0xa4(%rax)
 1c7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 1cb:	48 8b 00             	mov    (%rax),%rax
 1ce:	48 83 c0 58          	add    $0x58,%rax
 1d2:	48 8b 10             	mov    (%rax),%rdx
 1d5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 1d9:	48 89 c7             	mov    %rax,%rdi
 1dc:	ff d2                	call   *%rdx
 1de:	66 c1 e8 08          	shr    $0x8,%ax
 1e2:	89 c2                	mov    %eax,%edx
 1e4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 1e8:	88 90 a7 00 00 00    	mov    %dl,0xa7(%rax)
 1ee:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 1f2:	48 8b 00             	mov    (%rax),%rax
 1f5:	48 83 c0 58          	add    $0x58,%rax
 1f9:	48 8b 10             	mov    (%rax),%rdx
 1fc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 200:	48 89 c7             	mov    %rax,%rdi
 203:	ff d2                	call   *%rdx
 205:	89 c2                	mov    %eax,%edx
 207:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 20b:	88 90 a8 00 00 00    	mov    %dl,0xa8(%rax)
 211:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 215:	c6 80 a5 00 00 00 01 	movb   $0x1,0xa5(%rax)
 21c:	0f b7 45 e6          	movzwl -0x1a(%rbp),%eax
 220:	66 c1 e8 08          	shr    $0x8,%ax
 224:	89 c2                	mov    %eax,%edx
 226:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 22a:	88 90 a9 00 00 00    	mov    %dl,0xa9(%rax)
 230:	0f b7 45 e6          	movzwl -0x1a(%rbp),%eax
 234:	89 c2                	mov    %eax,%edx
 236:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 23a:	88 90 aa 00 00 00    	mov    %dl,0xaa(%rax)
 240:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 244:	48 83 c0 68          	add    $0x68,%rax
 248:	48 89 c7             	mov    %rax,%rdi
 24b:	e8 00 00 00 00       	call   250 <RDMDeviceResponder::Init()+0x250>
 250:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
 254:	88 82 ab 00 00 00    	mov    %al,0xab(%rdx)
 25a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 25e:	48 8d 88 99 00 00 00 	lea    0x99(%rax),%rcx
 265:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 269:	48 05 ac 00 00 00    	add    $0xac,%rax
 26f:	ba 13 00 00 00       	mov    $0x13,%edx
 274:	48 89 ce             	mov    %rcx,%rsi
 277:	48 89 c7             	mov    %rax,%rdi
 27a:	e8 00 00 00 00       	call   27f <RDMDeviceResponder::Init()+0x27f>
 27f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 283:	48 89 c7             	mov    %rax,%rdi
 286:	e8 00 00 00 00       	call   28b <RDMDeviceResponder::Init()+0x28b>
 28b:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
 28f:	66 89 82 c2 00 00 00 	mov    %ax,0xc2(%rdx)
 296:	90                   	nop
 297:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 29b:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 2a2:	00 00 
 2a4:	74 05                	je     2ab <RDMDeviceResponder::Init()+0x2ab>
 2a6:	e8 00 00 00 00       	call   2ab <RDMDeviceResponder::Init()+0x2ab>
 2ab:	c9                   	leave  
 2ac:	c3                   	ret    

Disassembly of section .text._ZN18RDMDeviceResponder5PrintEv:

0000000000000000 <RDMDeviceResponder::Print()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 40          	sub    $0x40,%rsp
   c:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  23:	48 83 c0 08          	add    $0x8,%rax
  27:	48 89 c7             	mov    %rax,%rdi
  2a:	e8 00 00 00 00       	call   2f <RDMDeviceResponder::Print()+0x2f>
  2f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  33:	be 00 00 00 00       	mov    $0x0,%esi
  38:	48 89 c7             	mov    %rax,%rdi
  3b:	e8 00 00 00 00       	call   40 <RDMDeviceResponder::Print()+0x40>
  40:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  44:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  48:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  4f:	48 8b 00             	mov    (%rax),%rax
  52:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  56:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5a:	48 89 c7             	mov    %rax,%rdi
  5d:	e8 00 00 00 00       	call   62 <RDMDeviceResponder::Print()+0x62>
  62:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  66:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  6a:	48 89 c7             	mov    %rax,%rdi
  6d:	e8 00 00 00 00       	call   72 <RDMDeviceResponder::Print()+0x72>
  72:	88 45 df             	mov    %al,-0x21(%rbp)
  75:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 7c <RDMDeviceResponder::Print()+0x7c>
  7c:	48 89 c7             	mov    %rax,%rdi
  7f:	e8 00 00 00 00       	call   84 <RDMDeviceResponder::Print()+0x84>
  84:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  88:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  8c:	0f b6 d0             	movzbl %al,%edx
  8f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  93:	0f b6 00             	movzbl (%rax),%eax
  96:	0f b6 c0             	movzbl %al,%eax
  99:	89 c6                	mov    %eax,%esi
  9b:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # a2 <RDMDeviceResponder::Print()+0xa2>
  a2:	48 89 c7             	mov    %rax,%rdi
  a5:	b8 00 00 00 00       	mov    $0x0,%eax
  aa:	e8 00 00 00 00       	call   af <RDMDeviceResponder::Print()+0xaf>
  af:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  b3:	0f b6 40 0e          	movzbl 0xe(%rax),%eax
  b7:	0f b6 c0             	movzbl %al,%eax
  ba:	c1 e0 08             	shl    $0x8,%eax
  bd:	89 c2                	mov    %eax,%edx
  bf:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  c3:	0f b6 40 0f          	movzbl 0xf(%rax),%eax
  c7:	0f b6 c0             	movzbl %al,%eax
  ca:	01 d0                	add    %edx,%eax
  cc:	89 c6                	mov    %eax,%esi
  ce:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # d5 <RDMDeviceResponder::Print()+0xd5>
  d5:	48 89 c7             	mov    %rax,%rdi
  d8:	b8 00 00 00 00       	mov    $0x0,%eax
  dd:	e8 00 00 00 00       	call   e2 <RDMDeviceResponder::Print()+0xe2>
  e2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  e6:	0f b6 40 0a          	movzbl 0xa(%rax),%eax
  ea:	0f b6 c0             	movzbl %al,%eax
  ed:	c1 e0 08             	shl    $0x8,%eax
  f0:	89 c2                	mov    %eax,%edx
  f2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  f6:	0f b6 40 0b          	movzbl 0xb(%rax),%eax
  fa:	0f b6 c0             	movzbl %al,%eax
  fd:	01 d0                	add    %edx,%eax
  ff:	89 c6                	mov    %eax,%esi
 101:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 108 <RDMDeviceResponder::Print()+0x108>
 108:	48 89 c7             	mov    %rax,%rdi
 10b:	b8 00 00 00 00       	mov    $0x0,%eax
 110:	e8 00 00 00 00       	call   115 <RDMDeviceResponder::Print()+0x115>
 115:	0f b6 4d df          	movzbl -0x21(%rbp),%ecx
 119:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
 11d:	0f b6 40 0d          	movzbl 0xd(%rax),%eax
 121:	0f b6 d0             	movzbl %al,%edx
 124:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
 128:	0f b6 40 0c          	movzbl 0xc(%rax),%eax
 12c:	0f b6 c0             	movzbl %al,%eax
 12f:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
 133:	49 89 f0             	mov    %rsi,%r8
 136:	89 c6                	mov    %eax,%esi
 138:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 13f <RDMDeviceResponder::Print()+0x13f>
 13f:	48 89 c7             	mov    %rax,%rdi
 142:	b8 00 00 00 00       	mov    $0x0,%eax
 147:	e8 00 00 00 00       	call   14c <RDMDeviceResponder::Print()+0x14c>
 14c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
 150:	0f b6 40 10          	movzbl 0x10(%rax),%eax
 154:	0f b6 c0             	movzbl %al,%eax
 157:	c1 e0 08             	shl    $0x8,%eax
 15a:	89 c2                	mov    %eax,%edx
 15c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
 160:	0f b6 40 11          	movzbl 0x11(%rax),%eax
 164:	0f b6 c0             	movzbl %al,%eax
 167:	01 d0                	add    %edx,%eax
 169:	89 c6                	mov    %eax,%esi
 16b:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 172 <RDMDeviceResponder::Print()+0x172>
 172:	48 89 c7             	mov    %rax,%rdi
 175:	b8 00 00 00 00       	mov    $0x0,%eax
 17a:	e8 00 00 00 00       	call   17f <RDMDeviceResponder::Print()+0x17f>
 17f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
 183:	0f b6 40 12          	movzbl 0x12(%rax),%eax
 187:	0f b6 c0             	movzbl %al,%eax
 18a:	89 c6                	mov    %eax,%esi
 18c:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 193 <RDMDeviceResponder::Print()+0x193>
 193:	48 89 c7             	mov    %rax,%rdi
 196:	b8 00 00 00 00       	mov    $0x0,%eax
 19b:	e8 00 00 00 00       	call   1a0 <RDMDeviceResponder::Print()+0x1a0>
 1a0:	90                   	nop
 1a1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 1a5:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 1ac:	00 00 
 1ae:	74 05                	je     1b5 <RDMDeviceResponder::Print()+0x1b5>
 1b0:	e8 00 00 00 00       	call   1b5 <RDMDeviceResponder::Print()+0x1b5>
 1b5:	c9                   	leave  
 1b6:	c3                   	ret    

Disassembly of section .text._ZN18RDMDeviceResponder17PersonalityUpdateEP8LightSet:

0000000000000000 <RDMDeviceResponder::PersonalityUpdate(LightSet*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	90                   	nop
  24:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  28:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  2f:	00 00 
  31:	74 05                	je     38 <RDMDeviceResponder::PersonalityUpdate(LightSet*)+0x38>
  33:	e8 00 00 00 00       	call   38 <RDMDeviceResponder::PersonalityUpdate(LightSet*)+0x38>
  38:	c9                   	leave  
  39:	c3                   	ret    

Disassembly of section .text._ZN18RDMDeviceResponder21DmxStartAddressUpdateEv:

0000000000000000 <RDMDeviceResponder::DmxStartAddressUpdate()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	90                   	nop
  20:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  24:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  2b:	00 00 
  2d:	74 05                	je     34 <RDMDeviceResponder::DmxStartAddressUpdate()+0x34>
  2f:	e8 00 00 00 00       	call   34 <RDMDeviceResponder::DmxStartAddressUpdate()+0x34>
  34:	c9                   	leave  
  35:	c3                   	ret    

Disassembly of section .text._ZSt3minIhERKT_S2_S2_:

0000000000000000 <unsigned char const& std::min<unsigned char>(unsigned char const&, unsigned char const&)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  27:	0f b6 10             	movzbl (%rax),%edx
  2a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2e:	0f b6 00             	movzbl (%rax),%eax
  31:	38 c2                	cmp    %al,%dl
  33:	73 06                	jae    3b <unsigned char const& std::min<unsigned char>(unsigned char const&, unsigned char const&)+0x3b>
  35:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  39:	eb 04                	jmp    3f <unsigned char const& std::min<unsigned char>(unsigned char const&, unsigned char const&)+0x3f>
  3b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  43:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  4a:	00 00 
  4c:	74 05                	je     53 <unsigned char const& std::min<unsigned char>(unsigned char const&, unsigned char const&)+0x53>
  4e:	e8 00 00 00 00       	call   53 <unsigned char const& std::min<unsigned char>(unsigned char const&, unsigned char const&)+0x53>
  53:	c9                   	leave  
  54:	c3                   	ret    

rdmhandler.o:     file format elf64-x86-64


Disassembly of section .text._ZN9RDMDevice18SetFactoryDefaultsEv:

0000000000000000 <RDMDevice::SetFactoryDefaults()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  23:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  27:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  2b:	0f b6 40 59          	movzbl 0x59(%rax),%eax
  2f:	88 45 e8             	mov    %al,-0x18(%rbp)
  32:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
  36:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  3a:	48 89 d6             	mov    %rdx,%rsi
  3d:	48 89 c7             	mov    %rax,%rdi
  40:	e8 00 00 00 00       	call   45 <RDMDevice::SetFactoryDefaults()+0x45>
  45:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  49:	48 89 c7             	mov    %rax,%rdi
  4c:	e8 00 00 00 00       	call   51 <RDMDevice::SetFactoryDefaults()+0x51>
  51:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  55:	66 89 42 4c          	mov    %ax,0x4c(%rdx)
  59:	90                   	nop
  5a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  5e:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  65:	00 00 
  67:	74 05                	je     6e <RDMDevice::SetFactoryDefaults()+0x6e>
  69:	e8 00 00 00 00       	call   6e <RDMDevice::SetFactoryDefaults()+0x6e>
  6e:	c9                   	leave  
  6f:	c3                   	ret    

Disassembly of section .text._ZN9RDMDevice18GetFactoryDefaultsEv:

0000000000000000 <RDMDevice::GetFactoryDefaults()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	53                   	push   %rbx
   9:	48 83 ec 28          	sub    $0x28,%rsp
   d:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  11:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  18:	00 00 
  1a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  1e:	31 c0                	xor    %eax,%eax
  20:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  24:	0f b7 58 4c          	movzwl 0x4c(%rax),%ebx
  28:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  2c:	48 89 c7             	mov    %rax,%rdi
  2f:	e8 00 00 00 00       	call   34 <RDMDevice::GetFactoryDefaults()+0x34>
  34:	66 39 c3             	cmp    %ax,%bx
  37:	0f 94 c0             	sete   %al
  3a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  3e:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  45:	00 00 
  47:	74 05                	je     4e <RDMDevice::GetFactoryDefaults()+0x4e>
  49:	e8 00 00 00 00       	call   4e <RDMDevice::GetFactoryDefaults()+0x4e>
  4e:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  52:	c9                   	leave  
  53:	c3                   	ret    

Disassembly of section .text._ZNK9RDMDevice6GetUIDEv:

0000000000000000 <RDMDevice::GetUID() const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	48 83 c0 4e          	add    $0x4e,%rax
  27:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  2b:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  32:	00 00 
  34:	74 05                	je     3b <RDMDevice::GetUID() const+0x3b>
  36:	e8 00 00 00 00       	call   3b <RDMDevice::GetUID() const+0x3b>
  3b:	c9                   	leave  
  3c:	c3                   	ret    

Disassembly of section .text._ZN9RDMDevice19GetManufacturerNameEP18TRDMDeviceInfoData:

0000000000000000 <RDMDevice::GetManufacturerName(TRDMDeviceInfoData*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  27:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 2e <RDMDevice::GetManufacturerName(TRDMDeviceInfoData*)+0x2e>
  2e:	48 89 10             	mov    %rdx,(%rax)
  31:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 38 <RDMDevice::GetManufacturerName(TRDMDeviceInfoData*)+0x38>
  38:	48 89 c7             	mov    %rax,%rdi
  3b:	e8 00 00 00 00       	call   40 <RDMDevice::GetManufacturerName(TRDMDeviceInfoData*)+0x40>
  40:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  44:	48 c7 45 e8 20 00 00 	movq   $0x20,-0x18(%rbp)
  4b:	00 
  4c:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
  50:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
  54:	48 89 d6             	mov    %rdx,%rsi
  57:	48 89 c7             	mov    %rax,%rdi
  5a:	e8 00 00 00 00       	call   5f <RDMDevice::GetManufacturerName(TRDMDeviceInfoData*)+0x5f>
  5f:	48 8b 00             	mov    (%rax),%rax
  62:	89 c2                	mov    %eax,%edx
  64:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  68:	88 50 08             	mov    %dl,0x8(%rax)
  6b:	90                   	nop
  6c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  70:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  77:	00 00 
  79:	74 05                	je     80 <RDMDevice::GetManufacturerName(TRDMDeviceInfoData*)+0x80>
  7b:	e8 00 00 00 00       	call   80 <RDMDevice::GetManufacturerName(TRDMDeviceInfoData*)+0x80>
  80:	c9                   	leave  
  81:	c3                   	ret    

Disassembly of section .text._ZN9RDMDevice8SetLabelEPK18TRDMDeviceInfoData:

0000000000000000 <RDMDevice::SetLabel(TRDMDeviceInfoData const*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  27:	48 8d 50 08          	lea    0x8(%rax),%rdx
  2b:	c6 45 f6 20          	movb   $0x20,-0xa(%rbp)
  2f:	48 8d 45 f6          	lea    -0xa(%rbp),%rax
  33:	48 89 d6             	mov    %rdx,%rsi
  36:	48 89 c7             	mov    %rax,%rdi
  39:	e8 00 00 00 00       	call   3e <RDMDevice::SetLabel(TRDMDeviceInfoData const*)+0x3e>
  3e:	0f b6 00             	movzbl (%rax),%eax
  41:	88 45 f7             	mov    %al,-0x9(%rbp)
  44:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  48:	0f b6 40 5a          	movzbl 0x5a(%rax),%eax
  4c:	84 c0                	test   %al,%al
  4e:	74 6a                	je     ba <RDMDevice::SetLabel(TRDMDeviceInfoData const*)+0xba>
  50:	0f b6 55 f7          	movzbl -0x9(%rbp),%edx
  54:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  58:	48 8b 00             	mov    (%rax),%rax
  5b:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  5f:	48 83 c1 20          	add    $0x20,%rcx
  63:	48 89 c6             	mov    %rax,%rsi
  66:	48 89 cf             	mov    %rcx,%rdi
  69:	e8 00 00 00 00       	call   6e <RDMDevice::SetLabel(TRDMDeviceInfoData const*)+0x6e>
  6e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  72:	0f b6 55 f7          	movzbl -0x9(%rbp),%edx
  76:	88 50 58             	mov    %dl,0x58(%rax)
  79:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7d:	48 8b 40 40          	mov    0x40(%rax),%rax
  81:	48 85 c0             	test   %rax,%rax
  84:	74 59                	je     df <RDMDevice::SetLabel(TRDMDeviceInfoData const*)+0xdf>
  86:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8a:	48 8b 40 40          	mov    0x40(%rax),%rax
  8e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  92:	48 8b 52 40          	mov    0x40(%rdx),%rdx
  96:	48 8b 12             	mov    (%rdx),%rdx
  99:	48 83 c2 10          	add    $0x10,%rdx
  9d:	48 8b 0a             	mov    (%rdx),%rcx
  a0:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  a4:	0f b6 52 58          	movzbl 0x58(%rdx),%edx
  a8:	0f b6 d2             	movzbl %dl,%edx
  ab:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  af:	48 83 c6 20          	add    $0x20,%rsi
  b3:	48 89 c7             	mov    %rax,%rdi
  b6:	ff d1                	call   *%rcx
  b8:	eb 25                	jmp    df <RDMDevice::SetLabel(TRDMDeviceInfoData const*)+0xdf>
  ba:	0f b6 55 f7          	movzbl -0x9(%rbp),%edx
  be:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  c2:	48 8b 08             	mov    (%rax),%rcx
  c5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  c9:	48 89 ce             	mov    %rcx,%rsi
  cc:	48 89 c7             	mov    %rax,%rdi
  cf:	e8 00 00 00 00       	call   d4 <RDMDevice::SetLabel(TRDMDeviceInfoData const*)+0xd4>
  d4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  d8:	0f b6 55 f7          	movzbl -0x9(%rbp),%edx
  dc:	88 50 59             	mov    %dl,0x59(%rax)
  df:	90                   	nop
  e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  e4:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  eb:	00 00 
  ed:	74 05                	je     f4 <RDMDevice::SetLabel(TRDMDeviceInfoData const*)+0xf4>
  ef:	e8 00 00 00 00       	call   f4 <RDMDevice::SetLabel(TRDMDeviceInfoData const*)+0xf4>
  f4:	c9                   	leave  
  f5:	c3                   	ret    

Disassembly of section .text._ZN9RDMDevice8GetLabelEP18TRDMDeviceInfoData:

0000000000000000 <RDMDevice::GetLabel(TRDMDeviceInfoData*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  27:	48 8d 50 20          	lea    0x20(%rax),%rdx
  2b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  2f:	48 89 10             	mov    %rdx,(%rax)
  32:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  36:	0f b6 50 58          	movzbl 0x58(%rax),%edx
  3a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  3e:	88 50 08             	mov    %dl,0x8(%rax)
  41:	90                   	nop
  42:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  46:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  4d:	00 00 
  4f:	74 05                	je     56 <RDMDevice::GetLabel(TRDMDeviceInfoData*)+0x56>
  51:	e8 00 00 00 00       	call   56 <RDMDevice::GetLabel(TRDMDeviceInfoData*)+0x56>
  56:	c9                   	leave  
  57:	c3                   	ret    

Disassembly of section .text._ZNK9RDMDevice16GetProductDetailEv:

0000000000000000 <RDMDevice::GetProductDetail() const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	0f b7 40 4a          	movzwl 0x4a(%rax),%eax
  27:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  2b:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  32:	00 00 
  34:	74 05                	je     3b <RDMDevice::GetProductDetail() const+0x3b>
  36:	e8 00 00 00 00       	call   3b <RDMDevice::GetProductDetail() const+0x3b>
  3b:	c9                   	leave  
  3c:	c3                   	ret    

Disassembly of section .text._ZN9RDMDevice17CalculateChecksumEv:

0000000000000000 <RDMDevice::CalculateChecksum()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	0f b6 40 59          	movzbl 0x59(%rax),%eax
  27:	0f b6 c0             	movzbl %al,%eax
  2a:	66 89 45 f2          	mov    %ax,-0xe(%rbp)
  2e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  35:	eb 16                	jmp    4d <RDMDevice::CalculateChecksum()+0x4d>
  37:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  3b:	8b 45 f4             	mov    -0xc(%rbp),%eax
  3e:	0f b6 44 02 20       	movzbl 0x20(%rdx,%rax,1),%eax
  43:	66 98                	cbtw   
  45:	66 01 45 f2          	add    %ax,-0xe(%rbp)
  49:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  4d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  51:	0f b6 40 58          	movzbl 0x58(%rax),%eax
  55:	0f b6 c0             	movzbl %al,%eax
  58:	39 45 f4             	cmp    %eax,-0xc(%rbp)
  5b:	72 da                	jb     37 <RDMDevice::CalculateChecksum()+0x37>
  5d:	0f b7 45 f2          	movzwl -0xe(%rbp),%eax
  61:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  65:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  6c:	00 00 
  6e:	74 05                	je     75 <RDMDevice::CalculateChecksum()+0x75>
  70:	e8 00 00 00 00       	call   75 <RDMDevice::CalculateChecksum()+0x75>
  75:	c9                   	leave  
  76:	c3                   	ret    

Disassembly of section .text._ZN8Hardware3GetEv:

0000000000000000 <Hardware::Get()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 22 <Hardware::Get()+0x22>
  22:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  26:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  2d:	00 00 
  2f:	74 05                	je     36 <Hardware::Get()+0x36>
  31:	e8 00 00 00 00       	call   36 <Hardware::Get()+0x36>
  36:	c9                   	leave  
  37:	c3                   	ret    

Disassembly of section .text._ZN11RDMIdentify2OnEv:

0000000000000000 <RDMIdentify::On()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	c6 05 00 00 00 00 01 	movb   $0x1,0x0(%rip)        # 26 <RDMIdentify::On()+0x26>
  26:	e8 00 00 00 00       	call   2b <RDMIdentify::On()+0x2b>
  2b:	ba 01 00 00 00       	mov    $0x1,%edx
  30:	be 04 00 00 00       	mov    $0x4,%esi
  35:	48 89 c7             	mov    %rax,%rdi
  38:	e8 00 00 00 00       	call   3d <RDMIdentify::On()+0x3d>
  3d:	0f b6 05 00 00 00 00 	movzbl 0x0(%rip),%eax        # 44 <RDMIdentify::On()+0x44>
  44:	84 c0                	test   %al,%al
  46:	74 15                	je     5d <RDMIdentify::On()+0x5d>
  48:	0f b6 15 00 00 00 00 	movzbl 0x0(%rip),%edx        # 4f <RDMIdentify::On()+0x4f>
  4f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  53:	89 d6                	mov    %edx,%esi
  55:	48 89 c7             	mov    %rax,%rdi
  58:	e8 00 00 00 00       	call   5d <RDMIdentify::On()+0x5d>
  5d:	90                   	nop
  5e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  62:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  69:	00 00 
  6b:	74 05                	je     72 <RDMIdentify::On()+0x72>
  6d:	e8 00 00 00 00       	call   72 <RDMIdentify::On()+0x72>
  72:	c9                   	leave  
  73:	c3                   	ret    

Disassembly of section .text._ZN11RDMIdentify3OffEv:

0000000000000000 <RDMIdentify::Off()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	c6 05 00 00 00 00 00 	movb   $0x0,0x0(%rip)        # 26 <RDMIdentify::Off()+0x26>
  26:	e8 00 00 00 00       	call   2b <RDMIdentify::Off()+0x2b>
  2b:	ba 00 00 00 00       	mov    $0x0,%edx
  30:	be 02 00 00 00       	mov    $0x2,%esi
  35:	48 89 c7             	mov    %rax,%rdi
  38:	e8 00 00 00 00       	call   3d <RDMIdentify::Off()+0x3d>
  3d:	0f b6 05 00 00 00 00 	movzbl 0x0(%rip),%eax        # 44 <RDMIdentify::Off()+0x44>
  44:	84 c0                	test   %al,%al
  46:	74 15                	je     5d <RDMIdentify::Off()+0x5d>
  48:	0f b6 15 00 00 00 00 	movzbl 0x0(%rip),%edx        # 4f <RDMIdentify::Off()+0x4f>
  4f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  53:	89 d6                	mov    %edx,%esi
  55:	48 89 c7             	mov    %rax,%rdi
  58:	e8 00 00 00 00       	call   5d <RDMIdentify::Off()+0x5d>
  5d:	90                   	nop
  5e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  62:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  69:	00 00 
  6b:	74 05                	je     72 <RDMIdentify::Off()+0x72>
  6d:	e8 00 00 00 00       	call   72 <RDMIdentify::Off()+0x72>
  72:	c9                   	leave  
  73:	c3                   	ret    

Disassembly of section .text._ZNK11RDMIdentify9IsEnabledEv:

0000000000000000 <RDMIdentify::IsEnabled() const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	0f b6 05 00 00 00 00 	movzbl 0x0(%rip),%eax        # 26 <RDMIdentify::IsEnabled() const+0x26>
  26:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  2a:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  31:	00 00 
  33:	74 05                	je     3a <RDMIdentify::IsEnabled() const+0x3a>
  35:	e8 00 00 00 00       	call   3a <RDMIdentify::IsEnabled() const+0x3a>
  3a:	c9                   	leave  
  3b:	c3                   	ret    

Disassembly of section .text._ZN11RDMIdentify3GetEv:

0000000000000000 <RDMIdentify::Get()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 22 <RDMIdentify::Get()+0x22>
  22:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  26:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  2d:	00 00 
  2f:	74 05                	je     36 <RDMIdentify::Get()+0x36>
  31:	e8 00 00 00 00       	call   36 <RDMIdentify::Get()+0x36>
  36:	c9                   	leave  
  37:	c3                   	ret    

Disassembly of section .text._ZNK14RDMPersonality8GetSlotsEv:

0000000000000000 <RDMPersonality::GetSlots() const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	0f b7 00             	movzwl (%rax),%eax
  26:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  2a:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  31:	00 00 
  33:	74 05                	je     3a <RDMPersonality::GetSlots() const+0x3a>
  35:	e8 00 00 00 00       	call   3a <RDMPersonality::GetSlots() const+0x3a>
  3a:	c9                   	leave  
  3b:	c3                   	ret    

Disassembly of section .text._ZNK14RDMPersonality11GetLightSetEv:

0000000000000000 <RDMPersonality::GetLightSet() const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	48 8b 40 08          	mov    0x8(%rax),%rax
  27:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  2b:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  32:	00 00 
  34:	74 05                	je     3b <RDMPersonality::GetLightSet() const+0x3b>
  36:	e8 00 00 00 00       	call   3b <RDMPersonality::GetLightSet() const+0x3b>
  3b:	c9                   	leave  
  3c:	c3                   	ret    

Disassembly of section .text._ZN14RDMPersonality17DescriptionCopyToEPcRh:

0000000000000000 <RDMPersonality::DescriptionCopyTo(char*, unsigned char&)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 40          	sub    $0x40,%rsp
   c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  14:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  18:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1f:	00 00 
  21:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  25:	31 c0                	xor    %eax,%eax
  27:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  2b:	48 83 c0 10          	add    $0x10,%rax
  2f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  33:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  37:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  3b:	c6 45 e7 00          	movb   $0x0,-0x19(%rbp)
  3f:	eb 21                	jmp    62 <RDMPersonality::DescriptionCopyTo(char*, unsigned char&)+0x62>
  41:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  45:	0f b6 10             	movzbl (%rax),%edx
  48:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4c:	88 10                	mov    %dl,(%rax)
  4e:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
  53:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
  58:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  5c:	83 c0 01             	add    $0x1,%eax
  5f:	88 45 e7             	mov    %al,-0x19(%rbp)
  62:	0f b6 55 e7          	movzbl -0x19(%rbp),%edx
  66:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  6a:	8b 40 30             	mov    0x30(%rax),%eax
  6d:	39 c2                	cmp    %eax,%edx
  6f:	73 0c                	jae    7d <RDMPersonality::DescriptionCopyTo(char*, unsigned char&)+0x7d>
  71:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  75:	0f b6 00             	movzbl (%rax),%eax
  78:	38 45 e7             	cmp    %al,-0x19(%rbp)
  7b:	72 c4                	jb     41 <RDMPersonality::DescriptionCopyTo(char*, unsigned char&)+0x41>
  7d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  81:	0f b6 55 e7          	movzbl -0x19(%rbp),%edx
  85:	88 10                	mov    %dl,(%rax)
  87:	90                   	nop
  88:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8c:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  93:	00 00 
  95:	74 05                	je     9c <RDMPersonality::DescriptionCopyTo(char*, unsigned char&)+0x9c>
  97:	e8 00 00 00 00       	call   9c <RDMPersonality::DescriptionCopyTo(char*, unsigned char&)+0x9c>
  9c:	c9                   	leave  
  9d:	c3                   	ret    

Disassembly of section .text._ZNK10RDMSensors8GetCountEv:

0000000000000000 <RDMSensors::GetCount() const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	0f b6 40 08          	movzbl 0x8(%rax),%eax
  27:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  2b:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  32:	00 00 
  34:	74 05                	je     3b <RDMSensors::GetCount() const+0x3b>
  36:	e8 00 00 00 00       	call   3b <RDMSensors::GetCount() const+0x3b>
  3b:	c9                   	leave  
  3c:	c3                   	ret    

Disassembly of section .text._ZN10RDMSensors3GetEv:

0000000000000000 <RDMSensors::Get()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 22 <RDMSensors::Get()+0x22>
  22:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  26:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  2d:	00 00 
  2f:	74 05                	je     36 <RDMSensors::Get()+0x36>
  31:	e8 00 00 00 00       	call   36 <RDMSensors::Get()+0x36>
  36:	c9                   	leave  
  37:	c3                   	ret    

Disassembly of section .text._ZNK13RDMSubDevices8GetCountEv:

0000000000000000 <RDMSubDevices::GetCount() const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  27:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  2b:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  32:	00 00 
  34:	74 05                	je     3b <RDMSubDevices::GetCount() const+0x3b>
  36:	e8 00 00 00 00       	call   3b <RDMSubDevices::GetCount() const+0x3b>
  3b:	c9                   	leave  
  3c:	c3                   	ret    

Disassembly of section .text._ZN13RDMSubDevices3GetEv:

0000000000000000 <RDMSubDevices::Get()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 22 <RDMSubDevices::Get()+0x22>
  22:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  26:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  2d:	00 00 
  2f:	74 05                	je     36 <RDMSubDevices::Get()+0x36>
  31:	e8 00 00 00 00       	call   36 <RDMSubDevices::Get()+0x36>
  36:	c9                   	leave  
  37:	c3                   	ret    

Disassembly of section .text._ZN18RDMDeviceResponder13GetDeviceInfoEt:

0000000000000000 <RDMDeviceResponder::GetDeviceInfo(unsigned short)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	66 89 45 e4          	mov    %ax,-0x1c(%rbp)
  16:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1d:	00 00 
  1f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  23:	31 c0                	xor    %eax,%eax
  25:	66 83 7d e4 00       	cmpw   $0x0,-0x1c(%rbp)
  2a:	0f 84 bd 00 00 00    	je     ed <RDMDeviceResponder::GetDeviceInfo(unsigned short)+0xed>
  30:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  34:	48 8d 50 78          	lea    0x78(%rax),%rdx
  38:	0f b7 45 e4          	movzwl -0x1c(%rbp),%eax
  3c:	89 c6                	mov    %eax,%esi
  3e:	48 89 d7             	mov    %rdx,%rdi
  41:	e8 00 00 00 00       	call   46 <RDMDeviceResponder::GetDeviceInfo(unsigned short)+0x46>
  46:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  4a:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  4f:	0f 84 8c 00 00 00    	je     e1 <RDMDeviceResponder::GetDeviceInfo(unsigned short)+0xe1>
  55:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  59:	0f b7 00             	movzwl (%rax),%eax
  5c:	66 c1 e8 08          	shr    $0x8,%ax
  60:	89 c2                	mov    %eax,%edx
  62:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  66:	88 90 b6 00 00 00    	mov    %dl,0xb6(%rax)
  6c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  70:	0f b7 00             	movzwl (%rax),%eax
  73:	89 c2                	mov    %eax,%edx
  75:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  79:	88 90 b7 00 00 00    	mov    %dl,0xb7(%rax)
  7f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  83:	0f b6 50 04          	movzbl 0x4(%rax),%edx
  87:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8b:	88 90 b8 00 00 00    	mov    %dl,0xb8(%rax)
  91:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  95:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  99:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  9d:	88 90 b9 00 00 00    	mov    %dl,0xb9(%rax)
  a3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  a7:	0f b7 40 02          	movzwl 0x2(%rax),%eax
  ab:	66 c1 e8 08          	shr    $0x8,%ax
  af:	89 c2                	mov    %eax,%edx
  b1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  b5:	88 90 ba 00 00 00    	mov    %dl,0xba(%rax)
  bb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  bf:	0f b7 40 02          	movzwl 0x2(%rax),%eax
  c3:	89 c2                	mov    %eax,%edx
  c5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  c9:	88 90 bb 00 00 00    	mov    %dl,0xbb(%rax)
  cf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  d3:	0f b6 50 27          	movzbl 0x27(%rax),%edx
  d7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  db:	88 90 be 00 00 00    	mov    %dl,0xbe(%rax)
  e1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  e5:	48 05 ac 00 00 00    	add    $0xac,%rax
  eb:	eb 0a                	jmp    f7 <RDMDeviceResponder::GetDeviceInfo(unsigned short)+0xf7>
  ed:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  f1:	48 05 99 00 00 00    	add    $0x99,%rax
  f7:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  fb:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
 102:	00 00 
 104:	74 05                	je     10b <RDMDeviceResponder::GetDeviceInfo(unsigned short)+0x10b>
 106:	e8 00 00 00 00       	call   10b <RDMDeviceResponder::GetDeviceInfo(unsigned short)+0x10b>
 10b:	c9                   	leave  
 10c:	c3                   	ret    

Disassembly of section .text._ZN18RDMDeviceResponder8SetLabelEtPKch:

0000000000000000 <RDMDeviceResponder::SetLabel(unsigned short, char const*, unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 40          	sub    $0x40,%rsp
   c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  16:	89 ca                	mov    %ecx,%edx
  18:	66 89 45 d4          	mov    %ax,-0x2c(%rbp)
  1c:	89 d0                	mov    %edx,%eax
  1e:	88 45 d0             	mov    %al,-0x30(%rbp)
  21:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  28:	00 00 
  2a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  2e:	31 c0                	xor    %eax,%eax
  30:	80 7d d0 20          	cmpb   $0x20,-0x30(%rbp)
  34:	76 04                	jbe    3a <RDMDeviceResponder::SetLabel(unsigned short, char const*, unsigned char)+0x3a>
  36:	c6 45 d0 20          	movb   $0x20,-0x30(%rbp)
  3a:	66 83 7d d4 00       	cmpw   $0x0,-0x2c(%rbp)
  3f:	74 1d                	je     5e <RDMDeviceResponder::SetLabel(unsigned short, char const*, unsigned char)+0x5e>
  41:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  45:	48 8d 78 78          	lea    0x78(%rax),%rdi
  49:	0f b6 4d d0          	movzbl -0x30(%rbp),%ecx
  4d:	0f b7 45 d4          	movzwl -0x2c(%rbp),%eax
  51:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  55:	89 c6                	mov    %eax,%esi
  57:	e8 00 00 00 00       	call   5c <RDMDeviceResponder::SetLabel(unsigned short, char const*, unsigned char)+0x5c>
  5c:	eb 26                	jmp    84 <RDMDeviceResponder::SetLabel(unsigned short, char const*, unsigned char)+0x84>
  5e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  62:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  66:	0f b6 45 d0          	movzbl -0x30(%rbp),%eax
  6a:	88 45 e8             	mov    %al,-0x18(%rbp)
  6d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  71:	48 8d 50 08          	lea    0x8(%rax),%rdx
  75:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  79:	48 89 c6             	mov    %rax,%rsi
  7c:	48 89 d7             	mov    %rdx,%rdi
  7f:	e8 00 00 00 00       	call   84 <RDMDeviceResponder::SetLabel(unsigned short, char const*, unsigned char)+0x84>
  84:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  88:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  8f:	00 00 
  91:	74 05                	je     98 <RDMDeviceResponder::SetLabel(unsigned short, char const*, unsigned char)+0x98>
  93:	e8 00 00 00 00       	call   98 <RDMDeviceResponder::SetLabel(unsigned short, char const*, unsigned char)+0x98>
  98:	c9                   	leave  
  99:	c3                   	ret    

Disassembly of section .text._ZN18RDMDeviceResponder8GetLabelEtP18TRDMDeviceInfoData:

0000000000000000 <RDMDeviceResponder::GetLabel(unsigned short, TRDMDeviceInfoData*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  16:	66 89 45 e4          	mov    %ax,-0x1c(%rbp)
  1a:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  21:	00 00 
  23:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  27:	31 c0                	xor    %eax,%eax
  29:	66 83 7d e4 00       	cmpw   $0x0,-0x1c(%rbp)
  2e:	74 1c                	je     4c <RDMDeviceResponder::GetLabel(unsigned short, TRDMDeviceInfoData*)+0x4c>
  30:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  34:	48 8d 48 78          	lea    0x78(%rax),%rcx
  38:	0f b7 45 e4          	movzwl -0x1c(%rbp),%eax
  3c:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40:	89 c6                	mov    %eax,%esi
  42:	48 89 cf             	mov    %rcx,%rdi
  45:	e8 00 00 00 00       	call   4a <RDMDeviceResponder::GetLabel(unsigned short, TRDMDeviceInfoData*)+0x4a>
  4a:	eb 17                	jmp    63 <RDMDeviceResponder::GetLabel(unsigned short, TRDMDeviceInfoData*)+0x63>
  4c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  50:	48 8d 50 08          	lea    0x8(%rax),%rdx
  54:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  58:	48 89 c6             	mov    %rax,%rsi
  5b:	48 89 d7             	mov    %rdx,%rdi
  5e:	e8 00 00 00 00       	call   63 <RDMDeviceResponder::GetLabel(unsigned short, TRDMDeviceInfoData*)+0x63>
  63:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  67:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  6e:	00 00 
  70:	74 05                	je     77 <RDMDeviceResponder::GetLabel(unsigned short, TRDMDeviceInfoData*)+0x77>
  72:	e8 00 00 00 00       	call   77 <RDMDeviceResponder::GetLabel(unsigned short, TRDMDeviceInfoData*)+0x77>
  77:	c9                   	leave  
  78:	c3                   	ret    

Disassembly of section .text._ZN18RDMDeviceResponder18SetFactoryDefaultsEv:

0000000000000000 <RDMDeviceResponder::SetFactoryDefaults()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	48 83 c0 08          	add    $0x8,%rax
  27:	48 89 c7             	mov    %rax,%rdi
  2a:	e8 00 00 00 00       	call   2f <RDMDeviceResponder::SetFactoryDefaults()+0x2f>
  2f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  33:	ba 01 00 00 00       	mov    $0x1,%edx
  38:	be 00 00 00 00       	mov    $0x0,%esi
  3d:	48 89 c7             	mov    %rax,%rdi
  40:	e8 00 00 00 00       	call   45 <RDMDeviceResponder::SetFactoryDefaults()+0x45>
  45:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  49:	0f b7 80 c4 00 00 00 	movzwl 0xc4(%rax),%eax
  50:	0f b7 d0             	movzwl %ax,%edx
  53:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  57:	be 00 00 00 00       	mov    $0x0,%esi
  5c:	48 89 c7             	mov    %rax,%rdi
  5f:	e8 00 00 00 00       	call   64 <RDMDeviceResponder::SetFactoryDefaults()+0x64>
  64:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  68:	48 8d 88 99 00 00 00 	lea    0x99(%rax),%rcx
  6f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  73:	48 05 ac 00 00 00    	add    $0xac,%rax
  79:	ba 13 00 00 00       	mov    $0x13,%edx
  7e:	48 89 ce             	mov    %rcx,%rsi
  81:	48 89 c7             	mov    %rax,%rdi
  84:	e8 00 00 00 00       	call   89 <RDMDeviceResponder::SetFactoryDefaults()+0x89>
  89:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8d:	48 83 c0 78          	add    $0x78,%rax
  91:	48 89 c7             	mov    %rax,%rdi
  94:	e8 00 00 00 00       	call   99 <RDMDeviceResponder::SetFactoryDefaults()+0x99>
  99:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  9d:	48 89 c7             	mov    %rax,%rdi
  a0:	e8 00 00 00 00       	call   a5 <RDMDeviceResponder::SetFactoryDefaults()+0xa5>
  a5:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  a9:	66 89 82 c2 00 00 00 	mov    %ax,0xc2(%rdx)
  b0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  b4:	c6 80 c1 00 00 00 01 	movb   $0x1,0xc1(%rax)
  bb:	e8 00 00 00 00       	call   c0 <RDMDeviceResponder::SetFactoryDefaults()+0xc0>
  c0:	90                   	nop
  c1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  c5:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  cc:	00 00 
  ce:	74 05                	je     d5 <RDMDeviceResponder::SetFactoryDefaults()+0xd5>
  d0:	e8 00 00 00 00       	call   d5 <RDMDeviceResponder::SetFactoryDefaults()+0xd5>
  d5:	c9                   	leave  
  d6:	c3                   	ret    

Disassembly of section .text._ZN18RDMDeviceResponder18GetFactoryDefaultsEv:

0000000000000000 <RDMDeviceResponder::GetFactoryDefaults()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	53                   	push   %rbx
   9:	48 83 ec 28          	sub    $0x28,%rsp
   d:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  11:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  18:	00 00 
  1a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  1e:	31 c0                	xor    %eax,%eax
  20:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  24:	0f b6 80 c1 00 00 00 	movzbl 0xc1(%rax),%eax
  2b:	84 c0                	test   %al,%al
  2d:	0f 84 85 00 00 00    	je     b8 <RDMDeviceResponder::GetFactoryDefaults()+0xb8>
  33:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  37:	48 83 c0 08          	add    $0x8,%rax
  3b:	48 89 c7             	mov    %rax,%rdi
  3e:	e8 00 00 00 00       	call   43 <RDMDeviceResponder::GetFactoryDefaults()+0x43>
  43:	83 f0 01             	xor    $0x1,%eax
  46:	84 c0                	test   %al,%al
  48:	74 12                	je     5c <RDMDeviceResponder::GetFactoryDefaults()+0x5c>
  4a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4e:	c6 80 c1 00 00 00 00 	movb   $0x0,0xc1(%rax)
  55:	b8 00 00 00 00       	mov    $0x0,%eax
  5a:	eb 67                	jmp    c3 <RDMDeviceResponder::GetFactoryDefaults()+0xc3>
  5c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  60:	0f b7 98 c2 00 00 00 	movzwl 0xc2(%rax),%ebx
  67:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  6b:	48 89 c7             	mov    %rax,%rdi
  6e:	e8 00 00 00 00       	call   73 <RDMDeviceResponder::GetFactoryDefaults()+0x73>
  73:	66 39 c3             	cmp    %ax,%bx
  76:	0f 95 c0             	setne  %al
  79:	84 c0                	test   %al,%al
  7b:	74 12                	je     8f <RDMDeviceResponder::GetFactoryDefaults()+0x8f>
  7d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  81:	c6 80 c1 00 00 00 00 	movb   $0x0,0xc1(%rax)
  88:	b8 00 00 00 00       	mov    $0x0,%eax
  8d:	eb 34                	jmp    c3 <RDMDeviceResponder::GetFactoryDefaults()+0xc3>
  8f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  93:	48 83 c0 78          	add    $0x78,%rax
  97:	48 89 c7             	mov    %rax,%rdi
  9a:	e8 00 00 00 00       	call   9f <RDMDeviceResponder::GetFactoryDefaults()+0x9f>
  9f:	83 f0 01             	xor    $0x1,%eax
  a2:	84 c0                	test   %al,%al
  a4:	74 12                	je     b8 <RDMDeviceResponder::GetFactoryDefaults()+0xb8>
  a6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  aa:	c6 80 c1 00 00 00 00 	movb   $0x0,0xc1(%rax)
  b1:	b8 00 00 00 00       	mov    $0x0,%eax
  b6:	eb 0b                	jmp    c3 <RDMDeviceResponder::GetFactoryDefaults()+0xc3>
  b8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  bc:	0f b6 80 c1 00 00 00 	movzbl 0xc1(%rax),%eax
  c3:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  c7:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  ce:	00 00 
  d0:	74 05                	je     d7 <RDMDeviceResponder::GetFactoryDefaults()+0xd7>
  d2:	e8 00 00 00 00       	call   d7 <RDMDeviceResponder::GetFactoryDefaults()+0xd7>
  d7:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  db:	c9                   	leave  
  dc:	c3                   	ret    

Disassembly of section .text._ZNK18RDMDeviceResponder11GetLanguageEv:

0000000000000000 <RDMDeviceResponder::GetLanguage() const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	48 05 bf 00 00 00    	add    $0xbf,%rax
  29:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  2d:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  34:	00 00 
  36:	74 05                	je     3d <RDMDeviceResponder::GetLanguage() const+0x3d>
  38:	e8 00 00 00 00       	call   3d <RDMDeviceResponder::GetLanguage() const+0x3d>
  3d:	c9                   	leave  
  3e:	c3                   	ret    

Disassembly of section .text._ZNK18RDMDeviceResponder18GetSoftwareVersionEv:

0000000000000000 <RDMDeviceResponder::GetSoftwareVersion() const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
  2a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  2e:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  35:	00 00 
  37:	74 05                	je     3e <RDMDeviceResponder::GetSoftwareVersion() const+0x3e>
  39:	e8 00 00 00 00       	call   3e <RDMDeviceResponder::GetSoftwareVersion() const+0x3e>
  3e:	c9                   	leave  
  3f:	c3                   	ret    

Disassembly of section .text._ZNK18RDMDeviceResponder24GetSoftwareVersionLengthEv:

0000000000000000 <RDMDeviceResponder::GetSoftwareVersionLength() const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	0f b6 80 98 00 00 00 	movzbl 0x98(%rax),%eax
  2a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  2e:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  35:	00 00 
  37:	74 05                	je     3e <RDMDeviceResponder::GetSoftwareVersionLength() const+0x3e>
  39:	e8 00 00 00 00       	call   3e <RDMDeviceResponder::GetSoftwareVersionLength() const+0x3e>
  3e:	c9                   	leave  
  3f:	c3                   	ret    

Disassembly of section .text._ZN18RDMDeviceResponder18SetDmxStartAddressEtt:

0000000000000000 <RDMDeviceResponder::SetDmxStartAddress(unsigned short, unsigned short)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10:	89 f1                	mov    %esi,%ecx
  12:	89 d0                	mov    %edx,%eax
  14:	89 ca                	mov    %ecx,%edx
  16:	66 89 55 d4          	mov    %dx,-0x2c(%rbp)
  1a:	66 89 45 d0          	mov    %ax,-0x30(%rbp)
  1e:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  25:	00 00 
  27:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  2b:	31 c0                	xor    %eax,%eax
  2d:	66 83 7d d0 00       	cmpw   $0x0,-0x30(%rbp)
  32:	0f 84 d2 00 00 00    	je     10a <RDMDeviceResponder::SetDmxStartAddress(unsigned short, unsigned short)+0x10a>
  38:	66 81 7d d0 00 02    	cmpw   $0x200,-0x30(%rbp)
  3e:	0f 87 c6 00 00 00    	ja     10a <RDMDeviceResponder::SetDmxStartAddress(unsigned short, unsigned short)+0x10a>
  44:	66 83 7d d4 00       	cmpw   $0x0,-0x2c(%rbp)
  49:	74 1f                	je     6a <RDMDeviceResponder::SetDmxStartAddress(unsigned short, unsigned short)+0x6a>
  4b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4f:	48 8d 48 78          	lea    0x78(%rax),%rcx
  53:	0f b7 55 d0          	movzwl -0x30(%rbp),%edx
  57:	0f b7 45 d4          	movzwl -0x2c(%rbp),%eax
  5b:	89 c6                	mov    %eax,%esi
  5d:	48 89 cf             	mov    %rcx,%rdi
  60:	e8 00 00 00 00       	call   65 <RDMDeviceResponder::SetDmxStartAddress(unsigned short, unsigned short)+0x65>
  65:	e9 a1 00 00 00       	jmp    10b <RDMDeviceResponder::SetDmxStartAddress(unsigned short, unsigned short)+0x10b>
  6a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  6e:	48 8b 90 88 00 00 00 	mov    0x88(%rax),%rdx
  75:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  79:	0f b6 80 a5 00 00 00 	movzbl 0xa5(%rax),%eax
  80:	0f b6 c0             	movzbl %al,%eax
  83:	48 c1 e0 03          	shl    $0x3,%rax
  87:	48 83 e8 08          	sub    $0x8,%rax
  8b:	48 01 d0             	add    %rdx,%rax
  8e:	48 8b 00             	mov    (%rax),%rax
  91:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  95:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  99:	48 89 c7             	mov    %rax,%rdi
  9c:	e8 00 00 00 00       	call   a1 <RDMDeviceResponder::SetDmxStartAddress(unsigned short, unsigned short)+0xa1>
  a1:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  a5:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  aa:	74 5f                	je     10b <RDMDeviceResponder::SetDmxStartAddress(unsigned short, unsigned short)+0x10b>
  ac:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  b0:	48 8b 00             	mov    (%rax),%rax
  b3:	48 83 c0 50          	add    $0x50,%rax
  b7:	48 8b 08             	mov    (%rax),%rcx
  ba:	0f b7 55 d0          	movzwl -0x30(%rbp),%edx
  be:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  c2:	89 d6                	mov    %edx,%esi
  c4:	48 89 c7             	mov    %rax,%rdi
  c7:	ff d1                	call   *%rcx
  c9:	84 c0                	test   %al,%al
  cb:	74 24                	je     f1 <RDMDeviceResponder::SetDmxStartAddress(unsigned short, unsigned short)+0xf1>
  cd:	0f b7 45 d0          	movzwl -0x30(%rbp),%eax
  d1:	66 c1 e8 08          	shr    $0x8,%ax
  d5:	89 c2                	mov    %eax,%edx
  d7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  db:	88 90 a7 00 00 00    	mov    %dl,0xa7(%rax)
  e1:	0f b7 45 d0          	movzwl -0x30(%rbp),%eax
  e5:	89 c2                	mov    %eax,%edx
  e7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  eb:	88 90 a8 00 00 00    	mov    %dl,0xa8(%rax)
  f1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  f5:	48 8b 00             	mov    (%rax),%rax
  f8:	48 83 c0 18          	add    $0x18,%rax
  fc:	48 8b 10             	mov    (%rax),%rdx
  ff:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 103:	48 89 c7             	mov    %rax,%rdi
 106:	ff d2                	call   *%rdx
 108:	eb 01                	jmp    10b <RDMDeviceResponder::SetDmxStartAddress(unsigned short, unsigned short)+0x10b>
 10a:	90                   	nop
 10b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 10f:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 116:	00 00 
 118:	74 05                	je     11f <RDMDeviceResponder::SetDmxStartAddress(unsigned short, unsigned short)+0x11f>
 11a:	e8 00 00 00 00       	call   11f <RDMDeviceResponder::SetDmxStartAddress(unsigned short, unsigned short)+0x11f>
 11f:	c9                   	leave  
 120:	c3                   	ret    

Disassembly of section .text._ZN18RDMDeviceResponder18GetDmxStartAddressEt:

0000000000000000 <RDMDeviceResponder::GetDmxStartAddress(unsigned short)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	66 89 45 e4          	mov    %ax,-0x1c(%rbp)
  16:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1d:	00 00 
  1f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  23:	31 c0                	xor    %eax,%eax
  25:	66 83 7d e4 00       	cmpw   $0x0,-0x1c(%rbp)
  2a:	74 18                	je     44 <RDMDeviceResponder::GetDmxStartAddress(unsigned short)+0x44>
  2c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  30:	48 8d 50 78          	lea    0x78(%rax),%rdx
  34:	0f b7 45 e4          	movzwl -0x1c(%rbp),%eax
  38:	89 c6                	mov    %eax,%esi
  3a:	48 89 d7             	mov    %rdx,%rdi
  3d:	e8 00 00 00 00       	call   42 <RDMDeviceResponder::GetDmxStartAddress(unsigned short)+0x42>
  42:	eb 23                	jmp    67 <RDMDeviceResponder::GetDmxStartAddress(unsigned short)+0x67>
  44:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  48:	0f b6 80 a7 00 00 00 	movzbl 0xa7(%rax),%eax
  4f:	0f b6 c0             	movzbl %al,%eax
  52:	c1 e0 08             	shl    $0x8,%eax
  55:	89 c2                	mov    %eax,%edx
  57:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5b:	0f b6 80 a8 00 00 00 	movzbl 0xa8(%rax),%eax
  62:	0f b6 c0             	movzbl %al,%eax
  65:	01 d0                	add    %edx,%eax
  67:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  6b:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  72:	00 00 
  74:	74 05                	je     7b <RDMDeviceResponder::GetDmxStartAddress(unsigned short)+0x7b>
  76:	e8 00 00 00 00       	call   7b <RDMDeviceResponder::GetDmxStartAddress(unsigned short)+0x7b>
  7b:	c9                   	leave  
  7c:	c3                   	ret    

Disassembly of section .text._ZN18RDMDeviceResponder11GetSlotInfoEttRN8lightset8SlotInfoE:

0000000000000000 <RDMDeviceResponder::GetSlotInfo(unsigned short, unsigned short, lightset::SlotInfo&)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 40          	sub    $0x40,%rsp
   c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10:	89 d0                	mov    %edx,%eax
  12:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
  16:	89 f2                	mov    %esi,%edx
  18:	66 89 55 d4          	mov    %dx,-0x2c(%rbp)
  1c:	66 89 45 d0          	mov    %ax,-0x30(%rbp)
  20:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  27:	00 00 
  29:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  2d:	31 c0                	xor    %eax,%eax
  2f:	66 83 7d d4 00       	cmpw   $0x0,-0x2c(%rbp)
  34:	74 07                	je     3d <RDMDeviceResponder::GetSlotInfo(unsigned short, unsigned short, lightset::SlotInfo&)+0x3d>
  36:	b8 00 00 00 00       	mov    $0x0,%eax
  3b:	eb 5e                	jmp    9b <RDMDeviceResponder::GetSlotInfo(unsigned short, unsigned short, lightset::SlotInfo&)+0x9b>
  3d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  41:	48 8b 90 88 00 00 00 	mov    0x88(%rax),%rdx
  48:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4c:	0f b6 80 a5 00 00 00 	movzbl 0xa5(%rax),%eax
  53:	0f b6 c0             	movzbl %al,%eax
  56:	48 c1 e0 03          	shl    $0x3,%rax
  5a:	48 83 e8 08          	sub    $0x8,%rax
  5e:	48 01 d0             	add    %rdx,%rax
  61:	48 8b 00             	mov    (%rax),%rax
  64:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  68:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  6c:	48 89 c7             	mov    %rax,%rdi
  6f:	e8 00 00 00 00       	call   74 <RDMDeviceResponder::GetSlotInfo(unsigned short, unsigned short, lightset::SlotInfo&)+0x74>
  74:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  78:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  7c:	48 8b 00             	mov    (%rax),%rax
  7f:	48 83 c0 68          	add    $0x68,%rax
  83:	4c 8b 00             	mov    (%rax),%r8
  86:	0f b7 4d d0          	movzwl -0x30(%rbp),%ecx
  8a:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  92:	89 ce                	mov    %ecx,%esi
  94:	48 89 c7             	mov    %rax,%rdi
  97:	41 ff d0             	call   *%r8
  9a:	90                   	nop
  9b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  9f:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  a6:	00 00 
  a8:	74 05                	je     af <RDMDeviceResponder::GetSlotInfo(unsigned short, unsigned short, lightset::SlotInfo&)+0xaf>
  aa:	e8 00 00 00 00       	call   af <RDMDeviceResponder::GetSlotInfo(unsigned short, unsigned short, lightset::SlotInfo&)+0xaf>
  af:	c9                   	leave  
  b0:	c3                   	ret    

Disassembly of section .text._ZN18RDMDeviceResponder15GetDmxFootPrintEt:

0000000000000000 <RDMDeviceResponder::GetDmxFootPrint(unsigned short)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	66 89 45 e4          	mov    %ax,-0x1c(%rbp)
  16:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1d:	00 00 
  1f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  23:	31 c0                	xor    %eax,%eax
  25:	66 83 7d e4 00       	cmpw   $0x0,-0x1c(%rbp)
  2a:	74 18                	je     44 <RDMDeviceResponder::GetDmxFootPrint(unsigned short)+0x44>
  2c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  30:	48 8d 50 78          	lea    0x78(%rax),%rdx
  34:	0f b7 45 e4          	movzwl -0x1c(%rbp),%eax
  38:	89 c6                	mov    %eax,%esi
  3a:	48 89 d7             	mov    %rdx,%rdi
  3d:	e8 00 00 00 00       	call   42 <RDMDeviceResponder::GetDmxFootPrint(unsigned short)+0x42>
  42:	eb 23                	jmp    67 <RDMDeviceResponder::GetDmxFootPrint(unsigned short)+0x67>
  44:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  48:	0f b6 80 a3 00 00 00 	movzbl 0xa3(%rax),%eax
  4f:	0f b6 c0             	movzbl %al,%eax
  52:	c1 e0 08             	shl    $0x8,%eax
  55:	89 c2                	mov    %eax,%edx
  57:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5b:	0f b6 80 a4 00 00 00 	movzbl 0xa4(%rax),%eax
  62:	0f b6 c0             	movzbl %al,%eax
  65:	01 d0                	add    %edx,%eax
  67:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  6b:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  72:	00 00 
  74:	74 05                	je     7b <RDMDeviceResponder::GetDmxFootPrint(unsigned short)+0x7b>
  76:	e8 00 00 00 00       	call   7b <RDMDeviceResponder::GetDmxFootPrint(unsigned short)+0x7b>
  7b:	c9                   	leave  
  7c:	c3                   	ret    

Disassembly of section .text._ZN18RDMDeviceResponder14GetPersonalityEth:

0000000000000000 <RDMDeviceResponder::GetPersonality(unsigned short, unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	66 89 45 e4          	mov    %ax,-0x1c(%rbp)
  16:	89 d0                	mov    %edx,%eax
  18:	88 45 e0             	mov    %al,-0x20(%rbp)
  1b:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  22:	00 00 
  24:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  28:	31 c0                	xor    %eax,%eax
  2a:	66 83 7d e4 00       	cmpw   $0x0,-0x1c(%rbp)
  2f:	74 1c                	je     4d <RDMDeviceResponder::GetPersonality(unsigned short, unsigned char)+0x4d>
  31:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  35:	48 8d 48 78          	lea    0x78(%rax),%rcx
  39:	0f b6 55 e0          	movzbl -0x20(%rbp),%edx
  3d:	0f b7 45 e4          	movzwl -0x1c(%rbp),%eax
  41:	89 c6                	mov    %eax,%esi
  43:	48 89 cf             	mov    %rcx,%rdi
  46:	e8 00 00 00 00       	call   4b <RDMDeviceResponder::GetPersonality(unsigned short, unsigned char)+0x4b>
  4b:	eb 1d                	jmp    6a <RDMDeviceResponder::GetPersonality(unsigned short, unsigned char)+0x6a>
  4d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  51:	48 8b 90 88 00 00 00 	mov    0x88(%rax),%rdx
  58:	0f b6 45 e0          	movzbl -0x20(%rbp),%eax
  5c:	48 c1 e0 03          	shl    $0x3,%rax
  60:	48 83 e8 08          	sub    $0x8,%rax
  64:	48 01 d0             	add    %rdx,%rax
  67:	48 8b 00             	mov    (%rax),%rax
  6a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  6e:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  75:	00 00 
  77:	74 05                	je     7e <RDMDeviceResponder::GetPersonality(unsigned short, unsigned char)+0x7e>
  79:	e8 00 00 00 00       	call   7e <RDMDeviceResponder::GetPersonality(unsigned short, unsigned char)+0x7e>
  7e:	c9                   	leave  
  7f:	c3                   	ret    

Disassembly of section .text._ZN18RDMDeviceResponder19GetPersonalityCountEt:

0000000000000000 <RDMDeviceResponder::GetPersonalityCount(unsigned short)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	66 89 45 e4          	mov    %ax,-0x1c(%rbp)
  16:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1d:	00 00 
  1f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  23:	31 c0                	xor    %eax,%eax
  25:	66 83 7d e4 00       	cmpw   $0x0,-0x1c(%rbp)
  2a:	74 18                	je     44 <RDMDeviceResponder::GetPersonalityCount(unsigned short)+0x44>
  2c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  30:	48 8d 50 78          	lea    0x78(%rax),%rdx
  34:	0f b7 45 e4          	movzwl -0x1c(%rbp),%eax
  38:	89 c6                	mov    %eax,%esi
  3a:	48 89 d7             	mov    %rdx,%rdi
  3d:	e8 00 00 00 00       	call   42 <RDMDeviceResponder::GetPersonalityCount(unsigned short)+0x42>
  42:	eb 0b                	jmp    4f <RDMDeviceResponder::GetPersonalityCount(unsigned short)+0x4f>
  44:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  48:	0f b6 80 a6 00 00 00 	movzbl 0xa6(%rax),%eax
  4f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  53:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  5a:	00 00 
  5c:	74 05                	je     63 <RDMDeviceResponder::GetPersonalityCount(unsigned short)+0x63>
  5e:	e8 00 00 00 00       	call   63 <RDMDeviceResponder::GetPersonalityCount(unsigned short)+0x63>
  63:	c9                   	leave  
  64:	c3                   	ret    

Disassembly of section .text._ZN18RDMDeviceResponder21SetPersonalityCurrentEth:

0000000000000000 <RDMDeviceResponder::SetPersonalityCurrent(unsigned short, unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	66 89 45 d4          	mov    %ax,-0x2c(%rbp)
  16:	89 d0                	mov    %edx,%eax
  18:	88 45 d0             	mov    %al,-0x30(%rbp)
  1b:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  22:	00 00 
  24:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  28:	31 c0                	xor    %eax,%eax
  2a:	66 83 7d d4 00       	cmpw   $0x0,-0x2c(%rbp)
  2f:	74 1f                	je     50 <RDMDeviceResponder::SetPersonalityCurrent(unsigned short, unsigned char)+0x50>
  31:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  35:	48 8d 48 78          	lea    0x78(%rax),%rcx
  39:	0f b6 55 d0          	movzbl -0x30(%rbp),%edx
  3d:	0f b7 45 d4          	movzwl -0x2c(%rbp),%eax
  41:	89 c6                	mov    %eax,%esi
  43:	48 89 cf             	mov    %rcx,%rdi
  46:	e8 00 00 00 00       	call   4b <RDMDeviceResponder::SetPersonalityCurrent(unsigned short, unsigned char)+0x4b>
  4b:	e9 fc 00 00 00       	jmp    14c <RDMDeviceResponder::SetPersonalityCurrent(unsigned short, unsigned char)+0x14c>
  50:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  54:	0f b6 55 d0          	movzbl -0x30(%rbp),%edx
  58:	88 90 a5 00 00 00    	mov    %dl,0xa5(%rax)
  5e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  62:	48 8b 90 88 00 00 00 	mov    0x88(%rax),%rdx
  69:	0f b6 45 d0          	movzbl -0x30(%rbp),%eax
  6d:	48 c1 e0 03          	shl    $0x3,%rax
  71:	48 83 e8 08          	sub    $0x8,%rax
  75:	48 01 d0             	add    %rdx,%rax
  78:	48 8b 00             	mov    (%rax),%rax
  7b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  7f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  83:	48 89 c7             	mov    %rax,%rdi
  86:	e8 00 00 00 00       	call   8b <RDMDeviceResponder::SetPersonalityCurrent(unsigned short, unsigned char)+0x8b>
  8b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8f:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  94:	0f 84 b2 00 00 00    	je     14c <RDMDeviceResponder::SetPersonalityCurrent(unsigned short, unsigned char)+0x14c>
  9a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  9e:	48 8b 00             	mov    (%rax),%rax
  a1:	48 83 c0 60          	add    $0x60,%rax
  a5:	48 8b 10             	mov    (%rax),%rdx
  a8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  ac:	48 89 c7             	mov    %rax,%rdi
  af:	ff d2                	call   *%rdx
  b1:	66 c1 e8 08          	shr    $0x8,%ax
  b5:	89 c2                	mov    %eax,%edx
  b7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  bb:	88 90 a3 00 00 00    	mov    %dl,0xa3(%rax)
  c1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  c5:	48 8b 00             	mov    (%rax),%rax
  c8:	48 83 c0 60          	add    $0x60,%rax
  cc:	48 8b 10             	mov    (%rax),%rdx
  cf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  d3:	48 89 c7             	mov    %rax,%rdi
  d6:	ff d2                	call   *%rdx
  d8:	89 c2                	mov    %eax,%edx
  da:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  de:	88 90 a4 00 00 00    	mov    %dl,0xa4(%rax)
  e4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  e8:	48 8b 00             	mov    (%rax),%rax
  eb:	48 83 c0 58          	add    $0x58,%rax
  ef:	48 8b 10             	mov    (%rax),%rdx
  f2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  f6:	48 89 c7             	mov    %rax,%rdi
  f9:	ff d2                	call   *%rdx
  fb:	66 c1 e8 08          	shr    $0x8,%ax
  ff:	89 c2                	mov    %eax,%edx
 101:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 105:	88 90 a7 00 00 00    	mov    %dl,0xa7(%rax)
 10b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 10f:	48 8b 00             	mov    (%rax),%rax
 112:	48 83 c0 58          	add    $0x58,%rax
 116:	48 8b 10             	mov    (%rax),%rdx
 119:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 11d:	48 89 c7             	mov    %rax,%rdi
 120:	ff d2                	call   *%rdx
 122:	89 c2                	mov    %eax,%edx
 124:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 128:	88 90 a8 00 00 00    	mov    %dl,0xa8(%rax)
 12e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 132:	48 8b 00             	mov    (%rax),%rax
 135:	48 83 c0 10          	add    $0x10,%rax
 139:	48 8b 08             	mov    (%rax),%rcx
 13c:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
 140:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 144:	48 89 d6             	mov    %rdx,%rsi
 147:	48 89 c7             	mov    %rax,%rdi
 14a:	ff d1                	call   *%rcx
 14c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 150:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 157:	00 00 
 159:	74 05                	je     160 <RDMDeviceResponder::SetPersonalityCurrent(unsigned short, unsigned char)+0x160>
 15b:	e8 00 00 00 00       	call   160 <RDMDeviceResponder::SetPersonalityCurrent(unsigned short, unsigned char)+0x160>
 160:	c9                   	leave  
 161:	c3                   	ret    

Disassembly of section .text._ZN18RDMDeviceResponder21GetPersonalityCurrentEt:

0000000000000000 <RDMDeviceResponder::GetPersonalityCurrent(unsigned short)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	66 89 45 e4          	mov    %ax,-0x1c(%rbp)
  16:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1d:	00 00 
  1f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  23:	31 c0                	xor    %eax,%eax
  25:	66 83 7d e4 00       	cmpw   $0x0,-0x1c(%rbp)
  2a:	74 18                	je     44 <RDMDeviceResponder::GetPersonalityCurrent(unsigned short)+0x44>
  2c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  30:	48 8d 50 78          	lea    0x78(%rax),%rdx
  34:	0f b7 45 e4          	movzwl -0x1c(%rbp),%eax
  38:	89 c6                	mov    %eax,%esi
  3a:	48 89 d7             	mov    %rdx,%rdi
  3d:	e8 00 00 00 00       	call   42 <RDMDeviceResponder::GetPersonalityCurrent(unsigned short)+0x42>
  42:	eb 0b                	jmp    4f <RDMDeviceResponder::GetPersonalityCurrent(unsigned short)+0x4f>
  44:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  48:	0f b6 80 a5 00 00 00 	movzbl 0xa5(%rax),%eax
  4f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  53:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  5a:	00 00 
  5c:	74 05                	je     63 <RDMDeviceResponder::GetPersonalityCurrent(unsigned short)+0x63>
  5e:	e8 00 00 00 00       	call   63 <RDMDeviceResponder::GetPersonalityCurrent(unsigned short)+0x63>
  63:	c9                   	leave  
  64:	c3                   	ret    

Disassembly of section .text._ZN18RDMDeviceResponder3GetEv:

0000000000000000 <RDMDeviceResponder::Get()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 22 <RDMDeviceResponder::Get()+0x22>
  22:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  26:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  2d:	00 00 
  2f:	74 05                	je     36 <RDMDeviceResponder::Get()+0x36>
  31:	e8 00 00 00 00       	call   36 <RDMDeviceResponder::Get()+0x36>
  36:	c9                   	leave  
  37:	c3                   	ret    

Disassembly of section .text._ZN18RDMDeviceResponder17CalculateChecksumEv:

0000000000000000 <RDMDeviceResponder::CalculateChecksum()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	0f b6 80 a7 00 00 00 	movzbl 0xa7(%rax),%eax
  2a:	0f b6 c0             	movzbl %al,%eax
  2d:	c1 f8 08             	sar    $0x8,%eax
  30:	89 c2                	mov    %eax,%edx
  32:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  36:	0f b6 80 a8 00 00 00 	movzbl 0xa8(%rax),%eax
  3d:	0f b6 c0             	movzbl %al,%eax
  40:	01 d0                	add    %edx,%eax
  42:	66 89 45 f6          	mov    %ax,-0xa(%rbp)
  46:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4a:	0f b6 80 a5 00 00 00 	movzbl 0xa5(%rax),%eax
  51:	0f b6 c0             	movzbl %al,%eax
  54:	66 01 45 f6          	add    %ax,-0xa(%rbp)
  58:	0f b7 45 f6          	movzwl -0xa(%rbp),%eax
  5c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  60:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  67:	00 00 
  69:	74 05                	je     70 <RDMDeviceResponder::CalculateChecksum()+0x70>
  6b:	e8 00 00 00 00       	call   70 <RDMDeviceResponder::CalculateChecksum()+0x70>
  70:	c9                   	leave  
  71:	c3                   	ret    

Disassembly of section .text._ZN7Display11SetContrastEh:

0000000000000000 <Display::SetContrast(unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	88 45 e4             	mov    %al,-0x1c(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  28:	0f b6 55 e4          	movzbl -0x1c(%rbp),%edx
  2c:	88 50 18             	mov    %dl,0x18(%rax)
  2f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  33:	48 8b 40 20          	mov    0x20(%rax),%rax
  37:	48 85 c0             	test   %rax,%rax
  3a:	74 27                	je     63 <Display::SetContrast(unsigned char)+0x63>
  3c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40:	48 8b 40 20          	mov    0x20(%rax),%rax
  44:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  48:	48 8b 52 20          	mov    0x20(%rdx),%rdx
  4c:	48 8b 12             	mov    (%rdx),%rdx
  4f:	48 83 c2 58          	add    $0x58,%rdx
  53:	48 8b 0a             	mov    (%rdx),%rcx
  56:	0f b6 55 e4          	movzbl -0x1c(%rbp),%edx
  5a:	89 d6                	mov    %edx,%esi
  5c:	48 89 c7             	mov    %rax,%rdi
  5f:	ff d1                	call   *%rcx
  61:	eb 01                	jmp    64 <Display::SetContrast(unsigned char)+0x64>
  63:	90                   	nop
  64:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  68:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  6f:	00 00 
  71:	74 05                	je     78 <Display::SetContrast(unsigned char)+0x78>
  73:	e8 00 00 00 00       	call   78 <Display::SetContrast(unsigned char)+0x78>
  78:	c9                   	leave  
  79:	c3                   	ret    

Disassembly of section .text._ZNK7Display11GetContrastEv:

0000000000000000 <Display::GetContrast() const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	0f b6 40 18          	movzbl 0x18(%rax),%eax
  27:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  2b:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  32:	00 00 
  34:	74 05                	je     3b <Display::GetContrast() const+0x3b>
  36:	e8 00 00 00 00       	call   3b <Display::GetContrast() const+0x3b>
  3b:	c9                   	leave  
  3c:	c3                   	ret    

Disassembly of section .text._ZN7Display17SetFlipVerticallyEb:

0000000000000000 <Display::SetFlipVertically(bool)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	88 45 e4             	mov    %al,-0x1c(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  28:	0f b6 55 e4          	movzbl -0x1c(%rbp),%edx
  2c:	88 50 19             	mov    %dl,0x19(%rax)
  2f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  33:	48 8b 40 20          	mov    0x20(%rax),%rax
  37:	48 85 c0             	test   %rax,%rax
  3a:	74 27                	je     63 <Display::SetFlipVertically(bool)+0x63>
  3c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40:	48 8b 40 20          	mov    0x20(%rax),%rax
  44:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  48:	48 8b 52 20          	mov    0x20(%rdx),%rdx
  4c:	48 8b 12             	mov    (%rdx),%rdx
  4f:	48 83 c2 60          	add    $0x60,%rdx
  53:	48 8b 0a             	mov    (%rdx),%rcx
  56:	0f b6 55 e4          	movzbl -0x1c(%rbp),%edx
  5a:	89 d6                	mov    %edx,%esi
  5c:	48 89 c7             	mov    %rax,%rdi
  5f:	ff d1                	call   *%rcx
  61:	eb 01                	jmp    64 <Display::SetFlipVertically(bool)+0x64>
  63:	90                   	nop
  64:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  68:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  6f:	00 00 
  71:	74 05                	je     78 <Display::SetFlipVertically(bool)+0x78>
  73:	e8 00 00 00 00       	call   78 <Display::SetFlipVertically(bool)+0x78>
  78:	c9                   	leave  
  79:	c3                   	ret    

Disassembly of section .text._ZNK7Display17GetFlipVerticallyEv:

0000000000000000 <Display::GetFlipVertically() const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	0f b6 40 19          	movzbl 0x19(%rax),%eax
  27:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  2b:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  32:	00 00 
  34:	74 05                	je     3b <Display::GetFlipVertically() const+0x3b>
  36:	e8 00 00 00 00       	call   3b <Display::GetFlipVertically() const+0x3b>
  3b:	c9                   	leave  
  3c:	c3                   	ret    

Disassembly of section .text._ZN7Display8SetSleepEb:

0000000000000000 <Display::SetSleep(bool)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	88 45 e4             	mov    %al,-0x1c(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  28:	48 8b 40 20          	mov    0x20(%rax),%rax
  2c:	48 85 c0             	test   %rax,%rax
  2f:	74 51                	je     82 <Display::SetSleep(bool)+0x82>
  31:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  35:	0f b6 55 e4          	movzbl -0x1c(%rbp),%edx
  39:	88 50 10             	mov    %dl,0x10(%rax)
  3c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40:	48 8b 40 20          	mov    0x20(%rax),%rax
  44:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  48:	48 8b 52 20          	mov    0x20(%rdx),%rdx
  4c:	48 8b 12             	mov    (%rdx),%rdx
  4f:	48 83 c2 50          	add    $0x50,%rdx
  53:	48 8b 0a             	mov    (%rdx),%rcx
  56:	0f b6 55 e4          	movzbl -0x1c(%rbp),%edx
  5a:	89 d6                	mov    %edx,%esi
  5c:	48 89 c7             	mov    %rax,%rdi
  5f:	ff d1                	call   *%rcx
  61:	0f b6 45 e4          	movzbl -0x1c(%rbp),%eax
  65:	83 f0 01             	xor    $0x1,%eax
  68:	84 c0                	test   %al,%al
  6a:	74 17                	je     83 <Display::SetSleep(bool)+0x83>
  6c:	e8 00 00 00 00       	call   71 <Display::SetSleep(bool)+0x71>
  71:	48 89 c7             	mov    %rax,%rdi
  74:	e8 00 00 00 00       	call   79 <Display::SetSleep(bool)+0x79>
  79:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  7d:	89 42 04             	mov    %eax,0x4(%rdx)
  80:	eb 01                	jmp    83 <Display::SetSleep(bool)+0x83>
  82:	90                   	nop
  83:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  87:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  8e:	00 00 
  90:	74 05                	je     97 <Display::SetSleep(bool)+0x97>
  92:	e8 00 00 00 00       	call   97 <Display::SetSleep(bool)+0x97>
  97:	c9                   	leave  
  98:	c3                   	ret    

Disassembly of section .text._ZN7Display3GetEv:

0000000000000000 <Display::Get()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 22 <Display::Get()+0x22>
  22:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  26:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  2d:	00 00 
  2f:	74 05                	je     36 <Display::Get()+0x36>
  31:	e8 00 00 00 00       	call   36 <Display::Get()+0x36>
  36:	c9                   	leave  
  37:	c3                   	ret    

Disassembly of section .text._ZN10RDMHandlerC2Eb:

0000000000000000 <RDMHandler::RDMHandler(bool)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	88 45 e4             	mov    %al,-0x1c(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  28:	0f b6 55 e4          	movzbl -0x1c(%rbp),%edx
  2c:	88 10                	mov    %dl,(%rax)
  2e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  32:	c6 40 01 00          	movb   $0x0,0x1(%rax)
  36:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3a:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  41:	00 
  42:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  46:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  4d:	00 
  4e:	90                   	nop
  4f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  53:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  5a:	00 00 
  5c:	74 05                	je     63 <RDMHandler::RDMHandler(bool)+0x63>
  5e:	e8 00 00 00 00       	call   63 <RDMHandler::RDMHandler(bool)+0x63>
  63:	c9                   	leave  
  64:	c3                   	ret    

Disassembly of section .text._ZN10RDMHandler12HandleStringEPKcj:

0000000000000000 <RDMHandler::HandleString(char const*, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 40          	sub    $0x40,%rsp
   c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  14:	89 55 cc             	mov    %edx,-0x34(%rbp)
  17:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1e:	00 00 
  20:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  24:	31 c0                	xor    %eax,%eax
  26:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  2a:	48 8b 40 10          	mov    0x10(%rax),%rax
  2e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  32:	8b 45 cc             	mov    -0x34(%rbp),%eax
  35:	89 c2                	mov    %eax,%edx
  37:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  3b:	88 50 17             	mov    %dl,0x17(%rax)
  3e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  45:	eb 1e                	jmp    65 <RDMHandler::HandleString(char const*, unsigned int)+0x65>
  47:	8b 55 ec             	mov    -0x14(%rbp),%edx
  4a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4e:	48 01 d0             	add    %rdx,%rax
  51:	0f b6 00             	movzbl (%rax),%eax
  54:	89 c1                	mov    %eax,%ecx
  56:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  5a:	8b 45 ec             	mov    -0x14(%rbp),%eax
  5d:	88 4c 02 18          	mov    %cl,0x18(%rdx,%rax,1)
  61:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
  65:	8b 45 ec             	mov    -0x14(%rbp),%eax
  68:	3b 45 cc             	cmp    -0x34(%rbp),%eax
  6b:	72 da                	jb     47 <RDMHandler::HandleString(char const*, unsigned int)+0x47>
  6d:	90                   	nop
  6e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  72:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  79:	00 00 
  7b:	74 05                	je     82 <RDMHandler::HandleString(char const*, unsigned int)+0x82>
  7d:	e8 00 00 00 00       	call   82 <RDMHandler::HandleString(char const*, unsigned int)+0x82>
  82:	c9                   	leave  
  83:	c3                   	ret    

Disassembly of section .text._ZN10RDMHandler20CreateRespondMessageEht:

0000000000000000 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 40          	sub    $0x40,%rsp
   c:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  10:	89 f1                	mov    %esi,%ecx
  12:	89 d0                	mov    %edx,%eax
  14:	89 ca                	mov    %ecx,%edx
  16:	88 55 c4             	mov    %dl,-0x3c(%rbp)
  19:	66 89 45 c0          	mov    %ax,-0x40(%rbp)
  1d:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  24:	00 00 
  26:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  2a:	31 c0                	xor    %eax,%eax
  2c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  30:	48 8b 40 08          	mov    0x8(%rax),%rax
  34:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  38:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  3c:	48 8b 40 10          	mov    0x10(%rax),%rax
  40:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  44:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  48:	c6 00 cc             	movb   $0xcc,(%rax)
  4b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4f:	0f b6 10             	movzbl (%rax),%edx
  52:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  56:	88 50 01             	mov    %dl,0x1(%rax)
  59:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  5d:	0f b6 50 0e          	movzbl 0xe(%rax),%edx
  61:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  65:	88 50 0f             	mov    %dl,0xf(%rax)
  68:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  6c:	c6 40 11 00          	movb   $0x0,0x11(%rax)
  70:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  74:	0f b6 50 11          	movzbl 0x11(%rax),%edx
  78:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7c:	88 50 12             	mov    %dl,0x12(%rax)
  7f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  83:	0f b6 50 12          	movzbl 0x12(%rax),%edx
  87:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8b:	88 50 13             	mov    %dl,0x13(%rax)
  8e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  92:	0f b6 40 13          	movzbl 0x13(%rax),%eax
  96:	8d 50 01             	lea    0x1(%rax),%edx
  99:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  9d:	88 50 14             	mov    %dl,0x14(%rax)
  a0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  a4:	0f b6 50 14          	movzbl 0x14(%rax),%edx
  a8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  ac:	88 50 15             	mov    %dl,0x15(%rax)
  af:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  b3:	0f b6 50 15          	movzbl 0x15(%rax),%edx
  b7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  bb:	88 50 16             	mov    %dl,0x16(%rax)
  be:	0f b6 45 c4          	movzbl -0x3c(%rbp),%eax
  c2:	85 c0                	test   %eax,%eax
  c4:	74 16                	je     dc <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0xdc>
  c6:	85 c0                	test   %eax,%eax
  c8:	0f 88 30 01 00 00    	js     1fe <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x1fe>
  ce:	83 e8 01             	sub    $0x1,%eax
  d1:	83 f8 01             	cmp    $0x1,%eax
  d4:	0f 87 24 01 00 00    	ja     1fe <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x1fe>
  da:	eb 1c                	jmp    f8 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0xf8>
  dc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  e0:	0f b6 40 17          	movzbl 0x17(%rax),%eax
  e4:	8d 50 18             	lea    0x18(%rax),%edx
  e7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  eb:	88 50 02             	mov    %dl,0x2(%rax)
  ee:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  f2:	c6 40 10 00          	movb   $0x0,0x10(%rax)
  f6:	eb 3a                	jmp    132 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x132>
  f8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  fc:	c6 40 02 1a          	movb   $0x1a,0x2(%rax)
 100:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 104:	0f b6 55 c4          	movzbl -0x3c(%rbp),%edx
 108:	88 50 10             	mov    %dl,0x10(%rax)
 10b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 10f:	c6 40 17 02          	movb   $0x2,0x17(%rax)
 113:	0f b7 45 c0          	movzwl -0x40(%rbp),%eax
 117:	66 c1 e8 08          	shr    $0x8,%ax
 11b:	89 c2                	mov    %eax,%edx
 11d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 121:	88 50 18             	mov    %dl,0x18(%rax)
 124:	0f b7 45 c0          	movzwl -0x40(%rbp),%eax
 128:	89 c2                	mov    %eax,%edx
 12a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 12e:	88 50 19             	mov    %dl,0x19(%rax)
 131:	90                   	nop
 132:	e8 00 00 00 00       	call   137 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x137>
 137:	48 83 c0 08          	add    $0x8,%rax
 13b:	48 89 c7             	mov    %rax,%rdi
 13e:	e8 00 00 00 00       	call   143 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x143>
 143:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
 147:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%rbp)
 14e:	eb 33                	jmp    183 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x183>
 150:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
 154:	8b 45 dc             	mov    -0x24(%rbp),%eax
 157:	0f b6 4c 02 08       	movzbl 0x8(%rdx,%rax,1),%ecx
 15c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
 160:	8b 45 dc             	mov    -0x24(%rbp),%eax
 163:	88 4c 02 03          	mov    %cl,0x3(%rdx,%rax,1)
 167:	8b 55 dc             	mov    -0x24(%rbp),%edx
 16a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 16e:	48 01 d0             	add    %rdx,%rax
 171:	0f b6 08             	movzbl (%rax),%ecx
 174:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
 178:	8b 45 dc             	mov    -0x24(%rbp),%eax
 17b:	88 4c 02 09          	mov    %cl,0x9(%rdx,%rax,1)
 17f:	83 45 dc 01          	addl   $0x1,-0x24(%rbp)
 183:	83 7d dc 05          	cmpl   $0x5,-0x24(%rbp)
 187:	76 c7                	jbe    150 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x150>
 189:	66 c7 45 da 00 00    	movw   $0x0,-0x26(%rbp)
 18f:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%rbp)
 196:	eb 1c                	jmp    1b4 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x1b4>
 198:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 19c:	48 8b 50 10          	mov    0x10(%rax),%rdx
 1a0:	8b 45 dc             	mov    -0x24(%rbp),%eax
 1a3:	48 01 d0             	add    %rdx,%rax
 1a6:	0f b6 00             	movzbl (%rax),%eax
 1a9:	0f b6 c0             	movzbl %al,%eax
 1ac:	66 01 45 da          	add    %ax,-0x26(%rbp)
 1b0:	83 45 dc 01          	addl   $0x1,-0x24(%rbp)
 1b4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 1b8:	0f b6 40 02          	movzbl 0x2(%rax),%eax
 1bc:	0f b6 c0             	movzbl %al,%eax
 1bf:	39 45 dc             	cmp    %eax,-0x24(%rbp)
 1c2:	72 d4                	jb     198 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x198>
 1c4:	0f b7 45 da          	movzwl -0x26(%rbp),%eax
 1c8:	66 c1 e8 08          	shr    $0x8,%ax
 1cc:	89 c6                	mov    %eax,%esi
 1ce:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 1d2:	48 8b 48 10          	mov    0x10(%rax),%rcx
 1d6:	8b 45 dc             	mov    -0x24(%rbp),%eax
 1d9:	8d 50 01             	lea    0x1(%rax),%edx
 1dc:	89 55 dc             	mov    %edx,-0x24(%rbp)
 1df:	89 c0                	mov    %eax,%eax
 1e1:	48 01 c8             	add    %rcx,%rax
 1e4:	89 f2                	mov    %esi,%edx
 1e6:	88 10                	mov    %dl,(%rax)
 1e8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 1ec:	48 8b 50 10          	mov    0x10(%rax),%rdx
 1f0:	8b 45 dc             	mov    -0x24(%rbp),%eax
 1f3:	48 01 d0             	add    %rdx,%rax
 1f6:	0f b7 55 da          	movzwl -0x26(%rbp),%edx
 1fa:	88 10                	mov    %dl,(%rax)
 1fc:	eb 01                	jmp    1ff <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x1ff>
 1fe:	90                   	nop
 1ff:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 203:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 20a:	00 00 
 20c:	74 05                	je     213 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x213>
 20e:	e8 00 00 00 00       	call   213 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x213>
 213:	c9                   	leave  
 214:	c3                   	ret    

Disassembly of section .text._ZN10RDMHandler17RespondMessageAckEv:

0000000000000000 <RDMHandler::RespondMessageAck()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	48 8b 40 08          	mov    0x8(%rax),%rax
  27:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  2b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  2f:	0f b6 40 16          	movzbl 0x16(%rax),%eax
  33:	84 c0                	test   %al,%al
  35:	75 08                	jne    3f <RDMHandler::RespondMessageAck()+0x3f>
  37:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  3b:	c6 40 01 18          	movb   $0x18,0x1(%rax)
  3f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43:	ba 00 00 00 00       	mov    $0x0,%edx
  48:	be 00 00 00 00       	mov    $0x0,%esi
  4d:	48 89 c7             	mov    %rax,%rdi
  50:	e8 00 00 00 00       	call   55 <RDMHandler::RespondMessageAck()+0x55>
  55:	90                   	nop
  56:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  5a:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  61:	00 00 
  63:	74 05                	je     6a <RDMHandler::RespondMessageAck()+0x6a>
  65:	e8 00 00 00 00       	call   6a <RDMHandler::RespondMessageAck()+0x6a>
  6a:	c9                   	leave  
  6b:	c3                   	ret    

Disassembly of section .text._ZN10RDMHandler18RespondMessageNackEt:

0000000000000000 <RDMHandler::RespondMessageNack(unsigned short)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	66 89 45 e4          	mov    %ax,-0x1c(%rbp)
  16:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1d:	00 00 
  1f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  23:	31 c0                	xor    %eax,%eax
  25:	0f b7 55 e4          	movzwl -0x1c(%rbp),%edx
  29:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2d:	be 02 00 00 00       	mov    $0x2,%esi
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	call   3a <RDMHandler::RespondMessageNack(unsigned short)+0x3a>
  3a:	90                   	nop
  3b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3f:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  46:	00 00 
  48:	74 05                	je     4f <RDMHandler::RespondMessageNack(unsigned short)+0x4f>
  4a:	e8 00 00 00 00       	call   4f <RDMHandler::RespondMessageNack(unsigned short)+0x4f>
  4f:	c9                   	leave  
  50:	c3                   	ret    

Disassembly of section .text._ZN10RDMHandler10HandleDataEPKhPh:

0000000000000000 <RDMHandler::HandleData(unsigned char const*, unsigned char*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 70          	sub    $0x70,%rsp
   c:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  10:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  14:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  18:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1f:	00 00 
  21:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  25:	31 c0                	xor    %eax,%eax
  27:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  2b:	c6 00 ff             	movb   $0xff,(%rax)
  2e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  32:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  36:	48 89 50 08          	mov    %rdx,0x8(%rax)
  3a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  3e:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  42:	48 89 50 10          	mov    %rdx,0x10(%rax)
  46:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4a:	48 8b 40 08          	mov    0x8(%rax),%rax
  4e:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  52:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  56:	0f b6 40 0f          	movzbl 0xf(%rax),%eax
  5a:	84 c0                	test   %al,%al
  5c:	0f 84 07 04 00 00    	je     469 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x469>
  62:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  66:	0f b6 40 10          	movzbl 0x10(%rax),%eax
  6a:	84 c0                	test   %al,%al
  6c:	0f 85 f7 03 00 00    	jne    469 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x469>
  72:	e8 00 00 00 00       	call   77 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x77>
  77:	48 83 c0 08          	add    $0x8,%rax
  7b:	48 89 c7             	mov    %rax,%rdi
  7e:	e8 00 00 00 00       	call   83 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x83>
  83:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  87:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8b:	48 83 c0 02          	add    $0x2,%rax
  8f:	ba 06 00 00 00       	mov    $0x6,%edx
  94:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 9b <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x9b>
  9b:	48 89 ce             	mov    %rcx,%rsi
  9e:	48 89 c7             	mov    %rax,%rdi
  a1:	e8 00 00 00 00       	call   a6 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0xa6>
  a6:	85 c0                	test   %eax,%eax
  a8:	0f 94 c0             	sete   %al
  ab:	88 45 bf             	mov    %al,-0x41(%rbp)
  ae:	c6 45 c0 00          	movb   $0x0,-0x40(%rbp)
  b2:	0f b6 45 bf          	movzbl -0x41(%rbp),%eax
  b6:	83 f0 01             	xor    $0x1,%eax
  b9:	84 c0                	test   %al,%al
  bb:	74 7e                	je     13b <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x13b>
  bd:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  c1:	48 8d 48 02          	lea    0x2(%rax),%rcx
  c5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  c9:	ba 02 00 00 00       	mov    $0x2,%edx
  ce:	48 89 c6             	mov    %rax,%rsi
  d1:	48 89 cf             	mov    %rcx,%rdi
  d4:	e8 00 00 00 00       	call   d9 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0xd9>
  d9:	85 c0                	test   %eax,%eax
  db:	0f 85 8b 03 00 00    	jne    46c <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x46c>
  e1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  e5:	48 83 c0 04          	add    $0x4,%rax
  e9:	ba 04 00 00 00       	mov    $0x4,%edx
  ee:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # f5 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0xf5>
  f5:	48 89 ce             	mov    %rcx,%rsi
  f8:	48 89 c7             	mov    %rax,%rdi
  fb:	e8 00 00 00 00       	call   100 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x100>
 100:	85 c0                	test   %eax,%eax
 102:	0f 94 c0             	sete   %al
 105:	88 45 bf             	mov    %al,-0x41(%rbp)
 108:	0f b6 45 bf          	movzbl -0x41(%rbp),%eax
 10c:	83 f0 01             	xor    $0x1,%eax
 10f:	84 c0                	test   %al,%al
 111:	74 28                	je     13b <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x13b>
 113:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 117:	48 8d 48 02          	lea    0x2(%rax),%rcx
 11b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 11f:	48 83 c0 04          	add    $0x4,%rax
 123:	ba 04 00 00 00       	mov    $0x4,%edx
 128:	48 89 ce             	mov    %rcx,%rsi
 12b:	48 89 c7             	mov    %rax,%rdi
 12e:	e8 00 00 00 00       	call   133 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x133>
 133:	85 c0                	test   %eax,%eax
 135:	0f 94 c0             	sete   %al
 138:	88 45 c0             	mov    %al,-0x40(%rbp)
 13b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 13f:	0f b6 40 13          	movzbl 0x13(%rax),%eax
 143:	88 45 c1             	mov    %al,-0x3f(%rbp)
 146:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 14a:	0f b6 40 14          	movzbl 0x14(%rax),%eax
 14e:	0f b6 c0             	movzbl %al,%eax
 151:	c1 e0 08             	shl    $0x8,%eax
 154:	89 c2                	mov    %eax,%edx
 156:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 15a:	0f b6 40 15          	movzbl 0x15(%rax),%eax
 15e:	0f b6 c0             	movzbl %al,%eax
 161:	01 d0                	add    %edx,%eax
 163:	66 89 45 c4          	mov    %ax,-0x3c(%rbp)
 167:	0f b6 45 c0          	movzbl -0x40(%rbp),%eax
 16b:	83 f0 01             	xor    $0x1,%eax
 16e:	84 c0                	test   %al,%al
 170:	74 0f                	je     181 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x181>
 172:	0f b6 45 bf          	movzbl -0x41(%rbp),%eax
 176:	83 f0 01             	xor    $0x1,%eax
 179:	84 c0                	test   %al,%al
 17b:	0f 85 f2 02 00 00    	jne    473 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x473>
 181:	80 7d c1 10          	cmpb   $0x10,-0x3f(%rbp)
 185:	0f 85 8d 02 00 00    	jne    418 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x418>
 18b:	66 83 7d c4 01       	cmpw   $0x1,-0x3c(%rbp)
 190:	0f 85 4d 01 00 00    	jne    2e3 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x2e3>
 196:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
 19a:	0f b6 40 01          	movzbl 0x1(%rax),%eax
 19e:	83 f0 01             	xor    $0x1,%eax
 1a1:	84 c0                	test   %al,%al
 1a3:	0f 84 ca 02 00 00    	je     473 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x473>
 1a9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 1ad:	48 8d 48 17          	lea    0x17(%rax),%rcx
 1b1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 1b5:	ba 06 00 00 00       	mov    $0x6,%edx
 1ba:	48 89 c6             	mov    %rax,%rsi
 1bd:	48 89 cf             	mov    %rcx,%rdi
 1c0:	e8 00 00 00 00       	call   1c5 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x1c5>
 1c5:	85 c0                	test   %eax,%eax
 1c7:	0f 8f a6 02 00 00    	jg     473 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x473>
 1cd:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 1d1:	48 83 c0 17          	add    $0x17,%rax
 1d5:	48 8d 48 06          	lea    0x6(%rax),%rcx
 1d9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 1dd:	ba 06 00 00 00       	mov    $0x6,%edx
 1e2:	48 89 ce             	mov    %rcx,%rsi
 1e5:	48 89 c7             	mov    %rax,%rdi
 1e8:	e8 00 00 00 00       	call   1ed <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x1ed>
 1ed:	85 c0                	test   %eax,%eax
 1ef:	0f 8f 7e 02 00 00    	jg     473 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x473>
 1f5:	48 8b 45 98          	mov    -0x68(%rbp),%rax
 1f9:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
 1fd:	66 c7 45 c2 fa 05    	movw   $0x5fa,-0x3e(%rbp)
 203:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%rbp)
 20a:	eb 0f                	jmp    21b <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x21b>
 20c:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
 210:	8b 45 c8             	mov    -0x38(%rbp),%eax
 213:	c6 04 02 fe          	movb   $0xfe,(%rdx,%rax,1)
 217:	83 45 c8 01          	addl   $0x1,-0x38(%rbp)
 21b:	83 7d c8 06          	cmpl   $0x6,-0x38(%rbp)
 21f:	76 eb                	jbe    20c <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x20c>
 221:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 225:	c6 40 07 aa          	movb   $0xaa,0x7(%rax)
 229:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%rbp)
 230:	eb 5e                	jmp    290 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x290>
 232:	8b 55 cc             	mov    -0x34(%rbp),%edx
 235:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 239:	48 01 d0             	add    %rdx,%rax
 23c:	0f b6 00             	movzbl (%rax),%eax
 23f:	8b 55 cc             	mov    -0x34(%rbp),%edx
 242:	8d 0c 12             	lea    (%rdx,%rdx,1),%ecx
 245:	83 c8 aa             	or     $0xffffffaa,%eax
 248:	89 c2                	mov    %eax,%edx
 24a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 24e:	89 c9                	mov    %ecx,%ecx
 250:	88 54 08 08          	mov    %dl,0x8(%rax,%rcx,1)
 254:	8b 55 cc             	mov    -0x34(%rbp),%edx
 257:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 25b:	48 01 d0             	add    %rdx,%rax
 25e:	0f b6 00             	movzbl (%rax),%eax
 261:	8b 55 cc             	mov    -0x34(%rbp),%edx
 264:	01 d2                	add    %edx,%edx
 266:	8d 4a 01             	lea    0x1(%rdx),%ecx
 269:	83 c8 55             	or     $0x55,%eax
 26c:	89 c2                	mov    %eax,%edx
 26e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 272:	89 c9                	mov    %ecx,%ecx
 274:	88 54 08 08          	mov    %dl,0x8(%rax,%rcx,1)
 278:	8b 55 cc             	mov    -0x34(%rbp),%edx
 27b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 27f:	48 01 d0             	add    %rdx,%rax
 282:	0f b6 00             	movzbl (%rax),%eax
 285:	0f b6 c0             	movzbl %al,%eax
 288:	66 01 45 c2          	add    %ax,-0x3e(%rbp)
 28c:	83 45 cc 01          	addl   $0x1,-0x34(%rbp)
 290:	83 7d cc 05          	cmpl   $0x5,-0x34(%rbp)
 294:	76 9c                	jbe    232 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x232>
 296:	0f b7 45 c2          	movzwl -0x3e(%rbp),%eax
 29a:	66 c1 e8 08          	shr    $0x8,%ax
 29e:	83 c8 aa             	or     $0xffffffaa,%eax
 2a1:	89 c2                	mov    %eax,%edx
 2a3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 2a7:	88 50 14             	mov    %dl,0x14(%rax)
 2aa:	0f b7 45 c2          	movzwl -0x3e(%rbp),%eax
 2ae:	66 c1 e8 08          	shr    $0x8,%ax
 2b2:	83 c8 55             	or     $0x55,%eax
 2b5:	89 c2                	mov    %eax,%edx
 2b7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 2bb:	88 50 15             	mov    %dl,0x15(%rax)
 2be:	0f b7 45 c2          	movzwl -0x3e(%rbp),%eax
 2c2:	83 c8 aa             	or     $0xffffffaa,%eax
 2c5:	89 c2                	mov    %eax,%edx
 2c7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 2cb:	88 50 16             	mov    %dl,0x16(%rax)
 2ce:	0f b7 45 c2          	movzwl -0x3e(%rbp),%eax
 2d2:	83 c8 55             	or     $0x55,%eax
 2d5:	89 c2                	mov    %eax,%edx
 2d7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 2db:	88 50 17             	mov    %dl,0x17(%rax)
 2de:	e9 90 01 00 00       	jmp    473 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x473>
 2e3:	66 83 7d c4 03       	cmpw   $0x3,-0x3c(%rbp)
 2e8:	0f 85 91 00 00 00    	jne    37f <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x37f>
 2ee:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 2f2:	0f b6 40 16          	movzbl 0x16(%rax),%eax
 2f6:	84 c0                	test   %al,%al
 2f8:	0f 85 71 01 00 00    	jne    46f <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x46f>
 2fe:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
 302:	c6 40 01 00          	movb   $0x0,0x1(%rax)
 306:	0f b6 45 bf          	movzbl -0x41(%rbp),%eax
 30a:	83 f0 01             	xor    $0x1,%eax
 30d:	84 c0                	test   %al,%al
 30f:	0f 84 5e 01 00 00    	je     473 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x473>
 315:	80 7d c0 00          	cmpb   $0x0,-0x40(%rbp)
 319:	0f 84 54 01 00 00    	je     473 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x473>
 31f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
 323:	48 8b 40 10          	mov    0x10(%rax),%rax
 327:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
 32b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 32f:	c6 40 17 02          	movb   $0x2,0x17(%rax)
 333:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 337:	c6 40 18 00          	movb   $0x0,0x18(%rax)
 33b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 33f:	c6 40 19 00          	movb   $0x0,0x19(%rax)
 343:	e8 00 00 00 00       	call   348 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x348>
 348:	48 89 c7             	mov    %rax,%rdi
 34b:	e8 00 00 00 00       	call   350 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x350>
 350:	66 85 c0             	test   %ax,%ax
 353:	0f 95 c0             	setne  %al
 356:	84 c0                	test   %al,%al
 358:	74 14                	je     36e <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x36e>
 35a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 35e:	0f b6 40 19          	movzbl 0x19(%rax),%eax
 362:	83 c8 02             	or     $0x2,%eax
 365:	89 c2                	mov    %eax,%edx
 367:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 36b:	88 50 19             	mov    %dl,0x19(%rax)
 36e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
 372:	48 89 c7             	mov    %rax,%rdi
 375:	e8 00 00 00 00       	call   37a <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x37a>
 37a:	e9 f4 00 00 00       	jmp    473 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x473>
 37f:	66 83 7d c4 02       	cmpw   $0x2,-0x3c(%rbp)
 384:	0f 85 e9 00 00 00    	jne    473 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x473>
 38a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 38e:	0f b6 40 16          	movzbl 0x16(%rax),%eax
 392:	84 c0                	test   %al,%al
 394:	0f 85 d8 00 00 00    	jne    472 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x472>
 39a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
 39e:	c6 40 01 01          	movb   $0x1,0x1(%rax)
 3a2:	0f b6 45 bf          	movzbl -0x41(%rbp),%eax
 3a6:	83 f0 01             	xor    $0x1,%eax
 3a9:	84 c0                	test   %al,%al
 3ab:	0f 84 c2 00 00 00    	je     473 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x473>
 3b1:	80 7d c0 00          	cmpb   $0x0,-0x40(%rbp)
 3b5:	0f 84 b8 00 00 00    	je     473 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x473>
 3bb:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
 3bf:	48 8b 40 10          	mov    0x10(%rax),%rax
 3c3:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
 3c7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
 3cb:	c6 40 17 02          	movb   $0x2,0x17(%rax)
 3cf:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
 3d3:	c6 40 18 00          	movb   $0x0,0x18(%rax)
 3d7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
 3db:	c6 40 19 00          	movb   $0x0,0x19(%rax)
 3df:	e8 00 00 00 00       	call   3e4 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x3e4>
 3e4:	48 89 c7             	mov    %rax,%rdi
 3e7:	e8 00 00 00 00       	call   3ec <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x3ec>
 3ec:	66 85 c0             	test   %ax,%ax
 3ef:	0f 95 c0             	setne  %al
 3f2:	84 c0                	test   %al,%al
 3f4:	74 14                	je     40a <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x40a>
 3f6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
 3fa:	0f b6 40 19          	movzbl 0x19(%rax),%eax
 3fe:	83 c8 02             	or     $0x2,%eax
 401:	89 c2                	mov    %eax,%edx
 403:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
 407:	88 50 19             	mov    %dl,0x19(%rax)
 40a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
 40e:	48 89 c7             	mov    %rax,%rdi
 411:	e8 00 00 00 00       	call   416 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x416>
 416:	eb 5b                	jmp    473 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x473>
 418:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 41c:	0f b6 40 11          	movzbl 0x11(%rax),%eax
 420:	0f b6 c0             	movzbl %al,%eax
 423:	c1 e0 08             	shl    $0x8,%eax
 426:	89 c2                	mov    %eax,%edx
 428:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 42c:	0f b6 40 12          	movzbl 0x12(%rax),%eax
 430:	0f b6 c0             	movzbl %al,%eax
 433:	01 d0                	add    %edx,%eax
 435:	66 89 45 c6          	mov    %ax,-0x3a(%rbp)
 439:	44 0f b7 45 c6       	movzwl -0x3a(%rbp),%r8d
 43e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 442:	0f b6 40 16          	movzbl 0x16(%rax),%eax
 446:	0f b6 f8             	movzbl %al,%edi
 449:	0f b7 4d c4          	movzwl -0x3c(%rbp),%ecx
 44d:	0f b6 55 c1          	movzbl -0x3f(%rbp),%edx
 451:	0f b6 75 bf          	movzbl -0x41(%rbp),%esi
 455:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
 459:	45 89 c1             	mov    %r8d,%r9d
 45c:	41 89 f8             	mov    %edi,%r8d
 45f:	48 89 c7             	mov    %rax,%rdi
 462:	e8 00 00 00 00       	call   467 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x467>
 467:	eb 0a                	jmp    473 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x473>
 469:	90                   	nop
 46a:	eb 07                	jmp    473 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x473>
 46c:	90                   	nop
 46d:	eb 04                	jmp    473 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x473>
 46f:	90                   	nop
 470:	eb 01                	jmp    473 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x473>
 472:	90                   	nop
 473:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 477:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 47e:	00 00 
 480:	74 05                	je     487 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x487>
 482:	e8 00 00 00 00       	call   487 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x487>
 487:	c9                   	leave  
 488:	c3                   	ret    

Disassembly of section .text._ZN10RDMHandler8HandlersEbhtht:

0000000000000000 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 60          	sub    $0x60,%rsp
   c:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  10:	89 f7                	mov    %esi,%edi
  12:	89 d6                	mov    %edx,%esi
  14:	89 c8                	mov    %ecx,%eax
  16:	44 89 ca             	mov    %r9d,%edx
  19:	89 f9                	mov    %edi,%ecx
  1b:	88 4d b4             	mov    %cl,-0x4c(%rbp)
  1e:	89 f1                	mov    %esi,%ecx
  20:	88 4d b0             	mov    %cl,-0x50(%rbp)
  23:	66 89 45 ac          	mov    %ax,-0x54(%rbp)
  27:	44 89 c0             	mov    %r8d,%eax
  2a:	88 45 a8             	mov    %al,-0x58(%rbp)
  2d:	89 d0                	mov    %edx,%eax
  2f:	66 89 45 a4          	mov    %ax,-0x5c(%rbp)
  33:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  3a:	00 00 
  3c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40:	31 c0                	xor    %eax,%eax
  42:	80 7d b0 20          	cmpb   $0x20,-0x50(%rbp)
  46:	74 1c                	je     64 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x64>
  48:	80 7d b0 30          	cmpb   $0x30,-0x50(%rbp)
  4c:	74 16                	je     64 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x64>
  4e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  52:	be 05 00 00 00       	mov    $0x5,%esi
  57:	48 89 c7             	mov    %rax,%rdi
  5a:	e8 00 00 00 00       	call   5f <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x5f>
  5f:	e9 77 02 00 00       	jmp    2db <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x2db>
  64:	e8 00 00 00 00       	call   69 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x69>
  69:	48 89 c7             	mov    %rax,%rdi
  6c:	e8 00 00 00 00       	call   71 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x71>
  71:	66 89 45 ce          	mov    %ax,-0x32(%rbp)
  75:	0f b7 45 a4          	movzwl -0x5c(%rbp),%eax
  79:	66 3b 45 ce          	cmp    -0x32(%rbp),%ax
  7d:	76 1d                	jbe    9c <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x9c>
  7f:	66 83 7d a4 ff       	cmpw   $0xffff,-0x5c(%rbp)
  84:	74 16                	je     9c <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x9c>
  86:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8a:	be 09 00 00 00       	mov    $0x9,%esi
  8f:	48 89 c7             	mov    %rax,%rdi
  92:	e8 00 00 00 00       	call   97 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x97>
  97:	e9 3f 02 00 00       	jmp    2db <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x2db>
  9c:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
  a3:	00 
  a4:	c6 45 cc 00          	movb   $0x0,-0x34(%rbp)
  a8:	c6 45 cd 00          	movb   $0x0,-0x33(%rbp)
  ac:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # b3 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xb3>
  b3:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  b7:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # be <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xbe>
  be:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  c2:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # c9 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xc9>
  c9:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  cd:	eb 3a                	jmp    109 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x109>
  cf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  d3:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  d7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  db:	0f b7 00             	movzwl (%rax),%eax
  de:	66 39 45 ac          	cmp    %ax,-0x54(%rbp)
  e2:	75 20                	jne    104 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x104>
  e4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  e8:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  ec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  f0:	0f b6 40 2a          	movzbl 0x2a(%rax),%eax
  f4:	88 45 cc             	mov    %al,-0x34(%rbp)
  f7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  fb:	0f b6 40 2b          	movzbl 0x2b(%rax),%eax
  ff:	88 45 cd             	mov    %al,-0x33(%rbp)
 102:	eb 0f                	jmp    113 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x113>
 104:	48 83 45 d8 30       	addq   $0x30,-0x28(%rbp)
 109:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 10d:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
 111:	75 bc                	jne    cf <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xcf>
 113:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
 118:	75 16                	jne    130 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x130>
 11a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 11e:	be 00 00 00 00       	mov    $0x0,%esi
 123:	48 89 c7             	mov    %rax,%rdi
 126:	e8 00 00 00 00       	call   12b <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x12b>
 12b:	e9 ab 01 00 00       	jmp    2db <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x2db>
 130:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 134:	0f b6 00             	movzbl (%rax),%eax
 137:	84 c0                	test   %al,%al
 139:	74 21                	je     15c <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x15c>
 13b:	0f b6 45 cc          	movzbl -0x34(%rbp),%eax
 13f:	83 f0 01             	xor    $0x1,%eax
 142:	84 c0                	test   %al,%al
 144:	74 37                	je     17d <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x17d>
 146:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 14a:	be 00 00 00 00       	mov    $0x0,%esi
 14f:	48 89 c7             	mov    %rax,%rdi
 152:	e8 00 00 00 00       	call   157 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x157>
 157:	e9 7f 01 00 00       	jmp    2db <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x2db>
 15c:	0f b6 45 cd          	movzbl -0x33(%rbp),%eax
 160:	83 f0 01             	xor    $0x1,%eax
 163:	84 c0                	test   %al,%al
 165:	74 16                	je     17d <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x17d>
 167:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 16b:	be 00 00 00 00       	mov    $0x0,%esi
 170:	48 89 c7             	mov    %rax,%rdi
 173:	e8 00 00 00 00       	call   178 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x178>
 178:	e9 5e 01 00 00       	jmp    2db <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x2db>
 17d:	80 7d b0 20          	cmpb   $0x20,-0x50(%rbp)
 181:	0f 85 d1 00 00 00    	jne    258 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x258>
 187:	80 7d b4 00          	cmpb   $0x0,-0x4c(%rbp)
 18b:	0f 85 49 01 00 00    	jne    2da <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x2da>
 191:	66 83 7d a4 ff       	cmpw   $0xffff,-0x5c(%rbp)
 196:	75 16                	jne    1ae <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x1ae>
 198:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 19c:	be 09 00 00 00       	mov    $0x9,%esi
 1a1:	48 89 c7             	mov    %rax,%rdi
 1a4:	e8 00 00 00 00       	call   1a9 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x1a9>
 1a9:	e9 2d 01 00 00       	jmp    2db <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x2db>
 1ae:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 1b2:	48 8b 40 08          	mov    0x8(%rax),%rax
 1b6:	48 85 c0             	test   %rax,%rax
 1b9:	75 16                	jne    1d1 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x1d1>
 1bb:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 1bf:	be 05 00 00 00       	mov    $0x5,%esi
 1c4:	48 89 c7             	mov    %rax,%rdi
 1c7:	e8 00 00 00 00       	call   1cc <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x1cc>
 1cc:	e9 0a 01 00 00       	jmp    2db <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x2db>
 1d1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 1d5:	0f b6 40 28          	movzbl 0x28(%rax),%eax
 1d9:	38 45 a8             	cmp    %al,-0x58(%rbp)
 1dc:	74 16                	je     1f4 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x1f4>
 1de:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 1e2:	be 01 00 00 00       	mov    $0x1,%esi
 1e7:	48 89 c7             	mov    %rax,%rdi
 1ea:	e8 00 00 00 00       	call   1ef <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x1ef>
 1ef:	e9 e7 00 00 00       	jmp    2db <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x2db>
 1f4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 1f8:	48 8b 40 10          	mov    0x10(%rax),%rax
 1fc:	48 89 c2             	mov    %rax,%rdx
 1ff:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 203:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
 207:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 20b:	48 8b 40 08          	mov    0x8(%rax),%rax
 20f:	83 e0 01             	and    $0x1,%eax
 212:	48 85 c0             	test   %rax,%rax
 215:	74 29                	je     240 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x240>
 217:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 21b:	48 8b 40 10          	mov    0x10(%rax),%rax
 21f:	48 89 c2             	mov    %rax,%rdx
 222:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 226:	48 01 d0             	add    %rdx,%rax
 229:	48 8b 10             	mov    (%rax),%rdx
 22c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 230:	48 8b 40 08          	mov    0x8(%rax),%rax
 234:	48 83 e8 01          	sub    $0x1,%rax
 238:	48 01 d0             	add    %rdx,%rax
 23b:	48 8b 00             	mov    (%rax),%rax
 23e:	eb 08                	jmp    248 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x248>
 240:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 244:	48 8b 40 08          	mov    0x8(%rax),%rax
 248:	0f b7 55 a4          	movzwl -0x5c(%rbp),%edx
 24c:	89 d6                	mov    %edx,%esi
 24e:	48 89 cf             	mov    %rcx,%rdi
 251:	ff d0                	call   *%rax
 253:	e9 83 00 00 00       	jmp    2db <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x2db>
 258:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 25c:	48 8b 40 18          	mov    0x18(%rax),%rax
 260:	48 85 c0             	test   %rax,%rax
 263:	75 13                	jne    278 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x278>
 265:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 269:	be 05 00 00 00       	mov    $0x5,%esi
 26e:	48 89 c7             	mov    %rax,%rdi
 271:	e8 00 00 00 00       	call   276 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x276>
 276:	eb 63                	jmp    2db <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x2db>
 278:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 27c:	48 8b 40 20          	mov    0x20(%rax),%rax
 280:	48 89 c2             	mov    %rax,%rdx
 283:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 287:	48 8d 3c 02          	lea    (%rdx,%rax,1),%rdi
 28b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 28f:	48 8b 40 18          	mov    0x18(%rax),%rax
 293:	83 e0 01             	and    $0x1,%eax
 296:	48 85 c0             	test   %rax,%rax
 299:	74 29                	je     2c4 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x2c4>
 29b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 29f:	48 8b 40 20          	mov    0x20(%rax),%rax
 2a3:	48 89 c2             	mov    %rax,%rdx
 2a6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 2aa:	48 01 d0             	add    %rdx,%rax
 2ad:	48 8b 10             	mov    (%rax),%rdx
 2b0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 2b4:	48 8b 40 18          	mov    0x18(%rax),%rax
 2b8:	48 83 e8 01          	sub    $0x1,%rax
 2bc:	48 01 d0             	add    %rdx,%rax
 2bf:	48 8b 00             	mov    (%rax),%rax
 2c2:	eb 08                	jmp    2cc <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x2cc>
 2c4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 2c8:	48 8b 40 18          	mov    0x18(%rax),%rax
 2cc:	0f b7 55 a4          	movzwl -0x5c(%rbp),%edx
 2d0:	0f b6 4d b4          	movzbl -0x4c(%rbp),%ecx
 2d4:	89 ce                	mov    %ecx,%esi
 2d6:	ff d0                	call   *%rax
 2d8:	eb 01                	jmp    2db <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x2db>
 2da:	90                   	nop
 2db:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 2df:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 2e6:	00 00 
 2e8:	74 05                	je     2ef <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x2ef>
 2ea:	e8 00 00 00 00       	call   2ef <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x2ef>
 2ef:	c9                   	leave  
 2f0:	c3                   	ret    

Disassembly of section .text._ZN10RDMHandler22GetSupportedParametersEt:

0000000000000000 <RDMHandler::GetSupportedParameters(unsigned short)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 40          	sub    $0x40,%rsp
   c:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	66 89 45 c4          	mov    %ax,-0x3c(%rbp)
  16:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1d:	00 00 
  1f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  23:	31 c0                	xor    %eax,%eax
  25:	c6 45 db 00          	movb   $0x0,-0x25(%rbp)
  29:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%rbp)
  30:	66 83 7d c4 00       	cmpw   $0x0,-0x3c(%rbp)
  35:	74 14                	je     4b <RDMHandler::GetSupportedParameters(unsigned short)+0x4b>
  37:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 3e <RDMHandler::GetSupportedParameters(unsigned short)+0x3e>
  3e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  42:	c7 45 dc 08 00 00 00 	movl   $0x8,-0x24(%rbp)
  49:	eb 12                	jmp    5d <RDMHandler::GetSupportedParameters(unsigned short)+0x5d>
  4b:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 52 <RDMHandler::GetSupportedParameters(unsigned short)+0x52>
  52:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  56:	c7 45 dc 1c 00 00 00 	movl   $0x1c,-0x24(%rbp)
  5d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  61:	48 8b 40 10          	mov    0x10(%rax),%rax
  65:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  69:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%rbp)
  70:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  77:	e9 98 00 00 00       	jmp    114 <RDMHandler::GetSupportedParameters(unsigned short)+0x114>
  7c:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  7f:	48 89 d0             	mov    %rdx,%rax
  82:	48 01 c0             	add    %rax,%rax
  85:	48 01 d0             	add    %rdx,%rax
  88:	48 c1 e0 04          	shl    $0x4,%rax
  8c:	48 89 c2             	mov    %rax,%rdx
  8f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  93:	48 01 d0             	add    %rdx,%rax
  96:	0f b6 40 29          	movzbl 0x29(%rax),%eax
  9a:	84 c0                	test   %al,%al
  9c:	74 72                	je     110 <RDMHandler::GetSupportedParameters(unsigned short)+0x110>
  9e:	0f b6 45 db          	movzbl -0x25(%rbp),%eax
  a2:	83 c0 01             	add    $0x1,%eax
  a5:	88 45 db             	mov    %al,-0x25(%rbp)
  a8:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  ab:	48 89 d0             	mov    %rdx,%rax
  ae:	48 01 c0             	add    %rax,%rax
  b1:	48 01 d0             	add    %rdx,%rax
  b4:	48 c1 e0 04          	shl    $0x4,%rax
  b8:	48 89 c2             	mov    %rax,%rdx
  bb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  bf:	48 01 d0             	add    %rdx,%rax
  c2:	0f b7 00             	movzwl (%rax),%eax
  c5:	66 c1 e8 08          	shr    $0x8,%ax
  c9:	89 c1                	mov    %eax,%ecx
  cb:	8b 45 e0             	mov    -0x20(%rbp),%eax
  ce:	8d 14 00             	lea    (%rax,%rax,1),%edx
  d1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  d5:	89 d2                	mov    %edx,%edx
  d7:	88 4c 10 18          	mov    %cl,0x18(%rax,%rdx,1)
  db:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  de:	48 89 d0             	mov    %rdx,%rax
  e1:	48 01 c0             	add    %rax,%rax
  e4:	48 01 d0             	add    %rdx,%rax
  e7:	48 c1 e0 04          	shl    $0x4,%rax
  eb:	48 89 c2             	mov    %rax,%rdx
  ee:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  f2:	48 01 d0             	add    %rdx,%rax
  f5:	0f b7 10             	movzwl (%rax),%edx
  f8:	8b 45 e0             	mov    -0x20(%rbp),%eax
  fb:	01 c0                	add    %eax,%eax
  fd:	8d 70 01             	lea    0x1(%rax),%esi
 100:	89 d1                	mov    %edx,%ecx
 102:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 106:	89 f2                	mov    %esi,%edx
 108:	88 4c 10 18          	mov    %cl,0x18(%rax,%rdx,1)
 10c:	83 45 e0 01          	addl   $0x1,-0x20(%rbp)
 110:	83 45 e4 01          	addl   $0x1,-0x1c(%rbp)
 114:	8b 45 e4             	mov    -0x1c(%rbp),%eax
 117:	3b 45 dc             	cmp    -0x24(%rbp),%eax
 11a:	0f 82 5c ff ff ff    	jb     7c <RDMHandler::GetSupportedParameters(unsigned short)+0x7c>
 120:	0f b6 45 db          	movzbl -0x25(%rbp),%eax
 124:	8d 14 00             	lea    (%rax,%rax,1),%edx
 127:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 12b:	88 50 17             	mov    %dl,0x17(%rax)
 12e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 132:	48 89 c7             	mov    %rax,%rdi
 135:	e8 00 00 00 00       	call   13a <RDMHandler::GetSupportedParameters(unsigned short)+0x13a>
 13a:	90                   	nop
 13b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 13f:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 146:	00 00 
 148:	74 05                	je     14f <RDMHandler::GetSupportedParameters(unsigned short)+0x14f>
 14a:	e8 00 00 00 00       	call   14f <RDMHandler::GetSupportedParameters(unsigned short)+0x14f>
 14f:	c9                   	leave  
 150:	c3                   	ret    

Disassembly of section .text._ZN10RDMHandler13GetDeviceInfoEt:

0000000000000000 <RDMHandler::GetDeviceInfo(unsigned short)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	66 89 45 d4          	mov    %ax,-0x2c(%rbp)
  16:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1d:	00 00 
  1f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  23:	31 c0                	xor    %eax,%eax
  25:	e8 00 00 00 00       	call   2a <RDMHandler::GetDeviceInfo(unsigned short)+0x2a>
  2a:	48 89 c2             	mov    %rax,%rdx
  2d:	0f b7 45 d4          	movzwl -0x2c(%rbp),%eax
  31:	89 c6                	mov    %eax,%esi
  33:	48 89 d7             	mov    %rdx,%rdi
  36:	e8 00 00 00 00       	call   3b <RDMHandler::GetDeviceInfo(unsigned short)+0x3b>
  3b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  3f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  43:	48 8b 40 10          	mov    0x10(%rax),%rax
  47:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  4b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4f:	48 83 c0 18          	add    $0x18,%rax
  53:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  57:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5b:	c6 40 17 13          	movb   $0x13,0x17(%rax)
  5f:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  63:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  67:	ba 13 00 00 00       	mov    $0x13,%edx
  6c:	48 89 ce             	mov    %rcx,%rsi
  6f:	48 89 c7             	mov    %rax,%rdi
  72:	e8 00 00 00 00       	call   77 <RDMHandler::GetDeviceInfo(unsigned short)+0x77>
  77:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  7b:	48 89 c7             	mov    %rax,%rdi
  7e:	e8 00 00 00 00       	call   83 <RDMHandler::GetDeviceInfo(unsigned short)+0x83>
  83:	90                   	nop
  84:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  88:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  8f:	00 00 
  91:	74 05                	je     98 <RDMHandler::GetDeviceInfo(unsigned short)+0x98>
  93:	e8 00 00 00 00       	call   98 <RDMHandler::GetDeviceInfo(unsigned short)+0x98>
  98:	c9                   	leave  
  99:	c3                   	ret    

Disassembly of section .text._ZN10RDMHandler18GetFactoryDefaultsEt:

0000000000000000 <RDMHandler::GetFactoryDefaults(unsigned short)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	66 89 45 e4          	mov    %ax,-0x1c(%rbp)
  16:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1d:	00 00 
  1f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  23:	31 c0                	xor    %eax,%eax
  25:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  29:	48 8b 40 10          	mov    0x10(%rax),%rax
  2d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  31:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  35:	c6 40 17 01          	movb   $0x1,0x17(%rax)
  39:	e8 00 00 00 00       	call   3e <RDMHandler::GetFactoryDefaults(unsigned short)+0x3e>
  3e:	48 89 c7             	mov    %rax,%rdi
  41:	e8 00 00 00 00       	call   46 <RDMHandler::GetFactoryDefaults(unsigned short)+0x46>
  46:	84 c0                	test   %al,%al
  48:	74 07                	je     51 <RDMHandler::GetFactoryDefaults(unsigned short)+0x51>
  4a:	ba 01 00 00 00       	mov    $0x1,%edx
  4f:	eb 05                	jmp    56 <RDMHandler::GetFactoryDefaults(unsigned short)+0x56>
  51:	ba 00 00 00 00       	mov    $0x0,%edx
  56:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  5a:	88 50 18             	mov    %dl,0x18(%rax)
  5d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  61:	48 89 c7             	mov    %rax,%rdi
  64:	e8 00 00 00 00       	call   69 <RDMHandler::GetFactoryDefaults(unsigned short)+0x69>
  69:	90                   	nop
  6a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  6e:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  75:	00 00 
  77:	74 05                	je     7e <RDMHandler::GetFactoryDefaults(unsigned short)+0x7e>
  79:	e8 00 00 00 00       	call   7e <RDMHandler::GetFactoryDefaults(unsigned short)+0x7e>
  7e:	c9                   	leave  
  7f:	c3                   	ret    

Disassembly of section .text._ZN10RDMHandler18SetFactoryDefaultsEbt:

0000000000000000 <RDMHandler::SetFactoryDefaults(bool, unsigned short)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10:	89 f1                	mov    %esi,%ecx
  12:	89 d0                	mov    %edx,%eax
  14:	89 ca                	mov    %ecx,%edx
  16:	88 55 d4             	mov    %dl,-0x2c(%rbp)
  19:	66 89 45 d0          	mov    %ax,-0x30(%rbp)
  1d:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  24:	00 00 
  26:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  2a:	31 c0                	xor    %eax,%eax
  2c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  30:	48 8b 40 08          	mov    0x8(%rax),%rax
  34:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  38:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3c:	0f b6 40 16          	movzbl 0x16(%rax),%eax
  40:	84 c0                	test   %al,%al
  42:	74 13                	je     57 <RDMHandler::SetFactoryDefaults(bool, unsigned short)+0x57>
  44:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  48:	be 01 00 00 00       	mov    $0x1,%esi
  4d:	48 89 c7             	mov    %rax,%rdi
  50:	e8 00 00 00 00       	call   55 <RDMHandler::SetFactoryDefaults(bool, unsigned short)+0x55>
  55:	eb 36                	jmp    8d <RDMHandler::SetFactoryDefaults(bool, unsigned short)+0x8d>
  57:	e8 00 00 00 00       	call   5c <RDMHandler::SetFactoryDefaults(bool, unsigned short)+0x5c>
  5c:	48 89 c7             	mov    %rax,%rdi
  5f:	e8 00 00 00 00       	call   64 <RDMHandler::SetFactoryDefaults(bool, unsigned short)+0x64>
  64:	80 7d d4 00          	cmpb   $0x0,-0x2c(%rbp)
  68:	75 22                	jne    8c <RDMHandler::SetFactoryDefaults(bool, unsigned short)+0x8c>
  6a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  6e:	48 8b 40 10          	mov    0x10(%rax),%rax
  72:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  76:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  7a:	c6 40 17 00          	movb   $0x0,0x17(%rax)
  7e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  82:	48 89 c7             	mov    %rax,%rdi
  85:	e8 00 00 00 00       	call   8a <RDMHandler::SetFactoryDefaults(bool, unsigned short)+0x8a>
  8a:	eb 01                	jmp    8d <RDMHandler::SetFactoryDefaults(bool, unsigned short)+0x8d>
  8c:	90                   	nop
  8d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  91:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  98:	00 00 
  9a:	74 05                	je     a1 <RDMHandler::SetFactoryDefaults(bool, unsigned short)+0xa1>
  9c:	e8 00 00 00 00       	call   a1 <RDMHandler::SetFactoryDefaults(bool, unsigned short)+0xa1>
  a1:	c9                   	leave  
  a2:	c3                   	ret    

Disassembly of section .text._ZN10RDMHandler22GetProductDetailIdListEt:

0000000000000000 <RDMHandler::GetProductDetailIdList(unsigned short)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	66 89 45 d4          	mov    %ax,-0x2c(%rbp)
  16:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1d:	00 00 
  1f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  23:	31 c0                	xor    %eax,%eax
  25:	e8 00 00 00 00       	call   2a <RDMHandler::GetProductDetailIdList(unsigned short)+0x2a>
  2a:	48 83 c0 08          	add    $0x8,%rax
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	call   36 <RDMHandler::GetProductDetailIdList(unsigned short)+0x36>
  36:	66 89 45 ee          	mov    %ax,-0x12(%rbp)
  3a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  3e:	48 8b 40 10          	mov    0x10(%rax),%rax
  42:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  46:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4a:	c6 40 17 02          	movb   $0x2,0x17(%rax)
  4e:	0f b7 45 ee          	movzwl -0x12(%rbp),%eax
  52:	66 c1 e8 08          	shr    $0x8,%ax
  56:	89 c2                	mov    %eax,%edx
  58:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  5c:	88 50 18             	mov    %dl,0x18(%rax)
  5f:	0f b7 45 ee          	movzwl -0x12(%rbp),%eax
  63:	89 c2                	mov    %eax,%edx
  65:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  69:	88 50 19             	mov    %dl,0x19(%rax)
  6c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  70:	48 89 c7             	mov    %rax,%rdi
  73:	e8 00 00 00 00       	call   78 <RDMHandler::GetProductDetailIdList(unsigned short)+0x78>
  78:	90                   	nop
  79:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  7d:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  84:	00 00 
  86:	74 05                	je     8d <RDMHandler::GetProductDetailIdList(unsigned short)+0x8d>
  88:	e8 00 00 00 00       	call   8d <RDMHandler::GetProductDetailIdList(unsigned short)+0x8d>
  8d:	c9                   	leave  
  8e:	c3                   	ret    

Disassembly of section .text._ZN10RDMHandler25GetDeviceModelDescriptionEt:

0000000000000000 <RDMHandler::GetDeviceModelDescription(unsigned short)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	66 89 45 d4          	mov    %ax,-0x2c(%rbp)
  16:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1d:	00 00 
  1f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  23:	31 c0                	xor    %eax,%eax
  25:	e8 00 00 00 00       	call   2a <RDMHandler::GetDeviceModelDescription(unsigned short)+0x2a>
  2a:	48 89 c2             	mov    %rax,%rdx
  2d:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
  31:	48 89 c6             	mov    %rax,%rsi
  34:	48 89 d7             	mov    %rdx,%rdi
  37:	e8 00 00 00 00       	call   3c <RDMHandler::GetDeviceModelDescription(unsigned short)+0x3c>
  3c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  40:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
  44:	0f b6 d0             	movzbl %al,%edx
  47:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  4b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4f:	48 89 ce             	mov    %rcx,%rsi
  52:	48 89 c7             	mov    %rax,%rdi
  55:	e8 00 00 00 00       	call   5a <RDMHandler::GetDeviceModelDescription(unsigned short)+0x5a>
  5a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  5e:	48 89 c7             	mov    %rax,%rdi
  61:	e8 00 00 00 00       	call   66 <RDMHandler::GetDeviceModelDescription(unsigned short)+0x66>
  66:	90                   	nop
  67:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  6b:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  72:	00 00 
  74:	74 05                	je     7b <RDMHandler::GetDeviceModelDescription(unsigned short)+0x7b>
  76:	e8 00 00 00 00       	call   7b <RDMHandler::GetDeviceModelDescription(unsigned short)+0x7b>
  7b:	c9                   	leave  
  7c:	c3                   	ret    

Disassembly of section .text._ZN10RDMHandler20GetManufacturerLabelEt:

0000000000000000 <RDMHandler::GetManufacturerLabel(unsigned short)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	66 89 45 d4          	mov    %ax,-0x2c(%rbp)
  16:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1d:	00 00 
  1f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  23:	31 c0                	xor    %eax,%eax
  25:	e8 00 00 00 00       	call   2a <RDMHandler::GetManufacturerLabel(unsigned short)+0x2a>
  2a:	48 8d 50 08          	lea    0x8(%rax),%rdx
  2e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  32:	48 89 c6             	mov    %rax,%rsi
  35:	48 89 d7             	mov    %rdx,%rdi
  38:	e8 00 00 00 00       	call   3d <RDMHandler::GetManufacturerLabel(unsigned short)+0x3d>
  3d:	0f b6 45 e8          	movzbl -0x18(%rbp),%eax
  41:	0f b6 d0             	movzbl %al,%edx
  44:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  48:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4c:	48 89 ce             	mov    %rcx,%rsi
  4f:	48 89 c7             	mov    %rax,%rdi
  52:	e8 00 00 00 00       	call   57 <RDMHandler::GetManufacturerLabel(unsigned short)+0x57>
  57:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  5b:	48 89 c7             	mov    %rax,%rdi
  5e:	e8 00 00 00 00       	call   63 <RDMHandler::GetManufacturerLabel(unsigned short)+0x63>
  63:	90                   	nop
  64:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  68:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  6f:	00 00 
  71:	74 05                	je     78 <RDMHandler::GetManufacturerLabel(unsigned short)+0x78>
  73:	e8 00 00 00 00       	call   78 <RDMHandler::GetManufacturerLabel(unsigned short)+0x78>
  78:	c9                   	leave  
  79:	c3                   	ret    

Disassembly of section .text._ZN10RDMHandler14GetDeviceLabelEt:

0000000000000000 <RDMHandler::GetDeviceLabel(unsigned short)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	66 89 45 d4          	mov    %ax,-0x2c(%rbp)
  16:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1d:	00 00 
  1f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  23:	31 c0                	xor    %eax,%eax
  25:	e8 00 00 00 00       	call   2a <RDMHandler::GetDeviceLabel(unsigned short)+0x2a>
  2a:	48 89 c1             	mov    %rax,%rcx
  2d:	0f b7 45 d4          	movzwl -0x2c(%rbp),%eax
  31:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
  35:	89 c6                	mov    %eax,%esi
  37:	48 89 cf             	mov    %rcx,%rdi
  3a:	e8 00 00 00 00       	call   3f <RDMHandler::GetDeviceLabel(unsigned short)+0x3f>
  3f:	0f b6 45 e8          	movzbl -0x18(%rbp),%eax
  43:	0f b6 d0             	movzbl %al,%edx
  46:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  4a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4e:	48 89 ce             	mov    %rcx,%rsi
  51:	48 89 c7             	mov    %rax,%rdi
  54:	e8 00 00 00 00       	call   59 <RDMHandler::GetDeviceLabel(unsigned short)+0x59>
  59:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  5d:	48 89 c7             	mov    %rax,%rdi
  60:	e8 00 00 00 00       	call   65 <RDMHandler::GetDeviceLabel(unsigned short)+0x65>
  65:	90                   	nop
  66:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  6a:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  71:	00 00 
  73:	74 05                	je     7a <RDMHandler::GetDeviceLabel(unsigned short)+0x7a>
  75:	e8 00 00 00 00       	call   7a <RDMHandler::GetDeviceLabel(unsigned short)+0x7a>
  7a:	c9                   	leave  
  7b:	c3                   	ret    

Disassembly of section .text._ZN10RDMHandler14SetDeviceLabelEbt:

0000000000000000 <RDMHandler::SetDeviceLabel(bool, unsigned short)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10:	89 f1                	mov    %esi,%ecx
  12:	89 d0                	mov    %edx,%eax
  14:	89 ca                	mov    %ecx,%edx
  16:	88 55 d4             	mov    %dl,-0x2c(%rbp)
  19:	66 89 45 d0          	mov    %ax,-0x30(%rbp)
  1d:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  24:	00 00 
  26:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  2a:	31 c0                	xor    %eax,%eax
  2c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  30:	48 8b 40 08          	mov    0x8(%rax),%rax
  34:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  38:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3c:	0f b6 40 16          	movzbl 0x16(%rax),%eax
  40:	3c 20                	cmp    $0x20,%al
  42:	76 13                	jbe    57 <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x57>
  44:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  48:	be 01 00 00 00       	mov    $0x1,%esi
  4d:	48 89 c7             	mov    %rax,%rdi
  50:	e8 00 00 00 00       	call   55 <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x55>
  55:	eb 54                	jmp    ab <RDMHandler::SetDeviceLabel(bool, unsigned short)+0xab>
  57:	e8 00 00 00 00       	call   5c <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x5c>
  5c:	48 89 c7             	mov    %rax,%rdi
  5f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  63:	0f b6 40 16          	movzbl 0x16(%rax),%eax
  67:	0f b6 d0             	movzbl %al,%edx
  6a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  6e:	48 8d 70 17          	lea    0x17(%rax),%rsi
  72:	0f b7 45 d0          	movzwl -0x30(%rbp),%eax
  76:	89 d1                	mov    %edx,%ecx
  78:	48 89 f2             	mov    %rsi,%rdx
  7b:	89 c6                	mov    %eax,%esi
  7d:	e8 00 00 00 00       	call   82 <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x82>
  82:	80 7d d4 00          	cmpb   $0x0,-0x2c(%rbp)
  86:	75 22                	jne    aa <RDMHandler::SetDeviceLabel(bool, unsigned short)+0xaa>
  88:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8c:	48 8b 40 10          	mov    0x10(%rax),%rax
  90:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  94:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  98:	c6 40 17 00          	movb   $0x0,0x17(%rax)
  9c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  a0:	48 89 c7             	mov    %rax,%rdi
  a3:	e8 00 00 00 00       	call   a8 <RDMHandler::SetDeviceLabel(bool, unsigned short)+0xa8>
  a8:	eb 01                	jmp    ab <RDMHandler::SetDeviceLabel(bool, unsigned short)+0xab>
  aa:	90                   	nop
  ab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  af:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  b6:	00 00 
  b8:	74 05                	je     bf <RDMHandler::SetDeviceLabel(bool, unsigned short)+0xbf>
  ba:	e8 00 00 00 00       	call   bf <RDMHandler::SetDeviceLabel(bool, unsigned short)+0xbf>
  bf:	c9                   	leave  
  c0:	c3                   	ret    

Disassembly of section .text._ZN10RDMHandler23GetSoftwareVersionLabelEt:

0000000000000000 <RDMHandler::GetSoftwareVersionLabel(unsigned short)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	66 89 45 d4          	mov    %ax,-0x2c(%rbp)
  16:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1d:	00 00 
  1f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  23:	31 c0                	xor    %eax,%eax
  25:	e8 00 00 00 00       	call   2a <RDMHandler::GetSoftwareVersionLabel(unsigned short)+0x2a>
  2a:	48 89 c7             	mov    %rax,%rdi
  2d:	e8 00 00 00 00       	call   32 <RDMHandler::GetSoftwareVersionLabel(unsigned short)+0x32>
  32:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  36:	e8 00 00 00 00       	call   3b <RDMHandler::GetSoftwareVersionLabel(unsigned short)+0x3b>
  3b:	48 89 c7             	mov    %rax,%rdi
  3e:	e8 00 00 00 00       	call   43 <RDMHandler::GetSoftwareVersionLabel(unsigned short)+0x43>
  43:	88 45 ef             	mov    %al,-0x11(%rbp)
  46:	0f b6 55 ef          	movzbl -0x11(%rbp),%edx
  4a:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  4e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  52:	48 89 ce             	mov    %rcx,%rsi
  55:	48 89 c7             	mov    %rax,%rdi
  58:	e8 00 00 00 00       	call   5d <RDMHandler::GetSoftwareVersionLabel(unsigned short)+0x5d>
  5d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  61:	48 89 c7             	mov    %rax,%rdi
  64:	e8 00 00 00 00       	call   69 <RDMHandler::GetSoftwareVersionLabel(unsigned short)+0x69>
  69:	90                   	nop
  6a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  6e:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  75:	00 00 
  77:	74 05                	je     7e <RDMHandler::GetSoftwareVersionLabel(unsigned short)+0x7e>
  79:	e8 00 00 00 00       	call   7e <RDMHandler::GetSoftwareVersionLabel(unsigned short)+0x7e>
  7e:	c9                   	leave  
  7f:	c3                   	ret    

Disassembly of section .text._ZN10RDMHandler14SetResetDeviceEbt:

0000000000000000 <RDMHandler::SetResetDevice(bool, unsigned short)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10:	89 f1                	mov    %esi,%ecx
  12:	89 d0                	mov    %edx,%eax
  14:	89 ca                	mov    %ecx,%edx
  16:	88 55 d4             	mov    %dl,-0x2c(%rbp)
  19:	66 89 45 d0          	mov    %ax,-0x30(%rbp)
  1d:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  24:	00 00 
  26:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  2a:	31 c0                	xor    %eax,%eax
  2c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  30:	48 8b 40 08          	mov    0x8(%rax),%rax
  34:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  38:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3c:	0f b6 40 16          	movzbl 0x16(%rax),%eax
  40:	3c 01                	cmp    $0x1,%al
  42:	74 13                	je     57 <RDMHandler::SetResetDevice(bool, unsigned short)+0x57>
  44:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  48:	be 01 00 00 00       	mov    $0x1,%esi
  4d:	48 89 c7             	mov    %rax,%rdi
  50:	e8 00 00 00 00       	call   55 <RDMHandler::SetResetDevice(bool, unsigned short)+0x55>
  55:	eb 7c                	jmp    d3 <RDMHandler::SetResetDevice(bool, unsigned short)+0xd3>
  57:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5b:	0f b6 40 17          	movzbl 0x17(%rax),%eax
  5f:	88 45 e7             	mov    %al,-0x19(%rbp)
  62:	80 7d e7 01          	cmpb   $0x1,-0x19(%rbp)
  66:	74 19                	je     81 <RDMHandler::SetResetDevice(bool, unsigned short)+0x81>
  68:	80 7d e7 ff          	cmpb   $0xff,-0x19(%rbp)
  6c:	74 13                	je     81 <RDMHandler::SetResetDevice(bool, unsigned short)+0x81>
  6e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  72:	be 06 00 00 00       	mov    $0x6,%esi
  77:	48 89 c7             	mov    %rax,%rdi
  7a:	e8 00 00 00 00       	call   7f <RDMHandler::SetResetDevice(bool, unsigned short)+0x7f>
  7f:	eb 52                	jmp    d3 <RDMHandler::SetResetDevice(bool, unsigned short)+0xd3>
  81:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  85:	48 8b 40 10          	mov    0x10(%rax),%rax
  89:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  91:	c6 40 17 00          	movb   $0x0,0x17(%rax)
  95:	80 7d e7 ff          	cmpb   $0xff,-0x19(%rbp)
  99:	75 13                	jne    ae <RDMHandler::SetResetDevice(bool, unsigned short)+0xae>
  9b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  9f:	be 04 00 00 00       	mov    $0x4,%esi
  a4:	48 89 c7             	mov    %rax,%rdi
  a7:	e8 00 00 00 00       	call   ac <RDMHandler::SetResetDevice(bool, unsigned short)+0xac>
  ac:	eb 25                	jmp    d3 <RDMHandler::SetResetDevice(bool, unsigned short)+0xd3>
  ae:	e8 00 00 00 00       	call   b3 <RDMHandler::SetResetDevice(bool, unsigned short)+0xb3>
  b3:	48 89 c7             	mov    %rax,%rdi
  b6:	e8 00 00 00 00       	call   bb <RDMHandler::SetResetDevice(bool, unsigned short)+0xbb>
  bb:	83 f0 01             	xor    $0x1,%eax
  be:	84 c0                	test   %al,%al
  c0:	74 11                	je     d3 <RDMHandler::SetResetDevice(bool, unsigned short)+0xd3>
  c2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  c6:	be 04 00 00 00       	mov    $0x4,%esi
  cb:	48 89 c7             	mov    %rax,%rdi
  ce:	e8 00 00 00 00       	call   d3 <RDMHandler::SetResetDevice(bool, unsigned short)+0xd3>
  d3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  d7:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  de:	00 00 
  e0:	74 05                	je     e7 <RDMHandler::SetResetDevice(bool, unsigned short)+0xe7>
  e2:	e8 00 00 00 00       	call   e7 <RDMHandler::SetResetDevice(bool, unsigned short)+0xe7>
  e7:	c9                   	leave  
  e8:	c3                   	ret    

Disassembly of section .text._ZN10RDMHandler17GetIdentifyDeviceEt:

0000000000000000 <RDMHandler::GetIdentifyDevice(unsigned short)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	66 89 45 e4          	mov    %ax,-0x1c(%rbp)
  16:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1d:	00 00 
  1f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  23:	31 c0                	xor    %eax,%eax
  25:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  29:	48 8b 40 10          	mov    0x10(%rax),%rax
  2d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  31:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  35:	c6 40 17 01          	movb   $0x1,0x17(%rax)
  39:	e8 00 00 00 00       	call   3e <RDMHandler::GetIdentifyDevice(unsigned short)+0x3e>
  3e:	48 89 c7             	mov    %rax,%rdi
  41:	e8 00 00 00 00       	call   46 <RDMHandler::GetIdentifyDevice(unsigned short)+0x46>
  46:	84 c0                	test   %al,%al
  48:	74 07                	je     51 <RDMHandler::GetIdentifyDevice(unsigned short)+0x51>
  4a:	ba 01 00 00 00       	mov    $0x1,%edx
  4f:	eb 05                	jmp    56 <RDMHandler::GetIdentifyDevice(unsigned short)+0x56>
  51:	ba 00 00 00 00       	mov    $0x0,%edx
  56:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  5a:	88 50 18             	mov    %dl,0x18(%rax)
  5d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  61:	48 89 c7             	mov    %rax,%rdi
  64:	e8 00 00 00 00       	call   69 <RDMHandler::GetIdentifyDevice(unsigned short)+0x69>
  69:	90                   	nop
  6a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  6e:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  75:	00 00 
  77:	74 05                	je     7e <RDMHandler::GetIdentifyDevice(unsigned short)+0x7e>
  79:	e8 00 00 00 00       	call   7e <RDMHandler::GetIdentifyDevice(unsigned short)+0x7e>
  7e:	c9                   	leave  
  7f:	c3                   	ret    

Disassembly of section .text._ZN10RDMHandler17SetIdentifyDeviceEbt:

0000000000000000 <RDMHandler::SetIdentifyDevice(bool, unsigned short)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10:	89 f1                	mov    %esi,%ecx
  12:	89 d0                	mov    %edx,%eax
  14:	89 ca                	mov    %ecx,%edx
  16:	88 55 d4             	mov    %dl,-0x2c(%rbp)
  19:	66 89 45 d0          	mov    %ax,-0x30(%rbp)
  1d:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  24:	00 00 
  26:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  2a:	31 c0                	xor    %eax,%eax
  2c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  30:	48 8b 40 08          	mov    0x8(%rax),%rax
  34:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  38:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3c:	0f b6 40 16          	movzbl 0x16(%rax),%eax
  40:	3c 01                	cmp    $0x1,%al
  42:	74 13                	je     57 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x57>
  44:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  48:	be 01 00 00 00       	mov    $0x1,%esi
  4d:	48 89 c7             	mov    %rax,%rdi
  50:	e8 00 00 00 00       	call   55 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x55>
  55:	eb 7c                	jmp    d3 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0xd3>
  57:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5b:	0f b6 40 17          	movzbl 0x17(%rax),%eax
  5f:	84 c0                	test   %al,%al
  61:	74 1f                	je     82 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x82>
  63:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  67:	0f b6 40 17          	movzbl 0x17(%rax),%eax
  6b:	3c 01                	cmp    $0x1,%al
  6d:	74 13                	je     82 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x82>
  6f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  73:	be 06 00 00 00       	mov    $0x6,%esi
  78:	48 89 c7             	mov    %rax,%rdi
  7b:	e8 00 00 00 00       	call   80 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x80>
  80:	eb 51                	jmp    d3 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0xd3>
  82:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  86:	0f b6 40 17          	movzbl 0x17(%rax),%eax
  8a:	84 c0                	test   %al,%al
  8c:	75 0f                	jne    9d <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x9d>
  8e:	e8 00 00 00 00       	call   93 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x93>
  93:	48 89 c7             	mov    %rax,%rdi
  96:	e8 00 00 00 00       	call   9b <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x9b>
  9b:	eb 0d                	jmp    aa <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0xaa>
  9d:	e8 00 00 00 00       	call   a2 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0xa2>
  a2:	48 89 c7             	mov    %rax,%rdi
  a5:	e8 00 00 00 00       	call   aa <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0xaa>
  aa:	80 7d d4 00          	cmpb   $0x0,-0x2c(%rbp)
  ae:	75 22                	jne    d2 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0xd2>
  b0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  b4:	48 8b 40 10          	mov    0x10(%rax),%rax
  b8:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  bc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  c0:	c6 40 17 00          	movb   $0x0,0x17(%rax)
  c4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  c8:	48 89 c7             	mov    %rax,%rdi
  cb:	e8 00 00 00 00       	call   d0 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0xd0>
  d0:	eb 01                	jmp    d3 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0xd3>
  d2:	90                   	nop
  d3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  d7:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  de:	00 00 
  e0:	74 05                	je     e7 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0xe7>
  e2:	e8 00 00 00 00       	call   e7 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0xe7>
  e7:	c9                   	leave  
  e8:	c3                   	ret    

Disassembly of section .text._ZN10RDMHandler11GetLanguageEt:

0000000000000000 <RDMHandler::GetLanguage(unsigned short)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	66 89 45 e4          	mov    %ax,-0x1c(%rbp)
  16:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1d:	00 00 
  1f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  23:	31 c0                	xor    %eax,%eax
  25:	e8 00 00 00 00       	call   2a <RDMHandler::GetLanguage(unsigned short)+0x2a>
  2a:	48 89 c7             	mov    %rax,%rdi
  2d:	e8 00 00 00 00       	call   32 <RDMHandler::GetLanguage(unsigned short)+0x32>
  32:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  36:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  3a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3e:	ba 02 00 00 00       	mov    $0x2,%edx
  43:	48 89 ce             	mov    %rcx,%rsi
  46:	48 89 c7             	mov    %rax,%rdi
  49:	e8 00 00 00 00       	call   4e <RDMHandler::GetLanguage(unsigned short)+0x4e>
  4e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  52:	48 89 c7             	mov    %rax,%rdi
  55:	e8 00 00 00 00       	call   5a <RDMHandler::GetLanguage(unsigned short)+0x5a>
  5a:	90                   	nop
  5b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  5f:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  66:	00 00 
  68:	74 05                	je     6f <RDMHandler::GetLanguage(unsigned short)+0x6f>
  6a:	e8 00 00 00 00       	call   6f <RDMHandler::GetLanguage(unsigned short)+0x6f>
  6f:	c9                   	leave  
  70:	c3                   	ret    

Disassembly of section .text._ZN10RDMHandler11SetLanguageEbt:

0000000000000000 <RDMHandler::SetLanguage(bool, unsigned short)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10:	89 f1                	mov    %esi,%ecx
  12:	89 d0                	mov    %edx,%eax
  14:	89 ca                	mov    %ecx,%edx
  16:	88 55 d4             	mov    %dl,-0x2c(%rbp)
  19:	66 89 45 d0          	mov    %ax,-0x30(%rbp)
  1d:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  24:	00 00 
  26:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  2a:	31 c0                	xor    %eax,%eax
  2c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  30:	48 8b 40 08          	mov    0x8(%rax),%rax
  34:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  38:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  3c:	0f b6 40 16          	movzbl 0x16(%rax),%eax
  40:	3c 02                	cmp    $0x2,%al
  42:	74 16                	je     5a <RDMHandler::SetLanguage(bool, unsigned short)+0x5a>
  44:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  48:	be 01 00 00 00       	mov    $0x1,%esi
  4d:	48 89 c7             	mov    %rax,%rdi
  50:	e8 00 00 00 00       	call   55 <RDMHandler::SetLanguage(bool, unsigned short)+0x55>
  55:	e9 83 00 00 00       	jmp    dd <RDMHandler::SetLanguage(bool, unsigned short)+0xdd>
  5a:	e8 00 00 00 00       	call   5f <RDMHandler::SetLanguage(bool, unsigned short)+0x5f>
  5f:	48 89 c7             	mov    %rax,%rdi
  62:	e8 00 00 00 00       	call   67 <RDMHandler::SetLanguage(bool, unsigned short)+0x67>
  67:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  6b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  6f:	0f b6 40 17          	movzbl 0x17(%rax),%eax
  73:	0f b6 d0             	movzbl %al,%edx
  76:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7a:	0f b6 00             	movzbl (%rax),%eax
  7d:	0f be c0             	movsbl %al,%eax
  80:	39 c2                	cmp    %eax,%edx
  82:	75 1d                	jne    a1 <RDMHandler::SetLanguage(bool, unsigned short)+0xa1>
  84:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  88:	0f b6 40 18          	movzbl 0x18(%rax),%eax
  8c:	0f b6 d0             	movzbl %al,%edx
  8f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  93:	48 83 c0 01          	add    $0x1,%rax
  97:	0f b6 00             	movzbl (%rax),%eax
  9a:	0f be c0             	movsbl %al,%eax
  9d:	39 c2                	cmp    %eax,%edx
  9f:	74 13                	je     b4 <RDMHandler::SetLanguage(bool, unsigned short)+0xb4>
  a1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  a5:	be 06 00 00 00       	mov    $0x6,%esi
  aa:	48 89 c7             	mov    %rax,%rdi
  ad:	e8 00 00 00 00       	call   b2 <RDMHandler::SetLanguage(bool, unsigned short)+0xb2>
  b2:	eb 29                	jmp    dd <RDMHandler::SetLanguage(bool, unsigned short)+0xdd>
  b4:	80 7d d4 00          	cmpb   $0x0,-0x2c(%rbp)
  b8:	75 22                	jne    dc <RDMHandler::SetLanguage(bool, unsigned short)+0xdc>
  ba:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  be:	48 8b 40 10          	mov    0x10(%rax),%rax
  c2:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  c6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  ca:	c6 40 17 00          	movb   $0x0,0x17(%rax)
  ce:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  d2:	48 89 c7             	mov    %rax,%rdi
  d5:	e8 00 00 00 00       	call   da <RDMHandler::SetLanguage(bool, unsigned short)+0xda>
  da:	eb 01                	jmp    dd <RDMHandler::SetLanguage(bool, unsigned short)+0xdd>
  dc:	90                   	nop
  dd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  e1:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  e8:	00 00 
  ea:	74 05                	je     f1 <RDMHandler::SetLanguage(bool, unsigned short)+0xf1>
  ec:	e8 00 00 00 00       	call   f1 <RDMHandler::SetLanguage(bool, unsigned short)+0xf1>
  f1:	c9                   	leave  
  f2:	c3                   	ret    

Disassembly of section .text._ZN10RDMHandler24GetBootSoftwareVersionIdEt:

0000000000000000 <RDMHandler::GetBootSoftwareVersionId(unsigned short)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	66 89 45 d4          	mov    %ax,-0x2c(%rbp)
  16:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1d:	00 00 
  1f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  23:	31 c0                	xor    %eax,%eax
  25:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  29:	48 8b 40 08          	mov    0x8(%rax),%rax
  2d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  31:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  35:	0f b6 40 16          	movzbl 0x16(%rax),%eax
  39:	84 c0                	test   %al,%al
  3b:	74 13                	je     50 <RDMHandler::GetBootSoftwareVersionId(unsigned short)+0x50>
  3d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  41:	be 01 00 00 00       	mov    $0x1,%esi
  46:	48 89 c7             	mov    %rax,%rdi
  49:	e8 00 00 00 00       	call   4e <RDMHandler::GetBootSoftwareVersionId(unsigned short)+0x4e>
  4e:	eb 69                	jmp    b9 <RDMHandler::GetBootSoftwareVersionId(unsigned short)+0xb9>
  50:	e8 00 00 00 00       	call   55 <RDMHandler::GetBootSoftwareVersionId(unsigned short)+0x55>
  55:	48 89 c7             	mov    %rax,%rdi
  58:	e8 00 00 00 00       	call   5d <RDMHandler::GetBootSoftwareVersionId(unsigned short)+0x5d>
  5d:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  60:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  64:	48 8b 40 10          	mov    0x10(%rax),%rax
  68:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  6c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  70:	c6 40 17 04          	movb   $0x4,0x17(%rax)
  74:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  77:	c1 e8 18             	shr    $0x18,%eax
  7a:	89 c2                	mov    %eax,%edx
  7c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80:	88 50 18             	mov    %dl,0x18(%rax)
  83:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  86:	c1 e8 10             	shr    $0x10,%eax
  89:	89 c2                	mov    %eax,%edx
  8b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8f:	88 50 19             	mov    %dl,0x19(%rax)
  92:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  95:	c1 e8 08             	shr    $0x8,%eax
  98:	89 c2                	mov    %eax,%edx
  9a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  9e:	88 50 1a             	mov    %dl,0x1a(%rax)
  a1:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  a4:	89 c2                	mov    %eax,%edx
  a6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  aa:	88 50 1b             	mov    %dl,0x1b(%rax)
  ad:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  b1:	48 89 c7             	mov    %rax,%rdi
  b4:	e8 00 00 00 00       	call   b9 <RDMHandler::GetBootSoftwareVersionId(unsigned short)+0xb9>
  b9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  bd:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  c4:	00 00 
  c6:	74 05                	je     cd <RDMHandler::GetBootSoftwareVersionId(unsigned short)+0xcd>
  c8:	e8 00 00 00 00       	call   cd <RDMHandler::GetBootSoftwareVersionId(unsigned short)+0xcd>
  cd:	c9                   	leave  
  ce:	c3                   	ret    

Disassembly of section .text._ZN10RDMHandler27GetBootSoftwareVersionLabelEt:

0000000000000000 <RDMHandler::GetBootSoftwareVersionLabel(unsigned short)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	66 89 45 d4          	mov    %ax,-0x2c(%rbp)
  16:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1d:	00 00 
  1f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  23:	31 c0                	xor    %eax,%eax
  25:	e8 00 00 00 00       	call   2a <RDMHandler::GetBootSoftwareVersionLabel(unsigned short)+0x2a>
  2a:	48 89 c2             	mov    %rax,%rdx
  2d:	48 8d 45 ee          	lea    -0x12(%rbp),%rax
  31:	48 89 c6             	mov    %rax,%rsi
  34:	48 89 d7             	mov    %rdx,%rdi
  37:	e8 00 00 00 00       	call   3c <RDMHandler::GetBootSoftwareVersionLabel(unsigned short)+0x3c>
  3c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  40:	c6 45 ef 20          	movb   $0x20,-0x11(%rbp)
  44:	48 8d 55 ee          	lea    -0x12(%rbp),%rdx
  48:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
  4c:	48 89 d6             	mov    %rdx,%rsi
  4f:	48 89 c7             	mov    %rax,%rdi
  52:	e8 00 00 00 00       	call   57 <RDMHandler::GetBootSoftwareVersionLabel(unsigned short)+0x57>
  57:	0f b6 00             	movzbl (%rax),%eax
  5a:	0f b6 d0             	movzbl %al,%edx
  5d:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  61:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  65:	48 89 ce             	mov    %rcx,%rsi
  68:	48 89 c7             	mov    %rax,%rdi
  6b:	e8 00 00 00 00       	call   70 <RDMHandler::GetBootSoftwareVersionLabel(unsigned short)+0x70>
  70:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  74:	48 89 c7             	mov    %rax,%rdi
  77:	e8 00 00 00 00       	call   7c <RDMHandler::GetBootSoftwareVersionLabel(unsigned short)+0x7c>
  7c:	90                   	nop
  7d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  81:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  88:	00 00 
  8a:	74 05                	je     91 <RDMHandler::GetBootSoftwareVersionLabel(unsigned short)+0x91>
  8c:	e8 00 00 00 00       	call   91 <RDMHandler::GetBootSoftwareVersionLabel(unsigned short)+0x91>
  91:	c9                   	leave  
  92:	c3                   	ret    

Disassembly of section .text._ZN10RDMHandler14GetPersonalityEt:

0000000000000000 <RDMHandler::GetPersonality(unsigned short)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	66 89 45 d4          	mov    %ax,-0x2c(%rbp)
  16:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1d:	00 00 
  1f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  23:	31 c0                	xor    %eax,%eax
  25:	e8 00 00 00 00       	call   2a <RDMHandler::GetPersonality(unsigned short)+0x2a>
  2a:	48 89 c2             	mov    %rax,%rdx
  2d:	0f b7 45 d4          	movzwl -0x2c(%rbp),%eax
  31:	89 c6                	mov    %eax,%esi
  33:	48 89 d7             	mov    %rdx,%rdi
  36:	e8 00 00 00 00       	call   3b <RDMHandler::GetPersonality(unsigned short)+0x3b>
  3b:	88 45 ee             	mov    %al,-0x12(%rbp)
  3e:	e8 00 00 00 00       	call   43 <RDMHandler::GetPersonality(unsigned short)+0x43>
  43:	48 89 c2             	mov    %rax,%rdx
  46:	0f b7 45 d4          	movzwl -0x2c(%rbp),%eax
  4a:	89 c6                	mov    %eax,%esi
  4c:	48 89 d7             	mov    %rdx,%rdi
  4f:	e8 00 00 00 00       	call   54 <RDMHandler::GetPersonality(unsigned short)+0x54>
  54:	88 45 ef             	mov    %al,-0x11(%rbp)
  57:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  5b:	48 8b 40 10          	mov    0x10(%rax),%rax
  5f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  63:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  67:	c6 40 17 02          	movb   $0x2,0x17(%rax)
  6b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  6f:	0f b6 55 ee          	movzbl -0x12(%rbp),%edx
  73:	88 50 18             	mov    %dl,0x18(%rax)
  76:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  7a:	0f b6 55 ef          	movzbl -0x11(%rbp),%edx
  7e:	88 50 19             	mov    %dl,0x19(%rax)
  81:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  85:	48 89 c7             	mov    %rax,%rdi
  88:	e8 00 00 00 00       	call   8d <RDMHandler::GetPersonality(unsigned short)+0x8d>
  8d:	90                   	nop
  8e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  92:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  99:	00 00 
  9b:	74 05                	je     a2 <RDMHandler::GetPersonality(unsigned short)+0xa2>
  9d:	e8 00 00 00 00       	call   a2 <RDMHandler::GetPersonality(unsigned short)+0xa2>
  a2:	c9                   	leave  
  a3:	c3                   	ret    

Disassembly of section .text._ZN10RDMHandler14SetPersonalityEbt:

0000000000000000 <RDMHandler::SetPersonality(bool, unsigned short)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10:	89 f1                	mov    %esi,%ecx
  12:	89 d0                	mov    %edx,%eax
  14:	89 ca                	mov    %ecx,%edx
  16:	88 55 d4             	mov    %dl,-0x2c(%rbp)
  19:	66 89 45 d0          	mov    %ax,-0x30(%rbp)
  1d:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  24:	00 00 
  26:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  2a:	31 c0                	xor    %eax,%eax
  2c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  30:	48 8b 40 08          	mov    0x8(%rax),%rax
  34:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  38:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3c:	0f b6 40 16          	movzbl 0x16(%rax),%eax
  40:	3c 01                	cmp    $0x1,%al
  42:	74 16                	je     5a <RDMHandler::SetPersonality(bool, unsigned short)+0x5a>
  44:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  48:	be 01 00 00 00       	mov    $0x1,%esi
  4d:	48 89 c7             	mov    %rax,%rdi
  50:	e8 00 00 00 00       	call   55 <RDMHandler::SetPersonality(bool, unsigned short)+0x55>
  55:	e9 80 00 00 00       	jmp    da <RDMHandler::SetPersonality(bool, unsigned short)+0xda>
  5a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5e:	0f b6 40 17          	movzbl 0x17(%rax),%eax
  62:	88 45 e6             	mov    %al,-0x1a(%rbp)
  65:	e8 00 00 00 00       	call   6a <RDMHandler::SetPersonality(bool, unsigned short)+0x6a>
  6a:	48 89 c2             	mov    %rax,%rdx
  6d:	0f b7 45 d0          	movzwl -0x30(%rbp),%eax
  71:	89 c6                	mov    %eax,%esi
  73:	48 89 d7             	mov    %rdx,%rdi
  76:	e8 00 00 00 00       	call   7b <RDMHandler::SetPersonality(bool, unsigned short)+0x7b>
  7b:	88 45 e7             	mov    %al,-0x19(%rbp)
  7e:	80 7d e6 00          	cmpb   $0x0,-0x1a(%rbp)
  82:	74 09                	je     8d <RDMHandler::SetPersonality(bool, unsigned short)+0x8d>
  84:	0f b6 45 e6          	movzbl -0x1a(%rbp),%eax
  88:	3a 45 e7             	cmp    -0x19(%rbp),%al
  8b:	76 13                	jbe    a0 <RDMHandler::SetPersonality(bool, unsigned short)+0xa0>
  8d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  91:	be 06 00 00 00       	mov    $0x6,%esi
  96:	48 89 c7             	mov    %rax,%rdi
  99:	e8 00 00 00 00       	call   9e <RDMHandler::SetPersonality(bool, unsigned short)+0x9e>
  9e:	eb 3a                	jmp    da <RDMHandler::SetPersonality(bool, unsigned short)+0xda>
  a0:	e8 00 00 00 00       	call   a5 <RDMHandler::SetPersonality(bool, unsigned short)+0xa5>
  a5:	48 89 c1             	mov    %rax,%rcx
  a8:	0f b6 55 e6          	movzbl -0x1a(%rbp),%edx
  ac:	0f b7 45 d0          	movzwl -0x30(%rbp),%eax
  b0:	89 c6                	mov    %eax,%esi
  b2:	48 89 cf             	mov    %rcx,%rdi
  b5:	e8 00 00 00 00       	call   ba <RDMHandler::SetPersonality(bool, unsigned short)+0xba>
  ba:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  be:	48 8b 40 10          	mov    0x10(%rax),%rax
  c2:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  c6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  ca:	c6 40 17 00          	movb   $0x0,0x17(%rax)
  ce:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  d2:	48 89 c7             	mov    %rax,%rdi
  d5:	e8 00 00 00 00       	call   da <RDMHandler::SetPersonality(bool, unsigned short)+0xda>
  da:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  de:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  e5:	00 00 
  e7:	74 05                	je     ee <RDMHandler::SetPersonality(bool, unsigned short)+0xee>
  e9:	e8 00 00 00 00       	call   ee <RDMHandler::SetPersonality(bool, unsigned short)+0xee>
  ee:	c9                   	leave  
  ef:	c3                   	ret    

Disassembly of section .text._ZN10RDMHandler25GetPersonalityDescriptionEt:

0000000000000000 <RDMHandler::GetPersonalityDescription(unsigned short)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 40          	sub    $0x40,%rsp
   c:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	66 89 45 c4          	mov    %ax,-0x3c(%rbp)
  16:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1d:	00 00 
  1f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  23:	31 c0                	xor    %eax,%eax
  25:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  29:	48 8b 40 08          	mov    0x8(%rax),%rax
  2d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  31:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  35:	0f b6 40 17          	movzbl 0x17(%rax),%eax
  39:	88 45 dc             	mov    %al,-0x24(%rbp)
  3c:	e8 00 00 00 00       	call   41 <RDMHandler::GetPersonalityDescription(unsigned short)+0x41>
  41:	48 89 c2             	mov    %rax,%rdx
  44:	0f b7 45 c4          	movzwl -0x3c(%rbp),%eax
  48:	89 c6                	mov    %eax,%esi
  4a:	48 89 d7             	mov    %rdx,%rdi
  4d:	e8 00 00 00 00       	call   52 <RDMHandler::GetPersonalityDescription(unsigned short)+0x52>
  52:	88 45 dd             	mov    %al,-0x23(%rbp)
  55:	80 7d dc 00          	cmpb   $0x0,-0x24(%rbp)
  59:	74 09                	je     64 <RDMHandler::GetPersonalityDescription(unsigned short)+0x64>
  5b:	0f b6 45 dc          	movzbl -0x24(%rbp),%eax
  5f:	3a 45 dd             	cmp    -0x23(%rbp),%al
  62:	76 16                	jbe    7a <RDMHandler::GetPersonalityDescription(unsigned short)+0x7a>
  64:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  68:	be 06 00 00 00       	mov    $0x6,%esi
  6d:	48 89 c7             	mov    %rax,%rdi
  70:	e8 00 00 00 00       	call   75 <RDMHandler::GetPersonalityDescription(unsigned short)+0x75>
  75:	e9 b5 00 00 00       	jmp    12f <RDMHandler::GetPersonalityDescription(unsigned short)+0x12f>
  7a:	e8 00 00 00 00       	call   7f <RDMHandler::GetPersonalityDescription(unsigned short)+0x7f>
  7f:	48 89 c1             	mov    %rax,%rcx
  82:	0f b6 55 dc          	movzbl -0x24(%rbp),%edx
  86:	0f b7 45 c4          	movzwl -0x3c(%rbp),%eax
  8a:	89 c6                	mov    %eax,%esi
  8c:	48 89 cf             	mov    %rcx,%rdi
  8f:	e8 00 00 00 00       	call   94 <RDMHandler::GetPersonalityDescription(unsigned short)+0x94>
  94:	48 89 c7             	mov    %rax,%rdi
  97:	e8 00 00 00 00       	call   9c <RDMHandler::GetPersonalityDescription(unsigned short)+0x9c>
  9c:	66 89 45 de          	mov    %ax,-0x22(%rbp)
  a0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  a4:	48 8b 40 10          	mov    0x10(%rax),%rax
  a8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  ac:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  b0:	0f b6 55 dc          	movzbl -0x24(%rbp),%edx
  b4:	88 50 18             	mov    %dl,0x18(%rax)
  b7:	0f b7 45 de          	movzwl -0x22(%rbp),%eax
  bb:	66 c1 e8 08          	shr    $0x8,%ax
  bf:	89 c2                	mov    %eax,%edx
  c1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  c5:	88 50 19             	mov    %dl,0x19(%rax)
  c8:	0f b7 45 de          	movzwl -0x22(%rbp),%eax
  cc:	89 c2                	mov    %eax,%edx
  ce:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  d2:	88 50 1a             	mov    %dl,0x1a(%rax)
  d5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  d9:	48 83 c0 1b          	add    $0x1b,%rax
  dd:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  e1:	c6 45 db 20          	movb   $0x20,-0x25(%rbp)
  e5:	e8 00 00 00 00       	call   ea <RDMHandler::GetPersonalityDescription(unsigned short)+0xea>
  ea:	48 89 c1             	mov    %rax,%rcx
  ed:	0f b6 55 dc          	movzbl -0x24(%rbp),%edx
  f1:	0f b7 45 c4          	movzwl -0x3c(%rbp),%eax
  f5:	89 c6                	mov    %eax,%esi
  f7:	48 89 cf             	mov    %rcx,%rdi
  fa:	e8 00 00 00 00       	call   ff <RDMHandler::GetPersonalityDescription(unsigned short)+0xff>
  ff:	48 89 c1             	mov    %rax,%rcx
 102:	48 8d 55 db          	lea    -0x25(%rbp),%rdx
 106:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 10a:	48 89 c6             	mov    %rax,%rsi
 10d:	48 89 cf             	mov    %rcx,%rdi
 110:	e8 00 00 00 00       	call   115 <RDMHandler::GetPersonalityDescription(unsigned short)+0x115>
 115:	0f b6 45 db          	movzbl -0x25(%rbp),%eax
 119:	8d 50 03             	lea    0x3(%rax),%edx
 11c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 120:	88 50 17             	mov    %dl,0x17(%rax)
 123:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 127:	48 89 c7             	mov    %rax,%rdi
 12a:	e8 00 00 00 00       	call   12f <RDMHandler::GetPersonalityDescription(unsigned short)+0x12f>
 12f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 133:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 13a:	00 00 
 13c:	74 05                	je     143 <RDMHandler::GetPersonalityDescription(unsigned short)+0x143>
 13e:	e8 00 00 00 00       	call   143 <RDMHandler::GetPersonalityDescription(unsigned short)+0x143>
 143:	c9                   	leave  
 144:	c3                   	ret    

Disassembly of section .text._ZN10RDMHandler18GetDmxStartAddressEt:

0000000000000000 <RDMHandler::GetDmxStartAddress(unsigned short)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	66 89 45 d4          	mov    %ax,-0x2c(%rbp)
  16:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1d:	00 00 
  1f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  23:	31 c0                	xor    %eax,%eax
  25:	e8 00 00 00 00       	call   2a <RDMHandler::GetDmxStartAddress(unsigned short)+0x2a>
  2a:	48 89 c2             	mov    %rax,%rdx
  2d:	0f b7 45 d4          	movzwl -0x2c(%rbp),%eax
  31:	89 c6                	mov    %eax,%esi
  33:	48 89 d7             	mov    %rdx,%rdi
  36:	e8 00 00 00 00       	call   3b <RDMHandler::GetDmxStartAddress(unsigned short)+0x3b>
  3b:	66 89 45 ee          	mov    %ax,-0x12(%rbp)
  3f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  43:	48 8b 40 10          	mov    0x10(%rax),%rax
  47:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  4b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4f:	c6 40 17 02          	movb   $0x2,0x17(%rax)
  53:	0f b7 45 ee          	movzwl -0x12(%rbp),%eax
  57:	66 c1 e8 08          	shr    $0x8,%ax
  5b:	89 c2                	mov    %eax,%edx
  5d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  61:	88 50 18             	mov    %dl,0x18(%rax)
  64:	0f b7 45 ee          	movzwl -0x12(%rbp),%eax
  68:	89 c2                	mov    %eax,%edx
  6a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  6e:	88 50 19             	mov    %dl,0x19(%rax)
  71:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  75:	48 89 c7             	mov    %rax,%rdi
  78:	e8 00 00 00 00       	call   7d <RDMHandler::GetDmxStartAddress(unsigned short)+0x7d>
  7d:	90                   	nop
  7e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  82:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  89:	00 00 
  8b:	74 05                	je     92 <RDMHandler::GetDmxStartAddress(unsigned short)+0x92>
  8d:	e8 00 00 00 00       	call   92 <RDMHandler::GetDmxStartAddress(unsigned short)+0x92>
  92:	c9                   	leave  
  93:	c3                   	ret    

Disassembly of section .text._ZN10RDMHandler18SetDmxStartAddressEbt:

0000000000000000 <RDMHandler::SetDmxStartAddress(bool, unsigned short)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10:	89 f1                	mov    %esi,%ecx
  12:	89 d0                	mov    %edx,%eax
  14:	89 ca                	mov    %ecx,%edx
  16:	88 55 d4             	mov    %dl,-0x2c(%rbp)
  19:	66 89 45 d0          	mov    %ax,-0x30(%rbp)
  1d:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  24:	00 00 
  26:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  2a:	31 c0                	xor    %eax,%eax
  2c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  30:	48 8b 40 08          	mov    0x8(%rax),%rax
  34:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  38:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3c:	0f b6 40 16          	movzbl 0x16(%rax),%eax
  40:	3c 02                	cmp    $0x2,%al
  42:	74 16                	je     5a <RDMHandler::SetDmxStartAddress(bool, unsigned short)+0x5a>
  44:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  48:	be 01 00 00 00       	mov    $0x1,%esi
  4d:	48 89 c7             	mov    %rax,%rdi
  50:	e8 00 00 00 00       	call   55 <RDMHandler::SetDmxStartAddress(bool, unsigned short)+0x55>
  55:	e9 86 00 00 00       	jmp    e0 <RDMHandler::SetDmxStartAddress(bool, unsigned short)+0xe0>
  5a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5e:	0f b6 40 17          	movzbl 0x17(%rax),%eax
  62:	0f b6 c0             	movzbl %al,%eax
  65:	c1 e0 08             	shl    $0x8,%eax
  68:	89 c2                	mov    %eax,%edx
  6a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  6e:	0f b6 40 18          	movzbl 0x18(%rax),%eax
  72:	0f b6 c0             	movzbl %al,%eax
  75:	01 d0                	add    %edx,%eax
  77:	66 89 45 e6          	mov    %ax,-0x1a(%rbp)
  7b:	66 83 7d e6 00       	cmpw   $0x0,-0x1a(%rbp)
  80:	74 08                	je     8a <RDMHandler::SetDmxStartAddress(bool, unsigned short)+0x8a>
  82:	66 81 7d e6 00 02    	cmpw   $0x200,-0x1a(%rbp)
  88:	76 13                	jbe    9d <RDMHandler::SetDmxStartAddress(bool, unsigned short)+0x9d>
  8a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8e:	be 06 00 00 00       	mov    $0x6,%esi
  93:	48 89 c7             	mov    %rax,%rdi
  96:	e8 00 00 00 00       	call   9b <RDMHandler::SetDmxStartAddress(bool, unsigned short)+0x9b>
  9b:	eb 43                	jmp    e0 <RDMHandler::SetDmxStartAddress(bool, unsigned short)+0xe0>
  9d:	e8 00 00 00 00       	call   a2 <RDMHandler::SetDmxStartAddress(bool, unsigned short)+0xa2>
  a2:	48 89 c1             	mov    %rax,%rcx
  a5:	0f b7 55 e6          	movzwl -0x1a(%rbp),%edx
  a9:	0f b7 45 d0          	movzwl -0x30(%rbp),%eax
  ad:	89 c6                	mov    %eax,%esi
  af:	48 89 cf             	mov    %rcx,%rdi
  b2:	e8 00 00 00 00       	call   b7 <RDMHandler::SetDmxStartAddress(bool, unsigned short)+0xb7>
  b7:	80 7d d4 00          	cmpb   $0x0,-0x2c(%rbp)
  bb:	75 22                	jne    df <RDMHandler::SetDmxStartAddress(bool, unsigned short)+0xdf>
  bd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  c1:	48 8b 40 10          	mov    0x10(%rax),%rax
  c5:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  c9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  cd:	c6 40 17 00          	movb   $0x0,0x17(%rax)
  d1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  d5:	48 89 c7             	mov    %rax,%rdi
  d8:	e8 00 00 00 00       	call   dd <RDMHandler::SetDmxStartAddress(bool, unsigned short)+0xdd>
  dd:	eb 01                	jmp    e0 <RDMHandler::SetDmxStartAddress(bool, unsigned short)+0xe0>
  df:	90                   	nop
  e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  e4:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  eb:	00 00 
  ed:	74 05                	je     f4 <RDMHandler::SetDmxStartAddress(bool, unsigned short)+0xf4>
  ef:	e8 00 00 00 00       	call   f4 <RDMHandler::SetDmxStartAddress(bool, unsigned short)+0xf4>
  f4:	c9                   	leave  
  f5:	c3                   	ret    

Disassembly of section .text._ZN10RDMHandler19GetSensorDefinitionEt:

0000000000000000 <RDMHandler::GetSensorDefinition(unsigned short)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 40          	sub    $0x40,%rsp
   c:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	66 89 45 c4          	mov    %ax,-0x3c(%rbp)
  16:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1d:	00 00 
  1f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  23:	31 c0                	xor    %eax,%eax
  25:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  29:	48 8b 40 08          	mov    0x8(%rax),%rax
  2d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  31:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  35:	0f b6 40 17          	movzbl 0x17(%rax),%eax
  39:	88 45 d7             	mov    %al,-0x29(%rbp)
  3c:	80 7d d7 ff          	cmpb   $0xff,-0x29(%rbp)
  40:	74 12                	je     54 <RDMHandler::GetSensorDefinition(unsigned short)+0x54>
  42:	e8 00 00 00 00       	call   47 <RDMHandler::GetSensorDefinition(unsigned short)+0x47>
  47:	48 89 c7             	mov    %rax,%rdi
  4a:	e8 00 00 00 00       	call   4f <RDMHandler::GetSensorDefinition(unsigned short)+0x4f>
  4f:	38 45 d7             	cmp    %al,-0x29(%rbp)
  52:	72 07                	jb     5b <RDMHandler::GetSensorDefinition(unsigned short)+0x5b>
  54:	b8 01 00 00 00       	mov    $0x1,%eax
  59:	eb 05                	jmp    60 <RDMHandler::GetSensorDefinition(unsigned short)+0x60>
  5b:	b8 00 00 00 00       	mov    $0x0,%eax
  60:	84 c0                	test   %al,%al
  62:	74 16                	je     7a <RDMHandler::GetSensorDefinition(unsigned short)+0x7a>
  64:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  68:	be 06 00 00 00       	mov    $0x6,%esi
  6d:	48 89 c7             	mov    %rax,%rdi
  70:	e8 00 00 00 00       	call   75 <RDMHandler::GetSensorDefinition(unsigned short)+0x75>
  75:	e9 84 01 00 00       	jmp    1fe <RDMHandler::GetSensorDefinition(unsigned short)+0x1fe>
  7a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  7e:	48 8b 40 10          	mov    0x10(%rax),%rax
  82:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  86:	e8 00 00 00 00       	call   8b <RDMHandler::GetSensorDefinition(unsigned short)+0x8b>
  8b:	48 89 c2             	mov    %rax,%rdx
  8e:	0f b6 45 d7          	movzbl -0x29(%rbp),%eax
  92:	89 c6                	mov    %eax,%esi
  94:	48 89 d7             	mov    %rdx,%rdi
  97:	e8 00 00 00 00       	call   9c <RDMHandler::GetSensorDefinition(unsigned short)+0x9c>
  9c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  a0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  a4:	0f b6 00             	movzbl (%rax),%eax
  a7:	38 45 d7             	cmp    %al,-0x29(%rbp)
  aa:	74 16                	je     c2 <RDMHandler::GetSensorDefinition(unsigned short)+0xc2>
  ac:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  b0:	be 06 00 00 00       	mov    $0x6,%esi
  b5:	48 89 c7             	mov    %rax,%rdi
  b8:	e8 00 00 00 00       	call   bd <RDMHandler::GetSensorDefinition(unsigned short)+0xbd>
  bd:	e9 3c 01 00 00       	jmp    1fe <RDMHandler::GetSensorDefinition(unsigned short)+0x1fe>
  c2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  c6:	0f b6 55 d7          	movzbl -0x29(%rbp),%edx
  ca:	88 50 18             	mov    %dl,0x18(%rax)
  cd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  d1:	0f b6 50 01          	movzbl 0x1(%rax),%edx
  d5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  d9:	88 50 19             	mov    %dl,0x19(%rax)
  dc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  e0:	0f b6 50 02          	movzbl 0x2(%rax),%edx
  e4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  e8:	88 50 1a             	mov    %dl,0x1a(%rax)
  eb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  ef:	0f b6 50 03          	movzbl 0x3(%rax),%edx
  f3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  f7:	88 50 1b             	mov    %dl,0x1b(%rax)
  fa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  fe:	0f b7 40 04          	movzwl 0x4(%rax),%eax
 102:	66 c1 f8 08          	sar    $0x8,%ax
 106:	89 c2                	mov    %eax,%edx
 108:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 10c:	88 50 1c             	mov    %dl,0x1c(%rax)
 10f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 113:	0f b7 40 04          	movzwl 0x4(%rax),%eax
 117:	89 c2                	mov    %eax,%edx
 119:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 11d:	88 50 1d             	mov    %dl,0x1d(%rax)
 120:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 124:	0f b7 40 06          	movzwl 0x6(%rax),%eax
 128:	66 c1 f8 08          	sar    $0x8,%ax
 12c:	89 c2                	mov    %eax,%edx
 12e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 132:	88 50 1e             	mov    %dl,0x1e(%rax)
 135:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 139:	0f b7 40 06          	movzwl 0x6(%rax),%eax
 13d:	89 c2                	mov    %eax,%edx
 13f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 143:	88 50 1f             	mov    %dl,0x1f(%rax)
 146:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 14a:	0f b7 40 08          	movzwl 0x8(%rax),%eax
 14e:	66 c1 f8 08          	sar    $0x8,%ax
 152:	89 c2                	mov    %eax,%edx
 154:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 158:	88 50 20             	mov    %dl,0x20(%rax)
 15b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 15f:	0f b7 40 08          	movzwl 0x8(%rax),%eax
 163:	89 c2                	mov    %eax,%edx
 165:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 169:	88 50 21             	mov    %dl,0x21(%rax)
 16c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 170:	0f b7 40 0a          	movzwl 0xa(%rax),%eax
 174:	66 c1 f8 08          	sar    $0x8,%ax
 178:	89 c2                	mov    %eax,%edx
 17a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 17e:	88 50 22             	mov    %dl,0x22(%rax)
 181:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 185:	0f b7 40 0a          	movzwl 0xa(%rax),%eax
 189:	89 c2                	mov    %eax,%edx
 18b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 18f:	88 50 23             	mov    %dl,0x23(%rax)
 192:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 196:	0f b6 50 2d          	movzbl 0x2d(%rax),%edx
 19a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 19e:	88 50 24             	mov    %dl,0x24(%rax)
 1a1:	c7 45 d8 0d 00 00 00 	movl   $0xd,-0x28(%rbp)
 1a8:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%rbp)
 1af:	eb 25                	jmp    1d6 <RDMHandler::GetSensorDefinition(unsigned short)+0x1d6>
 1b1:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
 1b5:	8b 45 dc             	mov    -0x24(%rbp),%eax
 1b8:	48 98                	cltq   
 1ba:	0f b6 4c 02 0c       	movzbl 0xc(%rdx,%rax,1),%ecx
 1bf:	8b 45 d8             	mov    -0x28(%rbp),%eax
 1c2:	8d 50 01             	lea    0x1(%rax),%edx
 1c5:	89 55 d8             	mov    %edx,-0x28(%rbp)
 1c8:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
 1cc:	48 98                	cltq   
 1ce:	88 4c 02 18          	mov    %cl,0x18(%rdx,%rax,1)
 1d2:	83 45 dc 01          	addl   $0x1,-0x24(%rbp)
 1d6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 1da:	0f b6 40 2c          	movzbl 0x2c(%rax),%eax
 1de:	0f b6 c0             	movzbl %al,%eax
 1e1:	39 45 dc             	cmp    %eax,-0x24(%rbp)
 1e4:	7c cb                	jl     1b1 <RDMHandler::GetSensorDefinition(unsigned short)+0x1b1>
 1e6:	8b 45 d8             	mov    -0x28(%rbp),%eax
 1e9:	89 c2                	mov    %eax,%edx
 1eb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 1ef:	88 50 17             	mov    %dl,0x17(%rax)
 1f2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 1f6:	48 89 c7             	mov    %rax,%rdi
 1f9:	e8 00 00 00 00       	call   1fe <RDMHandler::GetSensorDefinition(unsigned short)+0x1fe>
 1fe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 202:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 209:	00 00 
 20b:	74 05                	je     212 <RDMHandler::GetSensorDefinition(unsigned short)+0x212>
 20d:	e8 00 00 00 00       	call   212 <RDMHandler::GetSensorDefinition(unsigned short)+0x212>
 212:	c9                   	leave  
 213:	c3                   	ret    

Disassembly of section .text._ZN10RDMHandler14GetSensorValueEt:

0000000000000000 <RDMHandler::GetSensorValue(unsigned short)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 40          	sub    $0x40,%rsp
   c:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	66 89 45 c4          	mov    %ax,-0x3c(%rbp)
  16:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1d:	00 00 
  1f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  23:	31 c0                	xor    %eax,%eax
  25:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  29:	48 8b 40 08          	mov    0x8(%rax),%rax
  2d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  31:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  35:	0f b6 40 16          	movzbl 0x16(%rax),%eax
  39:	3c 01                	cmp    $0x1,%al
  3b:	74 16                	je     53 <RDMHandler::GetSensorValue(unsigned short)+0x53>
  3d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  41:	be 01 00 00 00       	mov    $0x1,%esi
  46:	48 89 c7             	mov    %rax,%rdi
  49:	e8 00 00 00 00       	call   4e <RDMHandler::GetSensorValue(unsigned short)+0x4e>
  4e:	e9 53 01 00 00       	jmp    1a6 <RDMHandler::GetSensorValue(unsigned short)+0x1a6>
  53:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  57:	0f b6 40 17          	movzbl 0x17(%rax),%eax
  5b:	88 45 df             	mov    %al,-0x21(%rbp)
  5e:	80 7d df ff          	cmpb   $0xff,-0x21(%rbp)
  62:	74 12                	je     76 <RDMHandler::GetSensorValue(unsigned short)+0x76>
  64:	e8 00 00 00 00       	call   69 <RDMHandler::GetSensorValue(unsigned short)+0x69>
  69:	48 89 c7             	mov    %rax,%rdi
  6c:	e8 00 00 00 00       	call   71 <RDMHandler::GetSensorValue(unsigned short)+0x71>
  71:	38 45 df             	cmp    %al,-0x21(%rbp)
  74:	72 07                	jb     7d <RDMHandler::GetSensorValue(unsigned short)+0x7d>
  76:	b8 01 00 00 00       	mov    $0x1,%eax
  7b:	eb 05                	jmp    82 <RDMHandler::GetSensorValue(unsigned short)+0x82>
  7d:	b8 00 00 00 00       	mov    $0x0,%eax
  82:	84 c0                	test   %al,%al
  84:	74 16                	je     9c <RDMHandler::GetSensorValue(unsigned short)+0x9c>
  86:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8a:	be 06 00 00 00       	mov    $0x6,%esi
  8f:	48 89 c7             	mov    %rax,%rdi
  92:	e8 00 00 00 00       	call   97 <RDMHandler::GetSensorValue(unsigned short)+0x97>
  97:	e9 0a 01 00 00       	jmp    1a6 <RDMHandler::GetSensorValue(unsigned short)+0x1a6>
  9c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  a0:	48 8b 40 10          	mov    0x10(%rax),%rax
  a4:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  a8:	e8 00 00 00 00       	call   ad <RDMHandler::GetSensorValue(unsigned short)+0xad>
  ad:	48 89 c2             	mov    %rax,%rdx
  b0:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
  b4:	89 c6                	mov    %eax,%esi
  b6:	48 89 d7             	mov    %rdx,%rdi
  b9:	e8 00 00 00 00       	call   be <RDMHandler::GetSensorValue(unsigned short)+0xbe>
  be:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  c2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  c6:	0f b6 40 08          	movzbl 0x8(%rax),%eax
  ca:	38 45 df             	cmp    %al,-0x21(%rbp)
  cd:	74 16                	je     e5 <RDMHandler::GetSensorValue(unsigned short)+0xe5>
  cf:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  d3:	be 06 00 00 00       	mov    $0x6,%esi
  d8:	48 89 c7             	mov    %rax,%rdi
  db:	e8 00 00 00 00       	call   e0 <RDMHandler::GetSensorValue(unsigned short)+0xe0>
  e0:	e9 c1 00 00 00       	jmp    1a6 <RDMHandler::GetSensorValue(unsigned short)+0x1a6>
  e5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  e9:	c6 40 17 09          	movb   $0x9,0x17(%rax)
  ed:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  f1:	c6 40 02 21          	movb   $0x21,0x2(%rax)
  f5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  f9:	0f b6 50 08          	movzbl 0x8(%rax),%edx
  fd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 101:	88 50 18             	mov    %dl,0x18(%rax)
 104:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 108:	0f b7 00             	movzwl (%rax),%eax
 10b:	66 c1 f8 08          	sar    $0x8,%ax
 10f:	89 c2                	mov    %eax,%edx
 111:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 115:	88 50 19             	mov    %dl,0x19(%rax)
 118:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 11c:	0f b7 00             	movzwl (%rax),%eax
 11f:	89 c2                	mov    %eax,%edx
 121:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 125:	88 50 1a             	mov    %dl,0x1a(%rax)
 128:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 12c:	0f b7 40 02          	movzwl 0x2(%rax),%eax
 130:	66 c1 f8 08          	sar    $0x8,%ax
 134:	89 c2                	mov    %eax,%edx
 136:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 13a:	88 50 1b             	mov    %dl,0x1b(%rax)
 13d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 141:	0f b7 40 02          	movzwl 0x2(%rax),%eax
 145:	89 c2                	mov    %eax,%edx
 147:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 14b:	88 50 1c             	mov    %dl,0x1c(%rax)
 14e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 152:	0f b7 40 04          	movzwl 0x4(%rax),%eax
 156:	66 c1 f8 08          	sar    $0x8,%ax
 15a:	89 c2                	mov    %eax,%edx
 15c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 160:	88 50 1d             	mov    %dl,0x1d(%rax)
 163:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 167:	0f b7 40 04          	movzwl 0x4(%rax),%eax
 16b:	89 c2                	mov    %eax,%edx
 16d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 171:	88 50 1e             	mov    %dl,0x1e(%rax)
 174:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 178:	0f b7 40 06          	movzwl 0x6(%rax),%eax
 17c:	66 c1 f8 08          	sar    $0x8,%ax
 180:	89 c2                	mov    %eax,%edx
 182:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 186:	88 50 1f             	mov    %dl,0x1f(%rax)
 189:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 18d:	0f b7 40 06          	movzwl 0x6(%rax),%eax
 191:	89 c2                	mov    %eax,%edx
 193:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 197:	88 50 20             	mov    %dl,0x20(%rax)
 19a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 19e:	48 89 c7             	mov    %rax,%rdi
 1a1:	e8 00 00 00 00       	call   1a6 <RDMHandler::GetSensorValue(unsigned short)+0x1a6>
 1a6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 1aa:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 1b1:	00 00 
 1b3:	74 05                	je     1ba <RDMHandler::GetSensorValue(unsigned short)+0x1ba>
 1b5:	e8 00 00 00 00       	call   1ba <RDMHandler::GetSensorValue(unsigned short)+0x1ba>
 1ba:	c9                   	leave  
 1bb:	c3                   	ret    

Disassembly of section .text._ZN10RDMHandler14SetSensorValueEbt:

0000000000000000 <RDMHandler::SetSensorValue(bool, unsigned short)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 40          	sub    $0x40,%rsp
   c:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  10:	89 f1                	mov    %esi,%ecx
  12:	89 d0                	mov    %edx,%eax
  14:	89 ca                	mov    %ecx,%edx
  16:	88 55 c4             	mov    %dl,-0x3c(%rbp)
  19:	66 89 45 c0          	mov    %ax,-0x40(%rbp)
  1d:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  24:	00 00 
  26:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  2a:	31 c0                	xor    %eax,%eax
  2c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  30:	48 8b 40 08          	mov    0x8(%rax),%rax
  34:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  38:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  3c:	0f b6 40 16          	movzbl 0x16(%rax),%eax
  40:	3c 01                	cmp    $0x1,%al
  42:	74 16                	je     5a <RDMHandler::SetSensorValue(bool, unsigned short)+0x5a>
  44:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  48:	be 01 00 00 00       	mov    $0x1,%esi
  4d:	48 89 c7             	mov    %rax,%rdi
  50:	e8 00 00 00 00       	call   55 <RDMHandler::SetSensorValue(bool, unsigned short)+0x55>
  55:	e9 c2 01 00 00       	jmp    21c <RDMHandler::SetSensorValue(bool, unsigned short)+0x21c>
  5a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  5e:	0f b6 40 17          	movzbl 0x17(%rax),%eax
  62:	88 45 df             	mov    %al,-0x21(%rbp)
  65:	80 7d df ff          	cmpb   $0xff,-0x21(%rbp)
  69:	74 19                	je     84 <RDMHandler::SetSensorValue(bool, unsigned short)+0x84>
  6b:	e8 00 00 00 00       	call   70 <RDMHandler::SetSensorValue(bool, unsigned short)+0x70>
  70:	48 89 c7             	mov    %rax,%rdi
  73:	e8 00 00 00 00       	call   78 <RDMHandler::SetSensorValue(bool, unsigned short)+0x78>
  78:	38 45 df             	cmp    %al,-0x21(%rbp)
  7b:	72 07                	jb     84 <RDMHandler::SetSensorValue(bool, unsigned short)+0x84>
  7d:	b8 01 00 00 00       	mov    $0x1,%eax
  82:	eb 05                	jmp    89 <RDMHandler::SetSensorValue(bool, unsigned short)+0x89>
  84:	b8 00 00 00 00       	mov    $0x0,%eax
  89:	84 c0                	test   %al,%al
  8b:	74 16                	je     a3 <RDMHandler::SetSensorValue(bool, unsigned short)+0xa3>
  8d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  91:	be 06 00 00 00       	mov    $0x6,%esi
  96:	48 89 c7             	mov    %rax,%rdi
  99:	e8 00 00 00 00       	call   9e <RDMHandler::SetSensorValue(bool, unsigned short)+0x9e>
  9e:	e9 79 01 00 00       	jmp    21c <RDMHandler::SetSensorValue(bool, unsigned short)+0x21c>
  a3:	e8 00 00 00 00       	call   a8 <RDMHandler::SetSensorValue(bool, unsigned short)+0xa8>
  a8:	48 89 c2             	mov    %rax,%rdx
  ab:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
  af:	89 c6                	mov    %eax,%esi
  b1:	48 89 d7             	mov    %rdx,%rdi
  b4:	e8 00 00 00 00       	call   b9 <RDMHandler::SetSensorValue(bool, unsigned short)+0xb9>
  b9:	80 7d c4 00          	cmpb   $0x0,-0x3c(%rbp)
  bd:	0f 85 58 01 00 00    	jne    21b <RDMHandler::SetSensorValue(bool, unsigned short)+0x21b>
  c3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  c7:	48 8b 40 10          	mov    0x10(%rax),%rax
  cb:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  cf:	80 7d df ff          	cmpb   $0xff,-0x21(%rbp)
  d3:	75 69                	jne    13e <RDMHandler::SetSensorValue(bool, unsigned short)+0x13e>
  d5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  d9:	c6 40 17 09          	movb   $0x9,0x17(%rax)
  dd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  e1:	c6 40 02 21          	movb   $0x21,0x2(%rax)
  e5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  e9:	c6 40 18 00          	movb   $0x0,0x18(%rax)
  ed:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  f1:	c6 40 19 00          	movb   $0x0,0x19(%rax)
  f5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  f9:	c6 40 1a 00          	movb   $0x0,0x1a(%rax)
  fd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 101:	c6 40 1b 00          	movb   $0x0,0x1b(%rax)
 105:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 109:	c6 40 1c 00          	movb   $0x0,0x1c(%rax)
 10d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 111:	c6 40 1d 00          	movb   $0x0,0x1d(%rax)
 115:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 119:	c6 40 1e 00          	movb   $0x0,0x1e(%rax)
 11d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 121:	c6 40 1f 00          	movb   $0x0,0x1f(%rax)
 125:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 129:	c6 40 20 00          	movb   $0x0,0x20(%rax)
 12d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 131:	48 89 c7             	mov    %rax,%rdi
 134:	e8 00 00 00 00       	call   139 <RDMHandler::SetSensorValue(bool, unsigned short)+0x139>
 139:	e9 de 00 00 00       	jmp    21c <RDMHandler::SetSensorValue(bool, unsigned short)+0x21c>
 13e:	e8 00 00 00 00       	call   143 <RDMHandler::SetSensorValue(bool, unsigned short)+0x143>
 143:	48 89 c2             	mov    %rax,%rdx
 146:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
 14a:	89 c6                	mov    %eax,%esi
 14c:	48 89 d7             	mov    %rdx,%rdi
 14f:	e8 00 00 00 00       	call   154 <RDMHandler::SetSensorValue(bool, unsigned short)+0x154>
 154:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
 158:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 15c:	c6 40 17 09          	movb   $0x9,0x17(%rax)
 160:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 164:	c6 40 02 21          	movb   $0x21,0x2(%rax)
 168:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 16c:	0f b6 50 08          	movzbl 0x8(%rax),%edx
 170:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 174:	88 50 18             	mov    %dl,0x18(%rax)
 177:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 17b:	0f b7 00             	movzwl (%rax),%eax
 17e:	66 c1 f8 08          	sar    $0x8,%ax
 182:	89 c2                	mov    %eax,%edx
 184:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 188:	88 50 19             	mov    %dl,0x19(%rax)
 18b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 18f:	0f b7 00             	movzwl (%rax),%eax
 192:	89 c2                	mov    %eax,%edx
 194:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 198:	88 50 1a             	mov    %dl,0x1a(%rax)
 19b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 19f:	0f b7 40 02          	movzwl 0x2(%rax),%eax
 1a3:	66 c1 f8 08          	sar    $0x8,%ax
 1a7:	89 c2                	mov    %eax,%edx
 1a9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 1ad:	88 50 1b             	mov    %dl,0x1b(%rax)
 1b0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 1b4:	0f b7 40 02          	movzwl 0x2(%rax),%eax
 1b8:	89 c2                	mov    %eax,%edx
 1ba:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 1be:	88 50 1c             	mov    %dl,0x1c(%rax)
 1c1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 1c5:	0f b7 40 04          	movzwl 0x4(%rax),%eax
 1c9:	66 c1 f8 08          	sar    $0x8,%ax
 1cd:	89 c2                	mov    %eax,%edx
 1cf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 1d3:	88 50 1d             	mov    %dl,0x1d(%rax)
 1d6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 1da:	0f b7 40 04          	movzwl 0x4(%rax),%eax
 1de:	89 c2                	mov    %eax,%edx
 1e0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 1e4:	88 50 1e             	mov    %dl,0x1e(%rax)
 1e7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 1eb:	0f b7 40 06          	movzwl 0x6(%rax),%eax
 1ef:	66 c1 f8 08          	sar    $0x8,%ax
 1f3:	89 c2                	mov    %eax,%edx
 1f5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 1f9:	88 50 1f             	mov    %dl,0x1f(%rax)
 1fc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 200:	0f b7 40 06          	movzwl 0x6(%rax),%eax
 204:	89 c2                	mov    %eax,%edx
 206:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 20a:	88 50 20             	mov    %dl,0x20(%rax)
 20d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 211:	48 89 c7             	mov    %rax,%rdi
 214:	e8 00 00 00 00       	call   219 <RDMHandler::SetSensorValue(bool, unsigned short)+0x219>
 219:	eb 01                	jmp    21c <RDMHandler::SetSensorValue(bool, unsigned short)+0x21c>
 21b:	90                   	nop
 21c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 220:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 227:	00 00 
 229:	74 05                	je     230 <RDMHandler::SetSensorValue(bool, unsigned short)+0x230>
 22b:	e8 00 00 00 00       	call   230 <RDMHandler::SetSensorValue(bool, unsigned short)+0x230>
 230:	c9                   	leave  
 231:	c3                   	ret    

Disassembly of section .text._ZN10RDMHandler16SetRecordSensorsEbt:

0000000000000000 <RDMHandler::SetRecordSensors(bool, unsigned short)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10:	89 f1                	mov    %esi,%ecx
  12:	89 d0                	mov    %edx,%eax
  14:	89 ca                	mov    %ecx,%edx
  16:	88 55 d4             	mov    %dl,-0x2c(%rbp)
  19:	66 89 45 d0          	mov    %ax,-0x30(%rbp)
  1d:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  24:	00 00 
  26:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  2a:	31 c0                	xor    %eax,%eax
  2c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  30:	48 8b 40 08          	mov    0x8(%rax),%rax
  34:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  38:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3c:	0f b6 40 16          	movzbl 0x16(%rax),%eax
  40:	3c 01                	cmp    $0x1,%al
  42:	74 16                	je     5a <RDMHandler::SetRecordSensors(bool, unsigned short)+0x5a>
  44:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  48:	be 01 00 00 00       	mov    $0x1,%esi
  4d:	48 89 c7             	mov    %rax,%rdi
  50:	e8 00 00 00 00       	call   55 <RDMHandler::SetRecordSensors(bool, unsigned short)+0x55>
  55:	e9 bf 00 00 00       	jmp    119 <RDMHandler::SetRecordSensors(bool, unsigned short)+0x119>
  5a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5e:	0f b6 40 17          	movzbl 0x17(%rax),%eax
  62:	88 45 e7             	mov    %al,-0x19(%rbp)
  65:	80 7d e7 ff          	cmpb   $0xff,-0x19(%rbp)
  69:	75 18                	jne    83 <RDMHandler::SetRecordSensors(bool, unsigned short)+0x83>
  6b:	e8 00 00 00 00       	call   70 <RDMHandler::SetRecordSensors(bool, unsigned short)+0x70>
  70:	48 89 c7             	mov    %rax,%rdi
  73:	e8 00 00 00 00       	call   78 <RDMHandler::SetRecordSensors(bool, unsigned short)+0x78>
  78:	84 c0                	test   %al,%al
  7a:	75 07                	jne    83 <RDMHandler::SetRecordSensors(bool, unsigned short)+0x83>
  7c:	b8 01 00 00 00       	mov    $0x1,%eax
  81:	eb 05                	jmp    88 <RDMHandler::SetRecordSensors(bool, unsigned short)+0x88>
  83:	b8 00 00 00 00       	mov    $0x0,%eax
  88:	84 c0                	test   %al,%al
  8a:	74 13                	je     9f <RDMHandler::SetRecordSensors(bool, unsigned short)+0x9f>
  8c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  90:	be 06 00 00 00       	mov    $0x6,%esi
  95:	48 89 c7             	mov    %rax,%rdi
  98:	e8 00 00 00 00       	call   9d <RDMHandler::SetRecordSensors(bool, unsigned short)+0x9d>
  9d:	eb 7a                	jmp    119 <RDMHandler::SetRecordSensors(bool, unsigned short)+0x119>
  9f:	80 7d e7 ff          	cmpb   $0xff,-0x19(%rbp)
  a3:	74 19                	je     be <RDMHandler::SetRecordSensors(bool, unsigned short)+0xbe>
  a5:	e8 00 00 00 00       	call   aa <RDMHandler::SetRecordSensors(bool, unsigned short)+0xaa>
  aa:	48 89 c7             	mov    %rax,%rdi
  ad:	e8 00 00 00 00       	call   b2 <RDMHandler::SetRecordSensors(bool, unsigned short)+0xb2>
  b2:	38 45 e7             	cmp    %al,-0x19(%rbp)
  b5:	72 07                	jb     be <RDMHandler::SetRecordSensors(bool, unsigned short)+0xbe>
  b7:	b8 01 00 00 00       	mov    $0x1,%eax
  bc:	eb 05                	jmp    c3 <RDMHandler::SetRecordSensors(bool, unsigned short)+0xc3>
  be:	b8 00 00 00 00       	mov    $0x0,%eax
  c3:	84 c0                	test   %al,%al
  c5:	74 13                	je     da <RDMHandler::SetRecordSensors(bool, unsigned short)+0xda>
  c7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  cb:	be 06 00 00 00       	mov    $0x6,%esi
  d0:	48 89 c7             	mov    %rax,%rdi
  d3:	e8 00 00 00 00       	call   d8 <RDMHandler::SetRecordSensors(bool, unsigned short)+0xd8>
  d8:	eb 3f                	jmp    119 <RDMHandler::SetRecordSensors(bool, unsigned short)+0x119>
  da:	e8 00 00 00 00       	call   df <RDMHandler::SetRecordSensors(bool, unsigned short)+0xdf>
  df:	48 89 c2             	mov    %rax,%rdx
  e2:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  e6:	89 c6                	mov    %eax,%esi
  e8:	48 89 d7             	mov    %rdx,%rdi
  eb:	e8 00 00 00 00       	call   f0 <RDMHandler::SetRecordSensors(bool, unsigned short)+0xf0>
  f0:	80 7d d4 00          	cmpb   $0x0,-0x2c(%rbp)
  f4:	75 22                	jne    118 <RDMHandler::SetRecordSensors(bool, unsigned short)+0x118>
  f6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  fa:	48 8b 40 10          	mov    0x10(%rax),%rax
  fe:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
 102:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 106:	c6 40 17 00          	movb   $0x0,0x17(%rax)
 10a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 10e:	48 89 c7             	mov    %rax,%rdi
 111:	e8 00 00 00 00       	call   116 <RDMHandler::SetRecordSensors(bool, unsigned short)+0x116>
 116:	eb 01                	jmp    119 <RDMHandler::SetRecordSensors(bool, unsigned short)+0x119>
 118:	90                   	nop
 119:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 11d:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 124:	00 00 
 126:	74 05                	je     12d <RDMHandler::SetRecordSensors(bool, unsigned short)+0x12d>
 128:	e8 00 00 00 00       	call   12d <RDMHandler::SetRecordSensors(bool, unsigned short)+0x12d>
 12d:	c9                   	leave  
 12e:	c3                   	ret    

Disassembly of section .text._ZN10RDMHandler14GetDeviceHoursEt:

0000000000000000 <RDMHandler::GetDeviceHours(unsigned short)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	66 89 45 d4          	mov    %ax,-0x2c(%rbp)
  16:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1d:	00 00 
  1f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  23:	31 c0                	xor    %eax,%eax
  25:	e8 00 00 00 00       	call   2a <RDMHandler::GetDeviceHours(unsigned short)+0x2a>
  2a:	48 89 c7             	mov    %rax,%rdi
  2d:	e8 00 00 00 00       	call   32 <RDMHandler::GetDeviceHours(unsigned short)+0x32>
  32:	89 c2                	mov    %eax,%edx
  34:	b8 c5 b3 a2 91       	mov    $0x91a2b3c5,%eax
  39:	48 0f af c2          	imul   %rdx,%rax
  3d:	48 c1 e8 20          	shr    $0x20,%rax
  41:	c1 e8 0b             	shr    $0xb,%eax
  44:	89 c0                	mov    %eax,%eax
  46:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  4a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  4f:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  53:	76 09                	jbe    5e <RDMHandler::GetDeviceHours(unsigned short)+0x5e>
  55:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  5a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  5e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  62:	48 8b 40 10          	mov    0x10(%rax),%rax
  66:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  6a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  6e:	c6 40 17 04          	movb   $0x4,0x17(%rax)
  72:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  76:	48 c1 e8 18          	shr    $0x18,%rax
  7a:	89 c2                	mov    %eax,%edx
  7c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80:	88 50 18             	mov    %dl,0x18(%rax)
  83:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  87:	48 c1 e8 10          	shr    $0x10,%rax
  8b:	89 c2                	mov    %eax,%edx
  8d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  91:	88 50 19             	mov    %dl,0x19(%rax)
  94:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  98:	48 c1 e8 08          	shr    $0x8,%rax
  9c:	89 c2                	mov    %eax,%edx
  9e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  a2:	88 50 1a             	mov    %dl,0x1a(%rax)
  a5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  a9:	89 c2                	mov    %eax,%edx
  ab:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  af:	88 50 1b             	mov    %dl,0x1b(%rax)
  b2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  b6:	48 89 c7             	mov    %rax,%rdi
  b9:	e8 00 00 00 00       	call   be <RDMHandler::GetDeviceHours(unsigned short)+0xbe>
  be:	90                   	nop
  bf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  c3:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  ca:	00 00 
  cc:	74 05                	je     d3 <RDMHandler::GetDeviceHours(unsigned short)+0xd3>
  ce:	e8 00 00 00 00       	call   d3 <RDMHandler::GetDeviceHours(unsigned short)+0xd3>
  d3:	c9                   	leave  
  d4:	c3                   	ret    

Disassembly of section .text._ZN10RDMHandler14SetDeviceHoursEbt:

0000000000000000 <RDMHandler::SetDeviceHours(bool, unsigned short)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f1                	mov    %esi,%ecx
  12:	89 d0                	mov    %edx,%eax
  14:	89 ca                	mov    %ecx,%edx
  16:	88 55 e4             	mov    %dl,-0x1c(%rbp)
  19:	66 89 45 e0          	mov    %ax,-0x20(%rbp)
  1d:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  24:	00 00 
  26:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  2a:	31 c0                	xor    %eax,%eax
  2c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  30:	be 04 00 00 00       	mov    $0x4,%esi
  35:	48 89 c7             	mov    %rax,%rdi
  38:	e8 00 00 00 00       	call   3d <RDMHandler::SetDeviceHours(bool, unsigned short)+0x3d>
  3d:	90                   	nop
  3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  42:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  49:	00 00 
  4b:	74 05                	je     52 <RDMHandler::SetDeviceHours(bool, unsigned short)+0x52>
  4d:	e8 00 00 00 00       	call   52 <RDMHandler::SetDeviceHours(bool, unsigned short)+0x52>
  52:	c9                   	leave  
  53:	c3                   	ret    

Disassembly of section .text._ZN10RDMHandler16GetDisplayInvertEt:

0000000000000000 <RDMHandler::GetDisplayInvert(unsigned short)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	66 89 45 e4          	mov    %ax,-0x1c(%rbp)
  16:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1d:	00 00 
  1f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  23:	31 c0                	xor    %eax,%eax
  25:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  29:	48 8b 40 10          	mov    0x10(%rax),%rax
  2d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  31:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  35:	c6 40 17 01          	movb   $0x1,0x17(%rax)
  39:	e8 00 00 00 00       	call   3e <RDMHandler::GetDisplayInvert(unsigned short)+0x3e>
  3e:	48 89 c7             	mov    %rax,%rdi
  41:	e8 00 00 00 00       	call   46 <RDMHandler::GetDisplayInvert(unsigned short)+0x46>
  46:	84 c0                	test   %al,%al
  48:	74 07                	je     51 <RDMHandler::GetDisplayInvert(unsigned short)+0x51>
  4a:	ba 01 00 00 00       	mov    $0x1,%edx
  4f:	eb 05                	jmp    56 <RDMHandler::GetDisplayInvert(unsigned short)+0x56>
  51:	ba 00 00 00 00       	mov    $0x0,%edx
  56:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  5a:	88 50 18             	mov    %dl,0x18(%rax)
  5d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  61:	48 89 c7             	mov    %rax,%rdi
  64:	e8 00 00 00 00       	call   69 <RDMHandler::GetDisplayInvert(unsigned short)+0x69>
  69:	90                   	nop
  6a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  6e:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  75:	00 00 
  77:	74 05                	je     7e <RDMHandler::GetDisplayInvert(unsigned short)+0x7e>
  79:	e8 00 00 00 00       	call   7e <RDMHandler::GetDisplayInvert(unsigned short)+0x7e>
  7e:	c9                   	leave  
  7f:	c3                   	ret    

Disassembly of section .text._ZN10RDMHandler16SetDisplayInvertEbt:

0000000000000000 <RDMHandler::SetDisplayInvert(bool, unsigned short)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10:	89 f1                	mov    %esi,%ecx
  12:	89 d0                	mov    %edx,%eax
  14:	89 ca                	mov    %ecx,%edx
  16:	88 55 d4             	mov    %dl,-0x2c(%rbp)
  19:	66 89 45 d0          	mov    %ax,-0x30(%rbp)
  1d:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  24:	00 00 
  26:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  2a:	31 c0                	xor    %eax,%eax
  2c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  30:	48 8b 40 08          	mov    0x8(%rax),%rax
  34:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  38:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3c:	0f b6 40 16          	movzbl 0x16(%rax),%eax
  40:	3c 01                	cmp    $0x1,%al
  42:	74 13                	je     57 <RDMHandler::SetDisplayInvert(bool, unsigned short)+0x57>
  44:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  48:	be 01 00 00 00       	mov    $0x1,%esi
  4d:	48 89 c7             	mov    %rax,%rdi
  50:	e8 00 00 00 00       	call   55 <RDMHandler::SetDisplayInvert(bool, unsigned short)+0x55>
  55:	eb 5e                	jmp    b5 <RDMHandler::SetDisplayInvert(bool, unsigned short)+0xb5>
  57:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5b:	0f b6 40 17          	movzbl 0x17(%rax),%eax
  5f:	88 45 e7             	mov    %al,-0x19(%rbp)
  62:	80 7d e7 02          	cmpb   $0x2,-0x19(%rbp)
  66:	75 11                	jne    79 <RDMHandler::SetDisplayInvert(bool, unsigned short)+0x79>
  68:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  6c:	be 06 00 00 00       	mov    $0x6,%esi
  71:	48 89 c7             	mov    %rax,%rdi
  74:	e8 00 00 00 00       	call   79 <RDMHandler::SetDisplayInvert(bool, unsigned short)+0x79>
  79:	e8 00 00 00 00       	call   7e <RDMHandler::SetDisplayInvert(bool, unsigned short)+0x7e>
  7e:	48 89 c2             	mov    %rax,%rdx
  81:	80 7d e7 01          	cmpb   $0x1,-0x19(%rbp)
  85:	0f 94 c0             	sete   %al
  88:	0f b6 c0             	movzbl %al,%eax
  8b:	89 c6                	mov    %eax,%esi
  8d:	48 89 d7             	mov    %rdx,%rdi
  90:	e8 00 00 00 00       	call   95 <RDMHandler::SetDisplayInvert(bool, unsigned short)+0x95>
  95:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  99:	48 8b 40 10          	mov    0x10(%rax),%rax
  9d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  a1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  a5:	c6 40 17 00          	movb   $0x0,0x17(%rax)
  a9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  ad:	48 89 c7             	mov    %rax,%rdi
  b0:	e8 00 00 00 00       	call   b5 <RDMHandler::SetDisplayInvert(bool, unsigned short)+0xb5>
  b5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  b9:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  c0:	00 00 
  c2:	74 05                	je     c9 <RDMHandler::SetDisplayInvert(bool, unsigned short)+0xc9>
  c4:	e8 00 00 00 00       	call   c9 <RDMHandler::SetDisplayInvert(bool, unsigned short)+0xc9>
  c9:	c9                   	leave  
  ca:	c3                   	ret    

Disassembly of section .text._ZN10RDMHandler15GetDisplayLevelEt:

0000000000000000 <RDMHandler::GetDisplayLevel(unsigned short)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	66 89 45 e4          	mov    %ax,-0x1c(%rbp)
  16:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1d:	00 00 
  1f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  23:	31 c0                	xor    %eax,%eax
  25:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  29:	48 8b 40 10          	mov    0x10(%rax),%rax
  2d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  31:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  35:	c6 40 17 01          	movb   $0x1,0x17(%rax)
  39:	e8 00 00 00 00       	call   3e <RDMHandler::GetDisplayLevel(unsigned short)+0x3e>
  3e:	48 89 c7             	mov    %rax,%rdi
  41:	e8 00 00 00 00       	call   46 <RDMHandler::GetDisplayLevel(unsigned short)+0x46>
  46:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4a:	88 42 18             	mov    %al,0x18(%rdx)
  4d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  51:	48 89 c7             	mov    %rax,%rdi
  54:	e8 00 00 00 00       	call   59 <RDMHandler::GetDisplayLevel(unsigned short)+0x59>
  59:	90                   	nop
  5a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  5e:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  65:	00 00 
  67:	74 05                	je     6e <RDMHandler::GetDisplayLevel(unsigned short)+0x6e>
  69:	e8 00 00 00 00       	call   6e <RDMHandler::GetDisplayLevel(unsigned short)+0x6e>
  6e:	c9                   	leave  
  6f:	c3                   	ret    

Disassembly of section .text._ZN10RDMHandler15SetDisplayLevelEbt:

0000000000000000 <RDMHandler::SetDisplayLevel(bool, unsigned short)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10:	89 f1                	mov    %esi,%ecx
  12:	89 d0                	mov    %edx,%eax
  14:	89 ca                	mov    %ecx,%edx
  16:	88 55 d4             	mov    %dl,-0x2c(%rbp)
  19:	66 89 45 d0          	mov    %ax,-0x30(%rbp)
  1d:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  24:	00 00 
  26:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  2a:	31 c0                	xor    %eax,%eax
  2c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  30:	48 8b 40 08          	mov    0x8(%rax),%rax
  34:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  38:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3c:	0f b6 40 16          	movzbl 0x16(%rax),%eax
  40:	3c 01                	cmp    $0x1,%al
  42:	74 13                	je     57 <RDMHandler::SetDisplayLevel(bool, unsigned short)+0x57>
  44:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  48:	be 01 00 00 00       	mov    $0x1,%esi
  4d:	48 89 c7             	mov    %rax,%rdi
  50:	e8 00 00 00 00       	call   55 <RDMHandler::SetDisplayLevel(bool, unsigned short)+0x55>
  55:	eb 6d                	jmp    c4 <RDMHandler::SetDisplayLevel(bool, unsigned short)+0xc4>
  57:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5b:	0f b6 40 17          	movzbl 0x17(%rax),%eax
  5f:	88 45 e7             	mov    %al,-0x19(%rbp)
  62:	80 7d e7 00          	cmpb   $0x0,-0x19(%rbp)
  66:	74 14                	je     7c <RDMHandler::SetDisplayLevel(bool, unsigned short)+0x7c>
  68:	e8 00 00 00 00       	call   6d <RDMHandler::SetDisplayLevel(bool, unsigned short)+0x6d>
  6d:	be 00 00 00 00       	mov    $0x0,%esi
  72:	48 89 c7             	mov    %rax,%rdi
  75:	e8 00 00 00 00       	call   7a <RDMHandler::SetDisplayLevel(bool, unsigned short)+0x7a>
  7a:	eb 12                	jmp    8e <RDMHandler::SetDisplayLevel(bool, unsigned short)+0x8e>
  7c:	e8 00 00 00 00       	call   81 <RDMHandler::SetDisplayLevel(bool, unsigned short)+0x81>
  81:	be 01 00 00 00       	mov    $0x1,%esi
  86:	48 89 c7             	mov    %rax,%rdi
  89:	e8 00 00 00 00       	call   8e <RDMHandler::SetDisplayLevel(bool, unsigned short)+0x8e>
  8e:	e8 00 00 00 00       	call   93 <RDMHandler::SetDisplayLevel(bool, unsigned short)+0x93>
  93:	48 89 c2             	mov    %rax,%rdx
  96:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  9a:	89 c6                	mov    %eax,%esi
  9c:	48 89 d7             	mov    %rdx,%rdi
  9f:	e8 00 00 00 00       	call   a4 <RDMHandler::SetDisplayLevel(bool, unsigned short)+0xa4>
  a4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  a8:	48 8b 40 10          	mov    0x10(%rax),%rax
  ac:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  b0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  b4:	c6 40 17 00          	movb   $0x0,0x17(%rax)
  b8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  bc:	48 89 c7             	mov    %rax,%rdi
  bf:	e8 00 00 00 00       	call   c4 <RDMHandler::SetDisplayLevel(bool, unsigned short)+0xc4>
  c4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  c8:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  cf:	00 00 
  d1:	74 05                	je     d8 <RDMHandler::SetDisplayLevel(bool, unsigned short)+0xd8>
  d3:	e8 00 00 00 00       	call   d8 <RDMHandler::SetDisplayLevel(bool, unsigned short)+0xd8>
  d8:	c9                   	leave  
  d9:	c3                   	ret    

Disassembly of section .text._ZN10RDMHandler16GetRealTimeClockEt:

0000000000000000 <RDMHandler::GetRealTimeClock(unsigned short)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 60          	sub    $0x60,%rsp
   c:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	66 89 45 a4          	mov    %ax,-0x5c(%rbp)
  16:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1d:	00 00 
  1f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  23:	31 c0                	xor    %eax,%eax
  25:	e8 00 00 00 00       	call   2a <RDMHandler::GetRealTimeClock(unsigned short)+0x2a>
  2a:	48 89 c2             	mov    %rax,%rdx
  2d:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  31:	48 89 c6             	mov    %rax,%rsi
  34:	48 89 d7             	mov    %rdx,%rdi
  37:	e8 00 00 00 00       	call   3c <RDMHandler::GetRealTimeClock(unsigned short)+0x3c>
  3c:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  3f:	66 05 6c 07          	add    $0x76c,%ax
  43:	66 89 45 b6          	mov    %ax,-0x4a(%rbp)
  47:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4b:	48 8b 40 10          	mov    0x10(%rax),%rax
  4f:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  53:	0f b7 45 b6          	movzwl -0x4a(%rbp),%eax
  57:	66 c1 e8 08          	shr    $0x8,%ax
  5b:	89 c2                	mov    %eax,%edx
  5d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  61:	88 50 18             	mov    %dl,0x18(%rax)
  64:	0f b7 45 b6          	movzwl -0x4a(%rbp),%eax
  68:	89 c2                	mov    %eax,%edx
  6a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  6e:	88 50 19             	mov    %dl,0x19(%rax)
  71:	8b 45 d0             	mov    -0x30(%rbp),%eax
  74:	8d 50 01             	lea    0x1(%rax),%edx
  77:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  7b:	88 50 1a             	mov    %dl,0x1a(%rax)
  7e:	8b 45 cc             	mov    -0x34(%rbp),%eax
  81:	89 c2                	mov    %eax,%edx
  83:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  87:	88 50 1b             	mov    %dl,0x1b(%rax)
  8a:	8b 45 c8             	mov    -0x38(%rbp),%eax
  8d:	89 c2                	mov    %eax,%edx
  8f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  93:	88 50 1c             	mov    %dl,0x1c(%rax)
  96:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  99:	89 c2                	mov    %eax,%edx
  9b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  9f:	88 50 1d             	mov    %dl,0x1d(%rax)
  a2:	8b 45 c0             	mov    -0x40(%rbp),%eax
  a5:	89 c2                	mov    %eax,%edx
  a7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  ab:	88 50 1e             	mov    %dl,0x1e(%rax)
  ae:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  b2:	c6 40 17 07          	movb   $0x7,0x17(%rax)
  b6:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  ba:	48 89 c7             	mov    %rax,%rdi
  bd:	e8 00 00 00 00       	call   c2 <RDMHandler::GetRealTimeClock(unsigned short)+0xc2>
  c2:	90                   	nop
  c3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  c7:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  ce:	00 00 
  d0:	74 05                	je     d7 <RDMHandler::GetRealTimeClock(unsigned short)+0xd7>
  d2:	e8 00 00 00 00       	call   d7 <RDMHandler::GetRealTimeClock(unsigned short)+0xd7>
  d7:	c9                   	leave  
  d8:	c3                   	ret    

Disassembly of section .text._ZN10RDMHandler16SetRealTimeClockEbt:

0000000000000000 <RDMHandler::SetRealTimeClock(bool, unsigned short)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 60          	sub    $0x60,%rsp
   c:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  10:	89 f1                	mov    %esi,%ecx
  12:	89 d0                	mov    %edx,%eax
  14:	89 ca                	mov    %ecx,%edx
  16:	88 55 a4             	mov    %dl,-0x5c(%rbp)
  19:	66 89 45 a0          	mov    %ax,-0x60(%rbp)
  1d:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  24:	00 00 
  26:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  2a:	31 c0                	xor    %eax,%eax
  2c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  30:	48 8b 40 08          	mov    0x8(%rax),%rax
  34:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  38:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  3c:	0f b6 40 16          	movzbl 0x16(%rax),%eax
  40:	3c 07                	cmp    $0x7,%al
  42:	74 16                	je     5a <RDMHandler::SetRealTimeClock(bool, unsigned short)+0x5a>
  44:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  48:	be 01 00 00 00       	mov    $0x1,%esi
  4d:	48 89 c7             	mov    %rax,%rdi
  50:	e8 00 00 00 00       	call   55 <RDMHandler::SetRealTimeClock(bool, unsigned short)+0x55>
  55:	e9 e1 00 00 00       	jmp    13b <RDMHandler::SetRealTimeClock(bool, unsigned short)+0x13b>
  5a:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  5e:	0f b6 40 17          	movzbl 0x17(%rax),%eax
  62:	0f b6 c0             	movzbl %al,%eax
  65:	c1 e0 08             	shl    $0x8,%eax
  68:	89 c2                	mov    %eax,%edx
  6a:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  6e:	0f b6 40 18          	movzbl 0x18(%rax),%eax
  72:	0f b6 c0             	movzbl %al,%eax
  75:	01 d0                	add    %edx,%eax
  77:	2d 6c 07 00 00       	sub    $0x76c,%eax
  7c:	89 45 d4             	mov    %eax,-0x2c(%rbp)
  7f:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  83:	0f b6 40 19          	movzbl 0x19(%rax),%eax
  87:	0f b6 c0             	movzbl %al,%eax
  8a:	83 e8 01             	sub    $0x1,%eax
  8d:	89 45 d0             	mov    %eax,-0x30(%rbp)
  90:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  94:	0f b6 40 1a          	movzbl 0x1a(%rax),%eax
  98:	0f b6 c0             	movzbl %al,%eax
  9b:	89 45 cc             	mov    %eax,-0x34(%rbp)
  9e:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  a2:	0f b6 40 1b          	movzbl 0x1b(%rax),%eax
  a6:	0f b6 c0             	movzbl %al,%eax
  a9:	89 45 c8             	mov    %eax,-0x38(%rbp)
  ac:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  b0:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
  b4:	0f b6 c0             	movzbl %al,%eax
  b7:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  ba:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  be:	0f b6 40 1d          	movzbl 0x1d(%rax),%eax
  c2:	0f b6 c0             	movzbl %al,%eax
  c5:	89 45 c0             	mov    %eax,-0x40(%rbp)
  c8:	0f b6 45 a4          	movzbl -0x5c(%rbp),%eax
  cc:	83 f0 01             	xor    $0x1,%eax
  cf:	84 c0                	test   %al,%al
  d1:	74 25                	je     f8 <RDMHandler::SetRealTimeClock(bool, unsigned short)+0xf8>
  d3:	e8 00 00 00 00       	call   d8 <RDMHandler::SetRealTimeClock(bool, unsigned short)+0xd8>
  d8:	48 89 c2             	mov    %rax,%rdx
  db:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  df:	48 89 c6             	mov    %rax,%rsi
  e2:	48 89 d7             	mov    %rdx,%rdi
  e5:	e8 00 00 00 00       	call   ea <RDMHandler::SetRealTimeClock(bool, unsigned short)+0xea>
  ea:	83 f0 01             	xor    $0x1,%eax
  ed:	84 c0                	test   %al,%al
  ef:	74 07                	je     f8 <RDMHandler::SetRealTimeClock(bool, unsigned short)+0xf8>
  f1:	b8 01 00 00 00       	mov    $0x1,%eax
  f6:	eb 05                	jmp    fd <RDMHandler::SetRealTimeClock(bool, unsigned short)+0xfd>
  f8:	b8 00 00 00 00       	mov    $0x0,%eax
  fd:	84 c0                	test   %al,%al
  ff:	74 11                	je     112 <RDMHandler::SetRealTimeClock(bool, unsigned short)+0x112>
 101:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
 105:	be 04 00 00 00       	mov    $0x4,%esi
 10a:	48 89 c7             	mov    %rax,%rdi
 10d:	e8 00 00 00 00       	call   112 <RDMHandler::SetRealTimeClock(bool, unsigned short)+0x112>
 112:	80 7d a4 00          	cmpb   $0x0,-0x5c(%rbp)
 116:	75 22                	jne    13a <RDMHandler::SetRealTimeClock(bool, unsigned short)+0x13a>
 118:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
 11c:	48 8b 40 10          	mov    0x10(%rax),%rax
 120:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
 124:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 128:	c6 40 17 00          	movb   $0x0,0x17(%rax)
 12c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
 130:	48 89 c7             	mov    %rax,%rdi
 133:	e8 00 00 00 00       	call   138 <RDMHandler::SetRealTimeClock(bool, unsigned short)+0x138>
 138:	eb 01                	jmp    13b <RDMHandler::SetRealTimeClock(bool, unsigned short)+0x13b>
 13a:	90                   	nop
 13b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 13f:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 146:	00 00 
 148:	74 05                	je     14f <RDMHandler::SetRealTimeClock(bool, unsigned short)+0x14f>
 14a:	e8 00 00 00 00       	call   14f <RDMHandler::SetRealTimeClock(bool, unsigned short)+0x14f>
 14f:	c9                   	leave  
 150:	c3                   	ret    

Disassembly of section .text._ZN10RDMHandler13GetPowerStateEt:

0000000000000000 <RDMHandler::GetPowerState(unsigned short)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	66 89 45 e4          	mov    %ax,-0x1c(%rbp)
  16:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1d:	00 00 
  1f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  23:	31 c0                	xor    %eax,%eax
  25:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  29:	48 8b 40 10          	mov    0x10(%rax),%rax
  2d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  31:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  35:	c6 40 17 01          	movb   $0x1,0x17(%rax)
  39:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  3d:	c6 40 18 ff          	movb   $0xff,0x18(%rax)
  41:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  45:	48 89 c7             	mov    %rax,%rdi
  48:	e8 00 00 00 00       	call   4d <RDMHandler::GetPowerState(unsigned short)+0x4d>
  4d:	90                   	nop
  4e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  52:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  59:	00 00 
  5b:	74 05                	je     62 <RDMHandler::GetPowerState(unsigned short)+0x62>
  5d:	e8 00 00 00 00       	call   62 <RDMHandler::GetPowerState(unsigned short)+0x62>
  62:	c9                   	leave  
  63:	c3                   	ret    

Disassembly of section .text._ZN10RDMHandler13SetPowerStateEbt:

0000000000000000 <RDMHandler::SetPowerState(bool, unsigned short)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10:	89 f1                	mov    %esi,%ecx
  12:	89 d0                	mov    %edx,%eax
  14:	89 ca                	mov    %ecx,%edx
  16:	88 55 d4             	mov    %dl,-0x2c(%rbp)
  19:	66 89 45 d0          	mov    %ax,-0x30(%rbp)
  1d:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  24:	00 00 
  26:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  2a:	31 c0                	xor    %eax,%eax
  2c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  30:	48 8b 40 08          	mov    0x8(%rax),%rax
  34:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  38:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3c:	0f b6 40 16          	movzbl 0x16(%rax),%eax
  40:	3c 01                	cmp    $0x1,%al
  42:	74 13                	je     57 <RDMHandler::SetPowerState(bool, unsigned short)+0x57>
  44:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  48:	be 01 00 00 00       	mov    $0x1,%esi
  4d:	48 89 c7             	mov    %rax,%rdi
  50:	e8 00 00 00 00       	call   55 <RDMHandler::SetPowerState(bool, unsigned short)+0x55>
  55:	eb 63                	jmp    ba <RDMHandler::SetPowerState(bool, unsigned short)+0xba>
  57:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5b:	0f b6 40 17          	movzbl 0x17(%rax),%eax
  5f:	88 45 e7             	mov    %al,-0x19(%rbp)
  62:	80 7d e7 ff          	cmpb   $0xff,-0x19(%rbp)
  66:	74 19                	je     81 <RDMHandler::SetPowerState(bool, unsigned short)+0x81>
  68:	80 7d e7 02          	cmpb   $0x2,-0x19(%rbp)
  6c:	76 13                	jbe    81 <RDMHandler::SetPowerState(bool, unsigned short)+0x81>
  6e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  72:	be 06 00 00 00       	mov    $0x6,%esi
  77:	48 89 c7             	mov    %rax,%rdi
  7a:	e8 00 00 00 00       	call   7f <RDMHandler::SetPowerState(bool, unsigned short)+0x7f>
  7f:	eb 39                	jmp    ba <RDMHandler::SetPowerState(bool, unsigned short)+0xba>
  81:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  85:	48 8b 40 10          	mov    0x10(%rax),%rax
  89:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8d:	80 7d e7 ff          	cmpb   $0xff,-0x19(%rbp)
  91:	75 16                	jne    a9 <RDMHandler::SetPowerState(bool, unsigned short)+0xa9>
  93:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  97:	c6 40 17 00          	movb   $0x0,0x17(%rax)
  9b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  9f:	48 89 c7             	mov    %rax,%rdi
  a2:	e8 00 00 00 00       	call   a7 <RDMHandler::SetPowerState(bool, unsigned short)+0xa7>
  a7:	eb 11                	jmp    ba <RDMHandler::SetPowerState(bool, unsigned short)+0xba>
  a9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  ad:	be 04 00 00 00       	mov    $0x4,%esi
  b2:	48 89 c7             	mov    %rax,%rdi
  b5:	e8 00 00 00 00       	call   ba <RDMHandler::SetPowerState(bool, unsigned short)+0xba>
  ba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  be:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  c5:	00 00 
  c7:	74 05                	je     ce <RDMHandler::SetPowerState(bool, unsigned short)+0xce>
  c9:	e8 00 00 00 00       	call   ce <RDMHandler::SetPowerState(bool, unsigned short)+0xce>
  ce:	c9                   	leave  
  cf:	c3                   	ret    

Disassembly of section .text._ZN10RDMHandler11GetSlotInfoEt:

0000000000000000 <RDMHandler::GetSlotInfo(unsigned short)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 40          	sub    $0x40,%rsp
   c:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	66 89 45 c4          	mov    %ax,-0x3c(%rbp)
  16:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1d:	00 00 
  1f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  23:	31 c0                	xor    %eax,%eax
  25:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  29:	48 8b 40 10          	mov    0x10(%rax),%rax
  2d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  31:	e8 00 00 00 00       	call   36 <RDMHandler::GetSlotInfo(unsigned short)+0x36>
  36:	48 89 c2             	mov    %rax,%rdx
  39:	0f b7 45 c4          	movzwl -0x3c(%rbp),%eax
  3d:	89 c6                	mov    %eax,%esi
  3f:	48 89 d7             	mov    %rdx,%rdi
  42:	e8 00 00 00 00       	call   47 <RDMHandler::GetSlotInfo(unsigned short)+0x47>
  47:	66 89 45 da          	mov    %ax,-0x26(%rbp)
  4b:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  52:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%rbp)
  59:	e9 a3 00 00 00       	jmp    101 <RDMHandler::GetSlotInfo(unsigned short)+0x101>
  5e:	e8 00 00 00 00       	call   63 <RDMHandler::GetSlotInfo(unsigned short)+0x63>
  63:	48 89 c7             	mov    %rax,%rdi
  66:	8b 45 e8             	mov    -0x18(%rbp),%eax
  69:	0f b7 d0             	movzwl %ax,%edx
  6c:	0f b7 45 c4          	movzwl -0x3c(%rbp),%eax
  70:	48 8d 4d ec          	lea    -0x14(%rbp),%rcx
  74:	89 c6                	mov    %eax,%esi
  76:	e8 00 00 00 00       	call   7b <RDMHandler::GetSlotInfo(unsigned short)+0x7b>
  7b:	84 c0                	test   %al,%al
  7d:	74 7e                	je     fd <RDMHandler::GetSlotInfo(unsigned short)+0xfd>
  7f:	8b 45 e8             	mov    -0x18(%rbp),%eax
  82:	c1 e8 08             	shr    $0x8,%eax
  85:	89 c1                	mov    %eax,%ecx
  87:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  8a:	8d 42 01             	lea    0x1(%rdx),%eax
  8d:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  90:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  94:	89 d2                	mov    %edx,%edx
  96:	88 4c 10 18          	mov    %cl,0x18(%rax,%rdx,1)
  9a:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  9d:	8d 42 01             	lea    0x1(%rdx),%eax
  a0:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  a3:	8b 45 e8             	mov    -0x18(%rbp),%eax
  a6:	89 c1                	mov    %eax,%ecx
  a8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  ac:	89 d2                	mov    %edx,%edx
  ae:	88 4c 10 18          	mov    %cl,0x18(%rax,%rdx,1)
  b2:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
  b5:	8d 41 01             	lea    0x1(%rcx),%eax
  b8:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  bb:	0f b6 55 ee          	movzbl -0x12(%rbp),%edx
  bf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  c3:	89 c9                	mov    %ecx,%ecx
  c5:	88 54 08 18          	mov    %dl,0x18(%rax,%rcx,1)
  c9:	0f b7 45 ec          	movzwl -0x14(%rbp),%eax
  cd:	66 c1 e8 08          	shr    $0x8,%ax
  d1:	89 c1                	mov    %eax,%ecx
  d3:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  d6:	8d 42 01             	lea    0x1(%rdx),%eax
  d9:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  dc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  e0:	89 d2                	mov    %edx,%edx
  e2:	88 4c 10 18          	mov    %cl,0x18(%rax,%rdx,1)
  e6:	0f b7 4d ec          	movzwl -0x14(%rbp),%ecx
  ea:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  ed:	8d 42 01             	lea    0x1(%rdx),%eax
  f0:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  f3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  f7:	89 d2                	mov    %edx,%edx
  f9:	88 4c 10 18          	mov    %cl,0x18(%rax,%rdx,1)
  fd:	83 45 e8 01          	addl   $0x1,-0x18(%rbp)
 101:	c7 45 e0 2e 00 00 00 	movl   $0x2e,-0x20(%rbp)
 108:	0f b7 45 da          	movzwl -0x26(%rbp),%eax
 10c:	89 45 dc             	mov    %eax,-0x24(%rbp)
 10f:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
 113:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
 117:	48 89 d6             	mov    %rdx,%rsi
 11a:	48 89 c7             	mov    %rax,%rdi
 11d:	e8 00 00 00 00       	call   122 <RDMHandler::GetSlotInfo(unsigned short)+0x122>
 122:	8b 00                	mov    (%rax),%eax
 124:	39 45 e8             	cmp    %eax,-0x18(%rbp)
 127:	0f 92 c0             	setb   %al
 12a:	84 c0                	test   %al,%al
 12c:	0f 85 2c ff ff ff    	jne    5e <RDMHandler::GetSlotInfo(unsigned short)+0x5e>
 132:	8b 45 e4             	mov    -0x1c(%rbp),%eax
 135:	89 c2                	mov    %eax,%edx
 137:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 13b:	88 50 17             	mov    %dl,0x17(%rax)
 13e:	8b 45 e4             	mov    -0x1c(%rbp),%eax
 141:	8d 50 18             	lea    0x18(%rax),%edx
 144:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 148:	88 50 02             	mov    %dl,0x2(%rax)
 14b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 14f:	48 89 c7             	mov    %rax,%rdi
 152:	e8 00 00 00 00       	call   157 <RDMHandler::GetSlotInfo(unsigned short)+0x157>
 157:	90                   	nop
 158:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 15c:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 163:	00 00 
 165:	74 05                	je     16c <RDMHandler::GetSlotInfo(unsigned short)+0x16c>
 167:	e8 00 00 00 00       	call   16c <RDMHandler::GetSlotInfo(unsigned short)+0x16c>
 16c:	c9                   	leave  
 16d:	c3                   	ret    

Disassembly of section .text._ZN10RDMHandler18GetSlotDescriptionEt:

0000000000000000 <RDMHandler::GetSlotDescription(unsigned short)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 40          	sub    $0x40,%rsp
   c:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	66 89 45 c4          	mov    %ax,-0x3c(%rbp)
  16:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1d:	00 00 
  1f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  23:	31 c0                	xor    %eax,%eax
  25:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  29:	48 8b 40 08          	mov    0x8(%rax),%rax
  2d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  31:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  35:	0f b6 40 17          	movzbl 0x17(%rax),%eax
  39:	0f b6 c0             	movzbl %al,%eax
  3c:	c1 e0 08             	shl    $0x8,%eax
  3f:	89 c2                	mov    %eax,%edx
  41:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  45:	0f b6 40 18          	movzbl 0x18(%rax),%eax
  49:	0f b6 c0             	movzbl %al,%eax
  4c:	01 d0                	add    %edx,%eax
  4e:	66 89 45 d2          	mov    %ax,-0x2e(%rbp)
  52:	e8 00 00 00 00       	call   57 <RDMHandler::GetSlotDescription(unsigned short)+0x57>
  57:	48 89 c7             	mov    %rax,%rdi
  5a:	0f b7 55 d2          	movzwl -0x2e(%rbp),%edx
  5e:	0f b7 45 c4          	movzwl -0x3c(%rbp),%eax
  62:	48 8d 4d dc          	lea    -0x24(%rbp),%rcx
  66:	89 c6                	mov    %eax,%esi
  68:	e8 00 00 00 00       	call   6d <RDMHandler::GetSlotDescription(unsigned short)+0x6d>
  6d:	83 f0 01             	xor    $0x1,%eax
  70:	84 c0                	test   %al,%al
  72:	74 16                	je     8a <RDMHandler::GetSlotDescription(unsigned short)+0x8a>
  74:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  78:	be 06 00 00 00       	mov    $0x6,%esi
  7d:	48 89 c7             	mov    %rax,%rdi
  80:	e8 00 00 00 00       	call   85 <RDMHandler::GetSlotDescription(unsigned short)+0x85>
  85:	e9 bf 00 00 00       	jmp    149 <RDMHandler::GetSlotDescription(unsigned short)+0x149>
  8a:	0f b7 45 dc          	movzwl -0x24(%rbp),%eax
  8e:	0f b7 c8             	movzwl %ax,%ecx
  91:	0f b7 45 d2          	movzwl -0x2e(%rbp),%eax
  95:	48 8d 55 d4          	lea    -0x2c(%rbp),%rdx
  99:	89 ce                	mov    %ecx,%esi
  9b:	89 c7                	mov    %eax,%edi
  9d:	e8 00 00 00 00       	call   a2 <RDMHandler::GetSlotDescription(unsigned short)+0xa2>
  a2:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  a6:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  ab:	75 16                	jne    c3 <RDMHandler::GetSlotDescription(unsigned short)+0xc3>
  ad:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  b1:	be 06 00 00 00       	mov    $0x6,%esi
  b6:	48 89 c7             	mov    %rax,%rdi
  b9:	e8 00 00 00 00       	call   be <RDMHandler::GetSlotDescription(unsigned short)+0xbe>
  be:	e9 86 00 00 00       	jmp    149 <RDMHandler::GetSlotDescription(unsigned short)+0x149>
  c3:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  c6:	83 f8 20             	cmp    $0x20,%eax
  c9:	76 07                	jbe    d2 <RDMHandler::GetSlotDescription(unsigned short)+0xd2>
  cb:	c7 45 d4 20 00 00 00 	movl   $0x20,-0x2c(%rbp)
  d2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  d6:	48 8b 40 10          	mov    0x10(%rax),%rax
  da:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  de:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  e1:	8d 50 02             	lea    0x2(%rax),%edx
  e4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  e8:	88 50 17             	mov    %dl,0x17(%rax)
  eb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  ef:	0f b6 50 17          	movzbl 0x17(%rax),%edx
  f3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  f7:	88 50 18             	mov    %dl,0x18(%rax)
  fa:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  fe:	0f b6 50 18          	movzbl 0x18(%rax),%edx
 102:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 106:	88 50 19             	mov    %dl,0x19(%rax)
 109:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%rbp)
 110:	eb 23                	jmp    135 <RDMHandler::GetSlotDescription(unsigned short)+0x135>
 112:	8b 55 d8             	mov    -0x28(%rbp),%edx
 115:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 119:	48 01 d0             	add    %rdx,%rax
 11c:	0f b6 10             	movzbl (%rax),%edx
 11f:	8b 45 d8             	mov    -0x28(%rbp),%eax
 122:	8d 70 02             	lea    0x2(%rax),%esi
 125:	89 d1                	mov    %edx,%ecx
 127:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 12b:	89 f2                	mov    %esi,%edx
 12d:	88 4c 10 18          	mov    %cl,0x18(%rax,%rdx,1)
 131:	83 45 d8 01          	addl   $0x1,-0x28(%rbp)
 135:	8b 45 d4             	mov    -0x2c(%rbp),%eax
 138:	39 45 d8             	cmp    %eax,-0x28(%rbp)
 13b:	72 d5                	jb     112 <RDMHandler::GetSlotDescription(unsigned short)+0x112>
 13d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 141:	48 89 c7             	mov    %rax,%rdi
 144:	e8 00 00 00 00       	call   149 <RDMHandler::GetSlotDescription(unsigned short)+0x149>
 149:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 14d:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 154:	00 00 
 156:	74 05                	je     15d <RDMHandler::GetSlotDescription(unsigned short)+0x15d>
 158:	e8 00 00 00 00       	call   15d <RDMHandler::GetSlotDescription(unsigned short)+0x15d>
 15d:	c9                   	leave  
 15e:	c3                   	ret    

Disassembly of section .text._ZSt3minImERKT_S2_S2_:

0000000000000000 <unsigned long const& std::min<unsigned long>(unsigned long const&, unsigned long const&)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  27:	48 8b 10             	mov    (%rax),%rdx
  2a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2e:	48 8b 00             	mov    (%rax),%rax
  31:	48 39 c2             	cmp    %rax,%rdx
  34:	73 06                	jae    3c <unsigned long const& std::min<unsigned long>(unsigned long const&, unsigned long const&)+0x3c>
  36:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  3a:	eb 04                	jmp    40 <unsigned long const& std::min<unsigned long>(unsigned long const&, unsigned long const&)+0x40>
  3c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  44:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  4b:	00 00 
  4d:	74 05                	je     54 <unsigned long const& std::min<unsigned long>(unsigned long const&, unsigned long const&)+0x54>
  4f:	e8 00 00 00 00       	call   54 <unsigned long const& std::min<unsigned long>(unsigned long const&, unsigned long const&)+0x54>
  54:	c9                   	leave  
  55:	c3                   	ret    

Disassembly of section .text._ZSt3minIhERKT_S2_S2_:

0000000000000000 <unsigned char const& std::min<unsigned char>(unsigned char const&, unsigned char const&)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  27:	0f b6 10             	movzbl (%rax),%edx
  2a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2e:	0f b6 00             	movzbl (%rax),%eax
  31:	38 c2                	cmp    %al,%dl
  33:	73 06                	jae    3b <unsigned char const& std::min<unsigned char>(unsigned char const&, unsigned char const&)+0x3b>
  35:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  39:	eb 04                	jmp    3f <unsigned char const& std::min<unsigned char>(unsigned char const&, unsigned char const&)+0x3f>
  3b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  43:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  4a:	00 00 
  4c:	74 05                	je     53 <unsigned char const& std::min<unsigned char>(unsigned char const&, unsigned char const&)+0x53>
  4e:	e8 00 00 00 00       	call   53 <unsigned char const& std::min<unsigned char>(unsigned char const&, unsigned char const&)+0x53>
  53:	c9                   	leave  
  54:	c3                   	ret    

Disassembly of section .text._ZSt3minIjERKT_S2_S2_:

0000000000000000 <unsigned int const& std::min<unsigned int>(unsigned int const&, unsigned int const&)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  27:	8b 10                	mov    (%rax),%edx
  29:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2d:	8b 00                	mov    (%rax),%eax
  2f:	39 c2                	cmp    %eax,%edx
  31:	73 06                	jae    39 <unsigned int const& std::min<unsigned int>(unsigned int const&, unsigned int const&)+0x39>
  33:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  37:	eb 04                	jmp    3d <unsigned int const& std::min<unsigned int>(unsigned int const&, unsigned int const&)+0x3d>
  39:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  41:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  48:	00 00 
  4a:	74 05                	je     51 <unsigned int const& std::min<unsigned int>(unsigned int const&, unsigned int const&)+0x51>
  4c:	e8 00 00 00 00       	call   51 <unsigned int const& std::min<unsigned int>(unsigned int const&, unsigned int const&)+0x51>
  51:	c9                   	leave  
  52:	c3                   	ret    

rdmhandlere1371.o:     file format elf64-x86-64


Disassembly of section .text._ZN11RDMIdentify7SetModeEN3rdm8identify4ModeE:

0000000000000000 <RDMIdentify::SetMode(rdm::identify::Mode)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	88 45 e4             	mov    %al,-0x1c(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	80 7d e4 00          	cmpb   $0x0,-0x1c(%rbp)
  28:	74 06                	je     30 <RDMIdentify::SetMode(rdm::identify::Mode)+0x30>
  2a:	80 7d e4 ff          	cmpb   $0xff,-0x1c(%rbp)
  2e:	75 5e                	jne    8e <RDMIdentify::SetMode(rdm::identify::Mode)+0x8e>
  30:	0f b6 45 e4          	movzbl -0x1c(%rbp),%eax
  34:	88 05 00 00 00 00    	mov    %al,0x0(%rip)        # 3a <RDMIdentify::SetMode(rdm::identify::Mode)+0x3a>
  3a:	0f b6 05 00 00 00 00 	movzbl 0x0(%rip),%eax        # 41 <RDMIdentify::SetMode(rdm::identify::Mode)+0x41>
  41:	84 c0                	test   %al,%al
  43:	74 34                	je     79 <RDMIdentify::SetMode(rdm::identify::Mode)+0x79>
  45:	80 7d e4 00          	cmpb   $0x0,-0x1c(%rbp)
  49:	74 17                	je     62 <RDMIdentify::SetMode(rdm::identify::Mode)+0x62>
  4b:	0f b6 15 00 00 00 00 	movzbl 0x0(%rip),%edx        # 52 <RDMIdentify::SetMode(rdm::identify::Mode)+0x52>
  52:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  56:	89 d6                	mov    %edx,%esi
  58:	48 89 c7             	mov    %rax,%rdi
  5b:	e8 00 00 00 00       	call   60 <RDMIdentify::SetMode(rdm::identify::Mode)+0x60>
  60:	eb 2c                	jmp    8e <RDMIdentify::SetMode(rdm::identify::Mode)+0x8e>
  62:	0f b6 15 00 00 00 00 	movzbl 0x0(%rip),%edx        # 69 <RDMIdentify::SetMode(rdm::identify::Mode)+0x69>
  69:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  6d:	89 d6                	mov    %edx,%esi
  6f:	48 89 c7             	mov    %rax,%rdi
  72:	e8 00 00 00 00       	call   77 <RDMIdentify::SetMode(rdm::identify::Mode)+0x77>
  77:	eb 15                	jmp    8e <RDMIdentify::SetMode(rdm::identify::Mode)+0x8e>
  79:	0f b6 15 00 00 00 00 	movzbl 0x0(%rip),%edx        # 80 <RDMIdentify::SetMode(rdm::identify::Mode)+0x80>
  80:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  84:	89 d6                	mov    %edx,%esi
  86:	48 89 c7             	mov    %rax,%rdi
  89:	e8 00 00 00 00       	call   8e <RDMIdentify::SetMode(rdm::identify::Mode)+0x8e>
  8e:	90                   	nop
  8f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  93:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  9a:	00 00 
  9c:	74 05                	je     a3 <RDMIdentify::SetMode(rdm::identify::Mode)+0xa3>
  9e:	e8 00 00 00 00       	call   a3 <RDMIdentify::SetMode(rdm::identify::Mode)+0xa3>
  a3:	c9                   	leave  
  a4:	c3                   	ret    

Disassembly of section .text._ZNK11RDMIdentify7GetModeEv:

0000000000000000 <RDMIdentify::GetMode() const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	0f b6 05 00 00 00 00 	movzbl 0x0(%rip),%eax        # 26 <RDMIdentify::GetMode() const+0x26>
  26:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  2a:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  31:	00 00 
  33:	74 05                	je     3a <RDMIdentify::GetMode() const+0x3a>
  35:	e8 00 00 00 00       	call   3a <RDMIdentify::GetMode() const+0x3a>
  3a:	c9                   	leave  
  3b:	c3                   	ret    

Disassembly of section .text._ZN11RDMIdentify3GetEv:

0000000000000000 <RDMIdentify::Get()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 22 <RDMIdentify::Get()+0x22>
  22:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  26:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  2d:	00 00 
  2f:	74 05                	je     36 <RDMIdentify::Get()+0x36>
  31:	e8 00 00 00 00       	call   36 <RDMIdentify::Get()+0x36>
  36:	c9                   	leave  
  37:	c3                   	ret    

Disassembly of section .text._ZN10RDMHandler15GetIdentifyModeEt:

0000000000000000 <RDMHandler::GetIdentifyMode(unsigned short)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	66 89 45 e4          	mov    %ax,-0x1c(%rbp)
  16:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1d:	00 00 
  1f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  23:	31 c0                	xor    %eax,%eax
  25:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  29:	48 8b 40 10          	mov    0x10(%rax),%rax
  2d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  31:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  35:	c6 40 17 01          	movb   $0x1,0x17(%rax)
  39:	e8 00 00 00 00       	call   3e <RDMHandler::GetIdentifyMode(unsigned short)+0x3e>
  3e:	48 89 c7             	mov    %rax,%rdi
  41:	e8 00 00 00 00       	call   46 <RDMHandler::GetIdentifyMode(unsigned short)+0x46>
  46:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4a:	88 42 18             	mov    %al,0x18(%rdx)
  4d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  51:	48 89 c7             	mov    %rax,%rdi
  54:	e8 00 00 00 00       	call   59 <RDMHandler::GetIdentifyMode(unsigned short)+0x59>
  59:	90                   	nop
  5a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  5e:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  65:	00 00 
  67:	74 05                	je     6e <RDMHandler::GetIdentifyMode(unsigned short)+0x6e>
  69:	e8 00 00 00 00       	call   6e <RDMHandler::GetIdentifyMode(unsigned short)+0x6e>
  6e:	c9                   	leave  
  6f:	c3                   	ret    

Disassembly of section .text._ZN10RDMHandler15SetIdentifyModeEbt:

0000000000000000 <RDMHandler::SetIdentifyMode(bool, unsigned short)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10:	89 f1                	mov    %esi,%ecx
  12:	89 d0                	mov    %edx,%eax
  14:	89 ca                	mov    %ecx,%edx
  16:	88 55 d4             	mov    %dl,-0x2c(%rbp)
  19:	66 89 45 d0          	mov    %ax,-0x30(%rbp)
  1d:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  24:	00 00 
  26:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  2a:	31 c0                	xor    %eax,%eax
  2c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  30:	48 8b 40 08          	mov    0x8(%rax),%rax
  34:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  38:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3c:	0f b6 40 16          	movzbl 0x16(%rax),%eax
  40:	3c 01                	cmp    $0x1,%al
  42:	74 13                	je     57 <RDMHandler::SetIdentifyMode(bool, unsigned short)+0x57>
  44:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  48:	be 01 00 00 00       	mov    $0x1,%esi
  4d:	48 89 c7             	mov    %rax,%rdi
  50:	e8 00 00 00 00       	call   55 <RDMHandler::SetIdentifyMode(bool, unsigned short)+0x55>
  55:	eb 6e                	jmp    c5 <RDMHandler::SetIdentifyMode(bool, unsigned short)+0xc5>
  57:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5b:	0f b6 40 17          	movzbl 0x17(%rax),%eax
  5f:	84 c0                	test   %al,%al
  61:	74 1f                	je     82 <RDMHandler::SetIdentifyMode(bool, unsigned short)+0x82>
  63:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  67:	0f b6 40 17          	movzbl 0x17(%rax),%eax
  6b:	3c ff                	cmp    $0xff,%al
  6d:	74 13                	je     82 <RDMHandler::SetIdentifyMode(bool, unsigned short)+0x82>
  6f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  73:	be 06 00 00 00       	mov    $0x6,%esi
  78:	48 89 c7             	mov    %rax,%rdi
  7b:	e8 00 00 00 00       	call   80 <RDMHandler::SetIdentifyMode(bool, unsigned short)+0x80>
  80:	eb 43                	jmp    c5 <RDMHandler::SetIdentifyMode(bool, unsigned short)+0xc5>
  82:	e8 00 00 00 00       	call   87 <RDMHandler::SetIdentifyMode(bool, unsigned short)+0x87>
  87:	48 89 c2             	mov    %rax,%rdx
  8a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8e:	0f b6 40 17          	movzbl 0x17(%rax),%eax
  92:	89 c6                	mov    %eax,%esi
  94:	48 89 d7             	mov    %rdx,%rdi
  97:	e8 00 00 00 00       	call   9c <RDMHandler::SetIdentifyMode(bool, unsigned short)+0x9c>
  9c:	80 7d d4 00          	cmpb   $0x0,-0x2c(%rbp)
  a0:	75 22                	jne    c4 <RDMHandler::SetIdentifyMode(bool, unsigned short)+0xc4>
  a2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  a6:	48 8b 40 10          	mov    0x10(%rax),%rax
  aa:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  ae:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  b2:	c6 40 17 00          	movb   $0x0,0x17(%rax)
  b6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  ba:	48 89 c7             	mov    %rax,%rdi
  bd:	e8 00 00 00 00       	call   c2 <RDMHandler::SetIdentifyMode(bool, unsigned short)+0xc2>
  c2:	eb 01                	jmp    c5 <RDMHandler::SetIdentifyMode(bool, unsigned short)+0xc5>
  c4:	90                   	nop
  c5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  c9:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  d0:	00 00 
  d2:	74 05                	je     d9 <RDMHandler::SetIdentifyMode(bool, unsigned short)+0xd9>
  d4:	e8 00 00 00 00       	call   d9 <RDMHandler::SetIdentifyMode(bool, unsigned short)+0xd9>
  d9:	c9                   	leave  
  da:	c3                   	ret    

rdmidentify.o:     file format elf64-x86-64


Disassembly of section .text._ZN11RDMIdentifyC2Ev:

0000000000000000 <RDMIdentify::RDMIdentify()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	48 89 05 00 00 00 00 	mov    %rax,0x0(%rip)        # 2a <RDMIdentify::RDMIdentify()+0x2a>
  2a:	90                   	nop
  2b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2f:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  36:	00 00 
  38:	74 05                	je     3f <RDMIdentify::RDMIdentify()+0x3f>
  3a:	e8 00 00 00 00       	call   3f <RDMIdentify::RDMIdentify()+0x3f>
  3f:	c9                   	leave  
  40:	c3                   	ret    

Disassembly of section .text._ZN11RDMIdentify2OnEN3rdm8identify4ModeE:

0000000000000000 <RDMIdentify::On(rdm::identify::Mode)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	88 45 e4             	mov    %al,-0x1c(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	90                   	nop
  25:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  29:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  30:	00 00 
  32:	74 05                	je     39 <RDMIdentify::On(rdm::identify::Mode)+0x39>
  34:	e8 00 00 00 00       	call   39 <RDMIdentify::On(rdm::identify::Mode)+0x39>
  39:	c9                   	leave  
  3a:	c3                   	ret    

Disassembly of section .text._ZN11RDMIdentify3OffEN3rdm8identify4ModeE:

0000000000000000 <RDMIdentify::Off(rdm::identify::Mode)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	88 45 e4             	mov    %al,-0x1c(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	90                   	nop
  25:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  29:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  30:	00 00 
  32:	74 05                	je     39 <RDMIdentify::Off(rdm::identify::Mode)+0x39>
  34:	e8 00 00 00 00       	call   39 <RDMIdentify::Off(rdm::identify::Mode)+0x39>
  39:	c9                   	leave  
  3a:	c3                   	ret    

rdmmessageprint.o:     file format elf64-x86-64


Disassembly of section .text._ZN10RDMMessage9PrintNoScEPKh:

0000000000000000 <RDMMessage::PrintNoSc(unsigned char const*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 81 ec 30 01 00 00 	sub    $0x130,%rsp
   f:	48 89 bd d8 fe ff ff 	mov    %rdi,-0x128(%rbp)
  16:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1d:	00 00 
  1f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  23:	31 c0                	xor    %eax,%eax
  25:	48 8b 85 d8 fe ff ff 	mov    -0x128(%rbp),%rax
  2c:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
  33:	c6 85 f0 fe ff ff cc 	movb   $0xcc,-0x110(%rbp)
  3a:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
  41:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  45:	0f b6 c0             	movzbl %al,%eax
  48:	83 e8 01             	sub    $0x1,%eax
  4b:	89 c6                	mov    %eax,%esi
  4d:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
  54:	48 8d 95 f0 fe ff ff 	lea    -0x110(%rbp),%rdx
  5b:	48 8d 4a 01          	lea    0x1(%rdx),%rcx
  5f:	48 89 f2             	mov    %rsi,%rdx
  62:	48 89 c6             	mov    %rax,%rsi
  65:	48 89 cf             	mov    %rcx,%rdi
  68:	e8 00 00 00 00       	call   6d <RDMMessage::PrintNoSc(unsigned char const*)+0x6d>
  6d:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
  74:	48 89 c7             	mov    %rax,%rdi
  77:	e8 00 00 00 00       	call   7c <RDMMessage::PrintNoSc(unsigned char const*)+0x7c>
  7c:	90                   	nop
  7d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  81:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  88:	00 00 
  8a:	74 05                	je     91 <RDMMessage::PrintNoSc(unsigned char const*)+0x91>
  8c:	e8 00 00 00 00       	call   91 <RDMMessage::PrintNoSc(unsigned char const*)+0x91>
  91:	c9                   	leave  
  92:	c3                   	ret    

Disassembly of section .text._ZN10RDMMessage5PrintEPKh:

0000000000000000 <RDMMessage::Print(unsigned char const*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 40          	sub    $0x40,%rsp
   c:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  24:	0f 84 81 03 00 00    	je     3ab <RDMMessage::Print(unsigned char const*)+0x3ab>
  2a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  2e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  32:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  36:	0f b6 00             	movzbl (%rax),%eax
  39:	3c cc                	cmp    $0xcc,%al
  3b:	0f 85 cb 02 00 00    	jne    30c <RDMMessage::Print(unsigned char const*)+0x30c>
  41:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  45:	48 83 c0 09          	add    $0x9,%rax
  49:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  4d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  51:	48 83 c0 05          	add    $0x5,%rax
  55:	0f b6 00             	movzbl (%rax),%eax
  58:	0f b6 f0             	movzbl %al,%esi
  5b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5f:	48 83 c0 04          	add    $0x4,%rax
  63:	0f b6 00             	movzbl (%rax),%eax
  66:	44 0f b6 c0          	movzbl %al,%r8d
  6a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  6e:	48 83 c0 03          	add    $0x3,%rax
  72:	0f b6 00             	movzbl (%rax),%eax
  75:	0f b6 f8             	movzbl %al,%edi
  78:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7c:	48 83 c0 02          	add    $0x2,%rax
  80:	0f b6 00             	movzbl (%rax),%eax
  83:	0f b6 c8             	movzbl %al,%ecx
  86:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8a:	48 83 c0 01          	add    $0x1,%rax
  8e:	0f b6 00             	movzbl (%rax),%eax
  91:	0f b6 d0             	movzbl %al,%edx
  94:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  98:	0f b6 00             	movzbl (%rax),%eax
  9b:	0f b6 c0             	movzbl %al,%eax
  9e:	48 83 ec 08          	sub    $0x8,%rsp
  a2:	56                   	push   %rsi
  a3:	45 89 c1             	mov    %r8d,%r9d
  a6:	41 89 f8             	mov    %edi,%r8d
  a9:	89 c6                	mov    %eax,%esi
  ab:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # b2 <RDMMessage::Print(unsigned char const*)+0xb2>
  b2:	48 89 c7             	mov    %rax,%rdi
  b5:	b8 00 00 00 00       	mov    $0x0,%eax
  ba:	e8 00 00 00 00       	call   bf <RDMMessage::Print(unsigned char const*)+0xbf>
  bf:	48 83 c4 10          	add    $0x10,%rsp
  c3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  c7:	48 83 c0 03          	add    $0x3,%rax
  cb:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  cf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  d3:	48 83 c0 05          	add    $0x5,%rax
  d7:	0f b6 00             	movzbl (%rax),%eax
  da:	0f b6 f0             	movzbl %al,%esi
  dd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  e1:	48 83 c0 04          	add    $0x4,%rax
  e5:	0f b6 00             	movzbl (%rax),%eax
  e8:	44 0f b6 c0          	movzbl %al,%r8d
  ec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  f0:	48 83 c0 03          	add    $0x3,%rax
  f4:	0f b6 00             	movzbl (%rax),%eax
  f7:	0f b6 f8             	movzbl %al,%edi
  fa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  fe:	48 83 c0 02          	add    $0x2,%rax
 102:	0f b6 00             	movzbl (%rax),%eax
 105:	0f b6 c8             	movzbl %al,%ecx
 108:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 10c:	48 83 c0 01          	add    $0x1,%rax
 110:	0f b6 00             	movzbl (%rax),%eax
 113:	0f b6 d0             	movzbl %al,%edx
 116:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 11a:	0f b6 00             	movzbl (%rax),%eax
 11d:	0f b6 c0             	movzbl %al,%eax
 120:	48 83 ec 08          	sub    $0x8,%rsp
 124:	56                   	push   %rsi
 125:	45 89 c1             	mov    %r8d,%r9d
 128:	41 89 f8             	mov    %edi,%r8d
 12b:	89 c6                	mov    %eax,%esi
 12d:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 134 <RDMMessage::Print(unsigned char const*)+0x134>
 134:	48 89 c7             	mov    %rax,%rdi
 137:	b8 00 00 00 00       	mov    $0x0,%eax
 13c:	e8 00 00 00 00       	call   141 <RDMMessage::Print(unsigned char const*)+0x141>
 141:	48 83 c4 10          	add    $0x10,%rsp
 145:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
 149:	0f b6 40 14          	movzbl 0x14(%rax),%eax
 14d:	0f b6 c0             	movzbl %al,%eax
 150:	83 e8 10             	sub    $0x10,%eax
 153:	83 f8 21             	cmp    $0x21,%eax
 156:	0f 87 aa 00 00 00    	ja     206 <RDMMessage::Print(unsigned char const*)+0x206>
 15c:	89 c0                	mov    %eax,%eax
 15e:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
 165:	00 
 166:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 16d <RDMMessage::Print(unsigned char const*)+0x16d>
 16d:	8b 04 02             	mov    (%rdx,%rax,1),%eax
 170:	48 98                	cltq   
 172:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 179 <RDMMessage::Print(unsigned char const*)+0x179>
 179:	48 01 d0             	add    %rdx,%rax
 17c:	3e ff e0             	notrack jmp *%rax
 17f:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 186 <RDMMessage::Print(unsigned char const*)+0x186>
 186:	48 89 c7             	mov    %rax,%rdi
 189:	b8 00 00 00 00       	mov    $0x0,%eax
 18e:	e8 00 00 00 00       	call   193 <RDMMessage::Print(unsigned char const*)+0x193>
 193:	e9 90 00 00 00       	jmp    228 <RDMMessage::Print(unsigned char const*)+0x228>
 198:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 19f <RDMMessage::Print(unsigned char const*)+0x19f>
 19f:	48 89 c7             	mov    %rax,%rdi
 1a2:	b8 00 00 00 00       	mov    $0x0,%eax
 1a7:	e8 00 00 00 00       	call   1ac <RDMMessage::Print(unsigned char const*)+0x1ac>
 1ac:	eb 7a                	jmp    228 <RDMMessage::Print(unsigned char const*)+0x228>
 1ae:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 1b5 <RDMMessage::Print(unsigned char const*)+0x1b5>
 1b5:	48 89 c7             	mov    %rax,%rdi
 1b8:	b8 00 00 00 00       	mov    $0x0,%eax
 1bd:	e8 00 00 00 00       	call   1c2 <RDMMessage::Print(unsigned char const*)+0x1c2>
 1c2:	eb 64                	jmp    228 <RDMMessage::Print(unsigned char const*)+0x228>
 1c4:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 1cb <RDMMessage::Print(unsigned char const*)+0x1cb>
 1cb:	48 89 c7             	mov    %rax,%rdi
 1ce:	b8 00 00 00 00       	mov    $0x0,%eax
 1d3:	e8 00 00 00 00       	call   1d8 <RDMMessage::Print(unsigned char const*)+0x1d8>
 1d8:	eb 4e                	jmp    228 <RDMMessage::Print(unsigned char const*)+0x228>
 1da:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 1e1 <RDMMessage::Print(unsigned char const*)+0x1e1>
 1e1:	48 89 c7             	mov    %rax,%rdi
 1e4:	b8 00 00 00 00       	mov    $0x0,%eax
 1e9:	e8 00 00 00 00       	call   1ee <RDMMessage::Print(unsigned char const*)+0x1ee>
 1ee:	eb 38                	jmp    228 <RDMMessage::Print(unsigned char const*)+0x228>
 1f0:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 1f7 <RDMMessage::Print(unsigned char const*)+0x1f7>
 1f7:	48 89 c7             	mov    %rax,%rdi
 1fa:	b8 00 00 00 00       	mov    $0x0,%eax
 1ff:	e8 00 00 00 00       	call   204 <RDMMessage::Print(unsigned char const*)+0x204>
 204:	eb 22                	jmp    228 <RDMMessage::Print(unsigned char const*)+0x228>
 206:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
 20a:	0f b6 40 14          	movzbl 0x14(%rax),%eax
 20e:	0f b6 c0             	movzbl %al,%eax
 211:	89 c6                	mov    %eax,%esi
 213:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 21a <RDMMessage::Print(unsigned char const*)+0x21a>
 21a:	48 89 c7             	mov    %rax,%rdi
 21d:	b8 00 00 00 00       	mov    $0x0,%eax
 222:	e8 00 00 00 00       	call   227 <RDMMessage::Print(unsigned char const*)+0x227>
 227:	90                   	nop
 228:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
 22c:	0f b6 40 12          	movzbl 0x12(%rax),%eax
 230:	0f b6 c0             	movzbl %al,%eax
 233:	c1 e0 08             	shl    $0x8,%eax
 236:	89 c2                	mov    %eax,%edx
 238:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
 23c:	0f b6 40 13          	movzbl 0x13(%rax),%eax
 240:	0f b6 c0             	movzbl %al,%eax
 243:	01 d0                	add    %edx,%eax
 245:	66 89 45 d6          	mov    %ax,-0x2a(%rbp)
 249:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
 24d:	0f b6 40 17          	movzbl 0x17(%rax),%eax
 251:	0f b6 f8             	movzbl %al,%edi
 254:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
 258:	0f b6 40 16          	movzbl 0x16(%rax),%eax
 25c:	0f b6 f0             	movzbl %al,%esi
 25f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
 263:	0f b6 40 15          	movzbl 0x15(%rax),%eax
 267:	0f b6 c8             	movzbl %al,%ecx
 26a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
 26e:	0f b6 40 0f          	movzbl 0xf(%rax),%eax
 272:	0f b6 d0             	movzbl %al,%edx
 275:	0f b7 45 d6          	movzwl -0x2a(%rbp),%eax
 279:	41 89 f9             	mov    %edi,%r9d
 27c:	41 89 f0             	mov    %esi,%r8d
 27f:	89 c6                	mov    %eax,%esi
 281:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 288 <RDMMessage::Print(unsigned char const*)+0x288>
 288:	48 89 c7             	mov    %rax,%rdi
 28b:	b8 00 00 00 00       	mov    $0x0,%eax
 290:	e8 00 00 00 00       	call   295 <RDMMessage::Print(unsigned char const*)+0x295>
 295:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
 299:	0f b6 40 17          	movzbl 0x17(%rax),%eax
 29d:	84 c0                	test   %al,%al
 29f:	74 5c                	je     2fd <RDMMessage::Print(unsigned char const*)+0x2fd>
 2a1:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 2a8 <RDMMessage::Print(unsigned char const*)+0x2a8>
 2a8:	48 89 c7             	mov    %rax,%rdi
 2ab:	b8 00 00 00 00       	mov    $0x0,%eax
 2b0:	e8 00 00 00 00       	call   2b5 <RDMMessage::Print(unsigned char const*)+0x2b5>
 2b5:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%rbp)
 2bc:	eb 29                	jmp    2e7 <RDMMessage::Print(unsigned char const*)+0x2e7>
 2be:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
 2c2:	8b 45 d8             	mov    -0x28(%rbp),%eax
 2c5:	0f b6 44 02 18       	movzbl 0x18(%rdx,%rax,1),%eax
 2ca:	0f b6 c0             	movzbl %al,%eax
 2cd:	89 c6                	mov    %eax,%esi
 2cf:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 2d6 <RDMMessage::Print(unsigned char const*)+0x2d6>
 2d6:	48 89 c7             	mov    %rax,%rdi
 2d9:	b8 00 00 00 00       	mov    $0x0,%eax
 2de:	e8 00 00 00 00       	call   2e3 <RDMMessage::Print(unsigned char const*)+0x2e3>
 2e3:	83 45 d8 01          	addl   $0x1,-0x28(%rbp)
 2e7:	83 7d d8 0b          	cmpl   $0xb,-0x28(%rbp)
 2eb:	77 10                	ja     2fd <RDMMessage::Print(unsigned char const*)+0x2fd>
 2ed:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
 2f1:	0f b6 40 17          	movzbl 0x17(%rax),%eax
 2f5:	0f b6 c0             	movzbl %al,%eax
 2f8:	39 45 d8             	cmp    %eax,-0x28(%rbp)
 2fb:	72 c1                	jb     2be <RDMMessage::Print(unsigned char const*)+0x2be>
 2fd:	bf 0a 00 00 00       	mov    $0xa,%edi
 302:	e8 00 00 00 00       	call   307 <RDMMessage::Print(unsigned char const*)+0x307>
 307:	e9 a0 00 00 00       	jmp    3ac <RDMMessage::Print(unsigned char const*)+0x3ac>
 30c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 310:	0f b6 00             	movzbl (%rax),%eax
 313:	3c fe                	cmp    $0xfe,%al
 315:	75 45                	jne    35c <RDMMessage::Print(unsigned char const*)+0x35c>
 317:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%rbp)
 31e:	eb 2a                	jmp    34a <RDMMessage::Print(unsigned char const*)+0x34a>
 320:	8b 55 dc             	mov    -0x24(%rbp),%edx
 323:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 327:	48 01 d0             	add    %rdx,%rax
 32a:	0f b6 00             	movzbl (%rax),%eax
 32d:	0f b6 c0             	movzbl %al,%eax
 330:	89 c6                	mov    %eax,%esi
 332:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 339 <RDMMessage::Print(unsigned char const*)+0x339>
 339:	48 89 c7             	mov    %rax,%rdi
 33c:	b8 00 00 00 00       	mov    $0x0,%eax
 341:	e8 00 00 00 00       	call   346 <RDMMessage::Print(unsigned char const*)+0x346>
 346:	83 45 dc 01          	addl   $0x1,-0x24(%rbp)
 34a:	83 7d dc 17          	cmpl   $0x17,-0x24(%rbp)
 34e:	76 d0                	jbe    320 <RDMMessage::Print(unsigned char const*)+0x320>
 350:	bf 0a 00 00 00       	mov    $0xa,%edi
 355:	e8 00 00 00 00       	call   35a <RDMMessage::Print(unsigned char const*)+0x35a>
 35a:	eb 50                	jmp    3ac <RDMMessage::Print(unsigned char const*)+0x3ac>
 35c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 360:	48 83 c0 03          	add    $0x3,%rax
 364:	0f b6 00             	movzbl (%rax),%eax
 367:	0f b6 f0             	movzbl %al,%esi
 36a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 36e:	48 83 c0 02          	add    $0x2,%rax
 372:	0f b6 00             	movzbl (%rax),%eax
 375:	0f b6 c8             	movzbl %al,%ecx
 378:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 37c:	48 83 c0 01          	add    $0x1,%rax
 380:	0f b6 00             	movzbl (%rax),%eax
 383:	0f b6 d0             	movzbl %al,%edx
 386:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 38a:	0f b6 00             	movzbl (%rax),%eax
 38d:	0f b6 c0             	movzbl %al,%eax
 390:	41 89 f0             	mov    %esi,%r8d
 393:	89 c6                	mov    %eax,%esi
 395:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 39c <RDMMessage::Print(unsigned char const*)+0x39c>
 39c:	48 89 c7             	mov    %rax,%rdi
 39f:	b8 00 00 00 00       	mov    $0x0,%eax
 3a4:	e8 00 00 00 00       	call   3a9 <RDMMessage::Print(unsigned char const*)+0x3a9>
 3a9:	eb 01                	jmp    3ac <RDMMessage::Print(unsigned char const*)+0x3ac>
 3ab:	90                   	nop
 3ac:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 3b0:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 3b7:	00 00 
 3b9:	74 05                	je     3c0 <RDMMessage::Print(unsigned char const*)+0x3c0>
 3bb:	e8 00 00 00 00       	call   3c0 <RDMMessage::Print(unsigned char const*)+0x3c0>
 3c0:	c9                   	leave  
 3c1:	c3                   	ret    

rdmqueuedmessage.o:     file format elf64-x86-64


Disassembly of section .text._ZN16RDMQueuedMessageC2Ev:

0000000000000000 <RDMQueuedMessage::RDMQueuedMessage()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	c6 00 00             	movb   $0x0,(%rax)
  26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2a:	c6 40 01 01          	movb   $0x1,0x1(%rax)
  2e:	bf 15 ea 00 00       	mov    $0xea15,%edi
  33:	e8 00 00 00 00       	call   38 <RDMQueuedMessage::RDMQueuedMessage()+0x38>
  38:	48 89 c2             	mov    %rax,%rdx
  3b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3f:	48 89 50 08          	mov    %rdx,0x8(%rax)
  43:	90                   	nop
  44:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  48:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  4f:	00 00 
  51:	74 05                	je     58 <RDMQueuedMessage::RDMQueuedMessage()+0x58>
  53:	e8 00 00 00 00       	call   58 <RDMQueuedMessage::RDMQueuedMessage()+0x58>
  58:	c9                   	leave  
  59:	c3                   	ret    

Disassembly of section .text._ZN16RDMQueuedMessageD2Ev:

0000000000000000 <RDMQueuedMessage::~RDMQueuedMessage()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	48 8b 40 08          	mov    0x8(%rax),%rax
  27:	48 85 c0             	test   %rax,%rax
  2a:	74 10                	je     3c <RDMQueuedMessage::~RDMQueuedMessage()+0x3c>
  2c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  30:	48 8b 40 08          	mov    0x8(%rax),%rax
  34:	48 89 c7             	mov    %rax,%rdi
  37:	e8 00 00 00 00       	call   3c <RDMQueuedMessage::~RDMQueuedMessage()+0x3c>
  3c:	90                   	nop
  3d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  48:	00 00 
  4a:	74 05                	je     51 <RDMQueuedMessage::~RDMQueuedMessage()+0x51>
  4c:	e8 00 00 00 00       	call   51 <RDMQueuedMessage::~RDMQueuedMessage()+0x51>
  51:	c9                   	leave  
  52:	c3                   	ret    

Disassembly of section .text._ZN16RDMQueuedMessage4CopyEP11TRdmMessagej:

0000000000000000 <RDMQueuedMessage::Copy(TRdmMessage*, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  14:	89 55 dc             	mov    %edx,-0x24(%rbp)
  17:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1e:	00 00 
  20:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  24:	31 c0                	xor    %eax,%eax
  26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2a:	48 8b 50 08          	mov    0x8(%rax),%rdx
  2e:	8b 45 dc             	mov    -0x24(%rbp),%eax
  31:	48 69 c0 eb 00 00 00 	imul   $0xeb,%rax,%rax
  38:	48 01 d0             	add    %rdx,%rax
  3b:	0f b6 10             	movzbl (%rax),%edx
  3e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  42:	88 50 14             	mov    %dl,0x14(%rax)
  45:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  49:	48 8b 50 08          	mov    0x8(%rax),%rdx
  4d:	8b 45 dc             	mov    -0x24(%rbp),%eax
  50:	48 69 c0 eb 00 00 00 	imul   $0xeb,%rax,%rax
  57:	48 01 d0             	add    %rdx,%rax
  5a:	0f b6 50 01          	movzbl 0x1(%rax),%edx
  5e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  62:	88 50 15             	mov    %dl,0x15(%rax)
  65:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  69:	48 8b 50 08          	mov    0x8(%rax),%rdx
  6d:	8b 45 dc             	mov    -0x24(%rbp),%eax
  70:	48 69 c0 eb 00 00 00 	imul   $0xeb,%rax,%rax
  77:	48 01 d0             	add    %rdx,%rax
  7a:	0f b6 50 02          	movzbl 0x2(%rax),%edx
  7e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  82:	88 50 16             	mov    %dl,0x16(%rax)
  85:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  89:	48 8b 50 08          	mov    0x8(%rax),%rdx
  8d:	8b 45 dc             	mov    -0x24(%rbp),%eax
  90:	48 69 c0 eb 00 00 00 	imul   $0xeb,%rax,%rax
  97:	48 01 d0             	add    %rdx,%rax
  9a:	0f b6 50 03          	movzbl 0x3(%rax),%edx
  9e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  a2:	88 50 17             	mov    %dl,0x17(%rax)
  a5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  ac:	eb 2c                	jmp    da <RDMQueuedMessage::Copy(TRdmMessage*, unsigned int)+0xda>
  ae:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  b2:	48 8b 50 08          	mov    0x8(%rax),%rdx
  b6:	8b 45 dc             	mov    -0x24(%rbp),%eax
  b9:	48 69 c0 eb 00 00 00 	imul   $0xeb,%rax,%rax
  c0:	48 01 c2             	add    %rax,%rdx
  c3:	8b 45 f4             	mov    -0xc(%rbp),%eax
  c6:	0f b6 4c 02 04       	movzbl 0x4(%rdx,%rax,1),%ecx
  cb:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  cf:	8b 45 f4             	mov    -0xc(%rbp),%eax
  d2:	88 4c 02 18          	mov    %cl,0x18(%rdx,%rax,1)
  d6:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  da:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  de:	0f b6 40 17          	movzbl 0x17(%rax),%eax
  e2:	0f b6 c0             	movzbl %al,%eax
  e5:	39 45 f4             	cmp    %eax,-0xc(%rbp)
  e8:	72 c4                	jb     ae <RDMQueuedMessage::Copy(TRdmMessage*, unsigned int)+0xae>
  ea:	90                   	nop
  eb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  ef:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  f6:	00 00 
  f8:	74 05                	je     ff <RDMQueuedMessage::Copy(TRdmMessage*, unsigned int)+0xff>
  fa:	e8 00 00 00 00       	call   ff <RDMQueuedMessage::Copy(TRdmMessage*, unsigned int)+0xff>
  ff:	c9                   	leave  
 100:	c3                   	ret    

Disassembly of section .text._ZNK16RDMQueuedMessage15GetMessageCountEv:

0000000000000000 <RDMQueuedMessage::GetMessageCount() const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	0f b6 00             	movzbl (%rax),%eax
  26:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  2a:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  31:	00 00 
  33:	74 05                	je     3a <RDMQueuedMessage::GetMessageCount() const+0x3a>
  35:	e8 00 00 00 00       	call   3a <RDMQueuedMessage::GetMessageCount() const+0x3a>
  3a:	c9                   	leave  
  3b:	c3                   	ret    

Disassembly of section .text._ZN16RDMQueuedMessage7HandlerEPh:

0000000000000000 <RDMQueuedMessage::Handler(unsigned char*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  27:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  2b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2f:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  33:	84 c0                	test   %al,%al
  35:	74 12                	je     49 <RDMQueuedMessage::Handler(unsigned char*)+0x49>
  37:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  3b:	c6 40 10 30          	movb   $0x30,0x10(%rax)
  3f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  43:	c6 40 17 00          	movb   $0x0,0x17(%rax)
  47:	eb 75                	jmp    be <RDMQueuedMessage::Handler(unsigned char*)+0xbe>
  49:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4d:	0f b6 40 18          	movzbl 0x18(%rax),%eax
  51:	3c 01                	cmp    $0x1,%al
  53:	75 1f                	jne    74 <RDMQueuedMessage::Handler(unsigned char*)+0x74>
  55:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  59:	0f b6 00             	movzbl (%rax),%eax
  5c:	0f b6 d0             	movzbl %al,%edx
  5f:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  63:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  67:	48 89 ce             	mov    %rcx,%rsi
  6a:	48 89 c7             	mov    %rax,%rdi
  6d:	e8 00 00 00 00       	call   72 <RDMQueuedMessage::Handler(unsigned char*)+0x72>
  72:	eb 4a                	jmp    be <RDMQueuedMessage::Handler(unsigned char*)+0xbe>
  74:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  78:	0f b6 00             	movzbl (%rax),%eax
  7b:	84 c0                	test   %al,%al
  7d:	74 2f                	je     ae <RDMQueuedMessage::Handler(unsigned char*)+0xae>
  7f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  83:	0f b6 00             	movzbl (%rax),%eax
  86:	8d 50 ff             	lea    -0x1(%rax),%edx
  89:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8d:	88 10                	mov    %dl,(%rax)
  8f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  93:	0f b6 00             	movzbl (%rax),%eax
  96:	0f b6 d0             	movzbl %al,%edx
  99:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  9d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  a1:	48 89 ce             	mov    %rcx,%rsi
  a4:	48 89 c7             	mov    %rax,%rdi
  a7:	e8 00 00 00 00       	call   ac <RDMQueuedMessage::Handler(unsigned char*)+0xac>
  ac:	eb 10                	jmp    be <RDMQueuedMessage::Handler(unsigned char*)+0xbe>
  ae:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  b2:	c6 40 10 30          	movb   $0x30,0x10(%rax)
  b6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  ba:	c6 40 17 00          	movb   $0x0,0x17(%rax)
  be:	90                   	nop
  bf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  c3:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  ca:	00 00 
  cc:	74 05                	je     d3 <RDMQueuedMessage::Handler(unsigned char*)+0xd3>
  ce:	e8 00 00 00 00       	call   d3 <RDMQueuedMessage::Handler(unsigned char*)+0xd3>
  d3:	c9                   	leave  
  d4:	c3                   	ret    

Disassembly of section .text._ZN16RDMQueuedMessage3AddEPK17TRdmQueuedMessage:

0000000000000000 <RDMQueuedMessage::Add(TRdmQueuedMessage const*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  27:	c6 40 01 00          	movb   $0x0,0x1(%rax)
  2b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2f:	0f b6 00             	movzbl (%rax),%eax
  32:	3c ff                	cmp    $0xff,%al
  34:	0f 84 fe 00 00 00    	je     138 <RDMQueuedMessage::Add(TRdmQueuedMessage const*)+0x138>
  3a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3e:	48 8b 50 08          	mov    0x8(%rax),%rdx
  42:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  46:	0f b6 00             	movzbl (%rax),%eax
  49:	0f b6 c0             	movzbl %al,%eax
  4c:	48 69 c0 eb 00 00 00 	imul   $0xeb,%rax,%rax
  53:	48 01 c2             	add    %rax,%rdx
  56:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  5a:	0f b6 00             	movzbl (%rax),%eax
  5d:	88 02                	mov    %al,(%rdx)
  5f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  63:	48 8b 50 08          	mov    0x8(%rax),%rdx
  67:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  6b:	0f b6 00             	movzbl (%rax),%eax
  6e:	0f b6 c0             	movzbl %al,%eax
  71:	48 69 c0 eb 00 00 00 	imul   $0xeb,%rax,%rax
  78:	48 01 c2             	add    %rax,%rdx
  7b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  7f:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  83:	88 42 01             	mov    %al,0x1(%rdx)
  86:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8a:	48 8b 50 08          	mov    0x8(%rax),%rdx
  8e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  92:	0f b6 00             	movzbl (%rax),%eax
  95:	0f b6 c0             	movzbl %al,%eax
  98:	48 69 c0 eb 00 00 00 	imul   $0xeb,%rax,%rax
  9f:	48 01 c2             	add    %rax,%rdx
  a2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  a6:	0f b6 40 02          	movzbl 0x2(%rax),%eax
  aa:	88 42 02             	mov    %al,0x2(%rdx)
  ad:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  b1:	48 8b 50 08          	mov    0x8(%rax),%rdx
  b5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  b9:	0f b6 00             	movzbl (%rax),%eax
  bc:	0f b6 c0             	movzbl %al,%eax
  bf:	48 69 c0 eb 00 00 00 	imul   $0xeb,%rax,%rax
  c6:	48 01 c2             	add    %rax,%rdx
  c9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  cd:	0f b6 40 03          	movzbl 0x3(%rax),%eax
  d1:	88 42 03             	mov    %al,0x3(%rdx)
  d4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  db:	eb 34                	jmp    111 <RDMQueuedMessage::Add(TRdmQueuedMessage const*)+0x111>
  dd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  e1:	48 8b 50 08          	mov    0x8(%rax),%rdx
  e5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  e9:	0f b6 00             	movzbl (%rax),%eax
  ec:	0f b6 c0             	movzbl %al,%eax
  ef:	48 69 c0 eb 00 00 00 	imul   $0xeb,%rax,%rax
  f6:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  fa:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  fe:	8b 45 f4             	mov    -0xc(%rbp),%eax
 101:	0f b6 54 02 04       	movzbl 0x4(%rdx,%rax,1),%edx
 106:	8b 45 f4             	mov    -0xc(%rbp),%eax
 109:	88 54 01 04          	mov    %dl,0x4(%rcx,%rax,1)
 10d:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
 111:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
 115:	0f b6 40 03          	movzbl 0x3(%rax),%eax
 119:	0f b6 c0             	movzbl %al,%eax
 11c:	39 45 f4             	cmp    %eax,-0xc(%rbp)
 11f:	72 bc                	jb     dd <RDMQueuedMessage::Add(TRdmQueuedMessage const*)+0xdd>
 121:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 125:	0f b6 00             	movzbl (%rax),%eax
 128:	8d 50 01             	lea    0x1(%rax),%edx
 12b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 12f:	88 10                	mov    %dl,(%rax)
 131:	b8 01 00 00 00       	mov    $0x1,%eax
 136:	eb 05                	jmp    13d <RDMQueuedMessage::Add(TRdmQueuedMessage const*)+0x13d>
 138:	b8 00 00 00 00       	mov    $0x0,%eax
 13d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
 141:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
 148:	00 00 
 14a:	74 05                	je     151 <RDMQueuedMessage::Add(TRdmQueuedMessage const*)+0x151>
 14c:	e8 00 00 00 00       	call   151 <RDMQueuedMessage::Add(TRdmQueuedMessage const*)+0x151>
 151:	c9                   	leave  
 152:	c3                   	ret    

rdmslotinfo.o:     file format elf64-x86-64


Disassembly of section .text._ZN11RDMSlotInfo11GetTypeTextEhRj:

0000000000000000 <RDMSlotInfo::GetTypeText(unsigned char, unsigned int&)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	89 f8                	mov    %edi,%eax
   e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  12:	88 45 ec             	mov    %al,-0x14(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  2b:	eb 5f                	jmp    8c <RDMSlotInfo::GetTypeText(unsigned char, unsigned int&)+0x8c>
  2d:	0f b6 45 ec          	movzbl -0x14(%rbp),%eax
  31:	8b 55 f4             	mov    -0xc(%rbp),%edx
  34:	48 89 d1             	mov    %rdx,%rcx
  37:	48 c1 e1 04          	shl    $0x4,%rcx
  3b:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 42 <RDMSlotInfo::GetTypeText(unsigned char, unsigned int&)+0x42>
  42:	8b 14 11             	mov    (%rcx,%rdx,1),%edx
  45:	39 d0                	cmp    %edx,%eax
  47:	75 3f                	jne    88 <RDMSlotInfo::GetTypeText(unsigned char, unsigned int&)+0x88>
  49:	8b 45 f4             	mov    -0xc(%rbp),%eax
  4c:	48 c1 e0 04          	shl    $0x4,%rax
  50:	48 89 c2             	mov    %rax,%rdx
  53:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 5a <RDMSlotInfo::GetTypeText(unsigned char, unsigned int&)+0x5a>
  5a:	48 8b 44 02 08       	mov    0x8(%rdx,%rax,1),%rax
  5f:	48 89 c7             	mov    %rax,%rdi
  62:	e8 00 00 00 00       	call   67 <RDMSlotInfo::GetTypeText(unsigned char, unsigned int&)+0x67>
  67:	0f b7 d0             	movzwl %ax,%edx
  6a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  6e:	89 10                	mov    %edx,(%rax)
  70:	8b 45 f4             	mov    -0xc(%rbp),%eax
  73:	48 c1 e0 04          	shl    $0x4,%rax
  77:	48 89 c2             	mov    %rax,%rdx
  7a:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 81 <RDMSlotInfo::GetTypeText(unsigned char, unsigned int&)+0x81>
  81:	48 8b 44 02 08       	mov    0x8(%rdx,%rax,1),%rax
  86:	eb 1f                	jmp    a7 <RDMSlotInfo::GetTypeText(unsigned char, unsigned int&)+0xa7>
  88:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  8c:	83 7d f4 08          	cmpl   $0x8,-0xc(%rbp)
  90:	76 9b                	jbe    2d <RDMSlotInfo::GetTypeText(unsigned char, unsigned int&)+0x2d>
  92:	b8 18 00 00 00       	mov    $0x18,%eax
  97:	0f b7 d0             	movzwl %ax,%edx
  9a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  9e:	89 10                	mov    %edx,(%rax)
  a0:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # a7 <RDMSlotInfo::GetTypeText(unsigned char, unsigned int&)+0xa7>
  a7:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  ab:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  b2:	00 00 
  b4:	74 05                	je     bb <RDMSlotInfo::GetTypeText(unsigned char, unsigned int&)+0xbb>
  b6:	e8 00 00 00 00       	call   bb <RDMSlotInfo::GetTypeText(unsigned char, unsigned int&)+0xbb>
  bb:	c9                   	leave  
  bc:	c3                   	ret    

Disassembly of section .text._ZN11RDMSlotInfo15GetCategoryTextEttRj:

0000000000000000 <RDMSlotInfo::GetCategoryText(unsigned short, unsigned short, unsigned int&)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	89 f9                	mov    %edi,%ecx
   e:	89 f0                	mov    %esi,%eax
  10:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
  14:	89 ca                	mov    %ecx,%edx
  16:	66 89 55 ec          	mov    %dx,-0x14(%rbp)
  1a:	66 89 45 e8          	mov    %ax,-0x18(%rbp)
  1e:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  25:	00 00 
  27:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  2b:	31 c0                	xor    %eax,%eax
  2d:	66 83 7d e8 ff       	cmpw   $0xffff,-0x18(%rbp)
  32:	75 14                	jne    48 <RDMSlotInfo::GetCategoryText(unsigned short, unsigned short, unsigned int&)+0x48>
  34:	0f b7 45 ec          	movzwl -0x14(%rbp),%eax
  38:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  3c:	48 89 d6             	mov    %rdx,%rsi
  3f:	89 c7                	mov    %eax,%edi
  41:	e8 00 00 00 00       	call   46 <RDMSlotInfo::GetCategoryText(unsigned short, unsigned short, unsigned int&)+0x46>
  46:	eb 66                	jmp    ae <RDMSlotInfo::GetCategoryText(unsigned short, unsigned short, unsigned int&)+0xae>
  48:	0f b7 45 e8          	movzwl -0x18(%rbp),%eax
  4c:	89 c7                	mov    %eax,%edi
  4e:	e8 00 00 00 00       	call   53 <RDMSlotInfo::GetCategoryText(unsigned short, unsigned short, unsigned int&)+0x53>
  53:	89 45 f4             	mov    %eax,-0xc(%rbp)
  56:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
  5a:	79 11                	jns    6d <RDMSlotInfo::GetCategoryText(unsigned short, unsigned short, unsigned int&)+0x6d>
  5c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  60:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
  66:	b8 00 00 00 00       	mov    $0x0,%eax
  6b:	eb 41                	jmp    ae <RDMSlotInfo::GetCategoryText(unsigned short, unsigned short, unsigned int&)+0xae>
  6d:	8b 45 f4             	mov    -0xc(%rbp),%eax
  70:	48 98                	cltq   
  72:	48 c1 e0 04          	shl    $0x4,%rax
  76:	48 89 c2             	mov    %rax,%rdx
  79:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 80 <RDMSlotInfo::GetCategoryText(unsigned short, unsigned short, unsigned int&)+0x80>
  80:	48 8b 44 02 08       	mov    0x8(%rdx,%rax,1),%rax
  85:	48 89 c7             	mov    %rax,%rdi
  88:	e8 00 00 00 00       	call   8d <RDMSlotInfo::GetCategoryText(unsigned short, unsigned short, unsigned int&)+0x8d>
  8d:	0f b7 d0             	movzwl %ax,%edx
  90:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  94:	89 10                	mov    %edx,(%rax)
  96:	8b 45 f4             	mov    -0xc(%rbp),%eax
  99:	48 98                	cltq   
  9b:	48 c1 e0 04          	shl    $0x4,%rax
  9f:	48 89 c2             	mov    %rax,%rdx
  a2:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # a9 <RDMSlotInfo::GetCategoryText(unsigned short, unsigned short, unsigned int&)+0xa9>
  a9:	48 8b 44 02 08       	mov    0x8(%rdx,%rax,1),%rax
  ae:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  b2:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  b9:	00 00 
  bb:	74 05                	je     c2 <RDMSlotInfo::GetCategoryText(unsigned short, unsigned short, unsigned int&)+0xc2>
  bd:	e8 00 00 00 00       	call   c2 <RDMSlotInfo::GetCategoryText(unsigned short, unsigned short, unsigned int&)+0xc2>
  c2:	c9                   	leave  
  c3:	c3                   	ret    

Disassembly of section .text._ZN11RDMSlotInfo24GetCategoryTextUndefinedEtRj:

0000000000000000 <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	89 f8                	mov    %edi,%eax
   e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  12:	66 89 45 ec          	mov    %ax,-0x14(%rbp)
  16:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1d:	00 00 
  1f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  23:	31 c0                	xor    %eax,%eax
  25:	c7 45 f4 27 00 00 00 	movl   $0x27,-0xc(%rbp)
  2c:	b8 0d 00 00 00       	mov    $0xd,%eax
  31:	0f b7 d0             	movzwl %ax,%edx
  34:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  38:	89 10                	mov    %edx,(%rax)
  3a:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 41 <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)+0x41>
  41:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  45:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  4c:	00 00 
  4e:	74 05                	je     55 <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)+0x55>
  50:	e8 00 00 00 00       	call   55 <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)+0x55>
  55:	c9                   	leave  
  56:	c3                   	ret    

Disassembly of section .text._ZN11RDMSlotInfo7bsearchEt:

0000000000000000 <RDMSlotInfo::bsearch(unsigned short)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	89 f8                	mov    %edi,%eax
   e:	66 89 45 dc          	mov    %ax,-0x24(%rbp)
  12:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  19:	00 00 
  1b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1f:	31 c0                	xor    %eax,%eax
  21:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%rbp)
  28:	c7 45 ec 28 00 00 00 	movl   $0x28,-0x14(%rbp)
  2f:	eb 5f                	jmp    90 <RDMSlotInfo::bsearch(unsigned short)+0x90>
  31:	8b 45 ec             	mov    -0x14(%rbp),%eax
  34:	2b 45 e8             	sub    -0x18(%rbp),%eax
  37:	89 c2                	mov    %eax,%edx
  39:	c1 ea 1f             	shr    $0x1f,%edx
  3c:	01 d0                	add    %edx,%eax
  3e:	d1 f8                	sar    %eax
  40:	89 c2                	mov    %eax,%edx
  42:	8b 45 e8             	mov    -0x18(%rbp),%eax
  45:	01 d0                	add    %edx,%eax
  47:	89 45 f0             	mov    %eax,-0x10(%rbp)
  4a:	8b 45 f0             	mov    -0x10(%rbp),%eax
  4d:	48 98                	cltq   
  4f:	48 c1 e0 04          	shl    $0x4,%rax
  53:	48 89 c2             	mov    %rax,%rdx
  56:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 5d <RDMSlotInfo::bsearch(unsigned short)+0x5d>
  5d:	8b 04 02             	mov    (%rdx,%rax,1),%eax
  60:	89 45 f4             	mov    %eax,-0xc(%rbp)
  63:	0f b7 45 dc          	movzwl -0x24(%rbp),%eax
  67:	39 45 f4             	cmp    %eax,-0xc(%rbp)
  6a:	7d 0b                	jge    77 <RDMSlotInfo::bsearch(unsigned short)+0x77>
  6c:	8b 45 f0             	mov    -0x10(%rbp),%eax
  6f:	83 c0 01             	add    $0x1,%eax
  72:	89 45 e8             	mov    %eax,-0x18(%rbp)
  75:	eb 19                	jmp    90 <RDMSlotInfo::bsearch(unsigned short)+0x90>
  77:	0f b7 45 dc          	movzwl -0x24(%rbp),%eax
  7b:	39 45 f4             	cmp    %eax,-0xc(%rbp)
  7e:	7e 0b                	jle    8b <RDMSlotInfo::bsearch(unsigned short)+0x8b>
  80:	8b 45 f0             	mov    -0x10(%rbp),%eax
  83:	83 e8 01             	sub    $0x1,%eax
  86:	89 45 ec             	mov    %eax,-0x14(%rbp)
  89:	eb 05                	jmp    90 <RDMSlotInfo::bsearch(unsigned short)+0x90>
  8b:	8b 45 f0             	mov    -0x10(%rbp),%eax
  8e:	eb 0d                	jmp    9d <RDMSlotInfo::bsearch(unsigned short)+0x9d>
  90:	8b 45 e8             	mov    -0x18(%rbp),%eax
  93:	3b 45 ec             	cmp    -0x14(%rbp),%eax
  96:	7e 99                	jle    31 <RDMSlotInfo::bsearch(unsigned short)+0x31>
  98:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  9d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  a1:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  a8:	00 00 
  aa:	74 05                	je     b1 <RDMSlotInfo::bsearch(unsigned short)+0xb1>
  ac:	e8 00 00 00 00       	call   b1 <RDMSlotInfo::bsearch(unsigned short)+0xb1>
  b1:	c9                   	leave  
  b2:	c3                   	ret    

In archive lib_linux/libe131.a:

e117const.o:     file format elf64-x86-64


e131bridgeconst.o:     file format elf64-x86-64


e131bridge.o:     file format elf64-x86-64


Disassembly of section .text._ZN7networkL15convert_to_uintEhhhh:

0000000000000000 <network::convert_to_uint(unsigned char, unsigned char, unsigned char, unsigned char)>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	89 c8                	mov    %ecx,%eax
   a:	89 f9                	mov    %edi,%ecx
   c:	88 4d ec             	mov    %cl,-0x14(%rbp)
   f:	89 f1                	mov    %esi,%ecx
  11:	88 4d e8             	mov    %cl,-0x18(%rbp)
  14:	88 55 e4             	mov    %dl,-0x1c(%rbp)
  17:	88 45 e0             	mov    %al,-0x20(%rbp)
  1a:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  21:	00 00 
  23:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  27:	31 c0                	xor    %eax,%eax
  29:	0f b6 55 ec          	movzbl -0x14(%rbp),%edx
  2d:	0f b6 45 e8          	movzbl -0x18(%rbp),%eax
  31:	c1 e0 08             	shl    $0x8,%eax
  34:	09 c2                	or     %eax,%edx
  36:	0f b6 45 e4          	movzbl -0x1c(%rbp),%eax
  3a:	c1 e0 10             	shl    $0x10,%eax
  3d:	09 c2                	or     %eax,%edx
  3f:	0f b6 45 e0          	movzbl -0x20(%rbp),%eax
  43:	c1 e0 18             	shl    $0x18,%eax
  46:	09 d0                	or     %edx,%eax
  48:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  4c:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  53:	00 00 
  55:	74 05                	je     5c <network::convert_to_uint(unsigned char, unsigned char, unsigned char, unsigned char)+0x5c>
  57:	e8 00 00 00 00       	call   5c <network::convert_to_uint(unsigned char, unsigned char, unsigned char, unsigned char)+0x5c>
  5c:	c9                   	leave  
  5d:	c3                   	ret    

Disassembly of section .text._ZNK7Network5GetIpEv:

0000000000000000 <Network::GetIp() const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	8b 40 10             	mov    0x10(%rax),%eax
  26:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  2a:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  31:	00 00 
  33:	74 05                	je     3a <Network::GetIp() const+0x3a>
  35:	e8 00 00 00 00       	call   3a <Network::GetIp() const+0x3a>
  3a:	c9                   	leave  
  3b:	c3                   	ret    

Disassembly of section .text._ZN7Network3GetEv:

0000000000000000 <Network::Get()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 22 <Network::Get()+0x22>
  22:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  26:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  2d:	00 00 
  2f:	74 05                	je     36 <Network::Get()+0x36>
  31:	e8 00 00 00 00       	call   36 <Network::Get()+0x36>
  36:	c9                   	leave  
  37:	c3                   	ret    

Disassembly of section .text._ZN4e131L24universe_to_multicast_ipEt:

0000000000000000 <e131::universe_to_multicast_ip(unsigned short)>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	89 f8                	mov    %edi,%eax
   a:	66 89 45 ec          	mov    %ax,-0x14(%rbp)
   e:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  15:	00 00 
  17:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1b:	31 c0                	xor    %eax,%eax
  1d:	b9 00 00 00 00       	mov    $0x0,%ecx
  22:	ba 00 00 00 00       	mov    $0x0,%edx
  27:	be ff 00 00 00       	mov    $0xff,%esi
  2c:	bf ef 00 00 00       	mov    $0xef,%edi
  31:	e8 00 00 00 00       	call   36 <e131::universe_to_multicast_ip(unsigned short)+0x36>
  36:	89 c2                	mov    %eax,%edx
  38:	0f b7 45 ec          	movzwl -0x14(%rbp),%eax
  3c:	c1 e0 18             	shl    $0x18,%eax
  3f:	09 c2                	or     %eax,%edx
  41:	0f b7 45 ec          	movzwl -0x14(%rbp),%eax
  45:	c1 e0 08             	shl    $0x8,%eax
  48:	25 00 00 ff 00       	and    $0xff0000,%eax
  4d:	09 d0                	or     %edx,%eax
  4f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  53:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  5a:	00 00 
  5c:	74 05                	je     63 <e131::universe_to_multicast_ip(unsigned short)+0x63>
  5e:	e8 00 00 00 00       	call   63 <e131::universe_to_multicast_ip(unsigned short)+0x63>
  63:	c9                   	leave  
  64:	c3                   	ret    

Disassembly of section .text._ZN8lightset4Data3GetEv:

0000000000000000 <lightset::Data::Get()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	0f b6 05 00 00 00 00 	movzbl 0x0(%rip),%eax        # 22 <lightset::Data::Get()+0x22>
  22:	84 c0                	test   %al,%al
  24:	0f 94 c0             	sete   %al
  27:	84 c0                	test   %al,%al
  29:	74 36                	je     61 <lightset::Data::Get()+0x61>
  2b:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 32 <lightset::Data::Get()+0x32>
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	call   3a <lightset::Data::Get()+0x3a>
  3a:	85 c0                	test   %eax,%eax
  3c:	0f 95 c0             	setne  %al
  3f:	84 c0                	test   %al,%al
  41:	74 1e                	je     61 <lightset::Data::Get()+0x61>
  43:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 4a <lightset::Data::Get()+0x4a>
  4a:	48 89 c7             	mov    %rax,%rdi
  4d:	e8 00 00 00 00       	call   52 <lightset::Data::Get()+0x52>
  52:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 59 <lightset::Data::Get()+0x59>
  59:	48 89 c7             	mov    %rax,%rdi
  5c:	e8 00 00 00 00       	call   61 <lightset::Data::Get()+0x61>
  61:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 68 <lightset::Data::Get()+0x68>
  68:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  6c:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  73:	00 00 
  75:	74 05                	je     7c <lightset::Data::Get()+0x7c>
  77:	e8 00 00 00 00       	call   7c <lightset::Data::Get()+0x7c>
  7c:	c9                   	leave  
  7d:	c3                   	ret    

Disassembly of section .text._ZN8lightset4Data10SetSourceAEjPKhj:

0000000000000000 <lightset::Data::SetSourceA(unsigned int, unsigned char const*, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	89 7d ec             	mov    %edi,-0x14(%rbp)
   f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  13:	89 55 e8             	mov    %edx,-0x18(%rbp)
  16:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1d:	00 00 
  1f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  23:	31 c0                	xor    %eax,%eax
  25:	e8 00 00 00 00       	call   2a <lightset::Data::SetSourceA(unsigned int, unsigned char const*, unsigned int)+0x2a>
  2a:	48 89 c7             	mov    %rax,%rdi
  2d:	8b 4d e8             	mov    -0x18(%rbp),%ecx
  30:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  34:	8b 45 ec             	mov    -0x14(%rbp),%eax
  37:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  3d:	89 c6                	mov    %eax,%esi
  3f:	e8 00 00 00 00       	call   44 <lightset::Data::SetSourceA(unsigned int, unsigned char const*, unsigned int)+0x44>
  44:	90                   	nop
  45:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  49:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  50:	00 00 
  52:	74 05                	je     59 <lightset::Data::SetSourceA(unsigned int, unsigned char const*, unsigned int)+0x59>
  54:	e8 00 00 00 00       	call   59 <lightset::Data::SetSourceA(unsigned int, unsigned char const*, unsigned int)+0x59>
  59:	c9                   	leave  
  5a:	c3                   	ret    

Disassembly of section .text._ZN8lightset4Data12MergeSourceAEjPKhjNS_9MergeModeE:

0000000000000000 <lightset::Data::MergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	89 7d ec             	mov    %edi,-0x14(%rbp)
   f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  13:	89 55 e8             	mov    %edx,-0x18(%rbp)
  16:	89 4d dc             	mov    %ecx,-0x24(%rbp)
  19:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  20:	00 00 
  22:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  26:	31 c0                	xor    %eax,%eax
  28:	e8 00 00 00 00       	call   2d <lightset::Data::MergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)+0x2d>
  2d:	48 89 c7             	mov    %rax,%rdi
  30:	8b 75 dc             	mov    -0x24(%rbp),%esi
  33:	8b 4d e8             	mov    -0x18(%rbp),%ecx
  36:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  3a:	8b 45 ec             	mov    -0x14(%rbp),%eax
  3d:	41 89 f0             	mov    %esi,%r8d
  40:	89 c6                	mov    %eax,%esi
  42:	e8 00 00 00 00       	call   47 <lightset::Data::MergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)+0x47>
  47:	90                   	nop
  48:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4c:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  53:	00 00 
  55:	74 05                	je     5c <lightset::Data::MergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)+0x5c>
  57:	e8 00 00 00 00       	call   5c <lightset::Data::MergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)+0x5c>
  5c:	c9                   	leave  
  5d:	c3                   	ret    

Disassembly of section .text._ZN8lightset4Data10SetSourceBEjPKhj:

0000000000000000 <lightset::Data::SetSourceB(unsigned int, unsigned char const*, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	89 7d ec             	mov    %edi,-0x14(%rbp)
   f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  13:	89 55 e8             	mov    %edx,-0x18(%rbp)
  16:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1d:	00 00 
  1f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  23:	31 c0                	xor    %eax,%eax
  25:	e8 00 00 00 00       	call   2a <lightset::Data::SetSourceB(unsigned int, unsigned char const*, unsigned int)+0x2a>
  2a:	48 89 c7             	mov    %rax,%rdi
  2d:	8b 4d e8             	mov    -0x18(%rbp),%ecx
  30:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  34:	8b 45 ec             	mov    -0x14(%rbp),%eax
  37:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  3d:	89 c6                	mov    %eax,%esi
  3f:	e8 00 00 00 00       	call   44 <lightset::Data::SetSourceB(unsigned int, unsigned char const*, unsigned int)+0x44>
  44:	90                   	nop
  45:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  49:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  50:	00 00 
  52:	74 05                	je     59 <lightset::Data::SetSourceB(unsigned int, unsigned char const*, unsigned int)+0x59>
  54:	e8 00 00 00 00       	call   59 <lightset::Data::SetSourceB(unsigned int, unsigned char const*, unsigned int)+0x59>
  59:	c9                   	leave  
  5a:	c3                   	ret    

Disassembly of section .text._ZN8lightset4Data12MergeSourceBEjPKhjNS_9MergeModeE:

0000000000000000 <lightset::Data::MergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	89 7d ec             	mov    %edi,-0x14(%rbp)
   f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  13:	89 55 e8             	mov    %edx,-0x18(%rbp)
  16:	89 4d dc             	mov    %ecx,-0x24(%rbp)
  19:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  20:	00 00 
  22:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  26:	31 c0                	xor    %eax,%eax
  28:	e8 00 00 00 00       	call   2d <lightset::Data::MergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)+0x2d>
  2d:	48 89 c7             	mov    %rax,%rdi
  30:	8b 75 dc             	mov    -0x24(%rbp),%esi
  33:	8b 4d e8             	mov    -0x18(%rbp),%ecx
  36:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  3a:	8b 45 ec             	mov    -0x14(%rbp),%eax
  3d:	41 89 f0             	mov    %esi,%r8d
  40:	89 c6                	mov    %eax,%esi
  42:	e8 00 00 00 00       	call   47 <lightset::Data::MergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)+0x47>
  47:	90                   	nop
  48:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4c:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  53:	00 00 
  55:	74 05                	je     5c <lightset::Data::MergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)+0x5c>
  57:	e8 00 00 00 00       	call   5c <lightset::Data::MergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)+0x5c>
  5c:	c9                   	leave  
  5d:	c3                   	ret    

Disassembly of section .text._ZN8lightset4Data3SetEP8LightSetj:

0000000000000000 <lightset::Data::Set(LightSet*, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  13:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1a:	00 00 
  1c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  20:	31 c0                	xor    %eax,%eax
  22:	e8 00 00 00 00       	call   27 <lightset::Data::Set(LightSet*, unsigned int)+0x27>
  27:	48 89 c1             	mov    %rax,%rcx
  2a:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  2d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  31:	48 89 c6             	mov    %rax,%rsi
  34:	48 89 cf             	mov    %rcx,%rdi
  37:	e8 00 00 00 00       	call   3c <lightset::Data::Set(LightSet*, unsigned int)+0x3c>
  3c:	90                   	nop
  3d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  48:	00 00 
  4a:	74 05                	je     51 <lightset::Data::Set(LightSet*, unsigned int)+0x51>
  4c:	e8 00 00 00 00       	call   51 <lightset::Data::Set(LightSet*, unsigned int)+0x51>
  51:	c9                   	leave  
  52:	c3                   	ret    

Disassembly of section .text._ZN8lightset4Data6OutputEP8LightSetj:

0000000000000000 <lightset::Data::Output(LightSet*, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  13:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1a:	00 00 
  1c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  20:	31 c0                	xor    %eax,%eax
  22:	e8 00 00 00 00       	call   27 <lightset::Data::Output(LightSet*, unsigned int)+0x27>
  27:	48 89 c1             	mov    %rax,%rcx
  2a:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  2d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  31:	48 89 c6             	mov    %rax,%rsi
  34:	48 89 cf             	mov    %rcx,%rdi
  37:	e8 00 00 00 00       	call   3c <lightset::Data::Output(LightSet*, unsigned int)+0x3c>
  3c:	90                   	nop
  3d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  48:	00 00 
  4a:	74 05                	je     51 <lightset::Data::Output(LightSet*, unsigned int)+0x51>
  4c:	e8 00 00 00 00       	call   51 <lightset::Data::Output(LightSet*, unsigned int)+0x51>
  51:	c9                   	leave  
  52:	c3                   	ret    

Disassembly of section .text._ZN8lightset4Data11ClearLengthEj:

0000000000000000 <lightset::Data::ClearLength(unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	89 7d ec             	mov    %edi,-0x14(%rbp)
   f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  16:	00 00 
  18:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1c:	31 c0                	xor    %eax,%eax
  1e:	e8 00 00 00 00       	call   23 <lightset::Data::ClearLength(unsigned int)+0x23>
  23:	48 89 c2             	mov    %rax,%rdx
  26:	8b 45 ec             	mov    -0x14(%rbp),%eax
  29:	89 c6                	mov    %eax,%esi
  2b:	48 89 d7             	mov    %rdx,%rdi
  2e:	e8 00 00 00 00       	call   33 <lightset::Data::ClearLength(unsigned int)+0x33>
  33:	90                   	nop
  34:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  38:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  3f:	00 00 
  41:	74 05                	je     48 <lightset::Data::ClearLength(unsigned int)+0x48>
  43:	e8 00 00 00 00       	call   48 <lightset::Data::ClearLength(unsigned int)+0x48>
  48:	c9                   	leave  
  49:	c3                   	ret    

Disassembly of section .text._ZN8lightset4DataC2Ev:

0000000000000000 <lightset::Data::Data()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	90                   	nop
  20:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  24:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  2b:	00 00 
  2d:	74 05                	je     34 <lightset::Data::Data()+0x34>
  2f:	e8 00 00 00 00       	call   34 <lightset::Data::Data()+0x34>
  34:	c9                   	leave  
  35:	c3                   	ret    

Disassembly of section .text._ZN8lightset4Data13IMergeSourceAEjPKhjNS_9MergeModeE:

0000000000000000 <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  13:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  17:	89 4d e0             	mov    %ecx,-0x20(%rbp)
  1a:	44 89 45 d4          	mov    %r8d,-0x2c(%rbp)
  1e:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  25:	00 00 
  27:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  2b:	31 c0                	xor    %eax,%eax
  2d:	8b 55 e0             	mov    -0x20(%rbp),%edx
  30:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  33:	48 69 c8 04 06 00 00 	imul   $0x604,%rax,%rcx
  3a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3e:	48 01 c1             	add    %rax,%rcx
  41:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  45:	48 89 c6             	mov    %rax,%rsi
  48:	48 89 cf             	mov    %rcx,%rdi
  4b:	e8 00 00 00 00       	call   50 <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)+0x50>
  50:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  54:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  57:	48 69 c0 04 06 00 00 	imul   $0x604,%rax,%rax
  5e:	48 01 d0             	add    %rdx,%rax
  61:	48 8d 90 00 06 00 00 	lea    0x600(%rax),%rdx
  68:	8b 45 e0             	mov    -0x20(%rbp),%eax
  6b:	89 02                	mov    %eax,(%rdx)
  6d:	83 7d d4 00          	cmpl   $0x0,-0x2c(%rbp)
  71:	0f 85 81 00 00 00    	jne    f8 <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)+0xf8>
  77:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  7e:	eb 6e                	jmp    ee <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)+0xee>
  80:	8b 55 f4             	mov    -0xc(%rbp),%edx
  83:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  86:	48 69 c0 04 06 00 00 	imul   $0x604,%rax,%rax
  8d:	48 01 d0             	add    %rdx,%rax
  90:	48 8d 90 00 02 00 00 	lea    0x200(%rax),%rdx
  97:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  9b:	48 01 c2             	add    %rax,%rdx
  9e:	8b 4d f4             	mov    -0xc(%rbp),%ecx
  a1:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  a4:	48 69 c0 04 06 00 00 	imul   $0x604,%rax,%rax
  ab:	48 01 c1             	add    %rax,%rcx
  ae:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  b2:	48 01 c8             	add    %rcx,%rax
  b5:	48 89 d6             	mov    %rdx,%rsi
  b8:	48 89 c7             	mov    %rax,%rdi
  bb:	e8 00 00 00 00       	call   c0 <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)+0xc0>
  c0:	0f b6 00             	movzbl (%rax),%eax
  c3:	88 45 f3             	mov    %al,-0xd(%rbp)
  c6:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  ca:	8b 55 f4             	mov    -0xc(%rbp),%edx
  cd:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  d0:	48 69 c0 04 06 00 00 	imul   $0x604,%rax,%rax
  d7:	48 01 c8             	add    %rcx,%rax
  da:	48 01 d0             	add    %rdx,%rax
  dd:	48 8d 90 00 04 00 00 	lea    0x400(%rax),%rdx
  e4:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
  e8:	88 02                	mov    %al,(%rdx)
  ea:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  ee:	8b 45 f4             	mov    -0xc(%rbp),%eax
  f1:	3b 45 e0             	cmp    -0x20(%rbp),%eax
  f4:	72 8a                	jb     80 <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)+0x80>
  f6:	eb 2a                	jmp    122 <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)+0x122>
  f8:	8b 55 e0             	mov    -0x20(%rbp),%edx
  fb:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  fe:	48 69 c0 04 06 00 00 	imul   $0x604,%rax,%rax
 105:	48 8d 88 00 04 00 00 	lea    0x400(%rax),%rcx
 10c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 110:	48 01 c1             	add    %rax,%rcx
 113:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 117:	48 89 c6             	mov    %rax,%rsi
 11a:	48 89 cf             	mov    %rcx,%rdi
 11d:	e8 00 00 00 00       	call   122 <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)+0x122>
 122:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 126:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 12d:	00 00 
 12f:	74 05                	je     136 <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)+0x136>
 131:	e8 00 00 00 00       	call   136 <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)+0x136>
 136:	c9                   	leave  
 137:	c3                   	ret    

Disassembly of section .text._ZN8lightset4Data13IMergeSourceBEjPKhjNS_9MergeModeE:

0000000000000000 <lightset::Data::IMergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  13:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  17:	89 4d e0             	mov    %ecx,-0x20(%rbp)
  1a:	44 89 45 d4          	mov    %r8d,-0x2c(%rbp)
  1e:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  25:	00 00 
  27:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  2b:	31 c0                	xor    %eax,%eax
  2d:	8b 55 e0             	mov    -0x20(%rbp),%edx
  30:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  33:	48 69 c0 04 06 00 00 	imul   $0x604,%rax,%rax
  3a:	48 8d 88 00 02 00 00 	lea    0x200(%rax),%rcx
  41:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  45:	48 01 c1             	add    %rax,%rcx
  48:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4c:	48 89 c6             	mov    %rax,%rsi
  4f:	48 89 cf             	mov    %rcx,%rdi
  52:	e8 00 00 00 00       	call   57 <lightset::Data::IMergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)+0x57>
  57:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  5b:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  5e:	48 69 c0 04 06 00 00 	imul   $0x604,%rax,%rax
  65:	48 01 d0             	add    %rdx,%rax
  68:	48 8d 90 00 06 00 00 	lea    0x600(%rax),%rdx
  6f:	8b 45 e0             	mov    -0x20(%rbp),%eax
  72:	89 02                	mov    %eax,(%rdx)
  74:	83 7d d4 00          	cmpl   $0x0,-0x2c(%rbp)
  78:	0f 85 81 00 00 00    	jne    ff <lightset::Data::IMergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)+0xff>
  7e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  85:	eb 6e                	jmp    f5 <lightset::Data::IMergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)+0xf5>
  87:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8a:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8d:	48 69 c0 04 06 00 00 	imul   $0x604,%rax,%rax
  94:	48 01 d0             	add    %rdx,%rax
  97:	48 8d 90 00 02 00 00 	lea    0x200(%rax),%rdx
  9e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  a2:	48 01 c2             	add    %rax,%rdx
  a5:	8b 4d f4             	mov    -0xc(%rbp),%ecx
  a8:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  ab:	48 69 c0 04 06 00 00 	imul   $0x604,%rax,%rax
  b2:	48 01 c1             	add    %rax,%rcx
  b5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  b9:	48 01 c8             	add    %rcx,%rax
  bc:	48 89 d6             	mov    %rdx,%rsi
  bf:	48 89 c7             	mov    %rax,%rdi
  c2:	e8 00 00 00 00       	call   c7 <lightset::Data::IMergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)+0xc7>
  c7:	0f b6 00             	movzbl (%rax),%eax
  ca:	88 45 f3             	mov    %al,-0xd(%rbp)
  cd:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  d1:	8b 55 f4             	mov    -0xc(%rbp),%edx
  d4:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  d7:	48 69 c0 04 06 00 00 	imul   $0x604,%rax,%rax
  de:	48 01 c8             	add    %rcx,%rax
  e1:	48 01 d0             	add    %rdx,%rax
  e4:	48 8d 90 00 04 00 00 	lea    0x400(%rax),%rdx
  eb:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
  ef:	88 02                	mov    %al,(%rdx)
  f1:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  f5:	8b 45 f4             	mov    -0xc(%rbp),%eax
  f8:	3b 45 e0             	cmp    -0x20(%rbp),%eax
  fb:	72 8a                	jb     87 <lightset::Data::IMergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)+0x87>
  fd:	eb 2a                	jmp    129 <lightset::Data::IMergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)+0x129>
  ff:	8b 55 e0             	mov    -0x20(%rbp),%edx
 102:	8b 45 e4             	mov    -0x1c(%rbp),%eax
 105:	48 69 c0 04 06 00 00 	imul   $0x604,%rax,%rax
 10c:	48 8d 88 00 04 00 00 	lea    0x400(%rax),%rcx
 113:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 117:	48 01 c1             	add    %rax,%rcx
 11a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 11e:	48 89 c6             	mov    %rax,%rsi
 121:	48 89 cf             	mov    %rcx,%rdi
 124:	e8 00 00 00 00       	call   129 <lightset::Data::IMergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)+0x129>
 129:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 12d:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 134:	00 00 
 136:	74 05                	je     13d <lightset::Data::IMergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)+0x13d>
 138:	e8 00 00 00 00       	call   13d <lightset::Data::IMergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)+0x13d>
 13d:	c9                   	leave  
 13e:	c3                   	ret    

Disassembly of section .text._ZNK8lightset4Data4ISetEP8LightSetj:

0000000000000000 <lightset::Data::ISet(LightSet*, unsigned int) const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  14:	89 55 dc             	mov    %edx,-0x24(%rbp)
  17:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1e:	00 00 
  20:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  24:	31 c0                	xor    %eax,%eax
  26:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  2a:	48 8b 00             	mov    (%rax),%rax
  2d:	48 83 c0 20          	add    $0x20,%rax
  31:	4c 8b 08             	mov    (%rax),%r9
  34:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  38:	8b 45 dc             	mov    -0x24(%rbp),%eax
  3b:	48 69 c0 04 06 00 00 	imul   $0x604,%rax,%rax
  42:	48 01 d0             	add    %rdx,%rax
  45:	48 05 00 06 00 00    	add    $0x600,%rax
  4b:	8b 10                	mov    (%rax),%edx
  4d:	8b 45 dc             	mov    -0x24(%rbp),%eax
  50:	48 69 c0 04 06 00 00 	imul   $0x604,%rax,%rax
  57:	48 8d 88 00 04 00 00 	lea    0x400(%rax),%rcx
  5e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  62:	48 8d 3c 01          	lea    (%rcx,%rax,1),%rdi
  66:	8b 75 dc             	mov    -0x24(%rbp),%esi
  69:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  6d:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  73:	89 d1                	mov    %edx,%ecx
  75:	48 89 fa             	mov    %rdi,%rdx
  78:	48 89 c7             	mov    %rax,%rdi
  7b:	41 ff d1             	call   *%r9
  7e:	90                   	nop
  7f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  83:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  8a:	00 00 
  8c:	74 05                	je     93 <lightset::Data::ISet(LightSet*, unsigned int) const+0x93>
  8e:	e8 00 00 00 00       	call   93 <lightset::Data::ISet(LightSet*, unsigned int) const+0x93>
  93:	c9                   	leave  
  94:	c3                   	ret    

Disassembly of section .text._ZNK8lightset4Data7IOutputEP8LightSetj:

0000000000000000 <lightset::Data::IOutput(LightSet*, unsigned int) const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  14:	89 55 dc             	mov    %edx,-0x24(%rbp)
  17:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1e:	00 00 
  20:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  24:	31 c0                	xor    %eax,%eax
  26:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  2a:	48 8b 00             	mov    (%rax),%rax
  2d:	48 83 c0 20          	add    $0x20,%rax
  31:	4c 8b 08             	mov    (%rax),%r9
  34:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  38:	8b 45 dc             	mov    -0x24(%rbp),%eax
  3b:	48 69 c0 04 06 00 00 	imul   $0x604,%rax,%rax
  42:	48 01 d0             	add    %rdx,%rax
  45:	48 05 00 06 00 00    	add    $0x600,%rax
  4b:	8b 10                	mov    (%rax),%edx
  4d:	8b 45 dc             	mov    -0x24(%rbp),%eax
  50:	48 69 c0 04 06 00 00 	imul   $0x604,%rax,%rax
  57:	48 8d 88 00 04 00 00 	lea    0x400(%rax),%rcx
  5e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  62:	48 8d 3c 01          	lea    (%rcx,%rax,1),%rdi
  66:	8b 75 dc             	mov    -0x24(%rbp),%esi
  69:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  6d:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  73:	89 d1                	mov    %edx,%ecx
  75:	48 89 fa             	mov    %rdi,%rdx
  78:	48 89 c7             	mov    %rax,%rdi
  7b:	41 ff d1             	call   *%r9
  7e:	90                   	nop
  7f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  83:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  8a:	00 00 
  8c:	74 05                	je     93 <lightset::Data::IOutput(LightSet*, unsigned int) const+0x93>
  8e:	e8 00 00 00 00       	call   93 <lightset::Data::IOutput(LightSet*, unsigned int) const+0x93>
  93:	c9                   	leave  
  94:	c3                   	ret    

Disassembly of section .text._ZN8lightset4Data12IClearLengthEj:

0000000000000000 <lightset::Data::IClearLength(unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  13:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1a:	00 00 
  1c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  20:	31 c0                	xor    %eax,%eax
  22:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  26:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  29:	48 69 c0 04 06 00 00 	imul   $0x604,%rax,%rax
  30:	48 01 d0             	add    %rdx,%rax
  33:	48 05 00 06 00 00    	add    $0x600,%rax
  39:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
  3f:	90                   	nop
  40:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  44:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  4b:	00 00 
  4d:	74 05                	je     54 <lightset::Data::IClearLength(unsigned int)+0x54>
  4f:	e8 00 00 00 00       	call   54 <lightset::Data::IClearLength(unsigned int)+0x54>
  54:	c9                   	leave  
  55:	c3                   	ret    

Disassembly of section .text._ZN8Hardware7GetModeEv:

0000000000000000 <Hardware::GetMode()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	8b 80 50 02 00 00    	mov    0x250(%rax),%eax
  29:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  2d:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  34:	00 00 
  36:	74 05                	je     3d <Hardware::GetMode()+0x3d>
  38:	e8 00 00 00 00       	call   3d <Hardware::GetMode()+0x3d>
  3d:	c9                   	leave  
  3e:	c3                   	ret    

Disassembly of section .text._ZN8Hardware3GetEv:

0000000000000000 <Hardware::Get()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 22 <Hardware::Get()+0x22>
  22:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  26:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  2d:	00 00 
  2f:	74 05                	je     36 <Hardware::Get()+0x36>
  31:	e8 00 00 00 00       	call   36 <Hardware::Get()+0x36>
  36:	c9                   	leave  
  37:	c3                   	ret    

Disassembly of section .text._ZN3halL12panel_led_onEj:

0000000000000000 <hal::panel_led_on(unsigned int)>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	89 7d ec             	mov    %edi,-0x14(%rbp)
   b:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  12:	00 00 
  14:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  18:	31 c0                	xor    %eax,%eax
  1a:	90                   	nop
  1b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1f:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  26:	00 00 
  28:	74 05                	je     2f <hal::panel_led_on(unsigned int)+0x2f>
  2a:	e8 00 00 00 00       	call   2f <hal::panel_led_on(unsigned int)+0x2f>
  2f:	c9                   	leave  
  30:	c3                   	ret    

Disassembly of section .text._ZN3halL13panel_led_offEj:

0000000000000000 <hal::panel_led_off(unsigned int)>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	89 7d ec             	mov    %edi,-0x14(%rbp)
   b:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  12:	00 00 
  14:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  18:	31 c0                	xor    %eax,%eax
  1a:	90                   	nop
  1b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1f:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  26:	00 00 
  28:	74 05                	je     2f <hal::panel_led_off(unsigned int)+0x2f>
  2a:	e8 00 00 00 00       	call   2f <hal::panel_led_off(unsigned int)+0x2f>
  2f:	c9                   	leave  
  30:	c3                   	ret    

Disassembly of section .text._ZN10E131BridgeC2Ev:

0000000000000000 <E131Bridge::E131Bridge()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 40          	sub    $0x40,%rsp
   c:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  23:	c7 00 ff ff ff ff    	movl   $0xffffffff,(%rax)
  29:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  2d:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%rax)
  34:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  38:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)
  3f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  43:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  4a:	00 
  4b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4f:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
  56:	00 
  57:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  5b:	c7 40 20 00 00 00 00 	movl   $0x0,0x20(%rax)
  62:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  66:	c6 80 08 02 00 00 01 	movb   $0x1,0x208(%rax)
  6d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  71:	48 c7 80 20 02 00 00 	movq   $0x0,0x220(%rax)
  78:	00 00 00 00 
  7c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80:	48 c7 80 28 02 00 00 	movq   $0x0,0x228(%rax)
  87:	00 00 00 00 
  8b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8f:	48 89 05 00 00 00 00 	mov    %rax,0x0(%rip)        # 96 <E131Bridge::E131Bridge()+0x96>
  96:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  9a:	48 05 98 00 00 00    	add    $0x98,%rax
  a0:	ba 30 00 00 00       	mov    $0x30,%edx
  a5:	be 00 00 00 00       	mov    $0x0,%esi
  aa:	48 89 c7             	mov    %rax,%rdi
  ad:	e8 00 00 00 00       	call   b2 <E131Bridge::E131Bridge()+0xb2>
  b2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  b6:	48 05 98 00 00 00    	add    $0x98,%rax
  bc:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  c0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  c4:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  c8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  cc:	48 83 c0 30          	add    $0x30,%rax
  d0:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  d4:	eb 18                	jmp    ee <E131Bridge::E131Bridge()+0xee>
  d6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  da:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  de:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  e2:	c7 40 04 02 00 00 00 	movl   $0x2,0x4(%rax)
  e9:	48 83 45 d8 0c       	addq   $0xc,-0x28(%rbp)
  ee:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  f2:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  f6:	75 de                	jne    d6 <E131Bridge::E131Bridge()+0xd6>
  f8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  fc:	48 83 c0 74          	add    $0x74,%rax
 100:	ba 24 00 00 00       	mov    $0x24,%edx
 105:	be 00 00 00 00       	mov    $0x0,%esi
 10a:	48 89 c7             	mov    %rax,%rdi
 10d:	e8 00 00 00 00       	call   112 <E131Bridge::E131Bridge()+0x112>
 112:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 116:	c6 80 8c 00 00 00 01 	movb   $0x1,0x8c(%rax)
 11d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 121:	c7 80 90 00 00 00 00 	movl   $0x0,0x90(%rax)
 128:	00 00 00 
 12b:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%rbp)
 132:	e9 8d 00 00 00       	jmp    1c4 <E131Bridge::E131Bridge()+0x1c4>
 137:	8b 55 d4             	mov    -0x2c(%rbp),%edx
 13a:	48 89 d0             	mov    %rdx,%rax
 13d:	48 c1 e0 04          	shl    $0x4,%rax
 141:	48 01 d0             	add    %rdx,%rax
 144:	48 c1 e0 02          	shl    $0x2,%rax
 148:	48 8d 90 c0 00 00 00 	lea    0xc0(%rax),%rdx
 14f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 153:	48 01 d0             	add    %rdx,%rax
 156:	48 83 c0 08          	add    $0x8,%rax
 15a:	ba 44 00 00 00       	mov    $0x44,%edx
 15f:	be 00 00 00 00       	mov    $0x0,%esi
 164:	48 89 c7             	mov    %rax,%rdi
 167:	e8 00 00 00 00       	call   16c <E131Bridge::E131Bridge()+0x16c>
 16c:	8b 55 d4             	mov    -0x2c(%rbp),%edx
 16f:	48 89 d0             	mov    %rdx,%rax
 172:	48 01 c0             	add    %rax,%rax
 175:	48 01 d0             	add    %rdx,%rax
 178:	48 c1 e0 02          	shl    $0x2,%rax
 17c:	48 8d 90 d0 01 00 00 	lea    0x1d0(%rax),%rdx
 183:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 187:	48 01 d0             	add    %rdx,%rax
 18a:	48 83 c0 08          	add    $0x8,%rax
 18e:	ba 0c 00 00 00       	mov    $0xc,%edx
 193:	be 00 00 00 00       	mov    $0x0,%esi
 198:	48 89 c7             	mov    %rax,%rdi
 19b:	e8 00 00 00 00       	call   1a0 <E131Bridge::E131Bridge()+0x1a0>
 1a0:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
 1a4:	8b 55 d4             	mov    -0x2c(%rbp),%edx
 1a7:	48 89 d0             	mov    %rdx,%rax
 1aa:	48 01 c0             	add    %rax,%rax
 1ad:	48 01 d0             	add    %rdx,%rax
 1b0:	48 c1 e0 02          	shl    $0x2,%rax
 1b4:	48 01 c8             	add    %rcx,%rax
 1b7:	48 05 e1 01 00 00    	add    $0x1e1,%rax
 1bd:	c6 00 64             	movb   $0x64,(%rax)
 1c0:	83 45 d4 01          	addl   $0x1,-0x2c(%rbp)
 1c4:	83 7d d4 03          	cmpl   $0x3,-0x2c(%rbp)
 1c8:	0f 86 69 ff ff ff    	jbe    137 <E131Bridge::E131Bridge()+0x137>
 1ce:	e8 00 00 00 00       	call   1d3 <E131Bridge::E131Bridge()+0x1d3>
 1d3:	be c0 15 00 00       	mov    $0x15c0,%esi
 1d8:	48 89 c7             	mov    %rax,%rdi
 1db:	e8 00 00 00 00       	call   1e0 <E131Bridge::E131Bridge()+0x1e0>
 1e0:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
 1e4:	89 02                	mov    %eax,(%rdx)
 1e6:	90                   	nop
 1e7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 1eb:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 1f2:	00 00 
 1f4:	74 05                	je     1fb <E131Bridge::E131Bridge()+0x1fb>
 1f6:	e8 00 00 00 00       	call   1fb <E131Bridge::E131Bridge()+0x1fb>
 1fb:	c9                   	leave  
 1fc:	c3                   	ret    

Disassembly of section .text._ZN10E131BridgeD2Ev:

0000000000000000 <E131Bridge::~E131Bridge()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	90                   	nop
  20:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  24:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  2b:	00 00 
  2d:	74 05                	je     34 <E131Bridge::~E131Bridge()+0x34>
  2f:	e8 00 00 00 00       	call   34 <E131Bridge::~E131Bridge()+0x34>
  34:	c9                   	leave  
  35:	c3                   	ret    

Disassembly of section .text._ZN10E131Bridge5StartEv:

0000000000000000 <E131Bridge::Start()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	c6 80 94 00 00 00 02 	movb   $0x2,0x94(%rax)
  2a:	e8 00 00 00 00       	call   2f <E131Bridge::Start()+0x2f>
  2f:	be 02 00 00 00       	mov    $0x2,%esi
  34:	48 89 c7             	mov    %rax,%rdi
  37:	e8 00 00 00 00       	call   3c <E131Bridge::Start()+0x3c>
  3c:	90                   	nop
  3d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  48:	00 00 
  4a:	74 05                	je     51 <E131Bridge::Start()+0x51>
  4c:	e8 00 00 00 00       	call   51 <E131Bridge::Start()+0x51>
  51:	c9                   	leave  
  52:	c3                   	ret    

Disassembly of section .text._ZN10E131Bridge4StopEv:

0000000000000000 <E131Bridge::Stop()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	c6 40 74 01          	movb   $0x1,0x74(%rax)
  27:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  2e:	eb 48                	jmp    78 <E131Bridge::Stop()+0x78>
  30:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  34:	48 8b 80 20 02 00 00 	mov    0x220(%rax),%rax
  3b:	48 85 c0             	test   %rax,%rax
  3e:	74 2a                	je     6a <E131Bridge::Stop()+0x6a>
  40:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  44:	48 8b 80 20 02 00 00 	mov    0x220(%rax),%rax
  4b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4f:	48 8b 92 20 02 00 00 	mov    0x220(%rdx),%rdx
  56:	48 8b 12             	mov    (%rdx),%rdx
  59:	48 83 c2 18          	add    $0x18,%rdx
  5d:	48 8b 0a             	mov    (%rdx),%rcx
  60:	8b 55 f4             	mov    -0xc(%rbp),%edx
  63:	89 d6                	mov    %edx,%esi
  65:	48 89 c7             	mov    %rax,%rdi
  68:	ff d1                	call   *%rcx
  6a:	8b 45 f4             	mov    -0xc(%rbp),%eax
  6d:	89 c7                	mov    %eax,%edi
  6f:	e8 00 00 00 00       	call   74 <E131Bridge::Stop()+0x74>
  74:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  78:	83 7d f4 03          	cmpl   $0x3,-0xc(%rbp)
  7c:	76 b2                	jbe    30 <E131Bridge::Stop()+0x30>
  7e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  82:	c6 80 94 00 00 00 00 	movb   $0x0,0x94(%rax)
  89:	e8 00 00 00 00       	call   8e <E131Bridge::Stop()+0x8e>
  8e:	be 00 00 00 00       	mov    $0x0,%esi
  93:	48 89 c7             	mov    %rax,%rdi
  96:	e8 00 00 00 00       	call   9b <E131Bridge::Stop()+0x9b>
  9b:	90                   	nop
  9c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  a0:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  a7:	00 00 
  a9:	74 05                	je     b0 <E131Bridge::Stop()+0xb0>
  ab:	e8 00 00 00 00       	call   b0 <E131Bridge::Stop()+0xb0>
  b0:	c9                   	leave  
  b1:	c3                   	ret    

Disassembly of section .text._ZN10E131Bridge25SetSynchronizationAddressEbbt:

0000000000000000 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	53                   	push   %rbx
   9:	48 83 ec 38          	sub    $0x38,%rsp
   d:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  11:	89 c8                	mov    %ecx,%eax
  13:	89 f1                	mov    %esi,%ecx
  15:	88 4d d4             	mov    %cl,-0x2c(%rbp)
  18:	88 55 d0             	mov    %dl,-0x30(%rbp)
  1b:	66 89 45 cc          	mov    %ax,-0x34(%rbp)
  1f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  26:	00 00 
  28:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  2c:	31 c0                	xor    %eax,%eax
  2e:	80 7d d4 00          	cmpb   $0x0,-0x2c(%rbp)
  32:	74 10                	je     44 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x44>
  34:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  38:	48 05 86 00 00 00    	add    $0x86,%rax
  3e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  42:	eb 18                	jmp    5c <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x5c>
  44:	80 7d d0 00          	cmpb   $0x0,-0x30(%rbp)
  48:	0f 84 81 00 00 00    	je     cf <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0xcf>
  4e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  52:	48 05 88 00 00 00    	add    $0x88,%rax
  58:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  5c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  60:	0f b7 00             	movzwl (%rax),%eax
  63:	66 85 c0             	test   %ax,%ax
  66:	75 0d                	jne    75 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x75>
  68:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  6c:	0f b7 55 cc          	movzwl -0x34(%rbp),%edx
  70:	66 89 10             	mov    %dx,(%rax)
  73:	eb 33                	jmp    a8 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0xa8>
  75:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  79:	0f b7 00             	movzwl (%rax),%eax
  7c:	66 39 45 cc          	cmp    %ax,-0x34(%rbp)
  80:	74 50                	je     d2 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0xd2>
  82:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  86:	0f b7 00             	movzwl (%rax),%eax
  89:	0f b7 d0             	movzwl %ax,%edx
  8c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  90:	be 04 00 00 00       	mov    $0x4,%esi
  95:	48 89 c7             	mov    %rax,%rdi
  98:	e8 00 00 00 00       	call   9d <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x9d>
  9d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  a1:	0f b7 55 cc          	movzwl -0x34(%rbp),%edx
  a5:	66 89 10             	mov    %dx,(%rax)
  a8:	e8 00 00 00 00       	call   ad <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0xad>
  ad:	48 89 c3             	mov    %rax,%rbx
  b0:	0f b7 45 cc          	movzwl -0x34(%rbp),%eax
  b4:	89 c7                	mov    %eax,%edi
  b6:	e8 00 00 00 00       	call   bb <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0xbb>
  bb:	89 c2                	mov    %eax,%edx
  bd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  c1:	8b 00                	mov    (%rax),%eax
  c3:	89 c6                	mov    %eax,%esi
  c5:	48 89 df             	mov    %rbx,%rdi
  c8:	e8 00 00 00 00       	call   cd <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0xcd>
  cd:	eb 04                	jmp    d3 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0xd3>
  cf:	90                   	nop
  d0:	eb 01                	jmp    d3 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0xd3>
  d2:	90                   	nop
  d3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  d7:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  de:	00 00 
  e0:	74 05                	je     e7 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0xe7>
  e2:	e8 00 00 00 00       	call   e7 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0xe7>
  e7:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  eb:	c9                   	leave  
  ec:	c3                   	ret    

Disassembly of section .text._ZN10E131Bridge13LeaveUniverseEjt:

0000000000000000 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	53                   	push   %rbx
   9:	48 83 ec 28          	sub    $0x28,%rsp
   d:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  11:	89 75 d4             	mov    %esi,-0x2c(%rbp)
  14:	89 d0                	mov    %edx,%eax
  16:	66 89 45 d0          	mov    %ax,-0x30(%rbp)
  1a:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  21:	00 00 
  23:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  27:	31 c0                	xor    %eax,%eax
  29:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  30:	eb 35                	jmp    67 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0x67>
  32:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  35:	3b 45 d4             	cmp    -0x2c(%rbp),%eax
  38:	74 28                	je     62 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0x62>
  3a:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  3e:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  41:	48 89 d0             	mov    %rdx,%rax
  44:	48 01 c0             	add    %rax,%rax
  47:	48 01 d0             	add    %rdx,%rax
  4a:	48 c1 e0 02          	shl    $0x2,%rax
  4e:	48 01 c8             	add    %rcx,%rax
  51:	48 05 98 00 00 00    	add    $0x98,%rax
  57:	0f b7 00             	movzwl (%rax),%eax
  5a:	66 39 45 d0          	cmp    %ax,-0x30(%rbp)
  5e:	74 34                	je     94 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0x94>
  60:	eb 01                	jmp    63 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0x63>
  62:	90                   	nop
  63:	83 45 e4 01          	addl   $0x1,-0x1c(%rbp)
  67:	83 7d e4 03          	cmpl   $0x3,-0x1c(%rbp)
  6b:	76 c5                	jbe    32 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0x32>
  6d:	e8 00 00 00 00       	call   72 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0x72>
  72:	48 89 c3             	mov    %rax,%rbx
  75:	0f b7 45 d0          	movzwl -0x30(%rbp),%eax
  79:	89 c7                	mov    %eax,%edi
  7b:	e8 00 00 00 00       	call   80 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0x80>
  80:	89 c2                	mov    %eax,%edx
  82:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  86:	8b 00                	mov    (%rax),%eax
  88:	89 c6                	mov    %eax,%esi
  8a:	48 89 df             	mov    %rbx,%rdi
  8d:	e8 00 00 00 00       	call   92 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0x92>
  92:	eb 01                	jmp    95 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0x95>
  94:	90                   	nop
  95:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  99:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  a0:	00 00 
  a2:	74 05                	je     a9 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0xa9>
  a4:	e8 00 00 00 00       	call   a9 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0xa9>
  a9:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  ad:	c9                   	leave  
  ae:	c3                   	ret    

Disassembly of section .text._ZN10E131Bridge15SetLocalMergingEv:

0000000000000000 <E131Bridge::SetLocalMerging()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  26:	e9 cc 01 00 00       	jmp    1f7 <E131Bridge::SetLocalMerging()+0x1f7>
  2b:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  2f:	8b 55 ec             	mov    -0x14(%rbp),%edx
  32:	48 89 d0             	mov    %rdx,%rax
  35:	48 01 c0             	add    %rax,%rax
  38:	48 01 d0             	add    %rdx,%rax
  3b:	48 c1 e0 02          	shl    $0x2,%rax
  3f:	48 01 c8             	add    %rcx,%rax
  42:	48 05 9c 00 00 00    	add    $0x9c,%rax
  48:	8b 00                	mov    (%rax),%eax
  4a:	83 f8 01             	cmp    $0x1,%eax
  4d:	0f 84 9f 01 00 00    	je     1f2 <E131Bridge::SetLocalMerging()+0x1f2>
  53:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  57:	8b 55 ec             	mov    -0x14(%rbp),%edx
  5a:	48 89 d0             	mov    %rdx,%rax
  5d:	48 01 c0             	add    %rax,%rax
  60:	48 01 d0             	add    %rdx,%rax
  63:	48 c1 e0 02          	shl    $0x2,%rax
  67:	48 01 c8             	add    %rcx,%rax
  6a:	48 05 98 00 00 00    	add    $0x98,%rax
  70:	0f b7 00             	movzwl (%rax),%eax
  73:	66 85 c0             	test   %ax,%ax
  76:	0f 84 76 01 00 00    	je     1f2 <E131Bridge::SetLocalMerging()+0x1f2>
  7c:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  80:	8b 55 ec             	mov    -0x14(%rbp),%edx
  83:	48 89 d0             	mov    %rdx,%rax
  86:	48 01 c0             	add    %rax,%rax
  89:	48 01 d0             	add    %rdx,%rax
  8c:	48 c1 e0 02          	shl    $0x2,%rax
  90:	48 01 c8             	add    %rcx,%rax
  93:	48 05 a0 00 00 00    	add    $0xa0,%rax
  99:	c6 00 00             	movb   $0x0,(%rax)
  9c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
  a3:	e9 3e 01 00 00       	jmp    1e6 <E131Bridge::SetLocalMerging()+0x1e6>
  a8:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  ac:	8b 55 f0             	mov    -0x10(%rbp),%edx
  af:	48 89 d0             	mov    %rdx,%rax
  b2:	48 01 c0             	add    %rax,%rax
  b5:	48 01 d0             	add    %rdx,%rax
  b8:	48 c1 e0 02          	shl    $0x2,%rax
  bc:	48 01 c8             	add    %rcx,%rax
  bf:	48 05 9c 00 00 00    	add    $0x9c,%rax
  c5:	8b 00                	mov    (%rax),%eax
  c7:	85 c0                	test   %eax,%eax
  c9:	0f 84 12 01 00 00    	je     1e1 <E131Bridge::SetLocalMerging()+0x1e1>
  cf:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  d3:	8b 55 ec             	mov    -0x14(%rbp),%edx
  d6:	48 89 d0             	mov    %rdx,%rax
  d9:	48 01 c0             	add    %rax,%rax
  dc:	48 01 d0             	add    %rdx,%rax
  df:	48 c1 e0 02          	shl    $0x2,%rax
  e3:	48 01 c8             	add    %rcx,%rax
  e6:	48 05 98 00 00 00    	add    $0x98,%rax
  ec:	0f b7 08             	movzwl (%rax),%ecx
  ef:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  f3:	8b 55 f0             	mov    -0x10(%rbp),%edx
  f6:	48 89 d0             	mov    %rdx,%rax
  f9:	48 01 c0             	add    %rax,%rax
  fc:	48 01 d0             	add    %rdx,%rax
  ff:	48 c1 e0 02          	shl    $0x2,%rax
 103:	48 01 f0             	add    %rsi,%rax
 106:	48 05 98 00 00 00    	add    $0x98,%rax
 10c:	0f b7 00             	movzwl (%rax),%eax
 10f:	66 39 c1             	cmp    %ax,%cx
 112:	0f 85 ca 00 00 00    	jne    1e2 <E131Bridge::SetLocalMerging()+0x1e2>
 118:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
 11c:	8b 55 f0             	mov    -0x10(%rbp),%edx
 11f:	48 89 d0             	mov    %rdx,%rax
 122:	48 01 c0             	add    %rax,%rax
 125:	48 01 d0             	add    %rdx,%rax
 128:	48 c1 e0 02          	shl    $0x2,%rax
 12c:	48 01 c8             	add    %rcx,%rax
 12f:	48 05 a0 00 00 00    	add    $0xa0,%rax
 135:	0f b6 00             	movzbl (%rax),%eax
 138:	83 f0 01             	xor    $0x1,%eax
 13b:	84 c0                	test   %al,%al
 13d:	74 31                	je     170 <E131Bridge::SetLocalMerging()+0x170>
 13f:	e8 00 00 00 00       	call   144 <E131Bridge::SetLocalMerging()+0x144>
 144:	48 89 c7             	mov    %rax,%rdi
 147:	e8 00 00 00 00       	call   14c <E131Bridge::SetLocalMerging()+0x14c>
 14c:	89 c2                	mov    %eax,%edx
 14e:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
 152:	8b 4d f0             	mov    -0x10(%rbp),%ecx
 155:	48 89 c8             	mov    %rcx,%rax
 158:	48 c1 e0 04          	shl    $0x4,%rax
 15c:	48 01 c8             	add    %rcx,%rax
 15f:	48 c1 e0 02          	shl    $0x2,%rax
 163:	48 01 f0             	add    %rsi,%rax
 166:	48 05 cc 00 00 00    	add    $0xcc,%rax
 16c:	89 10                	mov    %edx,(%rax)
 16e:	eb 2f                	jmp    19f <E131Bridge::SetLocalMerging()+0x19f>
 170:	e8 00 00 00 00       	call   175 <E131Bridge::SetLocalMerging()+0x175>
 175:	48 89 c7             	mov    %rax,%rdi
 178:	e8 00 00 00 00       	call   17d <E131Bridge::SetLocalMerging()+0x17d>
 17d:	89 c2                	mov    %eax,%edx
 17f:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
 183:	8b 4d f0             	mov    -0x10(%rbp),%ecx
 186:	48 89 c8             	mov    %rcx,%rax
 189:	48 c1 e0 04          	shl    $0x4,%rax
 18d:	48 01 c8             	add    %rcx,%rax
 190:	48 c1 e0 02          	shl    $0x2,%rax
 194:	48 01 f0             	add    %rsi,%rax
 197:	48 05 e8 00 00 00    	add    $0xe8,%rax
 19d:	89 10                	mov    %edx,(%rax)
 19f:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
 1a3:	8b 55 ec             	mov    -0x14(%rbp),%edx
 1a6:	48 89 d0             	mov    %rdx,%rax
 1a9:	48 01 c0             	add    %rax,%rax
 1ac:	48 01 d0             	add    %rdx,%rax
 1af:	48 c1 e0 02          	shl    $0x2,%rax
 1b3:	48 01 c8             	add    %rcx,%rax
 1b6:	48 05 a0 00 00 00    	add    $0xa0,%rax
 1bc:	c6 00 01             	movb   $0x1,(%rax)
 1bf:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
 1c3:	8b 55 f0             	mov    -0x10(%rbp),%edx
 1c6:	48 89 d0             	mov    %rdx,%rax
 1c9:	48 01 c0             	add    %rax,%rax
 1cc:	48 01 d0             	add    %rdx,%rax
 1cf:	48 c1 e0 02          	shl    $0x2,%rax
 1d3:	48 01 c8             	add    %rcx,%rax
 1d6:	48 05 a0 00 00 00    	add    $0xa0,%rax
 1dc:	c6 00 01             	movb   $0x1,(%rax)
 1df:	eb 01                	jmp    1e2 <E131Bridge::SetLocalMerging()+0x1e2>
 1e1:	90                   	nop
 1e2:	83 45 f0 01          	addl   $0x1,-0x10(%rbp)
 1e6:	83 7d f0 03          	cmpl   $0x3,-0x10(%rbp)
 1ea:	0f 86 b8 fe ff ff    	jbe    a8 <E131Bridge::SetLocalMerging()+0xa8>
 1f0:	eb 01                	jmp    1f3 <E131Bridge::SetLocalMerging()+0x1f3>
 1f2:	90                   	nop
 1f3:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
 1f7:	83 7d ec 03          	cmpl   $0x3,-0x14(%rbp)
 1fb:	0f 86 2a fe ff ff    	jbe    2b <E131Bridge::SetLocalMerging()+0x2b>
 201:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
 208:	eb 04                	jmp    20e <E131Bridge::SetLocalMerging()+0x20e>
 20a:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
 20e:	83 7d f4 03          	cmpl   $0x3,-0xc(%rbp)
 212:	76 f6                	jbe    20a <E131Bridge::SetLocalMerging()+0x20a>
 214:	90                   	nop
 215:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 219:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 220:	00 00 
 222:	74 05                	je     229 <E131Bridge::SetLocalMerging()+0x229>
 224:	e8 00 00 00 00       	call   229 <E131Bridge::SetLocalMerging()+0x229>
 229:	c9                   	leave  
 22a:	c3                   	ret    

Disassembly of section .text._ZN10E131Bridge11SetUniverseEjN8lightset7PortDirEt:

0000000000000000 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	53                   	push   %rbx
   9:	48 83 ec 38          	sub    $0x38,%rsp
   d:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  11:	89 75 d4             	mov    %esi,-0x2c(%rbp)
  14:	89 55 d0             	mov    %edx,-0x30(%rbp)
  17:	89 c8                	mov    %ecx,%eax
  19:	66 89 45 cc          	mov    %ax,-0x34(%rbp)
  1d:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  24:	00 00 
  26:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  2a:	31 c0                	xor    %eax,%eax
  2c:	83 7d d0 02          	cmpl   $0x2,-0x30(%rbp)
  30:	75 79                	jne    ab <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0xab>
  32:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  36:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  39:	48 89 d0             	mov    %rdx,%rax
  3c:	48 01 c0             	add    %rax,%rax
  3f:	48 01 d0             	add    %rdx,%rax
  42:	48 c1 e0 02          	shl    $0x2,%rax
  46:	48 01 c8             	add    %rcx,%rax
  49:	48 05 9c 00 00 00    	add    $0x9c,%rax
  4f:	8b 00                	mov    (%rax),%eax
  51:	83 f8 01             	cmp    $0x1,%eax
  54:	75 2d                	jne    83 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x83>
  56:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  5a:	0f b6 80 8b 00 00 00 	movzbl 0x8b(%rax),%eax
  61:	8d 50 ff             	lea    -0x1(%rax),%edx
  64:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  68:	88 90 8b 00 00 00    	mov    %dl,0x8b(%rax)
  6e:	0f b7 55 cc          	movzwl -0x34(%rbp),%edx
  72:	8b 4d d4             	mov    -0x2c(%rbp),%ecx
  75:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  79:	89 ce                	mov    %ecx,%esi
  7b:	48 89 c7             	mov    %rax,%rdi
  7e:	e8 00 00 00 00       	call   83 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x83>
  83:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  87:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  8a:	48 89 d0             	mov    %rdx,%rax
  8d:	48 01 c0             	add    %rax,%rax
  90:	48 01 d0             	add    %rdx,%rax
  93:	48 c1 e0 02          	shl    $0x2,%rax
  97:	48 01 c8             	add    %rcx,%rax
  9a:	48 05 9c 00 00 00    	add    $0x9c,%rax
  a0:	c7 00 02 00 00 00    	movl   $0x2,(%rax)
  a6:	e9 16 01 00 00       	jmp    1c1 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x1c1>
  ab:	83 7d d0 01          	cmpl   $0x1,-0x30(%rbp)
  af:	0f 85 0c 01 00 00    	jne    1c1 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x1c1>
  b5:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  b9:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  bc:	48 89 d0             	mov    %rdx,%rax
  bf:	48 01 c0             	add    %rax,%rax
  c2:	48 01 d0             	add    %rdx,%rax
  c5:	48 c1 e0 02          	shl    $0x2,%rax
  c9:	48 01 c8             	add    %rcx,%rax
  cc:	48 05 9c 00 00 00    	add    $0x9c,%rax
  d2:	8b 00                	mov    (%rax),%eax
  d4:	83 f8 01             	cmp    $0x1,%eax
  d7:	75 60                	jne    139 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x139>
  d9:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  dd:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  e0:	48 89 d0             	mov    %rdx,%rax
  e3:	48 01 c0             	add    %rax,%rax
  e6:	48 01 d0             	add    %rdx,%rax
  e9:	48 c1 e0 02          	shl    $0x2,%rax
  ed:	48 01 c8             	add    %rcx,%rax
  f0:	48 05 98 00 00 00    	add    $0x98,%rax
  f6:	0f b7 00             	movzwl (%rax),%eax
  f9:	66 39 45 cc          	cmp    %ax,-0x34(%rbp)
  fd:	0f 84 bd 00 00 00    	je     1c0 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x1c0>
 103:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
 107:	8b 55 d4             	mov    -0x2c(%rbp),%edx
 10a:	48 89 d0             	mov    %rdx,%rax
 10d:	48 01 c0             	add    %rax,%rax
 110:	48 01 d0             	add    %rdx,%rax
 113:	48 c1 e0 02          	shl    $0x2,%rax
 117:	48 01 c8             	add    %rcx,%rax
 11a:	48 05 98 00 00 00    	add    $0x98,%rax
 120:	0f b7 00             	movzwl (%rax),%eax
 123:	0f b7 d0             	movzwl %ax,%edx
 126:	8b 4d d4             	mov    -0x2c(%rbp),%ecx
 129:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 12d:	89 ce                	mov    %ecx,%esi
 12f:	48 89 c7             	mov    %rax,%rdi
 132:	e8 00 00 00 00       	call   137 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x137>
 137:	eb 18                	jmp    151 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x151>
 139:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 13d:	0f b6 80 8b 00 00 00 	movzbl 0x8b(%rax),%eax
 144:	8d 50 01             	lea    0x1(%rax),%edx
 147:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 14b:	88 90 8b 00 00 00    	mov    %dl,0x8b(%rax)
 151:	e8 00 00 00 00       	call   156 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x156>
 156:	48 89 c3             	mov    %rax,%rbx
 159:	0f b7 45 cc          	movzwl -0x34(%rbp),%eax
 15d:	89 c7                	mov    %eax,%edi
 15f:	e8 00 00 00 00       	call   164 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x164>
 164:	89 c2                	mov    %eax,%edx
 166:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 16a:	8b 00                	mov    (%rax),%eax
 16c:	89 c6                	mov    %eax,%esi
 16e:	48 89 df             	mov    %rbx,%rdi
 171:	e8 00 00 00 00       	call   176 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x176>
 176:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
 17a:	8b 55 d4             	mov    -0x2c(%rbp),%edx
 17d:	48 89 d0             	mov    %rdx,%rax
 180:	48 01 c0             	add    %rax,%rax
 183:	48 01 d0             	add    %rdx,%rax
 186:	48 c1 e0 02          	shl    $0x2,%rax
 18a:	48 01 c8             	add    %rcx,%rax
 18d:	48 05 9c 00 00 00    	add    $0x9c,%rax
 193:	c7 00 01 00 00 00    	movl   $0x1,(%rax)
 199:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
 19d:	8b 55 d4             	mov    -0x2c(%rbp),%edx
 1a0:	48 89 d0             	mov    %rdx,%rax
 1a3:	48 01 c0             	add    %rax,%rax
 1a6:	48 01 d0             	add    %rdx,%rax
 1a9:	48 c1 e0 02          	shl    $0x2,%rax
 1ad:	48 01 c8             	add    %rcx,%rax
 1b0:	48 8d 90 98 00 00 00 	lea    0x98(%rax),%rdx
 1b7:	0f b7 45 cc          	movzwl -0x34(%rbp),%eax
 1bb:	66 89 02             	mov    %ax,(%rdx)
 1be:	eb 01                	jmp    1c1 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x1c1>
 1c0:	90                   	nop
 1c1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 1c5:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 1cc:	00 00 
 1ce:	74 05                	je     1d5 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x1d5>
 1d0:	e8 00 00 00 00       	call   1d5 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x1d5>
 1d5:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
 1d9:	c9                   	leave  
 1da:	c3                   	ret    

Disassembly of section .text._ZN10E131Bridge17UpdateMergeStatusEj:

0000000000000000 <E131Bridge::UpdateMergeStatus(unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  13:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1a:	00 00 
  1c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  20:	31 c0                	xor    %eax,%eax
  22:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  26:	0f b6 40 75          	movzbl 0x75(%rax),%eax
  2a:	83 f0 01             	xor    $0x1,%eax
  2d:	84 c0                	test   %al,%al
  2f:	74 10                	je     41 <E131Bridge::UpdateMergeStatus(unsigned int)+0x41>
  31:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  35:	c6 40 75 01          	movb   $0x1,0x75(%rax)
  39:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3d:	c6 40 78 01          	movb   $0x1,0x78(%rax)
  41:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  45:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  48:	48 89 d0             	mov    %rdx,%rax
  4b:	48 c1 e0 04          	shl    $0x4,%rax
  4f:	48 01 d0             	add    %rdx,%rax
  52:	48 c1 e0 02          	shl    $0x2,%rax
  56:	48 01 c8             	add    %rcx,%rax
  59:	48 05 08 01 00 00    	add    $0x108,%rax
  5f:	c6 00 01             	movb   $0x1,(%rax)
  62:	90                   	nop
  63:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  67:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  6e:	00 00 
  70:	74 05                	je     77 <E131Bridge::UpdateMergeStatus(unsigned int)+0x77>
  72:	e8 00 00 00 00       	call   77 <E131Bridge::UpdateMergeStatus(unsigned int)+0x77>
  77:	c9                   	leave  
  78:	c3                   	ret    

Disassembly of section .text._ZN10E131Bridge18CheckMergeTimeoutsEj:

0000000000000000 <E131Bridge::CheckMergeTimeouts(unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10:	89 75 d4             	mov    %esi,-0x2c(%rbp)
  13:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1a:	00 00 
  1c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  20:	31 c0                	xor    %eax,%eax
  22:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  26:	8b 48 04             	mov    0x4(%rax),%ecx
  29:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  2d:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  30:	48 89 d0             	mov    %rdx,%rax
  33:	48 c1 e0 04          	shl    $0x4,%rax
  37:	48 01 d0             	add    %rdx,%rax
  3a:	48 c1 e0 02          	shl    $0x2,%rax
  3e:	48 01 f0             	add    %rsi,%rax
  41:	48 05 c8 00 00 00    	add    $0xc8,%rax
  47:	8b 10                	mov    (%rax),%edx
  49:	89 c8                	mov    %ecx,%eax
  4b:	29 d0                	sub    %edx,%eax
  4d:	89 45 f0             	mov    %eax,-0x10(%rbp)
  50:	81 7d f0 10 27 00 00 	cmpl   $0x2710,-0x10(%rbp)
  57:	76 7a                	jbe    d3 <E131Bridge::CheckMergeTimeouts(unsigned int)+0xd3>
  59:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  5d:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  60:	48 89 d0             	mov    %rdx,%rax
  63:	48 c1 e0 04          	shl    $0x4,%rax
  67:	48 01 d0             	add    %rdx,%rax
  6a:	48 c1 e0 02          	shl    $0x2,%rax
  6e:	48 01 c8             	add    %rcx,%rax
  71:	48 05 cc 00 00 00    	add    $0xcc,%rax
  77:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
  7d:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  80:	48 89 d0             	mov    %rdx,%rax
  83:	48 c1 e0 04          	shl    $0x4,%rax
  87:	48 01 d0             	add    %rdx,%rax
  8a:	48 c1 e0 02          	shl    $0x2,%rax
  8e:	48 8d 90 c0 00 00 00 	lea    0xc0(%rax),%rdx
  95:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  99:	48 01 d0             	add    %rdx,%rax
  9c:	48 83 c0 10          	add    $0x10,%rax
  a0:	ba 10 00 00 00       	mov    $0x10,%edx
  a5:	be 00 00 00 00       	mov    $0x0,%esi
  aa:	48 89 c7             	mov    %rax,%rdi
  ad:	e8 00 00 00 00       	call   b2 <E131Bridge::CheckMergeTimeouts(unsigned int)+0xb2>
  b2:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  b6:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  b9:	48 89 d0             	mov    %rdx,%rax
  bc:	48 c1 e0 04          	shl    $0x4,%rax
  c0:	48 01 d0             	add    %rdx,%rax
  c3:	48 c1 e0 02          	shl    $0x2,%rax
  c7:	48 01 c8             	add    %rcx,%rax
  ca:	48 05 08 01 00 00    	add    $0x108,%rax
  d0:	c6 00 00             	movb   $0x0,(%rax)
  d3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  d7:	8b 48 04             	mov    0x4(%rax),%ecx
  da:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  de:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  e1:	48 89 d0             	mov    %rdx,%rax
  e4:	48 c1 e0 04          	shl    $0x4,%rax
  e8:	48 01 d0             	add    %rdx,%rax
  eb:	48 c1 e0 02          	shl    $0x2,%rax
  ef:	48 01 f0             	add    %rsi,%rax
  f2:	48 05 e4 00 00 00    	add    $0xe4,%rax
  f8:	8b 10                	mov    (%rax),%edx
  fa:	89 c8                	mov    %ecx,%eax
  fc:	29 d0                	sub    %edx,%eax
  fe:	89 45 f4             	mov    %eax,-0xc(%rbp)
 101:	81 7d f4 10 27 00 00 	cmpl   $0x2710,-0xc(%rbp)
 108:	76 7a                	jbe    184 <E131Bridge::CheckMergeTimeouts(unsigned int)+0x184>
 10a:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
 10e:	8b 55 d4             	mov    -0x2c(%rbp),%edx
 111:	48 89 d0             	mov    %rdx,%rax
 114:	48 c1 e0 04          	shl    $0x4,%rax
 118:	48 01 d0             	add    %rdx,%rax
 11b:	48 c1 e0 02          	shl    $0x2,%rax
 11f:	48 01 c8             	add    %rcx,%rax
 122:	48 05 e8 00 00 00    	add    $0xe8,%rax
 128:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
 12e:	8b 55 d4             	mov    -0x2c(%rbp),%edx
 131:	48 89 d0             	mov    %rdx,%rax
 134:	48 c1 e0 04          	shl    $0x4,%rax
 138:	48 01 d0             	add    %rdx,%rax
 13b:	48 c1 e0 02          	shl    $0x2,%rax
 13f:	48 8d 90 d0 00 00 00 	lea    0xd0(%rax),%rdx
 146:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 14a:	48 01 d0             	add    %rdx,%rax
 14d:	48 83 c0 1c          	add    $0x1c,%rax
 151:	ba 10 00 00 00       	mov    $0x10,%edx
 156:	be 00 00 00 00       	mov    $0x0,%esi
 15b:	48 89 c7             	mov    %rax,%rdi
 15e:	e8 00 00 00 00       	call   163 <E131Bridge::CheckMergeTimeouts(unsigned int)+0x163>
 163:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
 167:	8b 55 d4             	mov    -0x2c(%rbp),%edx
 16a:	48 89 d0             	mov    %rdx,%rax
 16d:	48 c1 e0 04          	shl    $0x4,%rax
 171:	48 01 d0             	add    %rdx,%rax
 174:	48 c1 e0 02          	shl    $0x2,%rax
 178:	48 01 c8             	add    %rcx,%rax
 17b:	48 05 08 01 00 00    	add    $0x108,%rax
 181:	c6 00 00             	movb   $0x0,(%rax)
 184:	c6 45 eb 00          	movb   $0x0,-0x15(%rbp)
 188:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
 18f:	eb 33                	jmp    1c4 <E131Bridge::CheckMergeTimeouts(unsigned int)+0x1c4>
 191:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
 195:	8b 55 ec             	mov    -0x14(%rbp),%edx
 198:	48 89 d0             	mov    %rdx,%rax
 19b:	48 c1 e0 04          	shl    $0x4,%rax
 19f:	48 01 d0             	add    %rdx,%rax
 1a2:	48 c1 e0 02          	shl    $0x2,%rax
 1a6:	48 01 c8             	add    %rcx,%rax
 1a9:	48 05 08 01 00 00    	add    $0x108,%rax
 1af:	0f b6 00             	movzbl (%rax),%eax
 1b2:	0a 45 eb             	or     -0x15(%rbp),%al
 1b5:	0f b6 c0             	movzbl %al,%eax
 1b8:	85 c0                	test   %eax,%eax
 1ba:	0f 95 c0             	setne  %al
 1bd:	88 45 eb             	mov    %al,-0x15(%rbp)
 1c0:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
 1c4:	83 7d ec 03          	cmpl   $0x3,-0x14(%rbp)
 1c8:	76 c7                	jbe    191 <E131Bridge::CheckMergeTimeouts(unsigned int)+0x191>
 1ca:	0f b6 45 eb          	movzbl -0x15(%rbp),%eax
 1ce:	83 f0 01             	xor    $0x1,%eax
 1d1:	84 c0                	test   %al,%al
 1d3:	74 10                	je     1e5 <E131Bridge::CheckMergeTimeouts(unsigned int)+0x1e5>
 1d5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 1d9:	c6 40 78 01          	movb   $0x1,0x78(%rax)
 1dd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 1e1:	c6 40 75 00          	movb   $0x0,0x75(%rax)
 1e5:	90                   	nop
 1e6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 1ea:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 1f1:	00 00 
 1f3:	74 05                	je     1fa <E131Bridge::CheckMergeTimeouts(unsigned int)+0x1fa>
 1f5:	e8 00 00 00 00       	call   1fa <E131Bridge::CheckMergeTimeouts(unsigned int)+0x1fa>
 1fa:	c9                   	leave  
 1fb:	c3                   	ret    

Disassembly of section .text._ZNK10E131Bridge17IsPriorityTimeOutEj:

0000000000000000 <E131Bridge::IsPriorityTimeOut(unsigned int) const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  13:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1a:	00 00 
  1c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  20:	31 c0                	xor    %eax,%eax
  22:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  26:	8b 48 04             	mov    0x4(%rax),%ecx
  29:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  2d:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  30:	48 89 d0             	mov    %rdx,%rax
  33:	48 c1 e0 04          	shl    $0x4,%rax
  37:	48 01 d0             	add    %rdx,%rax
  3a:	48 c1 e0 02          	shl    $0x2,%rax
  3e:	48 01 f0             	add    %rsi,%rax
  41:	48 05 c8 00 00 00    	add    $0xc8,%rax
  47:	8b 10                	mov    (%rax),%edx
  49:	89 c8                	mov    %ecx,%eax
  4b:	29 d0                	sub    %edx,%eax
  4d:	89 45 f0             	mov    %eax,-0x10(%rbp)
  50:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  54:	8b 48 04             	mov    0x4(%rax),%ecx
  57:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  5b:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  5e:	48 89 d0             	mov    %rdx,%rax
  61:	48 c1 e0 04          	shl    $0x4,%rax
  65:	48 01 d0             	add    %rdx,%rax
  68:	48 c1 e0 02          	shl    $0x2,%rax
  6c:	48 01 f0             	add    %rsi,%rax
  6f:	48 05 e4 00 00 00    	add    $0xe4,%rax
  75:	8b 10                	mov    (%rax),%edx
  77:	89 c8                	mov    %ecx,%eax
  79:	29 d0                	sub    %edx,%eax
  7b:	89 45 f4             	mov    %eax,-0xc(%rbp)
  7e:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  82:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  85:	48 89 d0             	mov    %rdx,%rax
  88:	48 c1 e0 04          	shl    $0x4,%rax
  8c:	48 01 d0             	add    %rdx,%rax
  8f:	48 c1 e0 02          	shl    $0x2,%rax
  93:	48 01 c8             	add    %rcx,%rax
  96:	48 05 cc 00 00 00    	add    $0xcc,%rax
  9c:	8b 00                	mov    (%rax),%eax
  9e:	85 c0                	test   %eax,%eax
  a0:	74 4a                	je     ec <E131Bridge::IsPriorityTimeOut(unsigned int) const+0xec>
  a2:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  a6:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  a9:	48 89 d0             	mov    %rdx,%rax
  ac:	48 c1 e0 04          	shl    $0x4,%rax
  b0:	48 01 d0             	add    %rdx,%rax
  b3:	48 c1 e0 02          	shl    $0x2,%rax
  b7:	48 01 c8             	add    %rcx,%rax
  ba:	48 05 e8 00 00 00    	add    $0xe8,%rax
  c0:	8b 00                	mov    (%rax),%eax
  c2:	85 c0                	test   %eax,%eax
  c4:	74 26                	je     ec <E131Bridge::IsPriorityTimeOut(unsigned int) const+0xec>
  c6:	81 7d f0 0f 27 00 00 	cmpl   $0x270f,-0x10(%rbp)
  cd:	76 09                	jbe    d8 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0xd8>
  cf:	81 7d f4 0f 27 00 00 	cmpl   $0x270f,-0xc(%rbp)
  d6:	77 0a                	ja     e2 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0xe2>
  d8:	b8 00 00 00 00       	mov    $0x0,%eax
  dd:	e9 bf 00 00 00       	jmp    1a1 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x1a1>
  e2:	b8 01 00 00 00       	mov    $0x1,%eax
  e7:	e9 b5 00 00 00       	jmp    1a1 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x1a1>
  ec:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  f0:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  f3:	48 89 d0             	mov    %rdx,%rax
  f6:	48 c1 e0 04          	shl    $0x4,%rax
  fa:	48 01 d0             	add    %rdx,%rax
  fd:	48 c1 e0 02          	shl    $0x2,%rax
 101:	48 01 c8             	add    %rcx,%rax
 104:	48 05 cc 00 00 00    	add    $0xcc,%rax
 10a:	8b 00                	mov    (%rax),%eax
 10c:	85 c0                	test   %eax,%eax
 10e:	74 34                	je     144 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x144>
 110:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
 114:	8b 55 e4             	mov    -0x1c(%rbp),%edx
 117:	48 89 d0             	mov    %rdx,%rax
 11a:	48 c1 e0 04          	shl    $0x4,%rax
 11e:	48 01 d0             	add    %rdx,%rax
 121:	48 c1 e0 02          	shl    $0x2,%rax
 125:	48 01 c8             	add    %rcx,%rax
 128:	48 05 e8 00 00 00    	add    $0xe8,%rax
 12e:	8b 00                	mov    (%rax),%eax
 130:	85 c0                	test   %eax,%eax
 132:	75 10                	jne    144 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x144>
 134:	81 7d f0 10 27 00 00 	cmpl   $0x2710,-0x10(%rbp)
 13b:	76 5f                	jbe    19c <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x19c>
 13d:	b8 01 00 00 00       	mov    $0x1,%eax
 142:	eb 5d                	jmp    1a1 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x1a1>
 144:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
 148:	8b 55 e4             	mov    -0x1c(%rbp),%edx
 14b:	48 89 d0             	mov    %rdx,%rax
 14e:	48 c1 e0 04          	shl    $0x4,%rax
 152:	48 01 d0             	add    %rdx,%rax
 155:	48 c1 e0 02          	shl    $0x2,%rax
 159:	48 01 c8             	add    %rcx,%rax
 15c:	48 05 cc 00 00 00    	add    $0xcc,%rax
 162:	8b 00                	mov    (%rax),%eax
 164:	85 c0                	test   %eax,%eax
 166:	75 34                	jne    19c <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x19c>
 168:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
 16c:	8b 55 e4             	mov    -0x1c(%rbp),%edx
 16f:	48 89 d0             	mov    %rdx,%rax
 172:	48 c1 e0 04          	shl    $0x4,%rax
 176:	48 01 d0             	add    %rdx,%rax
 179:	48 c1 e0 02          	shl    $0x2,%rax
 17d:	48 01 c8             	add    %rcx,%rax
 180:	48 05 e8 00 00 00    	add    $0xe8,%rax
 186:	8b 00                	mov    (%rax),%eax
 188:	85 c0                	test   %eax,%eax
 18a:	74 10                	je     19c <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x19c>
 18c:	81 7d f4 10 27 00 00 	cmpl   $0x2710,-0xc(%rbp)
 193:	76 07                	jbe    19c <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x19c>
 195:	b8 01 00 00 00       	mov    $0x1,%eax
 19a:	eb 05                	jmp    1a1 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x1a1>
 19c:	b8 00 00 00 00       	mov    $0x0,%eax
 1a1:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
 1a5:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
 1ac:	00 00 
 1ae:	74 05                	je     1b5 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x1b5>
 1b0:	e8 00 00 00 00       	call   1b5 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x1b5>
 1b5:	c9                   	leave  
 1b6:	c3                   	ret    

Disassembly of section .text._ZNK10E131Bridge12isIpCidMatchEPKN10e131bridge6SourceE:

0000000000000000 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  27:	8b 50 04             	mov    0x4(%rax),%edx
  2a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2e:	8b 80 18 02 00 00    	mov    0x218(%rax),%eax
  34:	39 c2                	cmp    %eax,%edx
  36:	74 07                	je     3f <E131Bridge::isIpCidMatch(e131bridge::Source const*) const+0x3f>
  38:	b8 00 00 00 00       	mov    $0x0,%eax
  3d:	eb 3f                	jmp    7e <E131Bridge::isIpCidMatch(e131bridge::Source const*) const+0x7e>
  3f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43:	48 8b 80 10 02 00 00 	mov    0x210(%rax),%rax
  4a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  4e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  52:	48 8d 48 16          	lea    0x16(%rax),%rcx
  56:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  5a:	48 83 c0 08          	add    $0x8,%rax
  5e:	ba 10 00 00 00       	mov    $0x10,%edx
  63:	48 89 ce             	mov    %rcx,%rsi
  66:	48 89 c7             	mov    %rax,%rdi
  69:	e8 00 00 00 00       	call   6e <E131Bridge::isIpCidMatch(e131bridge::Source const*) const+0x6e>
  6e:	85 c0                	test   %eax,%eax
  70:	74 07                	je     79 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const+0x79>
  72:	b8 00 00 00 00       	mov    $0x0,%eax
  77:	eb 05                	jmp    7e <E131Bridge::isIpCidMatch(e131bridge::Source const*) const+0x7e>
  79:	b8 01 00 00 00       	mov    $0x1,%eax
  7e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  82:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  89:	00 00 
  8b:	74 05                	je     92 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const+0x92>
  8d:	e8 00 00 00 00       	call   92 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const+0x92>
  92:	c9                   	leave  
  93:	c3                   	ret    

Disassembly of section .text._ZN10E131Bridge9HandleDmxEv:

0000000000000000 <E131Bridge::HandleDmx()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 50          	sub    $0x50,%rsp
   c:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  23:	48 8b 80 10 02 00 00 	mov    0x210(%rax),%rax
  2a:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  2e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  32:	48 83 c0 7e          	add    $0x7e,%rax
  36:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  3a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  3e:	0f b7 40 7b          	movzwl 0x7b(%rax),%eax
  42:	0f b7 c0             	movzwl %ax,%eax
  45:	66 c1 c0 08          	rol    $0x8,%ax
  49:	0f b7 c0             	movzwl %ax,%eax
  4c:	83 e8 01             	sub    $0x1,%eax
  4f:	89 45 cc             	mov    %eax,-0x34(%rbp)
  52:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%rbp)
  59:	e9 a8 07 00 00       	jmp    806 <E131Bridge::HandleDmx()+0x806>
  5e:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
  62:	8b 55 c8             	mov    -0x38(%rbp),%edx
  65:	48 89 d0             	mov    %rdx,%rax
  68:	48 01 c0             	add    %rax,%rax
  6b:	48 01 d0             	add    %rdx,%rax
  6e:	48 c1 e0 02          	shl    $0x2,%rax
  72:	48 01 c8             	add    %rcx,%rax
  75:	48 05 9c 00 00 00    	add    $0x9c,%rax
  7b:	8b 00                	mov    (%rax),%eax
  7d:	83 f8 01             	cmp    $0x1,%eax
  80:	0f 85 7c 07 00 00    	jne    802 <E131Bridge::HandleDmx()+0x802>
  86:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8a:	0f b7 48 71          	movzwl 0x71(%rax),%ecx
  8e:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  92:	8b 55 c8             	mov    -0x38(%rbp),%edx
  95:	48 89 d0             	mov    %rdx,%rax
  98:	48 01 c0             	add    %rax,%rax
  9b:	48 01 d0             	add    %rdx,%rax
  9e:	48 c1 e0 02          	shl    $0x2,%rax
  a2:	48 01 f0             	add    %rsi,%rax
  a5:	48 05 98 00 00 00    	add    $0x98,%rax
  ab:	0f b7 00             	movzwl (%rax),%eax
  ae:	0f b7 c0             	movzwl %ax,%eax
  b1:	66 c1 c0 08          	rol    $0x8,%ax
  b5:	66 39 c1             	cmp    %ax,%cx
  b8:	0f 85 37 07 00 00    	jne    7f5 <E131Bridge::HandleDmx()+0x7f5>
  be:	8b 55 c8             	mov    -0x38(%rbp),%edx
  c1:	48 89 d0             	mov    %rdx,%rax
  c4:	48 c1 e0 04          	shl    $0x4,%rax
  c8:	48 01 d0             	add    %rdx,%rax
  cb:	48 c1 e0 02          	shl    $0x2,%rax
  cf:	48 8d 90 c0 00 00 00 	lea    0xc0(%rax),%rdx
  d6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  da:	48 01 d0             	add    %rdx,%rax
  dd:	48 83 c0 08          	add    $0x8,%rax
  e1:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  e5:	8b 55 c8             	mov    -0x38(%rbp),%edx
  e8:	48 89 d0             	mov    %rdx,%rax
  eb:	48 c1 e0 04          	shl    $0x4,%rax
  ef:	48 01 d0             	add    %rdx,%rax
  f2:	48 c1 e0 02          	shl    $0x2,%rax
  f6:	48 8d 90 d0 00 00 00 	lea    0xd0(%rax),%rdx
  fd:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 101:	48 01 d0             	add    %rdx,%rax
 104:	48 83 c0 14          	add    $0x14,%rax
 108:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
 10c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 110:	8b 40 04             	mov    0x4(%rax),%eax
 113:	89 45 d0             	mov    %eax,-0x30(%rbp)
 116:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 11a:	8b 40 04             	mov    0x4(%rax),%eax
 11d:	89 45 d4             	mov    %eax,-0x2c(%rbp)
 120:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
 124:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 128:	48 89 d6             	mov    %rdx,%rsi
 12b:	48 89 c7             	mov    %rax,%rdi
 12e:	e8 00 00 00 00       	call   133 <E131Bridge::HandleDmx()+0x133>
 133:	88 45 c3             	mov    %al,-0x3d(%rbp)
 136:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
 13a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 13e:	48 89 d6             	mov    %rdx,%rsi
 141:	48 89 c7             	mov    %rax,%rdi
 144:	e8 00 00 00 00       	call   149 <E131Bridge::HandleDmx()+0x149>
 149:	88 45 c4             	mov    %al,-0x3c(%rbp)
 14c:	80 7d c3 00          	cmpb   $0x0,-0x3d(%rbp)
 150:	74 37                	je     189 <E131Bridge::HandleDmx()+0x189>
 152:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 156:	0f b6 50 6f          	movzbl 0x6f(%rax),%edx
 15a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 15e:	0f b6 48 18          	movzbl 0x18(%rax),%ecx
 162:	89 d0                	mov    %edx,%eax
 164:	29 c8                	sub    %ecx,%eax
 166:	88 45 c6             	mov    %al,-0x3a(%rbp)
 169:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 16d:	0f b6 50 6f          	movzbl 0x6f(%rax),%edx
 171:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 175:	88 50 18             	mov    %dl,0x18(%rax)
 178:	80 7d c6 00          	cmpb   $0x0,-0x3a(%rbp)
 17c:	7f 47                	jg     1c5 <E131Bridge::HandleDmx()+0x1c5>
 17e:	80 7d c6 ed          	cmpb   $0xed,-0x3a(%rbp)
 182:	7c 41                	jl     1c5 <E131Bridge::HandleDmx()+0x1c5>
 184:	e9 79 06 00 00       	jmp    802 <E131Bridge::HandleDmx()+0x802>
 189:	80 7d c4 00          	cmpb   $0x0,-0x3c(%rbp)
 18d:	74 36                	je     1c5 <E131Bridge::HandleDmx()+0x1c5>
 18f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 193:	0f b6 50 6f          	movzbl 0x6f(%rax),%edx
 197:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 19b:	0f b6 48 18          	movzbl 0x18(%rax),%ecx
 19f:	89 d0                	mov    %edx,%eax
 1a1:	29 c8                	sub    %ecx,%eax
 1a3:	88 45 c5             	mov    %al,-0x3b(%rbp)
 1a6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 1aa:	0f b6 50 6f          	movzbl 0x6f(%rax),%edx
 1ae:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 1b2:	88 50 18             	mov    %dl,0x18(%rax)
 1b5:	80 7d c5 00          	cmpb   $0x0,-0x3b(%rbp)
 1b9:	7f 0a                	jg     1c5 <E131Bridge::HandleDmx()+0x1c5>
 1bb:	80 7d c5 ed          	cmpb   $0xed,-0x3b(%rbp)
 1bf:	0f 8d 33 06 00 00    	jge    7f8 <E131Bridge::HandleDmx()+0x7f8>
 1c5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 1c9:	0f b6 40 70          	movzbl 0x70(%rax),%eax
 1cd:	84 c0                	test   %al,%al
 1cf:	0f 88 26 06 00 00    	js     7fb <E131Bridge::HandleDmx()+0x7fb>
 1d5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 1d9:	0f b6 40 70          	movzbl 0x70(%rax),%eax
 1dd:	0f b6 c0             	movzbl %al,%eax
 1e0:	83 e0 40             	and    $0x40,%eax
 1e3:	85 c0                	test   %eax,%eax
 1e5:	74 2b                	je     212 <E131Bridge::HandleDmx()+0x212>
 1e7:	80 7d c3 00          	cmpb   $0x0,-0x3d(%rbp)
 1eb:	75 0a                	jne    1f7 <E131Bridge::HandleDmx()+0x1f7>
 1ed:	80 7d c4 00          	cmpb   $0x0,-0x3c(%rbp)
 1f1:	0f 84 07 06 00 00    	je     7fe <E131Bridge::HandleDmx()+0x7fe>
 1f7:	0f b6 55 c4          	movzbl -0x3c(%rbp),%edx
 1fb:	0f b6 4d c3          	movzbl -0x3d(%rbp),%ecx
 1ff:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 203:	89 ce                	mov    %ecx,%esi
 205:	48 89 c7             	mov    %rax,%rdi
 208:	e8 00 00 00 00       	call   20d <E131Bridge::HandleDmx()+0x20d>
 20d:	e9 ec 05 00 00       	jmp    7fe <E131Bridge::HandleDmx()+0x7fe>
 212:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 216:	0f b6 40 75          	movzbl 0x75(%rax),%eax
 21a:	84 c0                	test   %al,%al
 21c:	74 24                	je     242 <E131Bridge::HandleDmx()+0x242>
 21e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 222:	0f b6 40 79          	movzbl 0x79(%rax),%eax
 226:	83 f0 01             	xor    $0x1,%eax
 229:	0f b6 c0             	movzbl %al,%eax
 22c:	48 85 c0             	test   %rax,%rax
 22f:	74 11                	je     242 <E131Bridge::HandleDmx()+0x242>
 231:	8b 55 c8             	mov    -0x38(%rbp),%edx
 234:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 238:	89 d6                	mov    %edx,%esi
 23a:	48 89 c7             	mov    %rax,%rdi
 23d:	e8 00 00 00 00       	call   242 <E131Bridge::HandleDmx()+0x242>
 242:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 246:	0f b6 50 6c          	movzbl 0x6c(%rax),%edx
 24a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 24e:	0f b6 80 8c 00 00 00 	movzbl 0x8c(%rax),%eax
 255:	38 c2                	cmp    %al,%dl
 257:	73 30                	jae    289 <E131Bridge::HandleDmx()+0x289>
 259:	8b 55 c8             	mov    -0x38(%rbp),%edx
 25c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 260:	89 d6                	mov    %edx,%esi
 262:	48 89 c7             	mov    %rax,%rdi
 265:	e8 00 00 00 00       	call   26a <E131Bridge::HandleDmx()+0x26a>
 26a:	83 f0 01             	xor    $0x1,%eax
 26d:	84 c0                	test   %al,%al
 26f:	0f 85 8c 05 00 00    	jne    801 <E131Bridge::HandleDmx()+0x801>
 275:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 279:	0f b6 50 6c          	movzbl 0x6c(%rax),%edx
 27d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 281:	88 90 8c 00 00 00    	mov    %dl,0x8c(%rax)
 287:	eb 79                	jmp    302 <E131Bridge::HandleDmx()+0x302>
 289:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 28d:	0f b6 50 6c          	movzbl 0x6c(%rax),%edx
 291:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 295:	0f b6 80 8c 00 00 00 	movzbl 0x8c(%rax),%eax
 29c:	38 c2                	cmp    %al,%dl
 29e:	76 62                	jbe    302 <E131Bridge::HandleDmx()+0x302>
 2a0:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
 2a4:	8b 55 c8             	mov    -0x38(%rbp),%edx
 2a7:	48 89 d0             	mov    %rdx,%rax
 2aa:	48 c1 e0 04          	shl    $0x4,%rax
 2ae:	48 01 d0             	add    %rdx,%rax
 2b1:	48 c1 e0 02          	shl    $0x2,%rax
 2b5:	48 01 c8             	add    %rcx,%rax
 2b8:	48 05 cc 00 00 00    	add    $0xcc,%rax
 2be:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
 2c4:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
 2c8:	8b 55 c8             	mov    -0x38(%rbp),%edx
 2cb:	48 89 d0             	mov    %rdx,%rax
 2ce:	48 c1 e0 04          	shl    $0x4,%rax
 2d2:	48 01 d0             	add    %rdx,%rax
 2d5:	48 c1 e0 02          	shl    $0x2,%rax
 2d9:	48 01 c8             	add    %rcx,%rax
 2dc:	48 05 e8 00 00 00    	add    $0xe8,%rax
 2e2:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
 2e8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 2ec:	c6 40 75 00          	movb   $0x0,0x75(%rax)
 2f0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 2f4:	0f b6 50 6c          	movzbl 0x6c(%rax),%edx
 2f8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 2fc:	88 90 8c 00 00 00    	mov    %dl,0x8c(%rax)
 302:	83 7d d0 00          	cmpl   $0x0,-0x30(%rbp)
 306:	75 6a                	jne    372 <E131Bridge::HandleDmx()+0x372>
 308:	83 7d d4 00          	cmpl   $0x0,-0x2c(%rbp)
 30c:	75 64                	jne    372 <E131Bridge::HandleDmx()+0x372>
 30e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 312:	8b 90 18 02 00 00    	mov    0x218(%rax),%edx
 318:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 31c:	89 50 04             	mov    %edx,0x4(%rax)
 31f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 323:	0f b6 50 6f          	movzbl 0x6f(%rax),%edx
 327:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 32b:	88 50 18             	mov    %dl,0x18(%rax)
 32e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 332:	48 83 c0 16          	add    $0x16,%rax
 336:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
 33a:	48 8d 4a 08          	lea    0x8(%rdx),%rcx
 33e:	48 8b 50 08          	mov    0x8(%rax),%rdx
 342:	48 8b 00             	mov    (%rax),%rax
 345:	48 89 01             	mov    %rax,(%rcx)
 348:	48 89 51 08          	mov    %rdx,0x8(%rcx)
 34c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 350:	8b 50 04             	mov    0x4(%rax),%edx
 353:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 357:	89 10                	mov    %edx,(%rax)
 359:	8b 55 cc             	mov    -0x34(%rbp),%edx
 35c:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
 360:	8b 45 c8             	mov    -0x38(%rbp),%eax
 363:	48 89 ce             	mov    %rcx,%rsi
 366:	89 c7                	mov    %eax,%edi
 368:	e8 00 00 00 00       	call   36d <E131Bridge::HandleDmx()+0x36d>
 36d:	e9 b8 02 00 00       	jmp    62a <E131Bridge::HandleDmx()+0x62a>
 372:	80 7d c3 00          	cmpb   $0x0,-0x3d(%rbp)
 376:	74 3b                	je     3b3 <E131Bridge::HandleDmx()+0x3b3>
 378:	83 7d d4 00          	cmpl   $0x0,-0x2c(%rbp)
 37c:	75 35                	jne    3b3 <E131Bridge::HandleDmx()+0x3b3>
 37e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 382:	0f b6 50 6f          	movzbl 0x6f(%rax),%edx
 386:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 38a:	88 50 18             	mov    %dl,0x18(%rax)
 38d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 391:	8b 50 04             	mov    0x4(%rax),%edx
 394:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 398:	89 10                	mov    %edx,(%rax)
 39a:	8b 55 cc             	mov    -0x34(%rbp),%edx
 39d:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
 3a1:	8b 45 c8             	mov    -0x38(%rbp),%eax
 3a4:	48 89 ce             	mov    %rcx,%rsi
 3a7:	89 c7                	mov    %eax,%edi
 3a9:	e8 00 00 00 00       	call   3ae <E131Bridge::HandleDmx()+0x3ae>
 3ae:	e9 77 02 00 00       	jmp    62a <E131Bridge::HandleDmx()+0x62a>
 3b3:	83 7d d0 00          	cmpl   $0x0,-0x30(%rbp)
 3b7:	75 3b                	jne    3f4 <E131Bridge::HandleDmx()+0x3f4>
 3b9:	80 7d c4 00          	cmpb   $0x0,-0x3c(%rbp)
 3bd:	74 35                	je     3f4 <E131Bridge::HandleDmx()+0x3f4>
 3bf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 3c3:	0f b6 50 6f          	movzbl 0x6f(%rax),%edx
 3c7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 3cb:	88 50 18             	mov    %dl,0x18(%rax)
 3ce:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 3d2:	8b 50 04             	mov    0x4(%rax),%edx
 3d5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 3d9:	89 10                	mov    %edx,(%rax)
 3db:	8b 55 cc             	mov    -0x34(%rbp),%edx
 3de:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
 3e2:	8b 45 c8             	mov    -0x38(%rbp),%eax
 3e5:	48 89 ce             	mov    %rcx,%rsi
 3e8:	89 c7                	mov    %eax,%edi
 3ea:	e8 00 00 00 00       	call   3ef <E131Bridge::HandleDmx()+0x3ef>
 3ef:	e9 36 02 00 00       	jmp    62a <E131Bridge::HandleDmx()+0x62a>
 3f4:	0f b6 45 c3          	movzbl -0x3d(%rbp),%eax
 3f8:	83 f0 01             	xor    $0x1,%eax
 3fb:	84 c0                	test   %al,%al
 3fd:	0f 84 9c 00 00 00    	je     49f <E131Bridge::HandleDmx()+0x49f>
 403:	83 7d d4 00          	cmpl   $0x0,-0x2c(%rbp)
 407:	0f 85 92 00 00 00    	jne    49f <E131Bridge::HandleDmx()+0x49f>
 40d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 411:	8b 90 18 02 00 00    	mov    0x218(%rax),%edx
 417:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 41b:	89 50 04             	mov    %edx,0x4(%rax)
 41e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 422:	0f b6 50 6f          	movzbl 0x6f(%rax),%edx
 426:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 42a:	88 50 18             	mov    %dl,0x18(%rax)
 42d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 431:	48 83 c0 16          	add    $0x16,%rax
 435:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
 439:	48 8d 4a 08          	lea    0x8(%rdx),%rcx
 43d:	48 8b 50 08          	mov    0x8(%rax),%rdx
 441:	48 8b 00             	mov    (%rax),%rax
 444:	48 89 01             	mov    %rax,(%rcx)
 447:	48 89 51 08          	mov    %rdx,0x8(%rcx)
 44b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 44f:	8b 50 04             	mov    0x4(%rax),%edx
 452:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 456:	89 10                	mov    %edx,(%rax)
 458:	8b 55 c8             	mov    -0x38(%rbp),%edx
 45b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 45f:	89 d6                	mov    %edx,%esi
 461:	48 89 c7             	mov    %rax,%rdi
 464:	e8 00 00 00 00       	call   469 <E131Bridge::HandleDmx()+0x469>
 469:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
 46d:	8b 55 c8             	mov    -0x38(%rbp),%edx
 470:	48 89 d0             	mov    %rdx,%rax
 473:	48 c1 e0 04          	shl    $0x4,%rax
 477:	48 01 d0             	add    %rdx,%rax
 47a:	48 c1 e0 02          	shl    $0x2,%rax
 47e:	48 01 c8             	add    %rcx,%rax
 481:	48 05 00 01 00 00    	add    $0x100,%rax
 487:	8b 08                	mov    (%rax),%ecx
 489:	8b 55 cc             	mov    -0x34(%rbp),%edx
 48c:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
 490:	8b 45 c8             	mov    -0x38(%rbp),%eax
 493:	89 c7                	mov    %eax,%edi
 495:	e8 00 00 00 00       	call   49a <E131Bridge::HandleDmx()+0x49a>
 49a:	e9 8b 01 00 00       	jmp    62a <E131Bridge::HandleDmx()+0x62a>
 49f:	83 7d d0 00          	cmpl   $0x0,-0x30(%rbp)
 4a3:	0f 85 a1 00 00 00    	jne    54a <E131Bridge::HandleDmx()+0x54a>
 4a9:	0f b6 45 c4          	movzbl -0x3c(%rbp),%eax
 4ad:	83 f0 01             	xor    $0x1,%eax
 4b0:	84 c0                	test   %al,%al
 4b2:	0f 84 92 00 00 00    	je     54a <E131Bridge::HandleDmx()+0x54a>
 4b8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 4bc:	8b 90 18 02 00 00    	mov    0x218(%rax),%edx
 4c2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 4c6:	89 50 04             	mov    %edx,0x4(%rax)
 4c9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 4cd:	0f b6 50 6f          	movzbl 0x6f(%rax),%edx
 4d1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 4d5:	88 50 18             	mov    %dl,0x18(%rax)
 4d8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 4dc:	48 83 c0 16          	add    $0x16,%rax
 4e0:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
 4e4:	48 8d 4a 08          	lea    0x8(%rdx),%rcx
 4e8:	48 8b 50 08          	mov    0x8(%rax),%rdx
 4ec:	48 8b 00             	mov    (%rax),%rax
 4ef:	48 89 01             	mov    %rax,(%rcx)
 4f2:	48 89 51 08          	mov    %rdx,0x8(%rcx)
 4f6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 4fa:	8b 50 04             	mov    0x4(%rax),%edx
 4fd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 501:	89 10                	mov    %edx,(%rax)
 503:	8b 55 c8             	mov    -0x38(%rbp),%edx
 506:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 50a:	89 d6                	mov    %edx,%esi
 50c:	48 89 c7             	mov    %rax,%rdi
 50f:	e8 00 00 00 00       	call   514 <E131Bridge::HandleDmx()+0x514>
 514:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
 518:	8b 55 c8             	mov    -0x38(%rbp),%edx
 51b:	48 89 d0             	mov    %rdx,%rax
 51e:	48 c1 e0 04          	shl    $0x4,%rax
 522:	48 01 d0             	add    %rdx,%rax
 525:	48 c1 e0 02          	shl    $0x2,%rax
 529:	48 01 c8             	add    %rcx,%rax
 52c:	48 05 00 01 00 00    	add    $0x100,%rax
 532:	8b 08                	mov    (%rax),%ecx
 534:	8b 55 cc             	mov    -0x34(%rbp),%edx
 537:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
 53b:	8b 45 c8             	mov    -0x38(%rbp),%eax
 53e:	89 c7                	mov    %eax,%edi
 540:	e8 00 00 00 00       	call   545 <E131Bridge::HandleDmx()+0x545>
 545:	e9 e0 00 00 00       	jmp    62a <E131Bridge::HandleDmx()+0x62a>
 54a:	80 7d c3 00          	cmpb   $0x0,-0x3d(%rbp)
 54e:	74 6b                	je     5bb <E131Bridge::HandleDmx()+0x5bb>
 550:	0f b6 45 c4          	movzbl -0x3c(%rbp),%eax
 554:	83 f0 01             	xor    $0x1,%eax
 557:	84 c0                	test   %al,%al
 559:	74 60                	je     5bb <E131Bridge::HandleDmx()+0x5bb>
 55b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 55f:	0f b6 50 6f          	movzbl 0x6f(%rax),%edx
 563:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 567:	88 50 18             	mov    %dl,0x18(%rax)
 56a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 56e:	8b 50 04             	mov    0x4(%rax),%edx
 571:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 575:	89 10                	mov    %edx,(%rax)
 577:	8b 55 c8             	mov    -0x38(%rbp),%edx
 57a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 57e:	89 d6                	mov    %edx,%esi
 580:	48 89 c7             	mov    %rax,%rdi
 583:	e8 00 00 00 00       	call   588 <E131Bridge::HandleDmx()+0x588>
 588:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
 58c:	8b 55 c8             	mov    -0x38(%rbp),%edx
 58f:	48 89 d0             	mov    %rdx,%rax
 592:	48 c1 e0 04          	shl    $0x4,%rax
 596:	48 01 d0             	add    %rdx,%rax
 599:	48 c1 e0 02          	shl    $0x2,%rax
 59d:	48 01 c8             	add    %rcx,%rax
 5a0:	48 05 00 01 00 00    	add    $0x100,%rax
 5a6:	8b 08                	mov    (%rax),%ecx
 5a8:	8b 55 cc             	mov    -0x34(%rbp),%edx
 5ab:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
 5af:	8b 45 c8             	mov    -0x38(%rbp),%eax
 5b2:	89 c7                	mov    %eax,%edi
 5b4:	e8 00 00 00 00       	call   5b9 <E131Bridge::HandleDmx()+0x5b9>
 5b9:	eb 6f                	jmp    62a <E131Bridge::HandleDmx()+0x62a>
 5bb:	0f b6 45 c3          	movzbl -0x3d(%rbp),%eax
 5bf:	83 f0 01             	xor    $0x1,%eax
 5c2:	84 c0                	test   %al,%al
 5c4:	74 64                	je     62a <E131Bridge::HandleDmx()+0x62a>
 5c6:	80 7d c4 00          	cmpb   $0x0,-0x3c(%rbp)
 5ca:	74 5e                	je     62a <E131Bridge::HandleDmx()+0x62a>
 5cc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 5d0:	0f b6 50 6f          	movzbl 0x6f(%rax),%edx
 5d4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 5d8:	88 50 18             	mov    %dl,0x18(%rax)
 5db:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 5df:	8b 50 04             	mov    0x4(%rax),%edx
 5e2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 5e6:	89 10                	mov    %edx,(%rax)
 5e8:	8b 55 c8             	mov    -0x38(%rbp),%edx
 5eb:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 5ef:	89 d6                	mov    %edx,%esi
 5f1:	48 89 c7             	mov    %rax,%rdi
 5f4:	e8 00 00 00 00       	call   5f9 <E131Bridge::HandleDmx()+0x5f9>
 5f9:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
 5fd:	8b 55 c8             	mov    -0x38(%rbp),%edx
 600:	48 89 d0             	mov    %rdx,%rax
 603:	48 c1 e0 04          	shl    $0x4,%rax
 607:	48 01 d0             	add    %rdx,%rax
 60a:	48 c1 e0 02          	shl    $0x2,%rax
 60e:	48 01 c8             	add    %rcx,%rax
 611:	48 05 00 01 00 00    	add    $0x100,%rax
 617:	8b 08                	mov    (%rax),%ecx
 619:	8b 55 cc             	mov    -0x34(%rbp),%edx
 61c:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
 620:	8b 45 c8             	mov    -0x38(%rbp),%eax
 623:	89 c7                	mov    %eax,%edi
 625:	e8 00 00 00 00       	call   62a <E131Bridge::HandleDmx()+0x62a>
 62a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 62e:	0f b6 40 70          	movzbl 0x70(%rax),%eax
 632:	0f b6 c0             	movzbl %al,%eax
 635:	83 e0 20             	and    $0x20,%eax
 638:	85 c0                	test   %eax,%eax
 63a:	0f 85 b0 00 00 00    	jne    6f0 <E131Bridge::HandleDmx()+0x6f0>
 640:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 644:	0f b7 40 6d          	movzwl 0x6d(%rax),%eax
 648:	66 85 c0             	test   %ax,%ax
 64b:	0f 84 a7 00 00 00    	je     6f8 <E131Bridge::HandleDmx()+0x6f8>
 651:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 655:	0f b6 40 77          	movzbl 0x77(%rax),%eax
 659:	83 f0 01             	xor    $0x1,%eax
 65c:	84 c0                	test   %al,%al
 65e:	0f 84 94 00 00 00    	je     6f8 <E131Bridge::HandleDmx()+0x6f8>
 664:	0f b6 45 c3          	movzbl -0x3d(%rbp),%eax
 668:	83 f0 01             	xor    $0x1,%eax
 66b:	84 c0                	test   %al,%al
 66d:	74 49                	je     6b8 <E131Bridge::HandleDmx()+0x6b8>
 66f:	0f b6 45 c4          	movzbl -0x3c(%rbp),%eax
 673:	83 f0 01             	xor    $0x1,%eax
 676:	84 c0                	test   %al,%al
 678:	74 3e                	je     6b8 <E131Bridge::HandleDmx()+0x6b8>
 67a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 67e:	0f b7 40 6d          	movzwl 0x6d(%rax),%eax
 682:	0f b7 c0             	movzwl %ax,%eax
 685:	66 c1 c0 08          	rol    $0x8,%ax
 689:	0f b7 c8             	movzwl %ax,%ecx
 68c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 690:	8b 40 04             	mov    0x4(%rax),%eax
 693:	85 c0                	test   %eax,%eax
 695:	0f 95 c0             	setne  %al
 698:	0f b6 d0             	movzbl %al,%edx
 69b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 69f:	8b 40 04             	mov    0x4(%rax),%eax
 6a2:	85 c0                	test   %eax,%eax
 6a4:	0f 95 c0             	setne  %al
 6a7:	0f b6 f0             	movzbl %al,%esi
 6aa:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 6ae:	48 89 c7             	mov    %rax,%rdi
 6b1:	e8 00 00 00 00       	call   6b6 <E131Bridge::HandleDmx()+0x6b6>
 6b6:	eb 26                	jmp    6de <E131Bridge::HandleDmx()+0x6de>
 6b8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 6bc:	0f b7 40 6d          	movzwl 0x6d(%rax),%eax
 6c0:	0f b7 c0             	movzwl %ax,%eax
 6c3:	66 c1 c0 08          	rol    $0x8,%ax
 6c7:	0f b7 c8             	movzwl %ax,%ecx
 6ca:	0f b6 55 c4          	movzbl -0x3c(%rbp),%edx
 6ce:	0f b6 75 c3          	movzbl -0x3d(%rbp),%esi
 6d2:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 6d6:	48 89 c7             	mov    %rax,%rdi
 6d9:	e8 00 00 00 00       	call   6de <E131Bridge::HandleDmx()+0x6de>
 6de:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 6e2:	c6 40 77 01          	movb   $0x1,0x77(%rax)
 6e6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 6ea:	c6 40 76 01          	movb   $0x1,0x76(%rax)
 6ee:	eb 08                	jmp    6f8 <E131Bridge::HandleDmx()+0x6f8>
 6f0:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 6f4:	c6 40 77 00          	movb   $0x0,0x77(%rax)
 6f8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 6fc:	0f b6 40 76          	movzbl 0x76(%rax),%eax
 700:	83 f0 01             	xor    $0x1,%eax
 703:	84 c0                	test   %al,%al
 705:	75 0c                	jne    713 <E131Bridge::HandleDmx()+0x713>
 707:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 70b:	0f b6 40 7a          	movzbl 0x7a(%rax),%eax
 70f:	84 c0                	test   %al,%al
 711:	74 07                	je     71a <E131Bridge::HandleDmx()+0x71a>
 713:	b8 01 00 00 00       	mov    $0x1,%eax
 718:	eb 05                	jmp    71f <E131Bridge::HandleDmx()+0x71f>
 71a:	b8 00 00 00 00       	mov    $0x0,%eax
 71f:	88 45 c7             	mov    %al,-0x39(%rbp)
 722:	80 7d c7 00          	cmpb   $0x0,-0x39(%rbp)
 726:	0f 84 95 00 00 00    	je     7c1 <E131Bridge::HandleDmx()+0x7c1>
 72c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 730:	48 8b 80 20 02 00 00 	mov    0x220(%rax),%rax
 737:	8b 55 c8             	mov    -0x38(%rbp),%edx
 73a:	89 d6                	mov    %edx,%esi
 73c:	48 89 c7             	mov    %rax,%rdi
 73f:	e8 00 00 00 00       	call   744 <E131Bridge::HandleDmx()+0x744>
 744:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
 748:	8b 55 c8             	mov    -0x38(%rbp),%edx
 74b:	48 89 d0             	mov    %rdx,%rax
 74e:	48 c1 e0 04          	shl    $0x4,%rax
 752:	48 01 d0             	add    %rdx,%rax
 755:	48 c1 e0 02          	shl    $0x2,%rax
 759:	48 01 c8             	add    %rcx,%rax
 75c:	48 05 09 01 00 00    	add    $0x109,%rax
 762:	0f b6 00             	movzbl (%rax),%eax
 765:	83 f0 01             	xor    $0x1,%eax
 768:	84 c0                	test   %al,%al
 76a:	74 6d                	je     7d9 <E131Bridge::HandleDmx()+0x7d9>
 76c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 770:	48 8b 80 20 02 00 00 	mov    0x220(%rax),%rax
 777:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
 77b:	48 8b 92 20 02 00 00 	mov    0x220(%rdx),%rdx
 782:	48 8b 12             	mov    (%rdx),%rdx
 785:	48 83 c2 10          	add    $0x10,%rdx
 789:	48 8b 0a             	mov    (%rdx),%rcx
 78c:	8b 55 c8             	mov    -0x38(%rbp),%edx
 78f:	89 d6                	mov    %edx,%esi
 791:	48 89 c7             	mov    %rax,%rdi
 794:	ff d1                	call   *%rcx
 796:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
 79a:	8b 55 c8             	mov    -0x38(%rbp),%edx
 79d:	48 89 d0             	mov    %rdx,%rax
 7a0:	48 c1 e0 04          	shl    $0x4,%rax
 7a4:	48 01 d0             	add    %rdx,%rax
 7a7:	48 c1 e0 02          	shl    $0x2,%rax
 7ab:	48 01 c8             	add    %rcx,%rax
 7ae:	48 05 09 01 00 00    	add    $0x109,%rax
 7b4:	c6 00 01             	movb   $0x1,(%rax)
 7b7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 7bb:	c6 40 78 01          	movb   $0x1,0x78(%rax)
 7bf:	eb 18                	jmp    7d9 <E131Bridge::HandleDmx()+0x7d9>
 7c1:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 7c5:	48 8b 80 20 02 00 00 	mov    0x220(%rax),%rax
 7cc:	8b 55 c8             	mov    -0x38(%rbp),%edx
 7cf:	89 d6                	mov    %edx,%esi
 7d1:	48 89 c7             	mov    %rax,%rdi
 7d4:	e8 00 00 00 00       	call   7d9 <E131Bridge::HandleDmx()+0x7d9>
 7d9:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 7dd:	0f b6 80 8d 00 00 00 	movzbl 0x8d(%rax),%eax
 7e4:	83 c8 02             	or     $0x2,%eax
 7e7:	89 c2                	mov    %eax,%edx
 7e9:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 7ed:	88 90 8d 00 00 00    	mov    %dl,0x8d(%rax)
 7f3:	eb 0d                	jmp    802 <E131Bridge::HandleDmx()+0x802>
 7f5:	90                   	nop
 7f6:	eb 0a                	jmp    802 <E131Bridge::HandleDmx()+0x802>
 7f8:	90                   	nop
 7f9:	eb 07                	jmp    802 <E131Bridge::HandleDmx()+0x802>
 7fb:	90                   	nop
 7fc:	eb 04                	jmp    802 <E131Bridge::HandleDmx()+0x802>
 7fe:	90                   	nop
 7ff:	eb 01                	jmp    802 <E131Bridge::HandleDmx()+0x802>
 801:	90                   	nop
 802:	83 45 c8 01          	addl   $0x1,-0x38(%rbp)
 806:	83 7d c8 03          	cmpl   $0x3,-0x38(%rbp)
 80a:	0f 86 4e f8 ff ff    	jbe    5e <E131Bridge::HandleDmx()+0x5e>
 810:	90                   	nop
 811:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 815:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 81c:	00 00 
 81e:	74 05                	je     825 <E131Bridge::HandleDmx()+0x825>
 820:	e8 00 00 00 00       	call   825 <E131Bridge::HandleDmx()+0x825>
 825:	c9                   	leave  
 826:	c3                   	ret    

Disassembly of section .text._ZN10E131Bridge27SetNetworkDataLossConditionEbb:

0000000000000000 <E131Bridge::SetNetworkDataLossCondition(bool, bool)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10:	89 f1                	mov    %esi,%ecx
  12:	89 d0                	mov    %edx,%eax
  14:	89 ca                	mov    %ecx,%edx
  16:	88 55 d4             	mov    %dl,-0x2c(%rbp)
  19:	88 45 d0             	mov    %al,-0x30(%rbp)
  1c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  23:	00 00 
  25:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  29:	31 c0                	xor    %eax,%eax
  2b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  2f:	c6 40 78 01          	movb   $0x1,0x78(%rax)
  33:	c6 45 ef 00          	movb   $0x0,-0x11(%rbp)
  37:	80 7d d4 00          	cmpb   $0x0,-0x2c(%rbp)
  3b:	0f 84 7f 01 00 00    	je     1c0 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x1c0>
  41:	80 7d d0 00          	cmpb   $0x0,-0x30(%rbp)
  45:	0f 84 75 01 00 00    	je     1c0 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x1c0>
  4b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4f:	c6 40 74 01          	movb   $0x1,0x74(%rax)
  53:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  57:	c6 40 75 00          	movb   $0x0,0x75(%rax)
  5b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  5f:	c6 40 76 00          	movb   $0x0,0x76(%rax)
  63:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  67:	c6 40 77 00          	movb   $0x0,0x77(%rax)
  6b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  6f:	c6 80 8c 00 00 00 01 	movb   $0x1,0x8c(%rax)
  76:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
  7d:	e9 2f 01 00 00       	jmp    1b1 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x1b1>
  82:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  86:	8b 55 f0             	mov    -0x10(%rbp),%edx
  89:	48 89 d0             	mov    %rdx,%rax
  8c:	48 c1 e0 04          	shl    $0x4,%rax
  90:	48 01 d0             	add    %rdx,%rax
  93:	48 c1 e0 02          	shl    $0x2,%rax
  97:	48 01 c8             	add    %rcx,%rax
  9a:	48 05 09 01 00 00    	add    $0x109,%rax
  a0:	0f b6 00             	movzbl (%rax),%eax
  a3:	84 c0                	test   %al,%al
  a5:	0f 84 02 01 00 00    	je     1ad <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x1ad>
  ab:	c6 45 ef 01          	movb   $0x1,-0x11(%rbp)
  af:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  b3:	8b 55 f0             	mov    -0x10(%rbp),%edx
  b6:	48 89 d0             	mov    %rdx,%rax
  b9:	48 c1 e0 04          	shl    $0x4,%rax
  bd:	48 01 d0             	add    %rdx,%rax
  c0:	48 c1 e0 02          	shl    $0x2,%rax
  c4:	48 01 c8             	add    %rcx,%rax
  c7:	48 05 cc 00 00 00    	add    $0xcc,%rax
  cd:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
  d3:	8b 55 f0             	mov    -0x10(%rbp),%edx
  d6:	48 89 d0             	mov    %rdx,%rax
  d9:	48 c1 e0 04          	shl    $0x4,%rax
  dd:	48 01 d0             	add    %rdx,%rax
  e0:	48 c1 e0 02          	shl    $0x2,%rax
  e4:	48 8d 90 c0 00 00 00 	lea    0xc0(%rax),%rdx
  eb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  ef:	48 01 d0             	add    %rdx,%rax
  f2:	48 83 c0 10          	add    $0x10,%rax
  f6:	ba 10 00 00 00       	mov    $0x10,%edx
  fb:	be 00 00 00 00       	mov    $0x0,%esi
 100:	48 89 c7             	mov    %rax,%rdi
 103:	e8 00 00 00 00       	call   108 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x108>
 108:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
 10c:	8b 55 f0             	mov    -0x10(%rbp),%edx
 10f:	48 89 d0             	mov    %rdx,%rax
 112:	48 c1 e0 04          	shl    $0x4,%rax
 116:	48 01 d0             	add    %rdx,%rax
 119:	48 c1 e0 02          	shl    $0x2,%rax
 11d:	48 01 c8             	add    %rcx,%rax
 120:	48 05 e8 00 00 00    	add    $0xe8,%rax
 126:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
 12c:	8b 55 f0             	mov    -0x10(%rbp),%edx
 12f:	48 89 d0             	mov    %rdx,%rax
 132:	48 c1 e0 04          	shl    $0x4,%rax
 136:	48 01 d0             	add    %rdx,%rax
 139:	48 c1 e0 02          	shl    $0x2,%rax
 13d:	48 8d 90 d0 00 00 00 	lea    0xd0(%rax),%rdx
 144:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 148:	48 01 d0             	add    %rdx,%rax
 14b:	48 83 c0 1c          	add    $0x1c,%rax
 14f:	ba 10 00 00 00       	mov    $0x10,%edx
 154:	be 00 00 00 00       	mov    $0x0,%esi
 159:	48 89 c7             	mov    %rax,%rdi
 15c:	e8 00 00 00 00       	call   161 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x161>
 161:	8b 45 f0             	mov    -0x10(%rbp),%eax
 164:	89 c7                	mov    %eax,%edi
 166:	e8 00 00 00 00       	call   16b <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x16b>
 16b:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
 16f:	8b 55 f0             	mov    -0x10(%rbp),%edx
 172:	48 89 d0             	mov    %rdx,%rax
 175:	48 c1 e0 04          	shl    $0x4,%rax
 179:	48 01 d0             	add    %rdx,%rax
 17c:	48 c1 e0 02          	shl    $0x2,%rax
 180:	48 01 c8             	add    %rcx,%rax
 183:	48 05 09 01 00 00    	add    $0x109,%rax
 189:	c6 00 00             	movb   $0x0,(%rax)
 18c:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
 190:	8b 55 f0             	mov    -0x10(%rbp),%edx
 193:	48 89 d0             	mov    %rdx,%rax
 196:	48 c1 e0 04          	shl    $0x4,%rax
 19a:	48 01 d0             	add    %rdx,%rax
 19d:	48 c1 e0 02          	shl    $0x2,%rax
 1a1:	48 01 c8             	add    %rcx,%rax
 1a4:	48 05 08 01 00 00    	add    $0x108,%rax
 1aa:	c6 00 00             	movb   $0x0,(%rax)
 1ad:	83 45 f0 01          	addl   $0x1,-0x10(%rbp)
 1b1:	83 7d f0 03          	cmpl   $0x3,-0x10(%rbp)
 1b5:	0f 86 c7 fe ff ff    	jbe    82 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x82>
 1bb:	e9 d1 01 00 00       	jmp    391 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x391>
 1c0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
 1c7:	e9 bb 01 00 00       	jmp    387 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x387>
 1cc:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
 1d0:	8b 55 f4             	mov    -0xc(%rbp),%edx
 1d3:	48 89 d0             	mov    %rdx,%rax
 1d6:	48 c1 e0 04          	shl    $0x4,%rax
 1da:	48 01 d0             	add    %rdx,%rax
 1dd:	48 c1 e0 02          	shl    $0x2,%rax
 1e1:	48 01 c8             	add    %rcx,%rax
 1e4:	48 05 09 01 00 00    	add    $0x109,%rax
 1ea:	0f b6 00             	movzbl (%rax),%eax
 1ed:	84 c0                	test   %al,%al
 1ef:	0f 84 8e 01 00 00    	je     383 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x383>
 1f5:	80 7d d4 00          	cmpb   $0x0,-0x2c(%rbp)
 1f9:	0f 84 9e 00 00 00    	je     29d <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x29d>
 1ff:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
 203:	8b 55 f4             	mov    -0xc(%rbp),%edx
 206:	48 89 d0             	mov    %rdx,%rax
 209:	48 c1 e0 04          	shl    $0x4,%rax
 20d:	48 01 d0             	add    %rdx,%rax
 210:	48 c1 e0 02          	shl    $0x2,%rax
 214:	48 01 c8             	add    %rcx,%rax
 217:	48 05 cc 00 00 00    	add    $0xcc,%rax
 21d:	8b 00                	mov    (%rax),%eax
 21f:	85 c0                	test   %eax,%eax
 221:	74 7a                	je     29d <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x29d>
 223:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
 227:	8b 55 f4             	mov    -0xc(%rbp),%edx
 22a:	48 89 d0             	mov    %rdx,%rax
 22d:	48 c1 e0 04          	shl    $0x4,%rax
 231:	48 01 d0             	add    %rdx,%rax
 234:	48 c1 e0 02          	shl    $0x2,%rax
 238:	48 01 c8             	add    %rcx,%rax
 23b:	48 05 cc 00 00 00    	add    $0xcc,%rax
 241:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
 247:	8b 55 f4             	mov    -0xc(%rbp),%edx
 24a:	48 89 d0             	mov    %rdx,%rax
 24d:	48 c1 e0 04          	shl    $0x4,%rax
 251:	48 01 d0             	add    %rdx,%rax
 254:	48 c1 e0 02          	shl    $0x2,%rax
 258:	48 8d 90 c0 00 00 00 	lea    0xc0(%rax),%rdx
 25f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 263:	48 01 d0             	add    %rdx,%rax
 266:	48 83 c0 10          	add    $0x10,%rax
 26a:	ba 10 00 00 00       	mov    $0x10,%edx
 26f:	be 00 00 00 00       	mov    $0x0,%esi
 274:	48 89 c7             	mov    %rax,%rdi
 277:	e8 00 00 00 00       	call   27c <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x27c>
 27c:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
 280:	8b 55 f4             	mov    -0xc(%rbp),%edx
 283:	48 89 d0             	mov    %rdx,%rax
 286:	48 c1 e0 04          	shl    $0x4,%rax
 28a:	48 01 d0             	add    %rdx,%rax
 28d:	48 c1 e0 02          	shl    $0x2,%rax
 291:	48 01 c8             	add    %rcx,%rax
 294:	48 05 08 01 00 00    	add    $0x108,%rax
 29a:	c6 00 00             	movb   $0x0,(%rax)
 29d:	80 7d d0 00          	cmpb   $0x0,-0x30(%rbp)
 2a1:	0f 84 9e 00 00 00    	je     345 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x345>
 2a7:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
 2ab:	8b 55 f4             	mov    -0xc(%rbp),%edx
 2ae:	48 89 d0             	mov    %rdx,%rax
 2b1:	48 c1 e0 04          	shl    $0x4,%rax
 2b5:	48 01 d0             	add    %rdx,%rax
 2b8:	48 c1 e0 02          	shl    $0x2,%rax
 2bc:	48 01 c8             	add    %rcx,%rax
 2bf:	48 05 e8 00 00 00    	add    $0xe8,%rax
 2c5:	8b 00                	mov    (%rax),%eax
 2c7:	85 c0                	test   %eax,%eax
 2c9:	74 7a                	je     345 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x345>
 2cb:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
 2cf:	8b 55 f4             	mov    -0xc(%rbp),%edx
 2d2:	48 89 d0             	mov    %rdx,%rax
 2d5:	48 c1 e0 04          	shl    $0x4,%rax
 2d9:	48 01 d0             	add    %rdx,%rax
 2dc:	48 c1 e0 02          	shl    $0x2,%rax
 2e0:	48 01 c8             	add    %rcx,%rax
 2e3:	48 05 e8 00 00 00    	add    $0xe8,%rax
 2e9:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
 2ef:	8b 55 f4             	mov    -0xc(%rbp),%edx
 2f2:	48 89 d0             	mov    %rdx,%rax
 2f5:	48 c1 e0 04          	shl    $0x4,%rax
 2f9:	48 01 d0             	add    %rdx,%rax
 2fc:	48 c1 e0 02          	shl    $0x2,%rax
 300:	48 8d 90 d0 00 00 00 	lea    0xd0(%rax),%rdx
 307:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 30b:	48 01 d0             	add    %rdx,%rax
 30e:	48 83 c0 1c          	add    $0x1c,%rax
 312:	ba 10 00 00 00       	mov    $0x10,%edx
 317:	be 00 00 00 00       	mov    $0x0,%esi
 31c:	48 89 c7             	mov    %rax,%rdi
 31f:	e8 00 00 00 00       	call   324 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x324>
 324:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
 328:	8b 55 f4             	mov    -0xc(%rbp),%edx
 32b:	48 89 d0             	mov    %rdx,%rax
 32e:	48 c1 e0 04          	shl    $0x4,%rax
 332:	48 01 d0             	add    %rdx,%rax
 335:	48 c1 e0 02          	shl    $0x2,%rax
 339:	48 01 c8             	add    %rcx,%rax
 33c:	48 05 08 01 00 00    	add    $0x108,%rax
 342:	c6 00 00             	movb   $0x0,(%rax)
 345:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 349:	0f b6 40 75          	movzbl 0x75(%rax),%eax
 34d:	83 f0 01             	xor    $0x1,%eax
 350:	84 c0                	test   %al,%al
 352:	74 2f                	je     383 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x383>
 354:	c6 45 ef 01          	movb   $0x1,-0x11(%rbp)
 358:	8b 45 f4             	mov    -0xc(%rbp),%eax
 35b:	89 c7                	mov    %eax,%edi
 35d:	e8 00 00 00 00       	call   362 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x362>
 362:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
 366:	8b 55 f4             	mov    -0xc(%rbp),%edx
 369:	48 89 d0             	mov    %rdx,%rax
 36c:	48 c1 e0 04          	shl    $0x4,%rax
 370:	48 01 d0             	add    %rdx,%rax
 373:	48 c1 e0 02          	shl    $0x2,%rax
 377:	48 01 c8             	add    %rcx,%rax
 37a:	48 05 09 01 00 00    	add    $0x109,%rax
 380:	c6 00 00             	movb   $0x0,(%rax)
 383:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
 387:	83 7d f4 03          	cmpl   $0x3,-0xc(%rbp)
 38b:	0f 86 3b fe ff ff    	jbe    1cc <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x1cc>
 391:	80 7d ef 00          	cmpb   $0x0,-0x11(%rbp)
 395:	74 71                	je     408 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x408>
 397:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 39b:	8b 80 90 00 00 00    	mov    0x90(%rax),%eax
 3a1:	83 f8 02             	cmp    $0x2,%eax
 3a4:	74 3a                	je     3e0 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x3e0>
 3a6:	83 f8 02             	cmp    $0x2,%eax
 3a9:	7f 5c                	jg     407 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x407>
 3ab:	85 c0                	test   %eax,%eax
 3ad:	74 58                	je     407 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x407>
 3af:	83 f8 01             	cmp    $0x1,%eax
 3b2:	75 53                	jne    407 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x407>
 3b4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 3b8:	48 8b 80 20 02 00 00 	mov    0x220(%rax),%rax
 3bf:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
 3c3:	48 8b 92 20 02 00 00 	mov    0x220(%rdx),%rdx
 3ca:	48 8b 12             	mov    (%rdx),%rdx
 3cd:	48 83 c2 38          	add    $0x38,%rdx
 3d1:	48 8b 12             	mov    (%rdx),%rdx
 3d4:	be 01 00 00 00       	mov    $0x1,%esi
 3d9:	48 89 c7             	mov    %rax,%rdi
 3dc:	ff d2                	call   *%rdx
 3de:	eb 28                	jmp    408 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x408>
 3e0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 3e4:	48 8b 80 20 02 00 00 	mov    0x220(%rax),%rax
 3eb:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
 3ef:	48 8b 92 20 02 00 00 	mov    0x220(%rdx),%rdx
 3f6:	48 8b 12             	mov    (%rdx),%rdx
 3f9:	48 83 c2 40          	add    $0x40,%rdx
 3fd:	48 8b 12             	mov    (%rdx),%rdx
 400:	48 89 c7             	mov    %rax,%rdi
 403:	ff d2                	call   *%rdx
 405:	eb 01                	jmp    408 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x408>
 407:	90                   	nop
 408:	e8 00 00 00 00       	call   40d <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x40d>
 40d:	be 02 00 00 00       	mov    $0x2,%esi
 412:	48 89 c7             	mov    %rax,%rdi
 415:	e8 00 00 00 00       	call   41a <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x41a>
 41a:	bf 00 00 00 00       	mov    $0x0,%edi
 41f:	e8 00 00 00 00       	call   424 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x424>
 424:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 428:	0f b6 80 8d 00 00 00 	movzbl 0x8d(%rax),%eax
 42f:	83 e0 fd             	and    $0xfffffffd,%eax
 432:	89 c2                	mov    %eax,%edx
 434:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 438:	88 90 8d 00 00 00    	mov    %dl,0x8d(%rax)
 43e:	90                   	nop
 43f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 443:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 44a:	00 00 
 44c:	74 05                	je     453 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x453>
 44e:	e8 00 00 00 00       	call   453 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x453>
 453:	c9                   	leave  
 454:	c3                   	ret    

Disassembly of section .text._ZN10E131Bridge11IsValidRootEv:

0000000000000000 <E131Bridge::IsValidRoot()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	48 8b 80 10 02 00 00 	mov    0x210(%rax),%rax
  2a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  2e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  32:	48 83 c0 04          	add    $0x4,%rax
  36:	ba 0c 00 00 00       	mov    $0xc,%edx
  3b:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 42 <E131Bridge::IsValidRoot()+0x42>
  42:	48 89 ce             	mov    %rcx,%rsi
  45:	48 89 c7             	mov    %rax,%rdi
  48:	e8 00 00 00 00       	call   4d <E131Bridge::IsValidRoot()+0x4d>
  4d:	85 c0                	test   %eax,%eax
  4f:	74 07                	je     58 <E131Bridge::IsValidRoot()+0x58>
  51:	b8 00 00 00 00       	mov    $0x0,%eax
  56:	eb 28                	jmp    80 <E131Bridge::IsValidRoot()+0x80>
  58:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  5c:	8b 40 12             	mov    0x12(%rax),%eax
  5f:	3d 00 00 00 04       	cmp    $0x4000000,%eax
  64:	74 15                	je     7b <E131Bridge::IsValidRoot()+0x7b>
  66:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  6a:	8b 40 12             	mov    0x12(%rax),%eax
  6d:	3d 00 00 00 08       	cmp    $0x8000000,%eax
  72:	74 07                	je     7b <E131Bridge::IsValidRoot()+0x7b>
  74:	b8 00 00 00 00       	mov    $0x0,%eax
  79:	eb 05                	jmp    80 <E131Bridge::IsValidRoot()+0x80>
  7b:	b8 01 00 00 00       	mov    $0x1,%eax
  80:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  84:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  8b:	00 00 
  8d:	74 05                	je     94 <E131Bridge::IsValidRoot()+0x94>
  8f:	e8 00 00 00 00       	call   94 <E131Bridge::IsValidRoot()+0x94>
  94:	c9                   	leave  
  95:	c3                   	ret    

Disassembly of section .text._ZN10E131Bridge17IsValidDataPacketEv:

0000000000000000 <E131Bridge::IsValidDataPacket()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	48 8b 80 10 02 00 00 	mov    0x210(%rax),%rax
  2a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  2e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  32:	0f b6 40 75          	movzbl 0x75(%rax),%eax
  36:	3c 02                	cmp    $0x2,%al
  38:	74 07                	je     41 <E131Bridge::IsValidDataPacket()+0x41>
  3a:	b8 00 00 00 00       	mov    $0x0,%eax
  3f:	eb 41                	jmp    82 <E131Bridge::IsValidDataPacket()+0x82>
  41:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  45:	0f b6 40 76          	movzbl 0x76(%rax),%eax
  49:	3c a1                	cmp    $0xa1,%al
  4b:	74 07                	je     54 <E131Bridge::IsValidDataPacket()+0x54>
  4d:	b8 00 00 00 00       	mov    $0x0,%eax
  52:	eb 2e                	jmp    82 <E131Bridge::IsValidDataPacket()+0x82>
  54:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  58:	0f b7 40 77          	movzwl 0x77(%rax),%eax
  5c:	66 85 c0             	test   %ax,%ax
  5f:	74 07                	je     68 <E131Bridge::IsValidDataPacket()+0x68>
  61:	b8 00 00 00 00       	mov    $0x0,%eax
  66:	eb 1a                	jmp    82 <E131Bridge::IsValidDataPacket()+0x82>
  68:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  6c:	0f b7 40 79          	movzwl 0x79(%rax),%eax
  70:	66 3d 00 01          	cmp    $0x100,%ax
  74:	74 07                	je     7d <E131Bridge::IsValidDataPacket()+0x7d>
  76:	b8 00 00 00 00       	mov    $0x0,%eax
  7b:	eb 05                	jmp    82 <E131Bridge::IsValidDataPacket()+0x82>
  7d:	b8 01 00 00 00       	mov    $0x1,%eax
  82:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  86:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  8d:	00 00 
  8f:	74 05                	je     96 <E131Bridge::IsValidDataPacket()+0x96>
  91:	e8 00 00 00 00       	call   96 <E131Bridge::IsValidDataPacket()+0x96>
  96:	c9                   	leave  
  97:	c3                   	ret    

Disassembly of section .text._ZN10E131Bridge7ProcessEv:

0000000000000000 <E131Bridge::Process()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  23:	c6 40 74 00          	movb   $0x0,0x74(%rax)
  27:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  2b:	8b 50 04             	mov    0x4(%rax),%edx
  2e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  32:	89 50 08             	mov    %edx,0x8(%rax)
  35:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  39:	0f b6 40 76          	movzbl 0x76(%rax),%eax
  3d:	84 c0                	test   %al,%al
  3f:	74 30                	je     71 <E131Bridge::Process()+0x71>
  41:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  45:	0f b6 40 77          	movzbl 0x77(%rax),%eax
  49:	83 f0 01             	xor    $0x1,%eax
  4c:	84 c0                	test   %al,%al
  4e:	74 21                	je     71 <E131Bridge::Process()+0x71>
  50:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  54:	8b 50 04             	mov    0x4(%rax),%edx
  57:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  5b:	8b 48 7c             	mov    0x7c(%rax),%ecx
  5e:	89 d0                	mov    %edx,%eax
  60:	29 c8                	sub    %ecx,%eax
  62:	3d c3 09 00 00       	cmp    $0x9c3,%eax
  67:	76 08                	jbe    71 <E131Bridge::Process()+0x71>
  69:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  6d:	c6 40 76 00          	movb   $0x0,0x76(%rax)
  71:	c6 45 e7 00          	movb   $0x0,-0x19(%rbp)
  75:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  79:	48 8b 80 20 02 00 00 	mov    0x220(%rax),%rax
  80:	48 85 c0             	test   %rax,%rax
  83:	74 6b                	je     f0 <E131Bridge::Process()+0xf0>
  85:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  89:	48 8b 80 10 02 00 00 	mov    0x210(%rax),%rax
  90:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  94:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  98:	8b 40 12             	mov    0x12(%rax),%eax
  9b:	0f c8                	bswap  %eax
  9d:	89 45 e8             	mov    %eax,-0x18(%rbp)
  a0:	83 7d e8 04          	cmpl   $0x4,-0x18(%rbp)
  a4:	75 22                	jne    c8 <E131Bridge::Process()+0xc8>
  a6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  aa:	48 89 c7             	mov    %rax,%rdi
  ad:	e8 00 00 00 00       	call   b2 <E131Bridge::Process()+0xb2>
  b2:	84 c0                	test   %al,%al
  b4:	74 3a                	je     f0 <E131Bridge::Process()+0xf0>
  b6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  ba:	48 89 c7             	mov    %rax,%rdi
  bd:	e8 00 00 00 00       	call   c2 <E131Bridge::Process()+0xc2>
  c2:	c6 45 e7 01          	movb   $0x1,-0x19(%rbp)
  c6:	eb 28                	jmp    f0 <E131Bridge::Process()+0xf0>
  c8:	83 7d e8 08          	cmpl   $0x8,-0x18(%rbp)
  cc:	75 22                	jne    f0 <E131Bridge::Process()+0xf0>
  ce:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  d2:	8b 40 28             	mov    0x28(%rax),%eax
  d5:	0f c8                	bswap  %eax
  d7:	89 45 ec             	mov    %eax,-0x14(%rbp)
  da:	83 7d ec 01          	cmpl   $0x1,-0x14(%rbp)
  de:	75 10                	jne    f0 <E131Bridge::Process()+0xf0>
  e0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  e4:	48 89 c7             	mov    %rax,%rdi
  e7:	e8 00 00 00 00       	call   ec <E131Bridge::Process()+0xec>
  ec:	c6 45 e7 01          	movb   $0x1,-0x19(%rbp)
  f0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  f4:	0f b6 80 08 02 00 00 	movzbl 0x208(%rax),%eax
  fb:	84 c0                	test   %al,%al
  fd:	74 19                	je     118 <E131Bridge::Process()+0x118>
  ff:	e8 00 00 00 00       	call   104 <E131Bridge::Process()+0x104>
 104:	48 89 c7             	mov    %rax,%rdi
 107:	e8 00 00 00 00       	call   10c <E131Bridge::Process()+0x10c>
 10c:	83 f8 04             	cmp    $0x4,%eax
 10f:	74 07                	je     118 <E131Bridge::Process()+0x118>
 111:	b8 01 00 00 00       	mov    $0x1,%eax
 116:	eb 05                	jmp    11d <E131Bridge::Process()+0x11d>
 118:	b8 00 00 00 00       	mov    $0x0,%eax
 11d:	84 c0                	test   %al,%al
 11f:	74 35                	je     156 <E131Bridge::Process()+0x156>
 121:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 125:	0f b6 80 8d 00 00 00 	movzbl 0x8d(%rax),%eax
 12c:	84 c0                	test   %al,%al
 12e:	74 14                	je     144 <E131Bridge::Process()+0x144>
 130:	e8 00 00 00 00       	call   135 <E131Bridge::Process()+0x135>
 135:	be 03 00 00 00       	mov    $0x3,%esi
 13a:	48 89 c7             	mov    %rax,%rdi
 13d:	e8 00 00 00 00       	call   142 <E131Bridge::Process()+0x142>
 142:	eb 12                	jmp    156 <E131Bridge::Process()+0x156>
 144:	e8 00 00 00 00       	call   149 <E131Bridge::Process()+0x149>
 149:	be 02 00 00 00       	mov    $0x2,%esi
 14e:	48 89 c7             	mov    %rax,%rdi
 151:	e8 00 00 00 00       	call   156 <E131Bridge::Process()+0x156>
 156:	80 7d e7 00          	cmpb   $0x0,-0x19(%rbp)
 15a:	74 0c                	je     168 <E131Bridge::Process()+0x168>
 15c:	bf 00 00 00 00       	mov    $0x0,%edi
 161:	e8 00 00 00 00       	call   166 <E131Bridge::Process()+0x166>
 166:	eb 0a                	jmp    172 <E131Bridge::Process()+0x172>
 168:	bf 00 00 00 00       	mov    $0x0,%edi
 16d:	e8 00 00 00 00       	call   172 <E131Bridge::Process()+0x172>
 172:	90                   	nop
 173:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 177:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 17e:	00 00 
 180:	74 05                	je     187 <E131Bridge::Process()+0x187>
 182:	e8 00 00 00 00       	call   187 <E131Bridge::Process()+0x187>
 187:	c9                   	leave  
 188:	c3                   	ret    

Disassembly of section .text._ZSt3maxIhERKT_S2_S2_:

0000000000000000 <unsigned char const& std::max<unsigned char>(unsigned char const&, unsigned char const&)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  27:	0f b6 10             	movzbl (%rax),%edx
  2a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  2e:	0f b6 00             	movzbl (%rax),%eax
  31:	38 c2                	cmp    %al,%dl
  33:	73 06                	jae    3b <unsigned char const& std::max<unsigned char>(unsigned char const&, unsigned char const&)+0x3b>
  35:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  39:	eb 04                	jmp    3f <unsigned char const& std::max<unsigned char>(unsigned char const&, unsigned char const&)+0x3f>
  3b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  43:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  4a:	00 00 
  4c:	74 05                	je     53 <unsigned char const& std::max<unsigned char>(unsigned char const&, unsigned char const&)+0x53>
  4e:	e8 00 00 00 00       	call   53 <unsigned char const& std::max<unsigned char>(unsigned char const&, unsigned char const&)+0x53>
  53:	c9                   	leave  
  54:	c3                   	ret    

e131bridgehandlesynchronization.o:     file format elf64-x86-64


Disassembly of section .text._ZN8Hardware3GetEv:

0000000000000000 <Hardware::Get()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 22 <Hardware::Get()+0x22>
  22:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  26:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  2d:	00 00 
  2f:	74 05                	je     36 <Hardware::Get()+0x36>
  31:	e8 00 00 00 00       	call   36 <Hardware::Get()+0x36>
  36:	c9                   	leave  
  37:	c3                   	ret    

Disassembly of section .text._ZN10E131Bridge21HandleSynchronizationEv:

0000000000000000 <E131Bridge::HandleSynchronization()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  23:	48 8b 80 10 02 00 00 	mov    0x210(%rax),%rax
  2a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  2e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  32:	0f b7 40 2d          	movzwl 0x2d(%rax),%eax
  36:	0f b7 c0             	movzwl %ax,%eax
  39:	66 c1 c0 08          	rol    $0x8,%ax
  3d:	66 89 45 e6          	mov    %ax,-0x1a(%rbp)
  41:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  45:	0f b7 80 86 00 00 00 	movzwl 0x86(%rax),%eax
  4c:	66 39 45 e6          	cmp    %ax,-0x1a(%rbp)
  50:	74 28                	je     7a <E131Bridge::HandleSynchronization()+0x7a>
  52:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  56:	0f b7 80 88 00 00 00 	movzwl 0x88(%rax),%eax
  5d:	66 39 45 e6          	cmp    %ax,-0x1a(%rbp)
  61:	74 17                	je     7a <E131Bridge::HandleSynchronization()+0x7a>
  63:	e8 00 00 00 00       	call   68 <E131Bridge::HandleSynchronization()+0x68>
  68:	be 02 00 00 00       	mov    $0x2,%esi
  6d:	48 89 c7             	mov    %rax,%rdi
  70:	e8 00 00 00 00       	call   75 <E131Bridge::HandleSynchronization()+0x75>
  75:	e9 56 01 00 00       	jmp    1d0 <E131Bridge::HandleSynchronization()+0x1d0>
  7a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  7e:	8b 50 04             	mov    0x4(%rax),%edx
  81:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  85:	89 50 7c             	mov    %edx,0x7c(%rax)
  88:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%rbp)
  8f:	eb 52                	jmp    e3 <E131Bridge::HandleSynchronization()+0xe3>
  91:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  95:	8b 55 e8             	mov    -0x18(%rbp),%edx
  98:	48 89 d0             	mov    %rdx,%rax
  9b:	48 01 c0             	add    %rax,%rax
  9e:	48 01 d0             	add    %rdx,%rax
  a1:	48 c1 e0 02          	shl    $0x2,%rax
  a5:	48 01 c8             	add    %rcx,%rax
  a8:	48 05 9c 00 00 00    	add    $0x9c,%rax
  ae:	8b 00                	mov    (%rax),%eax
  b0:	83 f8 01             	cmp    $0x1,%eax
  b3:	75 2a                	jne    df <E131Bridge::HandleSynchronization()+0xdf>
  b5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  b9:	48 8b 80 20 02 00 00 	mov    0x220(%rax),%rax
  c0:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  c4:	48 8b 92 20 02 00 00 	mov    0x220(%rdx),%rdx
  cb:	48 8b 12             	mov    (%rdx),%rdx
  ce:	48 83 c2 28          	add    $0x28,%rdx
  d2:	48 8b 0a             	mov    (%rdx),%rcx
  d5:	8b 55 e8             	mov    -0x18(%rbp),%edx
  d8:	89 d6                	mov    %edx,%esi
  da:	48 89 c7             	mov    %rax,%rdi
  dd:	ff d1                	call   *%rcx
  df:	83 45 e8 01          	addl   $0x1,-0x18(%rbp)
  e3:	83 7d e8 03          	cmpl   $0x3,-0x18(%rbp)
  e7:	76 a8                	jbe    91 <E131Bridge::HandleSynchronization()+0x91>
  e9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  ed:	48 8b 80 20 02 00 00 	mov    0x220(%rax),%rax
  f4:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  f8:	48 8b 92 20 02 00 00 	mov    0x220(%rdx),%rdx
  ff:	48 8b 12             	mov    (%rdx),%rdx
 102:	48 83 c2 30          	add    $0x30,%rdx
 106:	48 8b 12             	mov    (%rdx),%rdx
 109:	be 00 00 00 00       	mov    $0x0,%esi
 10e:	48 89 c7             	mov    %rax,%rdi
 111:	ff d2                	call   *%rdx
 113:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
 11a:	eb 79                	jmp    195 <E131Bridge::HandleSynchronization()+0x195>
 11c:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
 120:	8b 55 ec             	mov    -0x14(%rbp),%edx
 123:	48 89 d0             	mov    %rdx,%rax
 126:	48 01 c0             	add    %rax,%rax
 129:	48 01 d0             	add    %rdx,%rax
 12c:	48 c1 e0 02          	shl    $0x2,%rax
 130:	48 01 c8             	add    %rcx,%rax
 133:	48 05 9c 00 00 00    	add    $0x9c,%rax
 139:	8b 00                	mov    (%rax),%eax
 13b:	83 f8 01             	cmp    $0x1,%eax
 13e:	75 51                	jne    191 <E131Bridge::HandleSynchronization()+0x191>
 140:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
 144:	8b 55 ec             	mov    -0x14(%rbp),%edx
 147:	48 89 d0             	mov    %rdx,%rax
 14a:	48 c1 e0 04          	shl    $0x4,%rax
 14e:	48 01 d0             	add    %rdx,%rax
 151:	48 c1 e0 02          	shl    $0x2,%rax
 155:	48 01 c8             	add    %rcx,%rax
 158:	48 05 09 01 00 00    	add    $0x109,%rax
 15e:	0f b6 00             	movzbl (%rax),%eax
 161:	83 f0 01             	xor    $0x1,%eax
 164:	84 c0                	test   %al,%al
 166:	74 29                	je     191 <E131Bridge::HandleSynchronization()+0x191>
 168:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
 16c:	8b 55 ec             	mov    -0x14(%rbp),%edx
 16f:	48 89 d0             	mov    %rdx,%rax
 172:	48 c1 e0 04          	shl    $0x4,%rax
 176:	48 01 d0             	add    %rdx,%rax
 179:	48 c1 e0 02          	shl    $0x2,%rax
 17d:	48 01 c8             	add    %rcx,%rax
 180:	48 05 09 01 00 00    	add    $0x109,%rax
 186:	c6 00 01             	movb   $0x1,(%rax)
 189:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 18d:	c6 40 78 01          	movb   $0x1,0x78(%rax)
 191:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
 195:	83 7d ec 03          	cmpl   $0x3,-0x14(%rbp)
 199:	76 81                	jbe    11c <E131Bridge::HandleSynchronization()+0x11c>
 19b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 19f:	48 8b 80 28 02 00 00 	mov    0x228(%rax),%rax
 1a6:	48 85 c0             	test   %rax,%rax
 1a9:	74 25                	je     1d0 <E131Bridge::HandleSynchronization()+0x1d0>
 1ab:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 1af:	48 8b 80 28 02 00 00 	mov    0x228(%rax),%rax
 1b6:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
 1ba:	48 8b 92 28 02 00 00 	mov    0x228(%rdx),%rdx
 1c1:	48 8b 12             	mov    (%rdx),%rdx
 1c4:	48 83 c2 10          	add    $0x10,%rdx
 1c8:	48 8b 12             	mov    (%rdx),%rdx
 1cb:	48 89 c7             	mov    %rax,%rdi
 1ce:	ff d2                	call   *%rdx
 1d0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 1d4:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 1db:	00 00 
 1dd:	74 05                	je     1e4 <E131Bridge::HandleSynchronization()+0x1e4>
 1df:	e8 00 00 00 00       	call   1e4 <E131Bridge::HandleSynchronization()+0x1e4>
 1e4:	c9                   	leave  
 1e5:	c3                   	ret    

e131bridgeprint.o:     file format elf64-x86-64


Disassembly of section .text._ZN8lightset14get_merge_modeENS_9MergeModeEb:

0000000000000000 <lightset::get_merge_mode(lightset::MergeMode, bool)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 ec 18          	sub    $0x18,%rsp
   8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   f:	00 00 
  11:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  16:	31 c0                	xor    %eax,%eax
  18:	40 84 f6             	test   %sil,%sil
  1b:	74 12                	je     2f <lightset::get_merge_mode(lightset::MergeMode, bool)+0x2f>
  1d:	85 ff                	test   %edi,%edi
  1f:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 26 <lightset::get_merge_mode(lightset::MergeMode, bool)+0x26>
  26:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 2d <lightset::get_merge_mode(lightset::MergeMode, bool)+0x2d>
  2d:	eb 10                	jmp    3f <lightset::get_merge_mode(lightset::MergeMode, bool)+0x3f>
  2f:	85 ff                	test   %edi,%edi
  31:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 38 <lightset::get_merge_mode(lightset::MergeMode, bool)+0x38>
  38:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 3f <lightset::get_merge_mode(lightset::MergeMode, bool)+0x3f>
  3f:	48 0f 45 c2          	cmovne %rdx,%rax
  43:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  48:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  4f:	00 00 
  51:	74 05                	je     58 <lightset::get_merge_mode(lightset::MergeMode, bool)+0x58>
  53:	e8 00 00 00 00       	call   58 <lightset::get_merge_mode(lightset::MergeMode, bool)+0x58>
  58:	48 83 c4 18          	add    $0x18,%rsp
  5c:	c3                   	ret    

Disassembly of section .text._ZNK10E131Bridge11GetUniverseEjRtN8lightset7PortDirE:

0000000000000000 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 ec 18          	sub    $0x18,%rsp
   8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   f:	00 00 
  11:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  16:	31 c0                	xor    %eax,%eax
  18:	83 f9 02             	cmp    $0x2,%ecx
  1b:	74 1b                	je     38 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const+0x38>
  1d:	89 f6                	mov    %esi,%esi
  1f:	48 6b f6 0c          	imul   $0xc,%rsi,%rsi
  23:	48 01 f7             	add    %rsi,%rdi
  26:	8b 87 98 00 00 00    	mov    0x98(%rdi),%eax
  2c:	39 8f 9c 00 00 00    	cmp    %ecx,0x9c(%rdi)
  32:	66 89 02             	mov    %ax,(%rdx)
  35:	0f 94 c0             	sete   %al
  38:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  3d:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  44:	00 00 
  46:	74 05                	je     4d <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const+0x4d>
  48:	e8 00 00 00 00       	call   4d <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const+0x4d>
  4d:	48 83 c4 18          	add    $0x18,%rsp
  51:	c3                   	ret    

Disassembly of section .text._ZN10E131Bridge5PrintEv:

0000000000000000 <E131Bridge::Print()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	55                   	push   %rbp
   9:	53                   	push   %rbx
   a:	48 89 fb             	mov    %rdi,%rbx
   d:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 14 <E131Bridge::Print()+0x14>
  14:	48 83 ec 18          	sub    $0x18,%rsp
  18:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1f:	00 00 
  21:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  26:	31 c0                	xor    %eax,%eax
  28:	e8 00 00 00 00       	call   2d <E131Bridge::Print()+0x2d>
  2d:	0f b6 15 00 00 00 00 	movzbl 0x0(%rip),%edx        # 34 <E131Bridge::Print()+0x34>
  34:	31 c0                	xor    %eax,%eax
  36:	0f b6 35 00 00 00 00 	movzbl 0x0(%rip),%esi        # 3d <E131Bridge::Print()+0x3d>
  3d:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 44 <E131Bridge::Print()+0x44>
  44:	e8 00 00 00 00       	call   49 <E131Bridge::Print()+0x49>
  49:	80 bb 8b 00 00 00 00 	cmpb   $0x0,0x8b(%rbx)
  50:	74 5f                	je     b1 <E131Bridge::Print()+0xb1>
  52:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 59 <E131Bridge::Print()+0x59>
  59:	31 ed                	xor    %ebp,%ebp
  5b:	4c 8d 2d 00 00 00 00 	lea    0x0(%rip),%r13        # 62 <E131Bridge::Print()+0x62>
  62:	e8 00 00 00 00       	call   67 <E131Bridge::Print()+0x67>
  67:	48 8d 54 24 06       	lea    0x6(%rsp),%rdx
  6c:	b9 01 00 00 00       	mov    $0x1,%ecx
  71:	89 ee                	mov    %ebp,%esi
  73:	48 89 df             	mov    %rbx,%rdi
  76:	e8 00 00 00 00       	call   7b <E131Bridge::Print()+0x7b>
  7b:	84 c0                	test   %al,%al
  7d:	74 29                	je     a8 <E131Bridge::Print()+0xa8>
  7f:	48 6b c5 44          	imul   $0x44,%rbp,%rax
  83:	be 01 00 00 00       	mov    $0x1,%esi
  88:	8b bc 03 00 01 00 00 	mov    0x100(%rbx,%rax,1),%edi
  8f:	e8 00 00 00 00       	call   94 <E131Bridge::Print()+0x94>
  94:	0f b7 54 24 06       	movzwl 0x6(%rsp),%edx
  99:	89 ee                	mov    %ebp,%esi
  9b:	4c 89 ef             	mov    %r13,%rdi
  9e:	48 89 c1             	mov    %rax,%rcx
  a1:	31 c0                	xor    %eax,%eax
  a3:	e8 00 00 00 00       	call   a8 <E131Bridge::Print()+0xa8>
  a8:	48 ff c5             	inc    %rbp
  ab:	48 83 fd 04          	cmp    $0x4,%rbp
  af:	75 b6                	jne    67 <E131Bridge::Print()+0x67>
  b1:	80 7b 7a 00          	cmpb   $0x0,0x7a(%rbx)
  b5:	74 26                	je     dd <E131Bridge::Print()+0xdd>
  b7:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  bc:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  c3:	00 00 
  c5:	75 26                	jne    ed <E131Bridge::Print()+0xed>
  c7:	48 83 c4 18          	add    $0x18,%rsp
  cb:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # d2 <E131Bridge::Print()+0xd2>
  d2:	5b                   	pop    %rbx
  d3:	5d                   	pop    %rbp
  d4:	41 5c                	pop    %r12
  d6:	41 5d                	pop    %r13
  d8:	e9 00 00 00 00       	jmp    dd <E131Bridge::Print()+0xdd>
  dd:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  e2:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  e9:	00 00 
  eb:	74 05                	je     f2 <E131Bridge::Print()+0xf2>
  ed:	e8 00 00 00 00       	call   f2 <E131Bridge::Print()+0xf2>
  f2:	48 83 c4 18          	add    $0x18,%rsp
  f6:	5b                   	pop    %rbx
  f7:	5d                   	pop    %rbp
  f8:	41 5c                	pop    %r12
  fa:	41 5d                	pop    %r13
  fc:	c3                   	ret    

e131msgconst.o:     file format elf64-x86-64


e131paramsconst.o:     file format elf64-x86-64


e131params.o:     file format elf64-x86-64


Disassembly of section .text._ZN8lightset4node22get_short_name_defaultEjPc:

0000000000000000 <lightset::node::get_short_name_default(unsigned int, char*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 ec 18          	sub    $0x18,%rsp
   8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   f:	00 00 
  11:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  16:	31 c0                	xor    %eax,%eax
  18:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  1d:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  24:	00 00 
  26:	74 05                	je     2d <lightset::node::get_short_name_default(unsigned int, char*)+0x2d>
  28:	e8 00 00 00 00       	call   2d <lightset::node::get_short_name_default(unsigned int, char*)+0x2d>
  2d:	89 f9                	mov    %edi,%ecx
  2f:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 36 <lightset::node::get_short_name_default(unsigned int, char*)+0x36>
  36:	48 89 f7             	mov    %rsi,%rdi
  39:	31 c0                	xor    %eax,%eax
  3b:	ff c1                	inc    %ecx
  3d:	be 11 00 00 00       	mov    $0x11,%esi
  42:	48 83 c4 18          	add    $0x18,%rsp
  46:	e9 00 00 00 00       	jmp    4b <.LC14+0x39>

Disassembly of section .text._ZN8lightset14get_merge_modeEPKc:

0000000000000000 <lightset::get_merge_mode(char const*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 ec 18          	sub    $0x18,%rsp
   8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   f:	00 00 
  11:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  16:	31 c0                	xor    %eax,%eax
  18:	48 85 ff             	test   %rdi,%rdi
  1b:	74 23                	je     40 <lightset::get_merge_mode(char const*)+0x40>
  1d:	8a 17                	mov    (%rdi),%dl
  1f:	83 ca 20             	or     $0x20,%edx
  22:	80 fa 6c             	cmp    $0x6c,%dl
  25:	75 19                	jne    40 <lightset::get_merge_mode(char const*)+0x40>
  27:	8a 57 01             	mov    0x1(%rdi),%dl
  2a:	83 ca 20             	or     $0x20,%edx
  2d:	80 fa 74             	cmp    $0x74,%dl
  30:	75 0e                	jne    40 <lightset::get_merge_mode(char const*)+0x40>
  32:	8a 47 02             	mov    0x2(%rdi),%al
  35:	83 c8 20             	or     $0x20,%eax
  38:	3c 70                	cmp    $0x70,%al
  3a:	0f 94 c0             	sete   %al
  3d:	0f b6 c0             	movzbl %al,%eax
  40:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  45:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  4c:	00 00 
  4e:	74 05                	je     55 <lightset::get_merge_mode(char const*)+0x55>
  50:	e8 00 00 00 00       	call   55 <lightset::get_merge_mode(char const*)+0x55>
  55:	48 83 c4 18          	add    $0x18,%rsp
  59:	c3                   	ret    

Disassembly of section .text._ZN8lightset14get_merge_modeENS_9MergeModeEb:

0000000000000000 <lightset::get_merge_mode(lightset::MergeMode, bool)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 ec 18          	sub    $0x18,%rsp
   8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   f:	00 00 
  11:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  16:	31 c0                	xor    %eax,%eax
  18:	40 84 f6             	test   %sil,%sil
  1b:	74 12                	je     2f <lightset::get_merge_mode(lightset::MergeMode, bool)+0x2f>
  1d:	85 ff                	test   %edi,%edi
  1f:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 26 <lightset::get_merge_mode(lightset::MergeMode, bool)+0x26>
  26:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 2d <lightset::get_merge_mode(lightset::MergeMode, bool)+0x2d>
  2d:	eb 10                	jmp    3f <lightset::get_merge_mode(lightset::MergeMode, bool)+0x3f>
  2f:	85 ff                	test   %edi,%edi
  31:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 38 <lightset::get_merge_mode(lightset::MergeMode, bool)+0x38>
  38:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 3f <lightset::get_merge_mode(lightset::MergeMode, bool)+0x3f>
  3f:	48 0f 45 c2          	cmovne %rdx,%rax
  43:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  48:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  4f:	00 00 
  51:	74 05                	je     58 <lightset::get_merge_mode(lightset::MergeMode, bool)+0x58>
  53:	e8 00 00 00 00       	call   58 <lightset::get_merge_mode(lightset::MergeMode, bool)+0x58>
  58:	48 83 c4 18          	add    $0x18,%rsp
  5c:	c3                   	ret    

Disassembly of section .text._ZN8lightset13get_directionEPKc:

0000000000000000 <lightset::get_direction(char const*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 ec 18          	sub    $0x18,%rsp
   8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   f:	00 00 
  11:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  16:	b8 01 00 00 00       	mov    $0x1,%eax
  1b:	48 85 ff             	test   %rdi,%rdi
  1e:	0f 84 8c 00 00 00    	je     b0 <lightset::get_direction(char const*)+0xb0>
  24:	8a 17                	mov    (%rdi),%dl
  26:	83 ca 20             	or     $0x20,%edx
  29:	80 fa 69             	cmp    $0x69,%dl
  2c:	75 31                	jne    5f <lightset::get_direction(char const*)+0x5f>
  2e:	8a 57 01             	mov    0x1(%rdi),%dl
  31:	83 ca 20             	or     $0x20,%edx
  34:	80 fa 6e             	cmp    $0x6e,%dl
  37:	75 77                	jne    b0 <lightset::get_direction(char const*)+0xb0>
  39:	8a 57 02             	mov    0x2(%rdi),%dl
  3c:	83 ca 20             	or     $0x20,%edx
  3f:	80 fa 70             	cmp    $0x70,%dl
  42:	75 6c                	jne    b0 <lightset::get_direction(char const*)+0xb0>
  44:	8a 57 03             	mov    0x3(%rdi),%dl
  47:	83 ca 20             	or     $0x20,%edx
  4a:	80 fa 75             	cmp    $0x75,%dl
  4d:	75 61                	jne    b0 <lightset::get_direction(char const*)+0xb0>
  4f:	8a 47 04             	mov    0x4(%rdi),%al
  52:	83 c8 20             	or     $0x20,%eax
  55:	3c 74                	cmp    $0x74,%al
  57:	0f 95 c0             	setne  %al
  5a:	0f b6 c0             	movzbl %al,%eax
  5d:	eb 51                	jmp    b0 <lightset::get_direction(char const*)+0xb0>
  5f:	b8 01 00 00 00       	mov    $0x1,%eax
  64:	80 fa 64             	cmp    $0x64,%dl
  67:	75 47                	jne    b0 <lightset::get_direction(char const*)+0xb0>
  69:	8a 57 01             	mov    0x1(%rdi),%dl
  6c:	83 ca 20             	or     $0x20,%edx
  6f:	80 fa 69             	cmp    $0x69,%dl
  72:	75 3c                	jne    b0 <lightset::get_direction(char const*)+0xb0>
  74:	8a 57 02             	mov    0x2(%rdi),%dl
  77:	83 ca 20             	or     $0x20,%edx
  7a:	80 fa 73             	cmp    $0x73,%dl
  7d:	75 31                	jne    b0 <lightset::get_direction(char const*)+0xb0>
  7f:	8a 57 03             	mov    0x3(%rdi),%dl
  82:	83 ca 20             	or     $0x20,%edx
  85:	80 fa 61             	cmp    $0x61,%dl
  88:	75 26                	jne    b0 <lightset::get_direction(char const*)+0xb0>
  8a:	8a 57 04             	mov    0x4(%rdi),%dl
  8d:	83 ca 20             	or     $0x20,%edx
  90:	80 fa 62             	cmp    $0x62,%dl
  93:	75 1b                	jne    b0 <lightset::get_direction(char const*)+0xb0>
  95:	8a 57 05             	mov    0x5(%rdi),%dl
  98:	83 ca 20             	or     $0x20,%edx
  9b:	80 fa 6c             	cmp    $0x6c,%dl
  9e:	75 10                	jne    b0 <lightset::get_direction(char const*)+0xb0>
  a0:	8a 47 06             	mov    0x6(%rdi),%al
  a3:	83 c8 20             	or     $0x20,%eax
  a6:	3c 65                	cmp    $0x65,%al
  a8:	0f 94 c0             	sete   %al
  ab:	0f b6 c0             	movzbl %al,%eax
  ae:	ff c0                	inc    %eax
  b0:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  b5:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  bc:	00 00 
  be:	74 05                	je     c5 <lightset::get_direction(char const*)+0xc5>
  c0:	e8 00 00 00 00       	call   c5 <lightset::get_direction(char const*)+0xc5>
  c5:	48 83 c4 18          	add    $0x18,%rsp
  c9:	c3                   	ret    

Disassembly of section .text._ZN8lightset13get_directionENS_7PortDirE:

0000000000000000 <lightset::get_direction(lightset::PortDir)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 ec 18          	sub    $0x18,%rsp
   8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   f:	00 00 
  11:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  16:	31 c0                	xor    %eax,%eax
  18:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 1f <lightset::get_direction(lightset::PortDir)+0x1f>
  1f:	85 ff                	test   %edi,%edi
  21:	74 15                	je     38 <lightset::get_direction(lightset::PortDir)+0x38>
  23:	83 ff 02             	cmp    $0x2,%edi
  26:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 2d <lightset::get_direction(lightset::PortDir)+0x2d>
  2d:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 34 <lightset::get_direction(lightset::PortDir)+0x34>
  34:	48 0f 44 c2          	cmove  %rdx,%rax
  38:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  3d:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  44:	00 00 
  46:	74 05                	je     4d <lightset::get_direction(lightset::PortDir)+0x4d>
  48:	e8 00 00 00 00       	call   4d <lightset::get_direction(lightset::PortDir)+0x4d>
  4d:	48 83 c4 18          	add    $0x18,%rsp
  51:	c3                   	ret    

Disassembly of section .text._ZN8lightset12get_failsafeEPKc:

0000000000000000 <lightset::get_failsafe(char const*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	ba 04 00 00 00       	mov    $0x4,%edx
   a:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 11 <lightset::get_failsafe(char const*)+0x11>
  11:	48 89 fd             	mov    %rdi,%rbp
  14:	48 83 ec 10          	sub    $0x10,%rsp
  18:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1f:	00 00 
  21:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  26:	31 c0                	xor    %eax,%eax
  28:	e8 00 00 00 00       	call   2d <lightset::get_failsafe(char const*)+0x2d>
  2d:	85 c0                	test   %eax,%eax
  2f:	74 5e                	je     8f <lightset::get_failsafe(char const*)+0x8f>
  31:	ba 03 00 00 00       	mov    $0x3,%edx
  36:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3d <lightset::get_failsafe(char const*)+0x3d>
  3d:	48 89 ef             	mov    %rbp,%rdi
  40:	e8 00 00 00 00       	call   45 <lightset::get_failsafe(char const*)+0x45>
  45:	41 89 c0             	mov    %eax,%r8d
  48:	b8 01 00 00 00       	mov    $0x1,%eax
  4d:	45 85 c0             	test   %r8d,%r8d
  50:	74 3d                	je     8f <lightset::get_failsafe(char const*)+0x8f>
  52:	ba 02 00 00 00       	mov    $0x2,%edx
  57:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5e <lightset::get_failsafe(char const*)+0x5e>
  5e:	48 89 ef             	mov    %rbp,%rdi
  61:	e8 00 00 00 00       	call   66 <lightset::get_failsafe(char const*)+0x66>
  66:	41 89 c0             	mov    %eax,%r8d
  69:	b8 02 00 00 00       	mov    $0x2,%eax
  6e:	45 85 c0             	test   %r8d,%r8d
  71:	74 1c                	je     8f <lightset::get_failsafe(char const*)+0x8f>
  73:	ba 08 00 00 00       	mov    $0x8,%edx
  78:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 7f <lightset::get_failsafe(char const*)+0x7f>
  7f:	48 89 ef             	mov    %rbp,%rdi
  82:	e8 00 00 00 00       	call   87 <lightset::get_failsafe(char const*)+0x87>
  87:	83 f8 01             	cmp    $0x1,%eax
  8a:	19 c0                	sbb    %eax,%eax
  8c:	83 e0 03             	and    $0x3,%eax
  8f:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  94:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  9b:	00 00 
  9d:	74 05                	je     a4 <lightset::get_failsafe(char const*)+0xa4>
  9f:	e8 00 00 00 00       	call   a4 <lightset::get_failsafe(char const*)+0xa4>
  a4:	48 83 c4 10          	add    $0x10,%rsp
  a8:	5d                   	pop    %rbp
  a9:	c3                   	ret    

Disassembly of section .text._ZN8lightset12get_failsafeENS_8FailSafeE:

0000000000000000 <lightset::get_failsafe(lightset::FailSafe)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 ec 18          	sub    $0x18,%rsp
   8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   f:	00 00 
  11:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  16:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 1d <lightset::get_failsafe(lightset::FailSafe)+0x1d>
  1d:	83 ff 02             	cmp    $0x2,%edi
  20:	74 1d                	je     3f <lightset::get_failsafe(lightset::FailSafe)+0x3f>
  22:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 29 <lightset::get_failsafe(lightset::FailSafe)+0x29>
  29:	7f 14                	jg     3f <lightset::get_failsafe(lightset::FailSafe)+0x3f>
  2b:	85 ff                	test   %edi,%edi
  2d:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 34 <lightset::get_failsafe(lightset::FailSafe)+0x34>
  34:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 3b <lightset::get_failsafe(lightset::FailSafe)+0x3b>
  3b:	48 0f 44 c2          	cmove  %rdx,%rax
  3f:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  44:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  4b:	00 00 
  4d:	74 05                	je     54 <lightset::get_failsafe(lightset::FailSafe)+0x54>
  4f:	e8 00 00 00 00       	call   54 <lightset::get_failsafe(lightset::FailSafe)+0x54>
  54:	48 83 c4 18          	add    $0x18,%rsp
  58:	c3                   	ret    

Disassembly of section .text._ZN10E131Bridge11SetFailSafeEN8lightset8FailSafeE:

0000000000000000 <E131Bridge::SetFailSafe(lightset::FailSafe)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 ec 18          	sub    $0x18,%rsp
   8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   f:	00 00 
  11:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  16:	31 c0                	xor    %eax,%eax
  18:	89 b7 90 00 00 00    	mov    %esi,0x90(%rdi)
  1e:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  23:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  2a:	00 00 
  2c:	74 05                	je     33 <E131Bridge::SetFailSafe(lightset::FailSafe)+0x33>
  2e:	e8 00 00 00 00       	call   33 <E131Bridge::SetFailSafe(lightset::FailSafe)+0x33>
  33:	48 83 c4 18          	add    $0x18,%rsp
  37:	c3                   	ret    

Disassembly of section .text._ZN10E131Bridge12SetMergeModeEjN8lightset9MergeModeE:

0000000000000000 <E131Bridge::SetMergeMode(unsigned int, lightset::MergeMode)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 ec 18          	sub    $0x18,%rsp
   8:	89 f6                	mov    %esi,%esi
   a:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  11:	00 00 
  13:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  18:	31 c0                	xor    %eax,%eax
  1a:	48 6b f6 44          	imul   $0x44,%rsi,%rsi
  1e:	89 94 3e 00 01 00 00 	mov    %edx,0x100(%rsi,%rdi,1)
  25:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  2a:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  31:	00 00 
  33:	74 05                	je     3a <E131Bridge::SetMergeMode(unsigned int, lightset::MergeMode)+0x3a>
  35:	e8 00 00 00 00       	call   3a <E131Bridge::SetMergeMode(unsigned int, lightset::MergeMode)+0x3a>
  3a:	48 83 c4 18          	add    $0x18,%rsp
  3e:	c3                   	ret    

Disassembly of section .text._ZN10E131Bridge22SetDisableMergeTimeoutEb:

0000000000000000 <E131Bridge::SetDisableMergeTimeout(bool)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 ec 18          	sub    $0x18,%rsp
   8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   f:	00 00 
  11:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  16:	31 c0                	xor    %eax,%eax
  18:	40 88 77 79          	mov    %sil,0x79(%rdi)
  1c:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  21:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  28:	00 00 
  2a:	74 05                	je     31 <E131Bridge::SetDisableMergeTimeout(bool)+0x31>
  2c:	e8 00 00 00 00       	call   31 <E131Bridge::SetDisableMergeTimeout(bool)+0x31>
  31:	48 83 c4 18          	add    $0x18,%rsp
  35:	c3                   	ret    

Disassembly of section .text._ZN10E131Bridge3GetEv:

0000000000000000 <E131Bridge::Get()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 ec 18          	sub    $0x18,%rsp
   8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   f:	00 00 
  11:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  16:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 1d <E131Bridge::Get()+0x1d>
  1d:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  22:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  29:	00 00 
  2b:	74 05                	je     32 <E131Bridge::Get()+0x32>
  2d:	e8 00 00 00 00       	call   32 <E131Bridge::Get()+0x32>
  32:	48 83 c4 18          	add    $0x18,%rsp
  36:	c3                   	ret    

Disassembly of section .text._ZN10e131paramsL18portdir_shif_rightEjj:

0000000000000000 <e131params::portdir_shif_right(unsigned int, unsigned int)>:
   0:	48 83 ec 18          	sub    $0x18,%rsp
   4:	8d 0c 36             	lea    (%rsi,%rsi,1),%ecx
   7:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   e:	00 00 
  10:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  15:	31 c0                	xor    %eax,%eax
  17:	d3 ef                	shr    %cl,%edi
  19:	89 f8                	mov    %edi,%eax
  1b:	83 e0 03             	and    $0x3,%eax
  1e:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  23:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  2a:	00 00 
  2c:	74 05                	je     33 <e131params::portdir_shif_right(unsigned int, unsigned int)+0x33>
  2e:	e8 00 00 00 00       	call   33 <e131params::portdir_shif_right(unsigned int, unsigned int)+0x33>
  33:	48 83 c4 18          	add    $0x18,%rsp
  37:	c3                   	ret    

Disassembly of section .text._ZN10e131paramsL15mergemode_clearEj:

0000000000000000 <e131params::mergemode_clear(unsigned int)>:
   0:	48 83 ec 18          	sub    $0x18,%rsp
   4:	8d 0c 3f             	lea    (%rdi,%rdi,1),%ecx
   7:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   e:	00 00 
  10:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  15:	31 c0                	xor    %eax,%eax
  17:	b8 03 00 00 00       	mov    $0x3,%eax
  1c:	d3 e0                	shl    %cl,%eax
  1e:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  23:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  2a:	00 00 
  2c:	74 05                	je     33 <e131params::mergemode_clear(unsigned int)+0x33>
  2e:	e8 00 00 00 00       	call   33 <e131params::mergemode_clear(unsigned int)+0x33>
  33:	f7 d0                	not    %eax
  35:	48 83 c4 18          	add    $0x18,%rsp
  39:	c3                   	ret    

Disassembly of section .text._ZN10e131paramsL13mergemode_setEjN8lightset9MergeModeE:

0000000000000000 <e131params::mergemode_set(unsigned int, lightset::MergeMode)>:
   0:	48 83 ec 18          	sub    $0x18,%rsp
   4:	8d 0c 3f             	lea    (%rdi,%rdi,1),%ecx
   7:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   e:	00 00 
  10:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  15:	89 f0                	mov    %esi,%eax
  17:	83 e0 03             	and    $0x3,%eax
  1a:	d3 e0                	shl    %cl,%eax
  1c:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  21:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  28:	00 00 
  2a:	74 05                	je     31 <e131params::mergemode_set(unsigned int, lightset::MergeMode)+0x31>
  2c:	e8 00 00 00 00       	call   31 <e131params::mergemode_set(unsigned int, lightset::MergeMode)+0x31>
  31:	48 83 c4 18          	add    $0x18,%rsp
  35:	c3                   	ret    

Disassembly of section .text._ZNK10E131Params9isMaskSetEj:

0000000000000000 <E131Params::isMaskSet(unsigned int) const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 ec 18          	sub    $0x18,%rsp
   8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   f:	00 00 
  11:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  16:	89 f0                	mov    %esi,%eax
  18:	23 47 08             	and    0x8(%rdi),%eax
  1b:	39 f0                	cmp    %esi,%eax
  1d:	0f 94 c0             	sete   %al
  20:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  25:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  2c:	00 00 
  2e:	74 05                	je     35 <E131Params::isMaskSet(unsigned int) const+0x35>
  30:	e8 00 00 00 00       	call   35 <E131Params::isMaskSet(unsigned int) const+0x35>
  35:	48 83 c4 18          	add    $0x18,%rsp
  39:	c3                   	ret    

Disassembly of section .text._ZN10E131Params13mergemode_getEj:

0000000000000000 <E131Params::mergemode_get(unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 ec 18          	sub    $0x18,%rsp
   8:	8d 0c 36             	lea    (%rsi,%rsi,1),%ecx
   b:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  12:	00 00 
  14:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  19:	31 c0                	xor    %eax,%eax
  1b:	0f b7 47 17          	movzwl 0x17(%rdi),%eax
  1f:	d3 f8                	sar    %cl,%eax
  21:	83 e0 03             	and    $0x3,%eax
  24:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  29:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  30:	00 00 
  32:	74 05                	je     39 <E131Params::mergemode_get(unsigned int)+0x39>
  34:	e8 00 00 00 00       	call   39 <E131Params::mergemode_get(unsigned int)+0x39>
  39:	48 83 c4 18          	add    $0x18,%rsp
  3d:	c3                   	ret    

Disassembly of section .text._ZN17PropertiesBuilder3AddEPKcb:

0000000000000000 <PropertiesBuilder::Add(char const*, bool)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 ec 18          	sub    $0x18,%rsp
   8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   f:	00 00 
  11:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  16:	31 c0                	xor    %eax,%eax
  18:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  1d:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  24:	00 00 
  26:	74 05                	je     2d <PropertiesBuilder::Add(char const*, bool)+0x2d>
  28:	e8 00 00 00 00       	call   2d <PropertiesBuilder::Add(char const*, bool)+0x2d>
  2d:	0f b6 d2             	movzbl %dl,%edx
  30:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  36:	48 83 c4 18          	add    $0x18,%rsp
  3a:	89 d1                	mov    %edx,%ecx
  3c:	e9 00 00 00 00       	jmp    41 <.LC14+0x2f>

Disassembly of section .text._ZN17PropertiesBuilder7GetSizeEv:

0000000000000000 <PropertiesBuilder::GetSize()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 ec 18          	sub    $0x18,%rsp
   8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   f:	00 00 
  11:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  16:	31 c0                	xor    %eax,%eax
  18:	80 7f 0c 00          	cmpb   $0x0,0xc(%rdi)
  1c:	74 1b                	je     39 <PropertiesBuilder::GetSize()+0x39>
  1e:	0f b7 47 0a          	movzwl 0xa(%rdi),%eax
  22:	48 8b 17             	mov    (%rdi),%rdx
  25:	c6 44 02 ff 7d       	movb   $0x7d,-0x1(%rdx,%rax,1)
  2a:	0f b7 47 0a          	movzwl 0xa(%rdi),%eax
  2e:	48 8b 17             	mov    (%rdi),%rdx
  31:	c6 04 02 7d          	movb   $0x7d,(%rdx,%rax,1)
  35:	66 ff 47 0a          	incw   0xa(%rdi)
  39:	66 8b 47 0a          	mov    0xa(%rdi),%ax
  3d:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  42:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  49:	00 00 
  4b:	74 05                	je     52 <PropertiesBuilder::GetSize()+0x52>
  4d:	e8 00 00 00 00       	call   52 <PropertiesBuilder::GetSize()+0x52>
  52:	48 83 c4 18          	add    $0x18,%rsp
  56:	c3                   	ret    

Disassembly of section .text._ZN17PropertiesBuilder8add_partIPcEEiS1_jPKcT_bj:

0000000000000000 <int PropertiesBuilder::add_part<char*>(char*, unsigned int, char const*, char*, bool, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 ec 18          	sub    $0x18,%rsp
   8:	49 89 fa             	mov    %rdi,%r10
   b:	48 89 f7             	mov    %rsi,%rdi
   e:	89 d6                	mov    %edx,%esi
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  1e:	31 c0                	xor    %eax,%eax
  20:	41 8a 42 0c          	mov    0xc(%r10),%al
  24:	45 84 c9             	test   %r9b,%r9b
  27:	75 06                	jne    2f <int PropertiesBuilder::add_part<char*>(char*, unsigned int, char const*, char*, bool, unsigned int)+0x2f>
  29:	84 c0                	test   %al,%al
  2b:	75 06                	jne    33 <int PropertiesBuilder::add_part<char*>(char*, unsigned int, char const*, char*, bool, unsigned int)+0x33>
  2d:	eb 36                	jmp    65 <int PropertiesBuilder::add_part<char*>(char*, unsigned int, char const*, char*, bool, unsigned int)+0x65>
  2f:	84 c0                	test   %al,%al
  31:	74 19                	je     4c <int PropertiesBuilder::add_part<char*>(char*, unsigned int, char const*, char*, bool, unsigned int)+0x4c>
  33:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  38:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  3f:	00 00 
  41:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 48 <int PropertiesBuilder::add_part<char*>(char*, unsigned int, char const*, char*, bool, unsigned int)+0x48>
  48:	74 37                	je     81 <int PropertiesBuilder::add_part<char*>(char*, unsigned int, char const*, char*, bool, unsigned int)+0x81>
  4a:	eb 30                	jmp    7c <int PropertiesBuilder::add_part<char*>(char*, unsigned int, char const*, char*, bool, unsigned int)+0x7c>
  4c:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  51:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  58:	00 00 
  5a:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 61 <int PropertiesBuilder::add_part<char*>(char*, unsigned int, char const*, char*, bool, unsigned int)+0x61>
  61:	74 1e                	je     81 <int PropertiesBuilder::add_part<char*>(char*, unsigned int, char const*, char*, bool, unsigned int)+0x81>
  63:	eb 17                	jmp    7c <int PropertiesBuilder::add_part<char*>(char*, unsigned int, char const*, char*, bool, unsigned int)+0x7c>
  65:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  6a:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  71:	00 00 
  73:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 7a <int PropertiesBuilder::add_part<char*>(char*, unsigned int, char const*, char*, bool, unsigned int)+0x7a>
  7a:	74 05                	je     81 <int PropertiesBuilder::add_part<char*>(char*, unsigned int, char const*, char*, bool, unsigned int)+0x81>
  7c:	e8 00 00 00 00       	call   81 <int PropertiesBuilder::add_part<char*>(char*, unsigned int, char const*, char*, bool, unsigned int)+0x81>
  81:	31 c0                	xor    %eax,%eax
  83:	48 83 c4 18          	add    $0x18,%rsp
  87:	e9 00 00 00 00       	jmp    8c <.LC14+0x7a>

Disassembly of section .text._ZN17PropertiesBuilder8add_partIPKcEEiPcjS2_T_bj:

0000000000000000 <int PropertiesBuilder::add_part<char const*>(char*, unsigned int, char const*, char const*, bool, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 ec 18          	sub    $0x18,%rsp
   8:	64 4c 8b 14 25 28 00 	mov    %fs:0x28,%r10
   f:	00 00 
  11:	4c 89 54 24 08       	mov    %r10,0x8(%rsp)
  16:	45 31 d2             	xor    %r10d,%r10d
  19:	8b 44 24 20          	mov    0x20(%rsp),%eax
  1d:	4c 8b 54 24 08       	mov    0x8(%rsp),%r10
  22:	64 4c 2b 14 25 28 00 	sub    %fs:0x28,%r10
  29:	00 00 
  2b:	74 05                	je     32 <int PropertiesBuilder::add_part<char const*>(char*, unsigned int, char const*, char const*, bool, unsigned int)+0x32>
  2d:	e8 00 00 00 00       	call   32 <int PropertiesBuilder::add_part<char const*>(char*, unsigned int, char const*, char const*, bool, unsigned int)+0x32>
  32:	89 44 24 20          	mov    %eax,0x20(%rsp)
  36:	45 0f b6 c9          	movzbl %r9b,%r9d
  3a:	48 83 c4 18          	add    $0x18,%rsp
  3e:	e9 00 00 00 00       	jmp    43 <.LC14+0x31>

Disassembly of section .text._ZN10e131paramsL18portdir_shift_leftEN8lightset7PortDirEj:

0000000000000000 <e131params::portdir_shift_left(lightset::PortDir, unsigned int)>:
   0:	48 83 ec 18          	sub    $0x18,%rsp
   4:	8d 0c 36             	lea    (%rsi,%rsi,1),%ecx
   7:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   e:	00 00 
  10:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  15:	89 f8                	mov    %edi,%eax
  17:	83 e0 03             	and    $0x3,%eax
  1a:	d3 e0                	shl    %cl,%eax
  1c:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  21:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  28:	00 00 
  2a:	74 05                	je     31 <e131params::portdir_shift_left(lightset::PortDir, unsigned int)+0x31>
  2c:	e8 00 00 00 00       	call   31 <e131params::portdir_shift_left(lightset::PortDir, unsigned int)+0x31>
  31:	48 83 c4 18          	add    $0x18,%rsp
  35:	c3                   	ret    

Disassembly of section .text._ZN10e131paramsL13portdir_clearEj:

0000000000000000 <e131params::portdir_clear(unsigned int)>:
   0:	48 83 ec 18          	sub    $0x18,%rsp
   4:	8d 0c 3f             	lea    (%rdi,%rdi,1),%ecx
   7:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   e:	00 00 
  10:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  15:	31 c0                	xor    %eax,%eax
  17:	b8 03 00 00 00       	mov    $0x3,%eax
  1c:	d3 e0                	shl    %cl,%eax
  1e:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  23:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  2a:	00 00 
  2c:	74 05                	je     33 <e131params::portdir_clear(unsigned int)+0x33>
  2e:	e8 00 00 00 00       	call   33 <e131params::portdir_clear(unsigned int)+0x33>
  33:	f7 d0                	not    %eax
  35:	48 83 c4 18          	add    $0x18,%rsp
  39:	c3                   	ret    

Disassembly of section .text._ZN10E131ParamsC2EP15E131ParamsStore:

0000000000000000 <E131Params::E131Params(E131ParamsStore*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 ec 18          	sub    $0x18,%rsp
   8:	48 89 fa             	mov    %rdi,%rdx
   b:	b9 37 00 00 00       	mov    $0x37,%ecx
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  1e:	31 c0                	xor    %eax,%eax
  20:	48 89 37             	mov    %rsi,(%rdi)
  23:	48 8d 77 08          	lea    0x8(%rdi),%rsi
  27:	48 89 f7             	mov    %rsi,%rdi
  2a:	f3 ab                	rep stos %eax,%es:(%rdi)
  2c:	66 c7 42 15 55 00    	movw   $0x55,0x15(%rdx)
  32:	48 b8 01 00 02 00 03 	movabs $0x4000300020001,%rax
  39:	00 04 00 
  3c:	48 89 42 0d          	mov    %rax,0xd(%rdx)
  40:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  45:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  4c:	00 00 
  4e:	74 05                	je     55 <E131Params::E131Params(E131ParamsStore*)+0x55>
  50:	e8 00 00 00 00       	call   55 <E131Params::E131Params(E131ParamsStore*)+0x55>
  55:	48 83 c4 18          	add    $0x18,%rsp
  59:	c3                   	ret    

Disassembly of section .text._ZN10E131Params4LoadEv:

0000000000000000 <E131Params::Load()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	41 54                	push   %r12
   6:	48 89 fa             	mov    %rdi,%rdx
   9:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 10 <E131Params::Load()+0x10>
  10:	55                   	push   %rbp
  11:	53                   	push   %rbx
  12:	48 89 fb             	mov    %rdi,%rbx
  15:	48 83 ec 20          	sub    $0x20,%rsp
  19:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  20:	00 00 
  22:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  27:	31 c0                	xor    %eax,%eax
  29:	c7 47 08 00 00 00 00 	movl   $0x0,0x8(%rdi)
  30:	48 8d 6c 24 08       	lea    0x8(%rsp),%rbp
  35:	48 89 ef             	mov    %rbp,%rdi
  38:	e8 00 00 00 00       	call   3d <E131Params::Load()+0x3d>
  3d:	48 89 ef             	mov    %rbp,%rdi
  40:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 47 <E131Params::Load()+0x47>
  47:	e8 00 00 00 00       	call   4c <E131Params::Load()+0x4c>
  4c:	48 8b 3b             	mov    (%rbx),%rdi
  4f:	84 c0                	test   %al,%al
  51:	41 89 c4             	mov    %eax,%r12d
  54:	74 11                	je     67 <E131Params::Load()+0x67>
  56:	48 85 ff             	test   %rdi,%rdi
  59:	74 1e                	je     79 <E131Params::Load()+0x79>
  5b:	48 8b 07             	mov    (%rdi),%rax
  5e:	48 8d 73 08          	lea    0x8(%rbx),%rsi
  62:	ff 50 10             	call   *0x10(%rax)
  65:	eb 12                	jmp    79 <E131Params::Load()+0x79>
  67:	48 85 ff             	test   %rdi,%rdi
  6a:	74 0d                	je     79 <E131Params::Load()+0x79>
  6c:	48 8b 07             	mov    (%rdi),%rax
  6f:	48 8d 73 08          	lea    0x8(%rbx),%rsi
  73:	41 b4 01             	mov    $0x1,%r12b
  76:	ff 50 18             	call   *0x18(%rax)
  79:	48 89 ef             	mov    %rbp,%rdi
  7c:	e8 00 00 00 00       	call   81 <E131Params::Load()+0x81>
  81:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  86:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  8d:	00 00 
  8f:	74 05                	je     96 <E131Params::Load()+0x96>
  91:	e8 00 00 00 00       	call   96 <E131Params::Load()+0x96>
  96:	48 83 c4 20          	add    $0x20,%rsp
  9a:	44 89 e0             	mov    %r12d,%eax
  9d:	5b                   	pop    %rbx
  9e:	5d                   	pop    %rbp
  9f:	41 5c                	pop    %r12
  a1:	c3                   	ret    

Disassembly of section .text._ZN10E131Params4LoadEPKcj:

0000000000000000 <E131Params::Load(char const*, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	41 55                	push   %r13
   6:	41 89 d5             	mov    %edx,%r13d
   9:	48 89 fa             	mov    %rdi,%rdx
   c:	41 54                	push   %r12
   e:	49 89 f4             	mov    %rsi,%r12
  11:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 18 <E131Params::Load(char const*, unsigned int)+0x18>
  18:	55                   	push   %rbp
  19:	53                   	push   %rbx
  1a:	48 89 fb             	mov    %rdi,%rbx
  1d:	48 83 ec 28          	sub    $0x28,%rsp
  21:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  28:	00 00 
  2a:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2f:	31 c0                	xor    %eax,%eax
  31:	c7 47 08 00 00 00 00 	movl   $0x0,0x8(%rdi)
  38:	48 8d 6c 24 08       	lea    0x8(%rsp),%rbp
  3d:	48 89 ef             	mov    %rbp,%rdi
  40:	e8 00 00 00 00       	call   45 <E131Params::Load(char const*, unsigned int)+0x45>
  45:	44 89 ea             	mov    %r13d,%edx
  48:	4c 89 e6             	mov    %r12,%rsi
  4b:	48 89 ef             	mov    %rbp,%rdi
  4e:	e8 00 00 00 00       	call   53 <E131Params::Load(char const*, unsigned int)+0x53>
  53:	48 8b 3b             	mov    (%rbx),%rdi
  56:	48 8d 73 08          	lea    0x8(%rbx),%rsi
  5a:	48 8b 07             	mov    (%rdi),%rax
  5d:	ff 50 10             	call   *0x10(%rax)
  60:	48 89 ef             	mov    %rbp,%rdi
  63:	e8 00 00 00 00       	call   68 <E131Params::Load(char const*, unsigned int)+0x68>
  68:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  6d:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  74:	00 00 
  76:	74 05                	je     7d <E131Params::Load(char const*, unsigned int)+0x7d>
  78:	e8 00 00 00 00       	call   7d <E131Params::Load(char const*, unsigned int)+0x7d>
  7d:	48 83 c4 28          	add    $0x28,%rsp
  81:	5b                   	pop    %rbx
  82:	5d                   	pop    %rbp
  83:	41 5c                	pop    %r12
  85:	41 5d                	pop    %r13
  87:	c3                   	ret    

Disassembly of section .text._ZN10E131Params16callbackFunctionEPKc:

0000000000000000 <E131Params::callbackFunction(char const*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	41 57                	push   %r15
   6:	49 89 f7             	mov    %rsi,%r15
   9:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 10 <E131Params::callbackFunction(char const*)+0x10>
  10:	41 56                	push   %r14
  12:	41 55                	push   %r13
  14:	41 54                	push   %r12
  16:	55                   	push   %rbp
  17:	53                   	push   %rbx
  18:	48 89 fb             	mov    %rdi,%rbx
  1b:	4c 89 ff             	mov    %r15,%rdi
  1e:	48 83 ec 58          	sub    $0x58,%rsp
  22:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  29:	00 00 
  2b:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  30:	31 c0                	xor    %eax,%eax
  32:	4c 8d 64 24 30       	lea    0x30(%rsp),%r12
  37:	4c 8d 74 24 36       	lea    0x36(%rsp),%r14
  3c:	c7 44 24 30 08 00 00 	movl   $0x8,0x30(%rsp)
  43:	00 
  44:	4c 89 e1             	mov    %r12,%rcx
  47:	4c 89 f2             	mov    %r14,%rdx
  4a:	e8 00 00 00 00       	call   4f <E131Params::callbackFunction(char const*)+0x4f>
  4f:	85 c0                	test   %eax,%eax
  51:	75 22                	jne    75 <E131Params::callbackFunction(char const*)+0x75>
  53:	4c 89 f7             	mov    %r14,%rdi
  56:	e8 00 00 00 00       	call   5b <E131Params::callbackFunction(char const*)+0x5b>
  5b:	8b 53 08             	mov    0x8(%rbx),%edx
  5e:	85 c0                	test   %eax,%eax
  60:	75 05                	jne    67 <E131Params::callbackFunction(char const*)+0x67>
  62:	83 e2 df             	and    $0xffffffdf,%edx
  65:	eb 03                	jmp    6a <E131Params::callbackFunction(char const*)+0x6a>
  67:	83 ca 20             	or     $0x20,%edx
  6a:	89 53 08             	mov    %edx,0x8(%rbx)
  6d:	88 43 1a             	mov    %al,0x1a(%rbx)
  70:	e9 ef 01 00 00       	jmp    264 <E131Params::callbackFunction(char const*)+0x264>
  75:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 7c <E131Params::callbackFunction(char const*)+0x7c>
  7c:	31 ed                	xor    %ebp,%ebp
  7e:	45 31 ed             	xor    %r13d,%r13d
  81:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  86:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 8d <E131Params::callbackFunction(char const*)+0x8d>
  8d:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  92:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  97:	48 8d 54 24 2e       	lea    0x2e(%rsp),%rdx
  9c:	4c 89 ff             	mov    %r15,%rdi
  9f:	e8 00 00 00 00       	call   a4 <E131Params::callbackFunction(char const*)+0xa4>
  a4:	85 c0                	test   %eax,%eax
  a6:	75 3e                	jne    e6 <E131Params::callbackFunction(char const*)+0xe6>
  a8:	66 8b 74 24 2e       	mov    0x2e(%rsp),%si
  ad:	44 89 e9             	mov    %r13d,%ecx
  b0:	b8 02 00 00 00       	mov    $0x2,%eax
  b5:	8b 53 08             	mov    0x8(%rbx),%edx
  b8:	d3 e0                	shl    %cl,%eax
  ba:	8d 4e ff             	lea    -0x1(%rsi),%ecx
  bd:	66 81 f9 fe f9       	cmp    $0xf9fe,%cx
  c2:	44 89 e9             	mov    %r13d,%ecx
  c5:	76 13                	jbe    da <E131Params::callbackFunction(char const*)+0xda>
  c7:	45 8d 45 01          	lea    0x1(%r13),%r8d
  cb:	f7 d0                	not    %eax
  cd:	66 44 89 44 4b 0d    	mov    %r8w,0xd(%rbx,%rcx,2)
  d3:	21 d0                	and    %edx,%eax
  d5:	e9 87 01 00 00       	jmp    261 <E131Params::callbackFunction(char const*)+0x261>
  da:	66 89 74 4b 0d       	mov    %si,0xd(%rbx,%rcx,2)
  df:	09 d0                	or     %edx,%eax
  e1:	e9 7b 01 00 00       	jmp    261 <E131Params::callbackFunction(char const*)+0x261>
  e6:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # ed <E131Params::callbackFunction(char const*)+0xed>
  ed:	4c 89 e1             	mov    %r12,%rcx
  f0:	4c 89 f2             	mov    %r14,%rdx
  f3:	4c 89 ff             	mov    %r15,%rdi
  f6:	48 8d 74 05 00       	lea    0x0(%rbp,%rax,1),%rsi
  fb:	c7 44 24 30 03 00 00 	movl   $0x3,0x30(%rsp)
 102:	00 
 103:	e8 00 00 00 00       	call   108 <E131Params::callbackFunction(char const*)+0x108>
 108:	85 c0                	test   %eax,%eax
 10a:	75 2f                	jne    13b <E131Params::callbackFunction(char const*)+0x13b>
 10c:	44 89 ef             	mov    %r13d,%edi
 10f:	e8 00 00 00 00       	call   114 <E131Params::callbackFunction(char const*)+0x114>
 114:	66 23 43 17          	and    0x17(%rbx),%ax
 118:	4c 89 f7             	mov    %r14,%rdi
 11b:	66 89 43 17          	mov    %ax,0x17(%rbx)
 11f:	89 c5                	mov    %eax,%ebp
 121:	e8 00 00 00 00       	call   126 <E131Params::callbackFunction(char const*)+0x126>
 126:	44 89 ef             	mov    %r13d,%edi
 129:	89 c6                	mov    %eax,%esi
 12b:	e8 00 00 00 00       	call   130 <E131Params::callbackFunction(char const*)+0x130>
 130:	09 c5                	or     %eax,%ebp
 132:	66 89 6b 17          	mov    %bp,0x17(%rbx)
 136:	e9 29 01 00 00       	jmp    264 <E131Params::callbackFunction(char const*)+0x264>
 13b:	4c 8d 54 2b 5b       	lea    0x5b(%rbx,%rbp,1),%r10
 140:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
 145:	4c 89 e1             	mov    %r12,%rcx
 148:	4c 89 ff             	mov    %r15,%rdi
 14b:	4c 89 d2             	mov    %r10,%rdx
 14e:	4c 89 54 24 18       	mov    %r10,0x18(%rsp)
 153:	c7 44 24 30 11 00 00 	movl   $0x11,0x30(%rsp)
 15a:	00 
 15b:	e8 00 00 00 00       	call   160 <E131Params::callbackFunction(char const*)+0x160>
 160:	4c 8b 54 24 18       	mov    0x18(%rsp),%r10
 165:	85 c0                	test   %eax,%eax
 167:	75 54                	jne    1bd <E131Params::callbackFunction(char const*)+0x1bd>
 169:	44 89 e8             	mov    %r13d,%eax
 16c:	8b 54 24 30          	mov    0x30(%rsp),%edx
 170:	4c 89 f6             	mov    %r14,%rsi
 173:	44 89 ef             	mov    %r13d,%edi
 176:	48 6b c0 12          	imul   $0x12,%rax,%rax
 17a:	4c 89 54 24 08       	mov    %r10,0x8(%rsp)
 17f:	48 01 d8             	add    %rbx,%rax
 182:	c6 44 02 5b 00       	movb   $0x0,0x5b(%rdx,%rax,1)
 187:	e8 00 00 00 00       	call   18c <E131Params::callbackFunction(char const*)+0x18c>
 18c:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
 191:	4c 89 f6             	mov    %r14,%rsi
 194:	e8 00 00 00 00       	call   199 <E131Params::callbackFunction(char const*)+0x199>
 199:	44 89 e9             	mov    %r13d,%ecx
 19c:	41 89 c1             	mov    %eax,%r9d
 19f:	b8 80 00 00 00       	mov    $0x80,%eax
 1a4:	d3 e0                	shl    %cl,%eax
 1a6:	45 85 c9             	test   %r9d,%r9d
 1a9:	75 0a                	jne    1b5 <E131Params::callbackFunction(char const*)+0x1b5>
 1ab:	f7 d0                	not    %eax
 1ad:	21 43 08             	and    %eax,0x8(%rbx)
 1b0:	e9 af 00 00 00       	jmp    264 <E131Params::callbackFunction(char const*)+0x264>
 1b5:	09 43 08             	or     %eax,0x8(%rbx)
 1b8:	e9 a7 00 00 00       	jmp    264 <E131Params::callbackFunction(char const*)+0x264>
 1bd:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1c4 <E131Params::callbackFunction(char const*)+0x1c4>
 1c4:	4c 89 e1             	mov    %r12,%rcx
 1c7:	4c 89 f2             	mov    %r14,%rdx
 1ca:	4c 89 ff             	mov    %r15,%rdi
 1cd:	48 01 ee             	add    %rbp,%rsi
 1d0:	c7 44 24 30 07 00 00 	movl   $0x7,0x30(%rsp)
 1d7:	00 
 1d8:	e8 00 00 00 00       	call   1dd <E131Params::callbackFunction(char const*)+0x1dd>
 1dd:	85 c0                	test   %eax,%eax
 1df:	75 39                	jne    21a <E131Params::callbackFunction(char const*)+0x21a>
 1e1:	4c 89 f7             	mov    %r14,%rdi
 1e4:	e8 00 00 00 00       	call   1e9 <E131Params::callbackFunction(char const*)+0x1e9>
 1e9:	44 89 ef             	mov    %r13d,%edi
 1ec:	41 89 c4             	mov    %eax,%r12d
 1ef:	e8 00 00 00 00       	call   1f4 <E131Params::callbackFunction(char const*)+0x1f4>
 1f4:	66 23 43 15          	and    0x15(%rbx),%ax
 1f8:	44 89 ee             	mov    %r13d,%esi
 1fb:	bf 02 00 00 00       	mov    $0x2,%edi
 200:	89 c5                	mov    %eax,%ebp
 202:	41 83 fc 02          	cmp    $0x2,%r12d
 206:	74 05                	je     20d <E131Params::callbackFunction(char const*)+0x20d>
 208:	bf 01 00 00 00       	mov    $0x1,%edi
 20d:	e8 00 00 00 00       	call   212 <E131Params::callbackFunction(char const*)+0x212>
 212:	09 c5                	or     %eax,%ebp
 214:	66 89 6b 15          	mov    %bp,0x15(%rbx)
 218:	eb 4a                	jmp    264 <E131Params::callbackFunction(char const*)+0x264>
 21a:	48 83 c5 12          	add    $0x12,%rbp
 21e:	48 83 44 24 08 10    	addq   $0x10,0x8(%rsp)
 224:	41 ff c5             	inc    %r13d
 227:	48 83 44 24 10 0e    	addq   $0xe,0x10(%rsp)
 22d:	48 83 fd 48          	cmp    $0x48,%rbp
 231:	0f 85 5b fe ff ff    	jne    92 <E131Params::callbackFunction(char const*)+0x92>
 237:	48 8d 54 24 2d       	lea    0x2d(%rsp),%rdx
 23c:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 243 <E131Params::callbackFunction(char const*)+0x243>
 243:	4c 89 ff             	mov    %r15,%rdi
 246:	e8 00 00 00 00       	call   24b <E131Params::callbackFunction(char const*)+0x24b>
 24b:	85 c0                	test   %eax,%eax
 24d:	75 15                	jne    264 <E131Params::callbackFunction(char const*)+0x264>
 24f:	80 7c 24 2d 00       	cmpb   $0x0,0x2d(%rsp)
 254:	8b 43 08             	mov    0x8(%rbx),%eax
 257:	74 05                	je     25e <E131Params::callbackFunction(char const*)+0x25e>
 259:	80 cc 08             	or     $0x8,%ah
 25c:	eb 03                	jmp    261 <E131Params::callbackFunction(char const*)+0x261>
 25e:	80 e4 f7             	and    $0xf7,%ah
 261:	89 43 08             	mov    %eax,0x8(%rbx)
 264:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
 269:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 270:	00 00 
 272:	74 05                	je     279 <E131Params::callbackFunction(char const*)+0x279>
 274:	e8 00 00 00 00       	call   279 <E131Params::callbackFunction(char const*)+0x279>
 279:	48 83 c4 58          	add    $0x58,%rsp
 27d:	5b                   	pop    %rbx
 27e:	5d                   	pop    %rbp
 27f:	41 5c                	pop    %r12
 281:	41 5d                	pop    %r13
 283:	41 5e                	pop    %r14
 285:	41 5f                	pop    %r15
 287:	c3                   	ret    

Disassembly of section .text._ZN10E131Params22staticCallbackFunctionEPvPKc:

0000000000000000 <E131Params::staticCallbackFunction(void*, char const*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 ec 18          	sub    $0x18,%rsp
   8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   f:	00 00 
  11:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  16:	31 c0                	xor    %eax,%eax
  18:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  1d:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  24:	00 00 
  26:	74 05                	je     2d <E131Params::staticCallbackFunction(void*, char const*)+0x2d>
  28:	e8 00 00 00 00       	call   2d <E131Params::staticCallbackFunction(void*, char const*)+0x2d>
  2d:	48 83 c4 18          	add    $0x18,%rsp
  31:	e9 00 00 00 00       	jmp    36 <.LC14+0x24>

Disassembly of section .text._ZN10E131Params7BuilderEPKN10e131params6ParamsEPcjRj:

0000000000000000 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	41 57                	push   %r15
   6:	41 89 cf             	mov    %ecx,%r15d
   9:	41 56                	push   %r14
   b:	41 55                	push   %r13
   d:	49 89 d5             	mov    %rdx,%r13
  10:	41 54                	push   %r12
  12:	55                   	push   %rbp
  13:	48 89 fd             	mov    %rdi,%rbp
  16:	53                   	push   %rbx
  17:	48 83 ec 38          	sub    $0x38,%rsp
  1b:	4c 89 44 24 08       	mov    %r8,0x8(%rsp)
  20:	4c 8d 47 08          	lea    0x8(%rdi),%r8
  24:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  2b:	00 00 
  2d:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  32:	31 c0                	xor    %eax,%eax
  34:	48 85 f6             	test   %rsi,%rsi
  37:	74 0c                	je     45 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x45>
  39:	b9 37 00 00 00       	mov    $0x37,%ecx
  3e:	4c 89 c7             	mov    %r8,%rdi
  41:	f3 a5                	rep movsl %ds:(%rsi),%es:(%rdi)
  43:	eb 0c                	jmp    51 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x51>
  45:	48 8b 3f             	mov    (%rdi),%rdi
  48:	4c 89 c6             	mov    %r8,%rsi
  4b:	48 8b 07             	mov    (%rdi),%rax
  4e:	ff 50 18             	call   *0x18(%rax)
  51:	4c 8d 64 24 18       	lea    0x18(%rsp),%r12
  56:	44 89 f9             	mov    %r15d,%ecx
  59:	4c 89 ea             	mov    %r13,%rdx
  5c:	31 db                	xor    %ebx,%ebx
  5e:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 65 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x65>
  65:	4c 89 e7             	mov    %r12,%rdi
  68:	4c 8d 7d 5b          	lea    0x5b(%rbp),%r15
  6c:	e8 00 00 00 00       	call   71 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x71>
  71:	39 1d 00 00 00 00    	cmp    %ebx,0x0(%rip)        # 77 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x77>
  77:	41 89 de             	mov    %ebx,%r14d
  7a:	0f 86 c9 00 00 00    	jbe    149 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x149>
  80:	89 d9                	mov    %ebx,%ecx
  82:	be 02 00 00 00       	mov    $0x2,%esi
  87:	48 89 ef             	mov    %rbp,%rdi
  8a:	d3 e6                	shl    %cl,%esi
  8c:	e8 00 00 00 00       	call   91 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x91>
  91:	48 89 de             	mov    %rbx,%rsi
  94:	0f b7 54 5d 0d       	movzwl 0xd(%rbp,%rbx,2),%edx
  99:	4c 89 e7             	mov    %r12,%rdi
  9c:	0f b6 c8             	movzbl %al,%ecx
  9f:	48 c1 e6 04          	shl    $0x4,%rsi
  a3:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # aa <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0xaa>
  aa:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  b0:	48 01 c6             	add    %rax,%rsi
  b3:	e8 00 00 00 00       	call   b8 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0xb8>
  b8:	0f b7 7d 15          	movzwl 0x15(%rbp),%edi
  bc:	44 89 f6             	mov    %r14d,%esi
  bf:	e8 00 00 00 00       	call   c4 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0xc4>
  c4:	44 0f b7 e8          	movzwl %ax,%r13d
  c8:	44 89 ef             	mov    %r13d,%edi
  cb:	e8 00 00 00 00       	call   d0 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0xd0>
  d0:	31 c9                	xor    %ecx,%ecx
  d2:	41 ff cd             	dec    %r13d
  d5:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  db:	0f 95 c1             	setne  %cl
  de:	48 6b f3 12          	imul   $0x12,%rbx,%rsi
  e2:	48 89 c2             	mov    %rax,%rdx
  e5:	4c 89 e7             	mov    %r12,%rdi
  e8:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # ef <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0xef>
  ef:	48 01 c6             	add    %rax,%rsi
  f2:	e8 00 00 00 00       	call   f7 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0xf7>
  f7:	89 d9                	mov    %ebx,%ecx
  f9:	be 80 00 00 00       	mov    $0x80,%esi
  fe:	48 89 ef             	mov    %rbp,%rdi
 101:	d3 e6                	shl    %cl,%esi
 103:	e8 00 00 00 00       	call   108 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x108>
 108:	41 89 c5             	mov    %eax,%r13d
 10b:	84 c0                	test   %al,%al
 10d:	75 0b                	jne    11a <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x11a>
 10f:	4c 89 fe             	mov    %r15,%rsi
 112:	44 89 f7             	mov    %r14d,%edi
 115:	e8 00 00 00 00       	call   11a <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x11a>
 11a:	48 6b f3 0e          	imul   $0xe,%rbx,%rsi
 11e:	4c 89 fa             	mov    %r15,%rdx
 121:	41 0f b6 cd          	movzbl %r13b,%ecx
 125:	4c 89 e7             	mov    %r12,%rdi
 128:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 12f <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x12f>
 12f:	41 b8 01 00 00 00    	mov    $0x1,%r8d
 135:	48 ff c3             	inc    %rbx
 138:	49 83 c7 12          	add    $0x12,%r15
 13c:	48 01 c6             	add    %rax,%rsi
 13f:	e8 00 00 00 00       	call   144 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x144>
 144:	e9 28 ff ff ff       	jmp    71 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x71>
 149:	be 20 00 00 00       	mov    $0x20,%esi
 14e:	48 89 ef             	mov    %rbp,%rdi
 151:	4c 8d 2d 00 00 00 00 	lea    0x0(%rip),%r13        # 158 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x158>
 158:	e8 00 00 00 00       	call   15d <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x15d>
 15d:	0f b6 7d 1a          	movzbl 0x1a(%rbp),%edi
 161:	89 c3                	mov    %eax,%ebx
 163:	e8 00 00 00 00       	call   168 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x168>
 168:	0f b6 cb             	movzbl %bl,%ecx
 16b:	41 b8 01 00 00 00    	mov    $0x1,%r8d
 171:	31 db                	xor    %ebx,%ebx
 173:	48 89 c2             	mov    %rax,%rdx
 176:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 17d <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x17d>
 17d:	4c 89 e7             	mov    %r12,%rdi
 180:	e8 00 00 00 00       	call   185 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x185>
 185:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 18c <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x18c>
 18c:	4c 89 e7             	mov    %r12,%rdi
 18f:	e8 00 00 00 00       	call   194 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x194>
 194:	39 1d 00 00 00 00    	cmp    %ebx,0x0(%rip)        # 19a <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x19a>
 19a:	76 3c                	jbe    1d8 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x1d8>
 19c:	89 de                	mov    %ebx,%esi
 19e:	48 89 ef             	mov    %rbp,%rdi
 1a1:	e8 00 00 00 00       	call   1a6 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x1a6>
 1a6:	31 f6                	xor    %esi,%esi
 1a8:	41 89 c7             	mov    %eax,%r15d
 1ab:	89 c7                	mov    %eax,%edi
 1ad:	e8 00 00 00 00       	call   1b2 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x1b2>
 1b2:	31 c9                	xor    %ecx,%ecx
 1b4:	89 de                	mov    %ebx,%esi
 1b6:	45 85 ff             	test   %r15d,%r15d
 1b9:	0f 95 c1             	setne  %cl
 1bc:	48 6b f6 12          	imul   $0x12,%rsi,%rsi
 1c0:	48 89 c2             	mov    %rax,%rdx
 1c3:	41 b8 01 00 00 00    	mov    $0x1,%r8d
 1c9:	4c 89 e7             	mov    %r12,%rdi
 1cc:	ff c3                	inc    %ebx
 1ce:	4c 01 ee             	add    %r13,%rsi
 1d1:	e8 00 00 00 00       	call   1d6 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x1d6>
 1d6:	eb bc                	jmp    194 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x194>
 1d8:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1df <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x1df>
 1df:	4c 89 e7             	mov    %r12,%rdi
 1e2:	e8 00 00 00 00       	call   1e7 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x1e7>
 1e7:	be 00 08 00 00       	mov    $0x800,%esi
 1ec:	48 89 ef             	mov    %rbp,%rdi
 1ef:	e8 00 00 00 00       	call   1f4 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x1f4>
 1f4:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1fb <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x1fb>
 1fb:	4c 89 e7             	mov    %r12,%rdi
 1fe:	0f b6 d0             	movzbl %al,%edx
 201:	e8 00 00 00 00       	call   206 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x206>
 206:	4c 89 e7             	mov    %r12,%rdi
 209:	e8 00 00 00 00       	call   20e <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x20e>
 20e:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
 213:	0f b7 c0             	movzwl %ax,%eax
 216:	89 03                	mov    %eax,(%rbx)
 218:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
 21d:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 224:	00 00 
 226:	74 05                	je     22d <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x22d>
 228:	e8 00 00 00 00       	call   22d <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x22d>
 22d:	48 83 c4 38          	add    $0x38,%rsp
 231:	5b                   	pop    %rbx
 232:	5d                   	pop    %rbp
 233:	41 5c                	pop    %r12
 235:	41 5d                	pop    %r13
 237:	41 5e                	pop    %r14
 239:	41 5f                	pop    %r15
 23b:	c3                   	ret    

Disassembly of section .text._ZN10E131Params3SetEj:

0000000000000000 <E131Params::Set(unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	41 56                	push   %r14
   6:	41 55                	push   %r13
   8:	41 89 f5             	mov    %esi,%r13d
   b:	41 54                	push   %r12
   d:	55                   	push   %rbp
   e:	48 89 fd             	mov    %rdi,%rbp
  11:	53                   	push   %rbx
  12:	48 83 ec 10          	sub    $0x10,%rsp
  16:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1d:	00 00 
  1f:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  24:	31 c0                	xor    %eax,%eax
  26:	83 fe 04             	cmp    $0x4,%esi
  29:	77 24                	ja     4f <E131Params::Set(unsigned int)+0x4f>
  2b:	b8 04 00 00 00       	mov    $0x4,%eax
  30:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 37 <E131Params::Set(unsigned int)+0x37>
  37:	29 f0                	sub    %esi,%eax
  39:	48 8d 74 24 04       	lea    0x4(%rsp),%rsi
  3e:	89 44 24 04          	mov    %eax,0x4(%rsp)
  42:	e8 00 00 00 00       	call   47 <E131Params::Set(unsigned int)+0x47>
  47:	8b 00                	mov    (%rax),%eax
  49:	89 05 00 00 00 00    	mov    %eax,0x0(%rip)        # 4f <E131Params::Set(unsigned int)+0x4f>
  4f:	83 7d 08 00          	cmpl   $0x0,0x8(%rbp)
  53:	74 7d                	je     d2 <E131Params::Set(unsigned int)+0xd2>
  55:	e8 00 00 00 00       	call   5a <E131Params::Set(unsigned int)+0x5a>
  5a:	31 db                	xor    %ebx,%ebx
  5c:	49 89 c4             	mov    %rax,%r12
  5f:	39 1d 00 00 00 00    	cmp    %ebx,0x0(%rip)        # 65 <E131Params::Set(unsigned int)+0x65>
  65:	76 25                	jbe    8c <E131Params::Set(unsigned int)+0x8c>
  67:	46 8d 34 2b          	lea    (%rbx,%r13,1),%r14d
  6b:	41 83 fe 03          	cmp    $0x3,%r14d
  6f:	77 1b                	ja     8c <E131Params::Set(unsigned int)+0x8c>
  71:	89 de                	mov    %ebx,%esi
  73:	48 89 ef             	mov    %rbp,%rdi
  76:	ff c3                	inc    %ebx
  78:	e8 00 00 00 00       	call   7d <E131Params::Set(unsigned int)+0x7d>
  7d:	44 89 f6             	mov    %r14d,%esi
  80:	4c 89 e7             	mov    %r12,%rdi
  83:	89 c2                	mov    %eax,%edx
  85:	e8 00 00 00 00       	call   8a <E131Params::Set(unsigned int)+0x8a>
  8a:	eb d3                	jmp    5f <E131Params::Set(unsigned int)+0x5f>
  8c:	0f b6 75 1a          	movzbl 0x1a(%rbp),%esi
  90:	4c 89 e7             	mov    %r12,%rdi
  93:	e8 00 00 00 00       	call   98 <E131Params::Set(unsigned int)+0x98>
  98:	be 00 08 00 00       	mov    $0x800,%esi
  9d:	48 89 ef             	mov    %rbp,%rdi
  a0:	e8 00 00 00 00       	call   a5 <E131Params::Set(unsigned int)+0xa5>
  a5:	84 c0                	test   %al,%al
  a7:	74 29                	je     d2 <E131Params::Set(unsigned int)+0xd2>
  a9:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  ae:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  b5:	00 00 
  b7:	75 29                	jne    e2 <E131Params::Set(unsigned int)+0xe2>
  b9:	48 83 c4 10          	add    $0x10,%rsp
  bd:	4c 89 e7             	mov    %r12,%rdi
  c0:	be 01 00 00 00       	mov    $0x1,%esi
  c5:	5b                   	pop    %rbx
  c6:	5d                   	pop    %rbp
  c7:	41 5c                	pop    %r12
  c9:	41 5d                	pop    %r13
  cb:	41 5e                	pop    %r14
  cd:	e9 00 00 00 00       	jmp    d2 <E131Params::Set(unsigned int)+0xd2>
  d2:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  d7:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  de:	00 00 
  e0:	74 05                	je     e7 <E131Params::Set(unsigned int)+0xe7>
  e2:	e8 00 00 00 00       	call   e7 <E131Params::Set(unsigned int)+0xe7>
  e7:	48 83 c4 10          	add    $0x10,%rsp
  eb:	5b                   	pop    %rbx
  ec:	5d                   	pop    %rbp
  ed:	41 5c                	pop    %r12
  ef:	41 5d                	pop    %r13
  f1:	41 5e                	pop    %r14
  f3:	c3                   	ret    

Disassembly of section .text._ZN17PropertiesBuilder3AddIbEEbPKcT_bj:

0000000000000000 <bool PropertiesBuilder::Add<bool>(char const*, bool, bool, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	49 89 f2             	mov    %rsi,%r10
   8:	89 d0                	mov    %edx,%eax
   a:	53                   	push   %rbx
   b:	48 83 ec 18          	sub    $0x18,%rsp
   f:	0f b7 77 0a          	movzwl 0xa(%rdi),%esi
  13:	0f b7 6f 08          	movzwl 0x8(%rdi),%ebp
  17:	64 48 8b 14 25 28 00 	mov    %fs:0x28,%rdx
  1e:	00 00 
  20:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  25:	31 d2                	xor    %edx,%edx
  27:	66 39 ee             	cmp    %bp,%si
  2a:	72 04                	jb     30 <bool PropertiesBuilder::Add<bool>(char const*, bool, bool, unsigned int)+0x30>
  2c:	31 c0                	xor    %eax,%eax
  2e:	eb 2c                	jmp    5c <bool PropertiesBuilder::Add<bool>(char const*, bool, bool, unsigned int)+0x5c>
  30:	0f b7 d6             	movzwl %si,%edx
  33:	44 0f b6 c9          	movzbl %cl,%r9d
  37:	48 03 37             	add    (%rdi),%rsi
  3a:	4c 89 d1             	mov    %r10,%rcx
  3d:	29 d5                	sub    %edx,%ebp
  3f:	52                   	push   %rdx
  40:	48 89 fb             	mov    %rdi,%rbx
  43:	41 50                	push   %r8
  45:	89 ea                	mov    %ebp,%edx
  47:	44 0f b6 c0          	movzbl %al,%r8d
  4b:	e8 00 00 00 00       	call   50 <bool PropertiesBuilder::Add<bool>(char const*, bool, bool, unsigned int)+0x50>
  50:	59                   	pop    %rcx
  51:	5e                   	pop    %rsi
  52:	39 c5                	cmp    %eax,%ebp
  54:	7c d6                	jl     2c <bool PropertiesBuilder::Add<bool>(char const*, bool, bool, unsigned int)+0x2c>
  56:	66 01 43 0a          	add    %ax,0xa(%rbx)
  5a:	b0 01                	mov    $0x1,%al
  5c:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  61:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  68:	00 00 
  6a:	74 05                	je     71 <bool PropertiesBuilder::Add<bool>(char const*, bool, bool, unsigned int)+0x71>
  6c:	e8 00 00 00 00       	call   71 <bool PropertiesBuilder::Add<bool>(char const*, bool, bool, unsigned int)+0x71>
  71:	48 83 c4 18          	add    $0x18,%rsp
  75:	5b                   	pop    %rbx
  76:	5d                   	pop    %rbp
  77:	c3                   	ret    

Disassembly of section .text._ZN17PropertiesBuilder3AddItEEbPKcT_bj:

0000000000000000 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	49 89 f2             	mov    %rsi,%r10
   8:	89 d0                	mov    %edx,%eax
   a:	53                   	push   %rbx
   b:	48 83 ec 18          	sub    $0x18,%rsp
   f:	0f b7 77 0a          	movzwl 0xa(%rdi),%esi
  13:	0f b7 6f 08          	movzwl 0x8(%rdi),%ebp
  17:	64 48 8b 14 25 28 00 	mov    %fs:0x28,%rdx
  1e:	00 00 
  20:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  25:	31 d2                	xor    %edx,%edx
  27:	66 39 ee             	cmp    %bp,%si
  2a:	72 04                	jb     30 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int)+0x30>
  2c:	31 c0                	xor    %eax,%eax
  2e:	eb 2c                	jmp    5c <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int)+0x5c>
  30:	0f b7 d6             	movzwl %si,%edx
  33:	44 0f b6 c9          	movzbl %cl,%r9d
  37:	48 03 37             	add    (%rdi),%rsi
  3a:	4c 89 d1             	mov    %r10,%rcx
  3d:	29 d5                	sub    %edx,%ebp
  3f:	52                   	push   %rdx
  40:	48 89 fb             	mov    %rdi,%rbx
  43:	41 50                	push   %r8
  45:	89 ea                	mov    %ebp,%edx
  47:	44 0f b7 c0          	movzwl %ax,%r8d
  4b:	e8 00 00 00 00       	call   50 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int)+0x50>
  50:	59                   	pop    %rcx
  51:	5e                   	pop    %rsi
  52:	39 c5                	cmp    %eax,%ebp
  54:	7c d6                	jl     2c <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int)+0x2c>
  56:	66 01 43 0a          	add    %ax,0xa(%rbx)
  5a:	b0 01                	mov    $0x1,%al
  5c:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  61:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  68:	00 00 
  6a:	74 05                	je     71 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int)+0x71>
  6c:	e8 00 00 00 00       	call   71 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int)+0x71>
  71:	48 83 c4 18          	add    $0x18,%rsp
  75:	5b                   	pop    %rbx
  76:	5d                   	pop    %rbp
  77:	c3                   	ret    

Disassembly of section .text._ZN17PropertiesBuilder3AddIPKcEEbS2_T_bj:

0000000000000000 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	49 89 f2             	mov    %rsi,%r10
   8:	48 89 d0             	mov    %rdx,%rax
   b:	53                   	push   %rbx
   c:	48 83 ec 18          	sub    $0x18,%rsp
  10:	0f b7 77 0a          	movzwl 0xa(%rdi),%esi
  14:	0f b7 6f 08          	movzwl 0x8(%rdi),%ebp
  18:	64 48 8b 14 25 28 00 	mov    %fs:0x28,%rdx
  1f:	00 00 
  21:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  26:	31 d2                	xor    %edx,%edx
  28:	66 39 ee             	cmp    %bp,%si
  2b:	72 04                	jb     31 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int)+0x31>
  2d:	31 c0                	xor    %eax,%eax
  2f:	eb 2b                	jmp    5c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int)+0x5c>
  31:	0f b7 d6             	movzwl %si,%edx
  34:	44 0f b6 c9          	movzbl %cl,%r9d
  38:	48 03 37             	add    (%rdi),%rsi
  3b:	4c 89 d1             	mov    %r10,%rcx
  3e:	29 d5                	sub    %edx,%ebp
  40:	52                   	push   %rdx
  41:	48 89 fb             	mov    %rdi,%rbx
  44:	41 50                	push   %r8
  46:	89 ea                	mov    %ebp,%edx
  48:	49 89 c0             	mov    %rax,%r8
  4b:	e8 00 00 00 00       	call   50 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int)+0x50>
  50:	59                   	pop    %rcx
  51:	5e                   	pop    %rsi
  52:	39 c5                	cmp    %eax,%ebp
  54:	7c d7                	jl     2d <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int)+0x2d>
  56:	66 01 43 0a          	add    %ax,0xa(%rbx)
  5a:	b0 01                	mov    $0x1,%al
  5c:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  61:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  68:	00 00 
  6a:	74 05                	je     71 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int)+0x71>
  6c:	e8 00 00 00 00       	call   71 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int)+0x71>
  71:	48 83 c4 18          	add    $0x18,%rsp
  75:	5b                   	pop    %rbx
  76:	5d                   	pop    %rbp
  77:	c3                   	ret    

Disassembly of section .text._ZSt3minIjERKT_S2_S2_:

0000000000000000 <unsigned int const& std::min<unsigned int>(unsigned int const&, unsigned int const&)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 ec 18          	sub    $0x18,%rsp
   8:	48 89 f0             	mov    %rsi,%rax
   b:	8b 0f                	mov    (%rdi),%ecx
   d:	64 48 8b 14 25 28 00 	mov    %fs:0x28,%rdx
  14:	00 00 
  16:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  1b:	31 d2                	xor    %edx,%edx
  1d:	39 0e                	cmp    %ecx,(%rsi)
  1f:	72 03                	jb     24 <unsigned int const& std::min<unsigned int>(unsigned int const&, unsigned int const&)+0x24>
  21:	48 89 f8             	mov    %rdi,%rax
  24:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  29:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  30:	00 00 
  32:	74 05                	je     39 <unsigned int const& std::min<unsigned int>(unsigned int const&, unsigned int const&)+0x39>
  34:	e8 00 00 00 00       	call   39 <unsigned int const& std::min<unsigned int>(unsigned int const&, unsigned int const&)+0x39>
  39:	48 83 c4 18          	add    $0x18,%rsp
  3d:	c3                   	ret    

Disassembly of section .text._ZN17PropertiesBuilder8add_partIbEEiPcjPKcT_bj:

0000000000000000 <int PropertiesBuilder::add_part<bool>(char*, unsigned int, char const*, bool, bool, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 ec 18          	sub    $0x18,%rsp
   8:	49 89 fa             	mov    %rdi,%r10
   b:	45 0f b6 c0          	movzbl %r8b,%r8d
   f:	48 89 f7             	mov    %rsi,%rdi
  12:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  19:	00 00 
  1b:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20:	31 c0                	xor    %eax,%eax
  22:	89 d6                	mov    %edx,%esi
  24:	41 8a 42 0c          	mov    0xc(%r10),%al
  28:	45 84 c9             	test   %r9b,%r9b
  2b:	75 06                	jne    33 <int PropertiesBuilder::add_part<bool>(char*, unsigned int, char const*, bool, bool, unsigned int)+0x33>
  2d:	84 c0                	test   %al,%al
  2f:	75 06                	jne    37 <int PropertiesBuilder::add_part<bool>(char*, unsigned int, char const*, bool, bool, unsigned int)+0x37>
  31:	eb 36                	jmp    69 <int PropertiesBuilder::add_part<bool>(char*, unsigned int, char const*, bool, bool, unsigned int)+0x69>
  33:	84 c0                	test   %al,%al
  35:	74 19                	je     50 <int PropertiesBuilder::add_part<bool>(char*, unsigned int, char const*, bool, bool, unsigned int)+0x50>
  37:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  3c:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  43:	00 00 
  45:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 4c <int PropertiesBuilder::add_part<bool>(char*, unsigned int, char const*, bool, bool, unsigned int)+0x4c>
  4c:	74 37                	je     85 <int PropertiesBuilder::add_part<bool>(char*, unsigned int, char const*, bool, bool, unsigned int)+0x85>
  4e:	eb 30                	jmp    80 <int PropertiesBuilder::add_part<bool>(char*, unsigned int, char const*, bool, bool, unsigned int)+0x80>
  50:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  55:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  5c:	00 00 
  5e:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 65 <int PropertiesBuilder::add_part<bool>(char*, unsigned int, char const*, bool, bool, unsigned int)+0x65>
  65:	74 1e                	je     85 <int PropertiesBuilder::add_part<bool>(char*, unsigned int, char const*, bool, bool, unsigned int)+0x85>
  67:	eb 17                	jmp    80 <int PropertiesBuilder::add_part<bool>(char*, unsigned int, char const*, bool, bool, unsigned int)+0x80>
  69:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  6e:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  75:	00 00 
  77:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 7e <int PropertiesBuilder::add_part<bool>(char*, unsigned int, char const*, bool, bool, unsigned int)+0x7e>
  7e:	74 05                	je     85 <int PropertiesBuilder::add_part<bool>(char*, unsigned int, char const*, bool, bool, unsigned int)+0x85>
  80:	e8 00 00 00 00       	call   85 <int PropertiesBuilder::add_part<bool>(char*, unsigned int, char const*, bool, bool, unsigned int)+0x85>
  85:	31 c0                	xor    %eax,%eax
  87:	48 83 c4 18          	add    $0x18,%rsp
  8b:	e9 00 00 00 00       	jmp    90 <.LC14+0x7e>

Disassembly of section .text._ZN17PropertiesBuilder8add_partItEEiPcjPKcT_bj:

0000000000000000 <int PropertiesBuilder::add_part<unsigned short>(char*, unsigned int, char const*, unsigned short, bool, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 ec 18          	sub    $0x18,%rsp
   8:	49 89 fa             	mov    %rdi,%r10
   b:	45 0f b7 c0          	movzwl %r8w,%r8d
   f:	48 89 f7             	mov    %rsi,%rdi
  12:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  19:	00 00 
  1b:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20:	31 c0                	xor    %eax,%eax
  22:	89 d6                	mov    %edx,%esi
  24:	41 8a 42 0c          	mov    0xc(%r10),%al
  28:	45 84 c9             	test   %r9b,%r9b
  2b:	75 06                	jne    33 <int PropertiesBuilder::add_part<unsigned short>(char*, unsigned int, char const*, unsigned short, bool, unsigned int)+0x33>
  2d:	84 c0                	test   %al,%al
  2f:	75 06                	jne    37 <int PropertiesBuilder::add_part<unsigned short>(char*, unsigned int, char const*, unsigned short, bool, unsigned int)+0x37>
  31:	eb 36                	jmp    69 <int PropertiesBuilder::add_part<unsigned short>(char*, unsigned int, char const*, unsigned short, bool, unsigned int)+0x69>
  33:	84 c0                	test   %al,%al
  35:	74 19                	je     50 <int PropertiesBuilder::add_part<unsigned short>(char*, unsigned int, char const*, unsigned short, bool, unsigned int)+0x50>
  37:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  3c:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  43:	00 00 
  45:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 4c <int PropertiesBuilder::add_part<unsigned short>(char*, unsigned int, char const*, unsigned short, bool, unsigned int)+0x4c>
  4c:	74 37                	je     85 <int PropertiesBuilder::add_part<unsigned short>(char*, unsigned int, char const*, unsigned short, bool, unsigned int)+0x85>
  4e:	eb 30                	jmp    80 <int PropertiesBuilder::add_part<unsigned short>(char*, unsigned int, char const*, unsigned short, bool, unsigned int)+0x80>
  50:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  55:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  5c:	00 00 
  5e:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 65 <int PropertiesBuilder::add_part<unsigned short>(char*, unsigned int, char const*, unsigned short, bool, unsigned int)+0x65>
  65:	74 1e                	je     85 <int PropertiesBuilder::add_part<unsigned short>(char*, unsigned int, char const*, unsigned short, bool, unsigned int)+0x85>
  67:	eb 17                	jmp    80 <int PropertiesBuilder::add_part<unsigned short>(char*, unsigned int, char const*, unsigned short, bool, unsigned int)+0x80>
  69:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  6e:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  75:	00 00 
  77:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 7e <int PropertiesBuilder::add_part<unsigned short>(char*, unsigned int, char const*, unsigned short, bool, unsigned int)+0x7e>
  7e:	74 05                	je     85 <int PropertiesBuilder::add_part<unsigned short>(char*, unsigned int, char const*, unsigned short, bool, unsigned int)+0x85>
  80:	e8 00 00 00 00       	call   85 <int PropertiesBuilder::add_part<unsigned short>(char*, unsigned int, char const*, unsigned short, bool, unsigned int)+0x85>
  85:	31 c0                	xor    %eax,%eax
  87:	48 83 c4 18          	add    $0x18,%rsp
  8b:	e9 00 00 00 00       	jmp    90 <.LC14+0x7e>

e131paramsdump.o:     file format elf64-x86-64


Disassembly of section .text._ZN10E131Params4DumpEv:

0000000000000000 <E131Params::Dump()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 ec 18          	sub    $0x18,%rsp
   8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   f:	00 00 
  11:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  16:	31 c0                	xor    %eax,%eax
  18:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  1d:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  24:	00 00 
  26:	74 05                	je     2d <E131Params::Dump()+0x2d>
  28:	e8 00 00 00 00       	call   2d <E131Params::Dump()+0x2d>
  2d:	48 83 c4 18          	add    $0x18,%rsp
  31:	c3                   	ret    

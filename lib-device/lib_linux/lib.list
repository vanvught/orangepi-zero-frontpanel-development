In archive lib_linux/libdevice.a:

bh1750.o:     file format elf64-x86-64


Disassembly of section .text._ZL16i2c_set_baudratej:

0000000000000000 <i2c_set_baudrate(unsigned int)>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	89 7d ec             	mov    %edi,-0x14(%rbp)
   b:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  12:	00 00 
  14:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  18:	31 c0                	xor    %eax,%eax
  1a:	90                   	nop
  1b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1f:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  26:	00 00 
  28:	74 05                	je     2f <i2c_set_baudrate(unsigned int)+0x2f>
  2a:	e8 00 00 00 00       	call   2f <i2c_set_baudrate(unsigned int)+0x2f>
  2f:	c9                   	leave  
  30:	c3                   	ret    

Disassembly of section .text._ZL15i2c_set_addressh:

0000000000000000 <i2c_set_address(unsigned char)>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	89 f8                	mov    %edi,%eax
   a:	88 45 ec             	mov    %al,-0x14(%rbp)
   d:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  14:	00 00 
  16:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1a:	31 c0                	xor    %eax,%eax
  1c:	90                   	nop
  1d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  21:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  28:	00 00 
  2a:	74 05                	je     31 <i2c_set_address(unsigned char)+0x31>
  2c:	e8 00 00 00 00       	call   31 <i2c_set_address(unsigned char)+0x31>
  31:	c9                   	leave  
  32:	c3                   	ret    

Disassembly of section .text._ZL9i2c_writePKcj:

0000000000000000 <i2c_write(char const*, unsigned int)>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	89 75 e4             	mov    %esi,-0x1c(%rbp)
   f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  16:	00 00 
  18:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1c:	31 c0                	xor    %eax,%eax
  1e:	b8 01 00 00 00       	mov    $0x1,%eax
  23:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  27:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  2e:	00 00 
  30:	74 05                	je     37 <i2c_write(char const*, unsigned int)+0x37>
  32:	e8 00 00 00 00       	call   37 <i2c_write(char const*, unsigned int)+0x37>
  37:	c9                   	leave  
  38:	c3                   	ret    

Disassembly of section .text._ZL8i2c_readPcj:

0000000000000000 <i2c_read(char*, unsigned int)>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	89 75 e4             	mov    %esi,-0x1c(%rbp)
   f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  16:	00 00 
  18:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1c:	31 c0                	xor    %eax,%eax
  1e:	b8 01 00 00 00       	mov    $0x1,%eax
  23:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  27:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  2e:	00 00 
  30:	74 05                	je     37 <i2c_read(char*, unsigned int)+0x37>
  32:	e8 00 00 00 00       	call   37 <i2c_read(char*, unsigned int)+0x37>
  37:	c9                   	leave  
  38:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2CC2Ehj:

0000000000000000 <HAL_I2C::HAL_I2C(unsigned char, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	89 55 e0             	mov    %edx,-0x20(%rbp)
  15:	88 45 e4             	mov    %al,-0x1c(%rbp)
  18:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1f:	00 00 
  21:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  25:	31 c0                	xor    %eax,%eax
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2b:	0f b6 55 e4          	movzbl -0x1c(%rbp),%edx
  2f:	88 10                	mov    %dl,(%rax)
  31:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  35:	8b 55 e0             	mov    -0x20(%rbp),%edx
  38:	89 50 04             	mov    %edx,0x4(%rax)
  3b:	90                   	nop
  3c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  47:	00 00 
  49:	74 05                	je     50 <HAL_I2C::HAL_I2C(unsigned char, unsigned int)+0x50>
  4b:	e8 00 00 00 00       	call   50 <HAL_I2C::HAL_I2C(unsigned char, unsigned int)+0x50>
  50:	c9                   	leave  
  51:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2C11IsConnectedEv:

0000000000000000 <HAL_I2C::IsConnected()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	8b 50 04             	mov    0x4(%rax),%edx
  26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2a:	0f b6 00             	movzbl (%rax),%eax
  2d:	0f b6 c0             	movzbl %al,%eax
  30:	89 d6                	mov    %edx,%esi
  32:	89 c7                	mov    %eax,%edi
  34:	e8 00 00 00 00       	call   39 <HAL_I2C::IsConnected()+0x39>
  39:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  3d:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  44:	00 00 
  46:	74 05                	je     4d <HAL_I2C::IsConnected()+0x4d>
  48:	e8 00 00 00 00       	call   4d <HAL_I2C::IsConnected()+0x4d>
  4d:	c9                   	leave  
  4e:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2C5WriteEh:

0000000000000000 <HAL_I2C::Write(unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	88 45 e4             	mov    %al,-0x1c(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  28:	48 89 c7             	mov    %rax,%rdi
  2b:	e8 00 00 00 00       	call   30 <HAL_I2C::Write(unsigned char)+0x30>
  30:	0f b6 45 e4          	movzbl -0x1c(%rbp),%eax
  34:	88 45 f7             	mov    %al,-0x9(%rbp)
  37:	48 8d 45 f7          	lea    -0x9(%rbp),%rax
  3b:	be 01 00 00 00       	mov    $0x1,%esi
  40:	48 89 c7             	mov    %rax,%rdi
  43:	e8 00 00 00 00       	call   48 <HAL_I2C::Write(unsigned char)+0x48>
  48:	90                   	nop
  49:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4d:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  54:	00 00 
  56:	74 05                	je     5d <HAL_I2C::Write(unsigned char)+0x5d>
  58:	e8 00 00 00 00       	call   5d <HAL_I2C::Write(unsigned char)+0x5d>
  5d:	c9                   	leave  
  5e:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2C6Read16Ev:

0000000000000000 <HAL_I2C::Read16()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	66 c7 45 f6 00 00    	movw   $0x0,-0xa(%rbp)
  25:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  29:	48 89 c7             	mov    %rax,%rdi
  2c:	e8 00 00 00 00       	call   31 <HAL_I2C::Read16()+0x31>
  31:	48 8d 45 f6          	lea    -0xa(%rbp),%rax
  35:	be 02 00 00 00       	mov    $0x2,%esi
  3a:	48 89 c7             	mov    %rax,%rdi
  3d:	e8 00 00 00 00       	call   42 <HAL_I2C::Read16()+0x42>
  42:	0f b6 45 f6          	movzbl -0xa(%rbp),%eax
  46:	66 98                	cbtw   
  48:	0f b7 c0             	movzwl %ax,%eax
  4b:	c1 e0 08             	shl    $0x8,%eax
  4e:	89 c2                	mov    %eax,%edx
  50:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
  54:	66 98                	cbtw   
  56:	09 d0                	or     %edx,%eax
  58:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  5c:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  63:	00 00 
  65:	74 05                	je     6c <HAL_I2C::Read16()+0x6c>
  67:	e8 00 00 00 00       	call   6c <HAL_I2C::Read16()+0x6c>
  6c:	c9                   	leave  
  6d:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2C5SetupEv:

0000000000000000 <HAL_I2C::Setup()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	0f b6 00             	movzbl (%rax),%eax
  26:	0f b6 c0             	movzbl %al,%eax
  29:	89 c7                	mov    %eax,%edi
  2b:	e8 00 00 00 00       	call   30 <HAL_I2C::Setup()+0x30>
  30:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  34:	8b 40 04             	mov    0x4(%rax),%eax
  37:	89 c7                	mov    %eax,%edi
  39:	e8 00 00 00 00       	call   3e <HAL_I2C::Setup()+0x3e>
  3e:	90                   	nop
  3f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  4a:	00 00 
  4c:	74 05                	je     53 <HAL_I2C::Setup()+0x53>
  4e:	e8 00 00 00 00       	call   53 <HAL_I2C::Setup()+0x53>
  53:	c9                   	leave  
  54:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2C12IsConnected_Ehj:

0000000000000000 <HAL_I2C::IsConnected_(unsigned char, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	89 f8                	mov    %edi,%eax
   e:	89 75 e8             	mov    %esi,-0x18(%rbp)
  11:	88 45 ec             	mov    %al,-0x14(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	0f b6 45 ec          	movzbl -0x14(%rbp),%eax
  27:	89 c7                	mov    %eax,%edi
  29:	e8 00 00 00 00       	call   2e <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x2e>
  2e:	8b 45 e8             	mov    -0x18(%rbp),%eax
  31:	89 c7                	mov    %eax,%edi
  33:	e8 00 00 00 00       	call   38 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x38>
  38:	80 7d ec 2f          	cmpb   $0x2f,-0x14(%rbp)
  3c:	76 06                	jbe    44 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x44>
  3e:	80 7d ec 37          	cmpb   $0x37,-0x14(%rbp)
  42:	76 0c                	jbe    50 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x50>
  44:	80 7d ec 4f          	cmpb   $0x4f,-0x14(%rbp)
  48:	76 1e                	jbe    68 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x68>
  4a:	80 7d ec 5f          	cmpb   $0x5f,-0x14(%rbp)
  4e:	77 18                	ja     68 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x68>
  50:	48 8d 45 f7          	lea    -0x9(%rbp),%rax
  54:	be 01 00 00 00       	mov    $0x1,%esi
  59:	48 89 c7             	mov    %rax,%rdi
  5c:	e8 00 00 00 00       	call   61 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x61>
  61:	84 c0                	test   %al,%al
  63:	0f 94 c0             	sete   %al
  66:	eb 14                	jmp    7c <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x7c>
  68:	be 00 00 00 00       	mov    $0x0,%esi
  6d:	bf 00 00 00 00       	mov    $0x0,%edi
  72:	e8 00 00 00 00       	call   77 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x77>
  77:	84 c0                	test   %al,%al
  79:	0f 94 c0             	sete   %al
  7c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  87:	00 00 
  89:	74 05                	je     90 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x90>
  8b:	e8 00 00 00 00       	call   90 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x90>
  90:	c9                   	leave  
  91:	c3                   	ret    

Disassembly of section .text._ZN6sensor5BH170C2Eh:

0000000000000000 <sensor::BH170::BH170(unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	88 45 e4             	mov    %al,-0x1c(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  28:	0f b6 45 e4          	movzbl -0x1c(%rbp),%eax
  2c:	84 c0                	test   %al,%al
  2e:	74 0c                	je     3c <sensor::BH170::BH170(unsigned char)+0x3c>
  30:	48 8d 45 e4          	lea    -0x1c(%rbp),%rax
  34:	0f b6 00             	movzbl (%rax),%eax
  37:	0f b6 c0             	movzbl %al,%eax
  3a:	eb 05                	jmp    41 <sensor::BH170::BH170(unsigned char)+0x41>
  3c:	b8 23 00 00 00       	mov    $0x23,%eax
  41:	ba 80 1a 06 00       	mov    $0x61a80,%edx
  46:	89 c6                	mov    %eax,%esi
  48:	48 89 cf             	mov    %rcx,%rdi
  4b:	e8 00 00 00 00       	call   50 <sensor::BH170::BH170(unsigned char)+0x50>
  50:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  54:	c6 40 08 00          	movb   $0x0,0x8(%rax)
  58:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5c:	48 89 c7             	mov    %rax,%rdi
  5f:	e8 00 00 00 00       	call   64 <sensor::BH170::BH170(unsigned char)+0x64>
  64:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  68:	88 42 08             	mov    %al,0x8(%rdx)
  6b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  6f:	0f b6 40 08          	movzbl 0x8(%rax),%eax
  73:	84 c0                	test   %al,%al
  75:	74 22                	je     99 <sensor::BH170::BH170(unsigned char)+0x99>
  77:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7b:	be 01 00 00 00       	mov    $0x1,%esi
  80:	48 89 c7             	mov    %rax,%rdi
  83:	e8 00 00 00 00       	call   88 <sensor::BH170::BH170(unsigned char)+0x88>
  88:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8c:	be 10 00 00 00       	mov    $0x10,%esi
  91:	48 89 c7             	mov    %rax,%rdi
  94:	e8 00 00 00 00       	call   99 <sensor::BH170::BH170(unsigned char)+0x99>
  99:	90                   	nop
  9a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  9e:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  a5:	00 00 
  a7:	74 05                	je     ae <sensor::BH170::BH170(unsigned char)+0xae>
  a9:	e8 00 00 00 00       	call   ae <sensor::BH170::BH170(unsigned char)+0xae>
  ae:	c9                   	leave  
  af:	c3                   	ret    

Disassembly of section .text._ZN6sensor5BH1703GetEv:

0000000000000000 <sensor::BH170::Get()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	call   2b <sensor::BH170::Get()+0x2b>
  2b:	0f b7 c0             	movzwl %ax,%eax
  2e:	66 0f ef c0          	pxor   %xmm0,%xmm0
  32:	f3 0f 2a c0          	cvtsi2ss %eax,%xmm0
  36:	f3 0f 10 0d 00 00 00 	movss  0x0(%rip),%xmm1        # 3e <sensor::BH170::Get()+0x3e>
  3d:	00 
  3e:	f3 0f 5e c1          	divss  %xmm1,%xmm0
  42:	f3 0f 2c c0          	cvttss2si %xmm0,%eax
  46:	66 89 45 f6          	mov    %ax,-0xa(%rbp)
  4a:	0f b7 45 f6          	movzwl -0xa(%rbp),%eax
  4e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  52:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  59:	00 00 
  5b:	74 05                	je     62 <sensor::BH170::Get()+0x62>
  5d:	e8 00 00 00 00       	call   62 <sensor::BH170::Get()+0x62>
  62:	c9                   	leave  
  63:	c3                   	ret    

font_cp437.o:     file format elf64-x86-64


Disassembly of section .text._Z15cp437_font_sizev:

0000000000000000 <cp437_font_size()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	b8 7f 00 00 00       	mov    $0x7f,%eax
  20:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  24:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  2b:	00 00 
  2d:	74 05                	je     34 <cp437_font_size()+0x34>
  2f:	e8 00 00 00 00       	call   34 <cp437_font_size()+0x34>
  34:	c9                   	leave  
  35:	c3                   	ret    

htu21d.o:     file format elf64-x86-64


Disassembly of section .text.udelay:

0000000000000000 <udelay>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	89 7d ec             	mov    %edi,-0x14(%rbp)
   f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  16:	00 00 
  18:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1c:	31 c0                	xor    %eax,%eax
  1e:	90                   	nop
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  2a:	00 00 
  2c:	74 05                	je     33 <udelay+0x33>
  2e:	e8 00 00 00 00       	call   33 <udelay+0x33>
  33:	c9                   	leave  
  34:	c3                   	ret    

Disassembly of section .text._ZL16i2c_set_baudratej:

0000000000000000 <i2c_set_baudrate(unsigned int)>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	89 7d ec             	mov    %edi,-0x14(%rbp)
   b:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  12:	00 00 
  14:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  18:	31 c0                	xor    %eax,%eax
  1a:	90                   	nop
  1b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1f:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  26:	00 00 
  28:	74 05                	je     2f <i2c_set_baudrate(unsigned int)+0x2f>
  2a:	e8 00 00 00 00       	call   2f <i2c_set_baudrate(unsigned int)+0x2f>
  2f:	c9                   	leave  
  30:	c3                   	ret    

Disassembly of section .text._ZL15i2c_set_addressh:

0000000000000000 <i2c_set_address(unsigned char)>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	89 f8                	mov    %edi,%eax
   a:	88 45 ec             	mov    %al,-0x14(%rbp)
   d:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  14:	00 00 
  16:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1a:	31 c0                	xor    %eax,%eax
  1c:	90                   	nop
  1d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  21:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  28:	00 00 
  2a:	74 05                	je     31 <i2c_set_address(unsigned char)+0x31>
  2c:	e8 00 00 00 00       	call   31 <i2c_set_address(unsigned char)+0x31>
  31:	c9                   	leave  
  32:	c3                   	ret    

Disassembly of section .text._ZL9i2c_writePKcj:

0000000000000000 <i2c_write(char const*, unsigned int)>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	89 75 e4             	mov    %esi,-0x1c(%rbp)
   f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  16:	00 00 
  18:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1c:	31 c0                	xor    %eax,%eax
  1e:	b8 01 00 00 00       	mov    $0x1,%eax
  23:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  27:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  2e:	00 00 
  30:	74 05                	je     37 <i2c_write(char const*, unsigned int)+0x37>
  32:	e8 00 00 00 00       	call   37 <i2c_write(char const*, unsigned int)+0x37>
  37:	c9                   	leave  
  38:	c3                   	ret    

Disassembly of section .text._ZL8i2c_readPcj:

0000000000000000 <i2c_read(char*, unsigned int)>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	89 75 e4             	mov    %esi,-0x1c(%rbp)
   f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  16:	00 00 
  18:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1c:	31 c0                	xor    %eax,%eax
  1e:	b8 01 00 00 00       	mov    $0x1,%eax
  23:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  27:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  2e:	00 00 
  30:	74 05                	je     37 <i2c_read(char*, unsigned int)+0x37>
  32:	e8 00 00 00 00       	call   37 <i2c_read(char*, unsigned int)+0x37>
  37:	c9                   	leave  
  38:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2CC2Ehj:

0000000000000000 <HAL_I2C::HAL_I2C(unsigned char, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	89 55 e0             	mov    %edx,-0x20(%rbp)
  15:	88 45 e4             	mov    %al,-0x1c(%rbp)
  18:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1f:	00 00 
  21:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  25:	31 c0                	xor    %eax,%eax
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2b:	0f b6 55 e4          	movzbl -0x1c(%rbp),%edx
  2f:	88 10                	mov    %dl,(%rax)
  31:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  35:	8b 55 e0             	mov    -0x20(%rbp),%edx
  38:	89 50 04             	mov    %edx,0x4(%rax)
  3b:	90                   	nop
  3c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  47:	00 00 
  49:	74 05                	je     50 <HAL_I2C::HAL_I2C(unsigned char, unsigned int)+0x50>
  4b:	e8 00 00 00 00       	call   50 <HAL_I2C::HAL_I2C(unsigned char, unsigned int)+0x50>
  50:	c9                   	leave  
  51:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2C11IsConnectedEv:

0000000000000000 <HAL_I2C::IsConnected()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	8b 50 04             	mov    0x4(%rax),%edx
  26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2a:	0f b6 00             	movzbl (%rax),%eax
  2d:	0f b6 c0             	movzbl %al,%eax
  30:	89 d6                	mov    %edx,%esi
  32:	89 c7                	mov    %eax,%edi
  34:	e8 00 00 00 00       	call   39 <HAL_I2C::IsConnected()+0x39>
  39:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  3d:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  44:	00 00 
  46:	74 05                	je     4d <HAL_I2C::IsConnected()+0x4d>
  48:	e8 00 00 00 00       	call   4d <HAL_I2C::IsConnected()+0x4d>
  4d:	c9                   	leave  
  4e:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2C5WriteEh:

0000000000000000 <HAL_I2C::Write(unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	88 45 e4             	mov    %al,-0x1c(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  28:	48 89 c7             	mov    %rax,%rdi
  2b:	e8 00 00 00 00       	call   30 <HAL_I2C::Write(unsigned char)+0x30>
  30:	0f b6 45 e4          	movzbl -0x1c(%rbp),%eax
  34:	88 45 f7             	mov    %al,-0x9(%rbp)
  37:	48 8d 45 f7          	lea    -0x9(%rbp),%rax
  3b:	be 01 00 00 00       	mov    $0x1,%esi
  40:	48 89 c7             	mov    %rax,%rdi
  43:	e8 00 00 00 00       	call   48 <HAL_I2C::Write(unsigned char)+0x48>
  48:	90                   	nop
  49:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4d:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  54:	00 00 
  56:	74 05                	je     5d <HAL_I2C::Write(unsigned char)+0x5d>
  58:	e8 00 00 00 00       	call   5d <HAL_I2C::Write(unsigned char)+0x5d>
  5d:	c9                   	leave  
  5e:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2C4ReadEPcj:

0000000000000000 <HAL_I2C::Read(char*, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  14:	89 55 dc             	mov    %edx,-0x24(%rbp)
  17:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1e:	00 00 
  20:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  24:	31 c0                	xor    %eax,%eax
  26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2a:	48 89 c7             	mov    %rax,%rdi
  2d:	e8 00 00 00 00       	call   32 <HAL_I2C::Read(char*, unsigned int)+0x32>
  32:	8b 55 dc             	mov    -0x24(%rbp),%edx
  35:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  39:	89 d6                	mov    %edx,%esi
  3b:	48 89 c7             	mov    %rax,%rdi
  3e:	e8 00 00 00 00       	call   43 <HAL_I2C::Read(char*, unsigned int)+0x43>
  43:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  47:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  4e:	00 00 
  50:	74 05                	je     57 <HAL_I2C::Read(char*, unsigned int)+0x57>
  52:	e8 00 00 00 00       	call   57 <HAL_I2C::Read(char*, unsigned int)+0x57>
  57:	c9                   	leave  
  58:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2C5SetupEv:

0000000000000000 <HAL_I2C::Setup()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	0f b6 00             	movzbl (%rax),%eax
  26:	0f b6 c0             	movzbl %al,%eax
  29:	89 c7                	mov    %eax,%edi
  2b:	e8 00 00 00 00       	call   30 <HAL_I2C::Setup()+0x30>
  30:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  34:	8b 40 04             	mov    0x4(%rax),%eax
  37:	89 c7                	mov    %eax,%edi
  39:	e8 00 00 00 00       	call   3e <HAL_I2C::Setup()+0x3e>
  3e:	90                   	nop
  3f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  4a:	00 00 
  4c:	74 05                	je     53 <HAL_I2C::Setup()+0x53>
  4e:	e8 00 00 00 00       	call   53 <HAL_I2C::Setup()+0x53>
  53:	c9                   	leave  
  54:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2C12IsConnected_Ehj:

0000000000000000 <HAL_I2C::IsConnected_(unsigned char, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	89 f8                	mov    %edi,%eax
   e:	89 75 e8             	mov    %esi,-0x18(%rbp)
  11:	88 45 ec             	mov    %al,-0x14(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	0f b6 45 ec          	movzbl -0x14(%rbp),%eax
  27:	89 c7                	mov    %eax,%edi
  29:	e8 00 00 00 00       	call   2e <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x2e>
  2e:	8b 45 e8             	mov    -0x18(%rbp),%eax
  31:	89 c7                	mov    %eax,%edi
  33:	e8 00 00 00 00       	call   38 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x38>
  38:	80 7d ec 2f          	cmpb   $0x2f,-0x14(%rbp)
  3c:	76 06                	jbe    44 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x44>
  3e:	80 7d ec 37          	cmpb   $0x37,-0x14(%rbp)
  42:	76 0c                	jbe    50 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x50>
  44:	80 7d ec 4f          	cmpb   $0x4f,-0x14(%rbp)
  48:	76 1e                	jbe    68 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x68>
  4a:	80 7d ec 5f          	cmpb   $0x5f,-0x14(%rbp)
  4e:	77 18                	ja     68 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x68>
  50:	48 8d 45 f7          	lea    -0x9(%rbp),%rax
  54:	be 01 00 00 00       	mov    $0x1,%esi
  59:	48 89 c7             	mov    %rax,%rdi
  5c:	e8 00 00 00 00       	call   61 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x61>
  61:	84 c0                	test   %al,%al
  63:	0f 94 c0             	sete   %al
  66:	eb 14                	jmp    7c <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x7c>
  68:	be 00 00 00 00       	mov    $0x0,%esi
  6d:	bf 00 00 00 00       	mov    $0x0,%edi
  72:	e8 00 00 00 00       	call   77 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x77>
  77:	84 c0                	test   %al,%al
  79:	0f 94 c0             	sete   %al
  7c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  87:	00 00 
  89:	74 05                	je     90 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x90>
  8b:	e8 00 00 00 00       	call   90 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x90>
  90:	c9                   	leave  
  91:	c3                   	ret    

Disassembly of section .text._ZN6sensor6HTU21DC2Eh:

0000000000000000 <sensor::HTU21D::HTU21D(unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	88 45 e4             	mov    %al,-0x1c(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  28:	0f b6 45 e4          	movzbl -0x1c(%rbp),%eax
  2c:	84 c0                	test   %al,%al
  2e:	74 0c                	je     3c <sensor::HTU21D::HTU21D(unsigned char)+0x3c>
  30:	48 8d 45 e4          	lea    -0x1c(%rbp),%rax
  34:	0f b6 00             	movzbl (%rax),%eax
  37:	0f b6 c0             	movzbl %al,%eax
  3a:	eb 05                	jmp    41 <sensor::HTU21D::HTU21D(unsigned char)+0x41>
  3c:	b8 40 00 00 00       	mov    $0x40,%eax
  41:	ba 80 1a 06 00       	mov    $0x61a80,%edx
  46:	89 c6                	mov    %eax,%esi
  48:	48 89 cf             	mov    %rcx,%rdi
  4b:	e8 00 00 00 00       	call   50 <sensor::HTU21D::HTU21D(unsigned char)+0x50>
  50:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  54:	c6 40 08 00          	movb   $0x0,0x8(%rax)
  58:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5c:	48 89 c7             	mov    %rax,%rdi
  5f:	e8 00 00 00 00       	call   64 <sensor::HTU21D::HTU21D(unsigned char)+0x64>
  64:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  68:	88 42 08             	mov    %al,0x8(%rdx)
  6b:	90                   	nop
  6c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  70:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  77:	00 00 
  79:	74 05                	je     80 <sensor::HTU21D::HTU21D(unsigned char)+0x80>
  7b:	e8 00 00 00 00       	call   80 <sensor::HTU21D::HTU21D(unsigned char)+0x80>
  80:	c9                   	leave  
  81:	c3                   	ret    

Disassembly of section .text._ZN6sensor6HTU21D14GetTemperatureEv:

0000000000000000 <sensor::HTU21D::GetTemperature()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	be f3 00 00 00       	mov    $0xf3,%esi
  28:	48 89 c7             	mov    %rax,%rdi
  2b:	e8 00 00 00 00       	call   30 <sensor::HTU21D::GetTemperature()+0x30>
  30:	0f b7 c0             	movzwl %ax,%eax
  33:	66 0f ef c0          	pxor   %xmm0,%xmm0
  37:	f3 0f 2a c0          	cvtsi2ss %eax,%xmm0
  3b:	f3 0f 10 0d 00 00 00 	movss  0x0(%rip),%xmm1        # 43 <sensor::HTU21D::GetTemperature()+0x43>
  42:	00 
  43:	f3 0f 5e c1          	divss  %xmm1,%xmm0
  47:	f3 0f 11 45 f4       	movss  %xmm0,-0xc(%rbp)
  4c:	f3 0f 10 4d f4       	movss  -0xc(%rbp),%xmm1
  51:	f3 0f 10 05 00 00 00 	movss  0x0(%rip),%xmm0        # 59 <sensor::HTU21D::GetTemperature()+0x59>
  58:	00 
  59:	f3 0f 59 c1          	mulss  %xmm1,%xmm0
  5d:	f3 0f 10 0d 00 00 00 	movss  0x0(%rip),%xmm1        # 65 <sensor::HTU21D::GetTemperature()+0x65>
  64:	00 
  65:	f3 0f 5c c1          	subss  %xmm1,%xmm0
  69:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  6d:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  74:	00 00 
  76:	74 05                	je     7d <sensor::HTU21D::GetTemperature()+0x7d>
  78:	e8 00 00 00 00       	call   7d <sensor::HTU21D::GetTemperature()+0x7d>
  7d:	c9                   	leave  
  7e:	c3                   	ret    

Disassembly of section .text._ZN6sensor6HTU21D11GetHumidityEv:

0000000000000000 <sensor::HTU21D::GetHumidity()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	be f5 00 00 00       	mov    $0xf5,%esi
  28:	48 89 c7             	mov    %rax,%rdi
  2b:	e8 00 00 00 00       	call   30 <sensor::HTU21D::GetHumidity()+0x30>
  30:	0f b7 c0             	movzwl %ax,%eax
  33:	66 0f ef c0          	pxor   %xmm0,%xmm0
  37:	f3 0f 2a c0          	cvtsi2ss %eax,%xmm0
  3b:	f3 0f 10 0d 00 00 00 	movss  0x0(%rip),%xmm1        # 43 <sensor::HTU21D::GetHumidity()+0x43>
  42:	00 
  43:	f3 0f 5e c1          	divss  %xmm1,%xmm0
  47:	f3 0f 11 45 f4       	movss  %xmm0,-0xc(%rbp)
  4c:	f3 0f 10 4d f4       	movss  -0xc(%rbp),%xmm1
  51:	f3 0f 10 05 00 00 00 	movss  0x0(%rip),%xmm0        # 59 <sensor::HTU21D::GetHumidity()+0x59>
  58:	00 
  59:	f3 0f 59 c1          	mulss  %xmm1,%xmm0
  5d:	f3 0f 10 0d 00 00 00 	movss  0x0(%rip),%xmm1        # 65 <sensor::HTU21D::GetHumidity()+0x65>
  64:	00 
  65:	f3 0f 5c c1          	subss  %xmm1,%xmm0
  69:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  6d:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  74:	00 00 
  76:	74 05                	je     7d <sensor::HTU21D::GetHumidity()+0x7d>
  78:	e8 00 00 00 00       	call   7d <sensor::HTU21D::GetHumidity()+0x7d>
  7d:	c9                   	leave  
  7e:	c3                   	ret    

Disassembly of section .text._ZN6sensor6HTU21D7ReadRawEh:

0000000000000000 <sensor::HTU21D::ReadRaw(unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	88 45 d4             	mov    %al,-0x2c(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  28:	0f b6 55 d4          	movzbl -0x2c(%rbp),%edx
  2c:	89 d6                	mov    %edx,%esi
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	call   36 <sensor::HTU21D::ReadRaw(unsigned char)+0x36>
  36:	66 c7 45 f5 00 00    	movw   $0x0,-0xb(%rbp)
  3c:	c6 45 f7 00          	movb   $0x0,-0x9(%rbp)
  40:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
  47:	eb 35                	jmp    7e <sensor::HTU21D::ReadRaw(unsigned char)+0x7e>
  49:	bf 10 27 00 00       	mov    $0x2710,%edi
  4e:	e8 00 00 00 00       	call   53 <sensor::HTU21D::ReadRaw(unsigned char)+0x53>
  53:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  57:	48 8d 4d f5          	lea    -0xb(%rbp),%rcx
  5b:	ba 03 00 00 00       	mov    $0x3,%edx
  60:	48 89 ce             	mov    %rcx,%rsi
  63:	48 89 c7             	mov    %rax,%rdi
  66:	e8 00 00 00 00       	call   6b <sensor::HTU21D::ReadRaw(unsigned char)+0x6b>
  6b:	0f b6 45 f5          	movzbl -0xb(%rbp),%eax
  6f:	0f be c0             	movsbl %al,%eax
  72:	83 e0 03             	and    $0x3,%eax
  75:	83 f8 02             	cmp    $0x2,%eax
  78:	74 0c                	je     86 <sensor::HTU21D::ReadRaw(unsigned char)+0x86>
  7a:	83 45 f0 01          	addl   $0x1,-0x10(%rbp)
  7e:	83 7d f0 07          	cmpl   $0x7,-0x10(%rbp)
  82:	76 c5                	jbe    49 <sensor::HTU21D::ReadRaw(unsigned char)+0x49>
  84:	eb 01                	jmp    87 <sensor::HTU21D::ReadRaw(unsigned char)+0x87>
  86:	90                   	nop
  87:	0f b6 45 f5          	movzbl -0xb(%rbp),%eax
  8b:	0f be c0             	movsbl %al,%eax
  8e:	c1 e0 08             	shl    $0x8,%eax
  91:	89 c2                	mov    %eax,%edx
  93:	0f b6 45 f6          	movzbl -0xa(%rbp),%eax
  97:	66 98                	cbtw   
  99:	09 d0                	or     %edx,%eax
  9b:	66 89 45 ee          	mov    %ax,-0x12(%rbp)
  9f:	0f b7 45 ee          	movzwl -0x12(%rbp),%eax
  a3:	83 e0 fc             	and    $0xfffffffc,%eax
  a6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  aa:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  b1:	00 00 
  b3:	74 05                	je     ba <sensor::HTU21D::ReadRaw(unsigned char)+0xba>
  b5:	e8 00 00 00 00       	call   ba <sensor::HTU21D::ReadRaw(unsigned char)+0xba>
  ba:	c9                   	leave  
  bb:	c3                   	ret    

ina219.o:     file format elf64-x86-64


Disassembly of section .text.udelay:

0000000000000000 <udelay>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	89 7d ec             	mov    %edi,-0x14(%rbp)
   f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  16:	00 00 
  18:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1c:	31 c0                	xor    %eax,%eax
  1e:	90                   	nop
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  2a:	00 00 
  2c:	74 05                	je     33 <udelay+0x33>
  2e:	e8 00 00 00 00       	call   33 <udelay+0x33>
  33:	c9                   	leave  
  34:	c3                   	ret    

Disassembly of section .text._ZL16i2c_set_baudratej:

0000000000000000 <i2c_set_baudrate(unsigned int)>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	89 7d ec             	mov    %edi,-0x14(%rbp)
   b:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  12:	00 00 
  14:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  18:	31 c0                	xor    %eax,%eax
  1a:	90                   	nop
  1b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1f:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  26:	00 00 
  28:	74 05                	je     2f <i2c_set_baudrate(unsigned int)+0x2f>
  2a:	e8 00 00 00 00       	call   2f <i2c_set_baudrate(unsigned int)+0x2f>
  2f:	c9                   	leave  
  30:	c3                   	ret    

Disassembly of section .text._ZL15i2c_set_addressh:

0000000000000000 <i2c_set_address(unsigned char)>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	89 f8                	mov    %edi,%eax
   a:	88 45 ec             	mov    %al,-0x14(%rbp)
   d:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  14:	00 00 
  16:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1a:	31 c0                	xor    %eax,%eax
  1c:	90                   	nop
  1d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  21:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  28:	00 00 
  2a:	74 05                	je     31 <i2c_set_address(unsigned char)+0x31>
  2c:	e8 00 00 00 00       	call   31 <i2c_set_address(unsigned char)+0x31>
  31:	c9                   	leave  
  32:	c3                   	ret    

Disassembly of section .text._ZL9i2c_writePKcj:

0000000000000000 <i2c_write(char const*, unsigned int)>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	89 75 e4             	mov    %esi,-0x1c(%rbp)
   f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  16:	00 00 
  18:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1c:	31 c0                	xor    %eax,%eax
  1e:	b8 01 00 00 00       	mov    $0x1,%eax
  23:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  27:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  2e:	00 00 
  30:	74 05                	je     37 <i2c_write(char const*, unsigned int)+0x37>
  32:	e8 00 00 00 00       	call   37 <i2c_write(char const*, unsigned int)+0x37>
  37:	c9                   	leave  
  38:	c3                   	ret    

Disassembly of section .text._ZL8i2c_readPcj:

0000000000000000 <i2c_read(char*, unsigned int)>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	89 75 e4             	mov    %esi,-0x1c(%rbp)
   f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  16:	00 00 
  18:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1c:	31 c0                	xor    %eax,%eax
  1e:	b8 01 00 00 00       	mov    $0x1,%eax
  23:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  27:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  2e:	00 00 
  30:	74 05                	je     37 <i2c_read(char*, unsigned int)+0x37>
  32:	e8 00 00 00 00       	call   37 <i2c_read(char*, unsigned int)+0x37>
  37:	c9                   	leave  
  38:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2CC2Ehj:

0000000000000000 <HAL_I2C::HAL_I2C(unsigned char, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	89 55 e0             	mov    %edx,-0x20(%rbp)
  15:	88 45 e4             	mov    %al,-0x1c(%rbp)
  18:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1f:	00 00 
  21:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  25:	31 c0                	xor    %eax,%eax
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2b:	0f b6 55 e4          	movzbl -0x1c(%rbp),%edx
  2f:	88 10                	mov    %dl,(%rax)
  31:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  35:	8b 55 e0             	mov    -0x20(%rbp),%edx
  38:	89 50 04             	mov    %edx,0x4(%rax)
  3b:	90                   	nop
  3c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  47:	00 00 
  49:	74 05                	je     50 <HAL_I2C::HAL_I2C(unsigned char, unsigned int)+0x50>
  4b:	e8 00 00 00 00       	call   50 <HAL_I2C::HAL_I2C(unsigned char, unsigned int)+0x50>
  50:	c9                   	leave  
  51:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2C11IsConnectedEv:

0000000000000000 <HAL_I2C::IsConnected()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	8b 50 04             	mov    0x4(%rax),%edx
  26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2a:	0f b6 00             	movzbl (%rax),%eax
  2d:	0f b6 c0             	movzbl %al,%eax
  30:	89 d6                	mov    %edx,%esi
  32:	89 c7                	mov    %eax,%edi
  34:	e8 00 00 00 00       	call   39 <HAL_I2C::IsConnected()+0x39>
  39:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  3d:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  44:	00 00 
  46:	74 05                	je     4d <HAL_I2C::IsConnected()+0x4d>
  48:	e8 00 00 00 00       	call   4d <HAL_I2C::IsConnected()+0x4d>
  4d:	c9                   	leave  
  4e:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2C13WriteRegisterEht:

0000000000000000 <HAL_I2C::WriteRegister(unsigned char, unsigned short)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f1                	mov    %esi,%ecx
  12:	89 d0                	mov    %edx,%eax
  14:	89 ca                	mov    %ecx,%edx
  16:	88 55 e4             	mov    %dl,-0x1c(%rbp)
  19:	66 89 45 e0          	mov    %ax,-0x20(%rbp)
  1d:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  24:	00 00 
  26:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  2a:	31 c0                	xor    %eax,%eax
  2c:	0f b6 45 e4          	movzbl -0x1c(%rbp),%eax
  30:	88 45 f5             	mov    %al,-0xb(%rbp)
  33:	0f b7 45 e0          	movzwl -0x20(%rbp),%eax
  37:	66 c1 e8 08          	shr    $0x8,%ax
  3b:	88 45 f6             	mov    %al,-0xa(%rbp)
  3e:	0f b7 45 e0          	movzwl -0x20(%rbp),%eax
  42:	88 45 f7             	mov    %al,-0x9(%rbp)
  45:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  49:	48 89 c7             	mov    %rax,%rdi
  4c:	e8 00 00 00 00       	call   51 <HAL_I2C::WriteRegister(unsigned char, unsigned short)+0x51>
  51:	48 8d 45 f5          	lea    -0xb(%rbp),%rax
  55:	be 03 00 00 00       	mov    $0x3,%esi
  5a:	48 89 c7             	mov    %rax,%rdi
  5d:	e8 00 00 00 00       	call   62 <HAL_I2C::WriteRegister(unsigned char, unsigned short)+0x62>
  62:	90                   	nop
  63:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  67:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  6e:	00 00 
  70:	74 05                	je     77 <HAL_I2C::WriteRegister(unsigned char, unsigned short)+0x77>
  72:	e8 00 00 00 00       	call   77 <HAL_I2C::WriteRegister(unsigned char, unsigned short)+0x77>
  77:	c9                   	leave  
  78:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2C21ReadRegister16DelayUsEhj:

0000000000000000 <HAL_I2C::ReadRegister16DelayUs(unsigned char, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	89 55 e0             	mov    %edx,-0x20(%rbp)
  15:	88 45 e4             	mov    %al,-0x1c(%rbp)
  18:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1f:	00 00 
  21:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  25:	31 c0                	xor    %eax,%eax
  27:	66 c7 45 f6 00 00    	movw   $0x0,-0xa(%rbp)
  2d:	0f b6 45 e4          	movzbl -0x1c(%rbp),%eax
  31:	88 45 f6             	mov    %al,-0xa(%rbp)
  34:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  38:	48 89 c7             	mov    %rax,%rdi
  3b:	e8 00 00 00 00       	call   40 <HAL_I2C::ReadRegister16DelayUs(unsigned char, unsigned int)+0x40>
  40:	48 8d 45 f6          	lea    -0xa(%rbp),%rax
  44:	be 01 00 00 00       	mov    $0x1,%esi
  49:	48 89 c7             	mov    %rax,%rdi
  4c:	e8 00 00 00 00       	call   51 <HAL_I2C::ReadRegister16DelayUs(unsigned char, unsigned int)+0x51>
  51:	8b 45 e0             	mov    -0x20(%rbp),%eax
  54:	89 c7                	mov    %eax,%edi
  56:	e8 00 00 00 00       	call   5b <HAL_I2C::ReadRegister16DelayUs(unsigned char, unsigned int)+0x5b>
  5b:	48 8d 45 f6          	lea    -0xa(%rbp),%rax
  5f:	be 02 00 00 00       	mov    $0x2,%esi
  64:	48 89 c7             	mov    %rax,%rdi
  67:	e8 00 00 00 00       	call   6c <HAL_I2C::ReadRegister16DelayUs(unsigned char, unsigned int)+0x6c>
  6c:	0f b6 45 f6          	movzbl -0xa(%rbp),%eax
  70:	66 98                	cbtw   
  72:	0f b7 c0             	movzwl %ax,%eax
  75:	c1 e0 08             	shl    $0x8,%eax
  78:	89 c2                	mov    %eax,%edx
  7a:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
  7e:	66 98                	cbtw   
  80:	09 d0                	or     %edx,%eax
  82:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  86:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  8d:	00 00 
  8f:	74 05                	je     96 <HAL_I2C::ReadRegister16DelayUs(unsigned char, unsigned int)+0x96>
  91:	e8 00 00 00 00       	call   96 <HAL_I2C::ReadRegister16DelayUs(unsigned char, unsigned int)+0x96>
  96:	c9                   	leave  
  97:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2C5SetupEv:

0000000000000000 <HAL_I2C::Setup()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	0f b6 00             	movzbl (%rax),%eax
  26:	0f b6 c0             	movzbl %al,%eax
  29:	89 c7                	mov    %eax,%edi
  2b:	e8 00 00 00 00       	call   30 <HAL_I2C::Setup()+0x30>
  30:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  34:	8b 40 04             	mov    0x4(%rax),%eax
  37:	89 c7                	mov    %eax,%edi
  39:	e8 00 00 00 00       	call   3e <HAL_I2C::Setup()+0x3e>
  3e:	90                   	nop
  3f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  4a:	00 00 
  4c:	74 05                	je     53 <HAL_I2C::Setup()+0x53>
  4e:	e8 00 00 00 00       	call   53 <HAL_I2C::Setup()+0x53>
  53:	c9                   	leave  
  54:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2C12IsConnected_Ehj:

0000000000000000 <HAL_I2C::IsConnected_(unsigned char, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	89 f8                	mov    %edi,%eax
   e:	89 75 e8             	mov    %esi,-0x18(%rbp)
  11:	88 45 ec             	mov    %al,-0x14(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	0f b6 45 ec          	movzbl -0x14(%rbp),%eax
  27:	89 c7                	mov    %eax,%edi
  29:	e8 00 00 00 00       	call   2e <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x2e>
  2e:	8b 45 e8             	mov    -0x18(%rbp),%eax
  31:	89 c7                	mov    %eax,%edi
  33:	e8 00 00 00 00       	call   38 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x38>
  38:	80 7d ec 2f          	cmpb   $0x2f,-0x14(%rbp)
  3c:	76 06                	jbe    44 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x44>
  3e:	80 7d ec 37          	cmpb   $0x37,-0x14(%rbp)
  42:	76 0c                	jbe    50 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x50>
  44:	80 7d ec 4f          	cmpb   $0x4f,-0x14(%rbp)
  48:	76 1e                	jbe    68 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x68>
  4a:	80 7d ec 5f          	cmpb   $0x5f,-0x14(%rbp)
  4e:	77 18                	ja     68 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x68>
  50:	48 8d 45 f7          	lea    -0x9(%rbp),%rax
  54:	be 01 00 00 00       	mov    $0x1,%esi
  59:	48 89 c7             	mov    %rax,%rdi
  5c:	e8 00 00 00 00       	call   61 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x61>
  61:	84 c0                	test   %al,%al
  63:	0f 94 c0             	sete   %al
  66:	eb 14                	jmp    7c <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x7c>
  68:	be 00 00 00 00       	mov    $0x0,%esi
  6d:	bf 00 00 00 00       	mov    $0x0,%edi
  72:	e8 00 00 00 00       	call   77 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x77>
  77:	84 c0                	test   %al,%al
  79:	0f 94 c0             	sete   %al
  7c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  87:	00 00 
  89:	74 05                	je     90 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x90>
  8b:	e8 00 00 00 00       	call   90 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x90>
  90:	c9                   	leave  
  91:	c3                   	ret    

Disassembly of section .text._ZL11CEILING_POSf:

0000000000000000 <CEILING_POS(float)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	f3 0f 11 45 ec       	movss  %xmm0,-0x14(%rbp)
  11:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  18:	00 00 
  1a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1e:	31 c0                	xor    %eax,%eax
  20:	f3 0f 10 45 ec       	movss  -0x14(%rbp),%xmm0
  25:	f3 0f 2c c0          	cvttss2si %xmm0,%eax
  29:	89 45 f4             	mov    %eax,-0xc(%rbp)
  2c:	66 0f ef c0          	pxor   %xmm0,%xmm0
  30:	f3 0f 2a 45 f4       	cvtsi2ssl -0xc(%rbp),%xmm0
  35:	0f 2e 45 ec          	ucomiss -0x14(%rbp),%xmm0
  39:	7a 11                	jp     4c <CEILING_POS(float)+0x4c>
  3b:	0f 2e 45 ec          	ucomiss -0x14(%rbp),%xmm0
  3f:	75 0b                	jne    4c <CEILING_POS(float)+0x4c>
  41:	66 0f ef c0          	pxor   %xmm0,%xmm0
  45:	f3 0f 2a 45 f4       	cvtsi2ssl -0xc(%rbp),%xmm0
  4a:	eb 0e                	jmp    5a <CEILING_POS(float)+0x5a>
  4c:	8b 45 f4             	mov    -0xc(%rbp),%eax
  4f:	83 c0 01             	add    $0x1,%eax
  52:	66 0f ef c0          	pxor   %xmm0,%xmm0
  56:	f3 0f 2a c0          	cvtsi2ss %eax,%xmm0
  5a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  5e:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  65:	00 00 
  67:	74 05                	je     6e <CEILING_POS(float)+0x6e>
  69:	e8 00 00 00 00       	call   6e <CEILING_POS(float)+0x6e>
  6e:	c9                   	leave  
  6f:	c3                   	ret    

Disassembly of section .text._ZN6sensor6INA219C2Eh:

0000000000000000 <sensor::INA219::INA219(unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	88 45 d4             	mov    %al,-0x2c(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  28:	0f b6 45 d4          	movzbl -0x2c(%rbp),%eax
  2c:	84 c0                	test   %al,%al
  2e:	74 0c                	je     3c <sensor::INA219::INA219(unsigned char)+0x3c>
  30:	48 8d 45 d4          	lea    -0x2c(%rbp),%rax
  34:	0f b6 00             	movzbl (%rax),%eax
  37:	0f b6 c0             	movzbl %al,%eax
  3a:	eb 05                	jmp    41 <sensor::INA219::INA219(unsigned char)+0x41>
  3c:	b8 40 00 00 00       	mov    $0x40,%eax
  41:	ba 80 1a 06 00       	mov    $0x61a80,%edx
  46:	89 c6                	mov    %eax,%esi
  48:	48 89 cf             	mov    %rcx,%rdi
  4b:	e8 00 00 00 00       	call   50 <sensor::INA219::INA219(unsigned char)+0x50>
  50:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  54:	c6 40 08 00          	movb   $0x0,0x8(%rax)
  58:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  5c:	48 89 c7             	mov    %rax,%rdi
  5f:	e8 00 00 00 00       	call   64 <sensor::INA219::INA219(unsigned char)+0x64>
  64:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  68:	88 42 08             	mov    %al,0x8(%rdx)
  6b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  6f:	0f b6 40 08          	movzbl 0x8(%rax),%eax
  73:	84 c0                	test   %al,%al
  75:	74 4f                	je     c6 <sensor::INA219::INA219(unsigned char)+0xc6>
  77:	66 c7 45 ee 00 20    	movw   $0x2000,-0x12(%rbp)
  7d:	66 c7 45 f0 00 18    	movw   $0x1800,-0x10(%rbp)
  83:	66 c7 45 f2 00 04    	movw   $0x400,-0xe(%rbp)
  89:	66 c7 45 f4 18 00    	movw   $0x18,-0xc(%rbp)
  8f:	66 c7 45 f6 07 00    	movw   $0x7,-0xa(%rbp)
  95:	48 8d 55 ee          	lea    -0x12(%rbp),%rdx
  99:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  9d:	48 89 d6             	mov    %rdx,%rsi
  a0:	48 89 c7             	mov    %rax,%rdi
  a3:	e8 00 00 00 00       	call   a8 <sensor::INA219::INA219(unsigned char)+0xa8>
  a8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  ac:	f3 0f 10 0d 00 00 00 	movss  0x0(%rip),%xmm1        # b4 <sensor::INA219::INA219(unsigned char)+0xb4>
  b3:	00 
  b4:	8b 15 00 00 00 00    	mov    0x0(%rip),%edx        # ba <sensor::INA219::INA219(unsigned char)+0xba>
  ba:	66 0f 6e c2          	movd   %edx,%xmm0
  be:	48 89 c7             	mov    %rax,%rdi
  c1:	e8 00 00 00 00       	call   c6 <sensor::INA219::INA219(unsigned char)+0xc6>
  c6:	90                   	nop
  c7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  cb:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  d2:	00 00 
  d4:	74 05                	je     db <sensor::INA219::INA219(unsigned char)+0xdb>
  d6:	e8 00 00 00 00       	call   db <sensor::INA219::INA219(unsigned char)+0xdb>
  db:	c9                   	leave  
  dc:	c3                   	ret    

Disassembly of section .text._ZN6sensor6INA2199ConfigureERNS_6ina2196ConfigE:

0000000000000000 <sensor::INA219::Configure(sensor::ina219::Config&)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  27:	0f b7 00             	movzwl (%rax),%eax
  2a:	0f b7 c0             	movzwl %ax,%eax
  2d:	85 c0                	test   %eax,%eax
  2f:	74 1a                	je     4b <sensor::INA219::Configure(sensor::ina219::Config&)+0x4b>
  31:	3d 00 20 00 00       	cmp    $0x2000,%eax
  36:	75 25                	jne    5d <sensor::INA219::Configure(sensor::ina219::Config&)+0x5d>
  38:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3c:	f3 0f 10 05 00 00 00 	movss  0x0(%rip),%xmm0        # 44 <sensor::INA219::Configure(sensor::ina219::Config&)+0x44>
  43:	00 
  44:	f3 0f 11 40 18       	movss  %xmm0,0x18(%rax)
  49:	eb 12                	jmp    5d <sensor::INA219::Configure(sensor::ina219::Config&)+0x5d>
  4b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4f:	f3 0f 10 05 00 00 00 	movss  0x0(%rip),%xmm0        # 57 <sensor::INA219::Configure(sensor::ina219::Config&)+0x57>
  56:	00 
  57:	f3 0f 11 40 18       	movss  %xmm0,0x18(%rax)
  5c:	90                   	nop
  5d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  61:	0f b7 40 02          	movzwl 0x2(%rax),%eax
  65:	0f b7 c0             	movzwl %ax,%eax
  68:	3d 00 18 00 00       	cmp    $0x1800,%eax
  6d:	74 22                	je     91 <sensor::INA219::Configure(sensor::ina219::Config&)+0x91>
  6f:	3d 00 18 00 00       	cmp    $0x1800,%eax
  74:	7f 66                	jg     dc <sensor::INA219::Configure(sensor::ina219::Config&)+0xdc>
  76:	3d 00 10 00 00       	cmp    $0x1000,%eax
  7b:	74 27                	je     a4 <sensor::INA219::Configure(sensor::ina219::Config&)+0xa4>
  7d:	3d 00 10 00 00       	cmp    $0x1000,%eax
  82:	7f 58                	jg     dc <sensor::INA219::Configure(sensor::ina219::Config&)+0xdc>
  84:	85 c0                	test   %eax,%eax
  86:	74 42                	je     ca <sensor::INA219::Configure(sensor::ina219::Config&)+0xca>
  88:	3d 00 08 00 00       	cmp    $0x800,%eax
  8d:	74 28                	je     b7 <sensor::INA219::Configure(sensor::ina219::Config&)+0xb7>
  8f:	eb 4b                	jmp    dc <sensor::INA219::Configure(sensor::ina219::Config&)+0xdc>
  91:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  95:	f3 0f 10 05 00 00 00 	movss  0x0(%rip),%xmm0        # 9d <sensor::INA219::Configure(sensor::ina219::Config&)+0x9d>
  9c:	00 
  9d:	f3 0f 11 40 14       	movss  %xmm0,0x14(%rax)
  a2:	eb 38                	jmp    dc <sensor::INA219::Configure(sensor::ina219::Config&)+0xdc>
  a4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  a8:	f3 0f 10 05 00 00 00 	movss  0x0(%rip),%xmm0        # b0 <sensor::INA219::Configure(sensor::ina219::Config&)+0xb0>
  af:	00 
  b0:	f3 0f 11 40 14       	movss  %xmm0,0x14(%rax)
  b5:	eb 25                	jmp    dc <sensor::INA219::Configure(sensor::ina219::Config&)+0xdc>
  b7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  bb:	f3 0f 10 05 00 00 00 	movss  0x0(%rip),%xmm0        # c3 <sensor::INA219::Configure(sensor::ina219::Config&)+0xc3>
  c2:	00 
  c3:	f3 0f 11 40 14       	movss  %xmm0,0x14(%rax)
  c8:	eb 12                	jmp    dc <sensor::INA219::Configure(sensor::ina219::Config&)+0xdc>
  ca:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  ce:	f3 0f 10 05 00 00 00 	movss  0x0(%rip),%xmm0        # d6 <sensor::INA219::Configure(sensor::ina219::Config&)+0xd6>
  d5:	00 
  d6:	f3 0f 11 40 14       	movss  %xmm0,0x14(%rax)
  db:	90                   	nop
  dc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  e0:	0f b7 10             	movzwl (%rax),%edx
  e3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  e7:	0f b7 40 02          	movzwl 0x2(%rax),%eax
  eb:	09 c2                	or     %eax,%edx
  ed:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  f1:	0f b7 40 04          	movzwl 0x4(%rax),%eax
  f5:	09 c2                	or     %eax,%edx
  f7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  fb:	0f b7 40 06          	movzwl 0x6(%rax),%eax
  ff:	09 c2                	or     %eax,%edx
 101:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
 105:	0f b7 40 08          	movzwl 0x8(%rax),%eax
 109:	09 d0                	or     %edx,%eax
 10b:	66 89 45 f6          	mov    %ax,-0xa(%rbp)
 10f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 113:	0f b7 55 f6          	movzwl -0xa(%rbp),%edx
 117:	be 00 00 00 00       	mov    $0x0,%esi
 11c:	48 89 c7             	mov    %rax,%rdi
 11f:	e8 00 00 00 00       	call   124 <sensor::INA219::Configure(sensor::ina219::Config&)+0x124>
 124:	90                   	nop
 125:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 129:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 130:	00 00 
 132:	74 05                	je     139 <sensor::INA219::Configure(sensor::ina219::Config&)+0x139>
 134:	e8 00 00 00 00       	call   139 <sensor::INA219::Configure(sensor::ina219::Config&)+0x139>
 139:	c9                   	leave  
 13a:	c3                   	ret    

Disassembly of section .text._ZN6sensor6INA2199CalibrateEff:

0000000000000000 <sensor::INA219::Calibrate(float, float)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	f3 0f 11 45 e4       	movss  %xmm0,-0x1c(%rbp)
  15:	f3 0f 11 4d e0       	movss  %xmm1,-0x20(%rbp)
  1a:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  21:	00 00 
  23:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  27:	31 c0                	xor    %eax,%eax
  29:	f3 0f 10 45 e0       	movss  -0x20(%rbp),%xmm0
  2e:	f3 0f 10 0d 00 00 00 	movss  0x0(%rip),%xmm1        # 36 <sensor::INA219::Calibrate(float, float)+0x36>
  35:	00 
  36:	f3 0f 5e c1          	divss  %xmm1,%xmm0
  3a:	f3 0f 11 45 f4       	movss  %xmm0,-0xc(%rbp)
  3f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43:	f3 0f 10 45 e4       	movss  -0x1c(%rbp),%xmm0
  48:	f3 0f 11 40 1c       	movss  %xmm0,0x1c(%rax)
  4d:	f3 0f 10 4d f4       	movss  -0xc(%rbp),%xmm1
  52:	f3 0f 10 05 00 00 00 	movss  0x0(%rip),%xmm0        # 5a <sensor::INA219::Calibrate(float, float)+0x5a>
  59:	00 
  5a:	f3 0f 59 c1          	mulss  %xmm1,%xmm0
  5e:	f3 0f 2c c0          	cvttss2si %xmm0,%eax
  62:	0f b7 c0             	movzwl %ax,%eax
  65:	66 0f ef c0          	pxor   %xmm0,%xmm0
  69:	f3 0f 2a c0          	cvtsi2ss %eax,%xmm0
  6d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  71:	f3 0f 11 40 0c       	movss  %xmm0,0xc(%rax)
  76:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7a:	f3 0f 10 40 0c       	movss  0xc(%rax),%xmm0
  7f:	f3 0f 10 0d 00 00 00 	movss  0x0(%rip),%xmm1        # 87 <sensor::INA219::Calibrate(float, float)+0x87>
  86:	00 
  87:	f3 0f 5e c1          	divss  %xmm1,%xmm0
  8b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8f:	f3 0f 11 40 0c       	movss  %xmm0,0xc(%rax)
  94:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  98:	f3 0f 10 40 0c       	movss  0xc(%rax),%xmm0
  9d:	f3 0f 10 0d 00 00 00 	movss  0x0(%rip),%xmm1        # a5 <sensor::INA219::Calibrate(float, float)+0xa5>
  a4:	00 
  a5:	f3 0f 5e c1          	divss  %xmm1,%xmm0
  a9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  ad:	f3 0f 11 40 0c       	movss  %xmm0,0xc(%rax)
  b2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  b6:	8b 40 0c             	mov    0xc(%rax),%eax
  b9:	66 0f 6e c0          	movd   %eax,%xmm0
  bd:	e8 00 00 00 00       	call   c2 <sensor::INA219::Calibrate(float, float)+0xc2>
  c2:	66 0f 7e c0          	movd   %xmm0,%eax
  c6:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  ca:	89 42 0c             	mov    %eax,0xc(%rdx)
  cd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  d1:	f3 0f 10 48 0c       	movss  0xc(%rax),%xmm1
  d6:	f3 0f 10 05 00 00 00 	movss  0x0(%rip),%xmm0        # de <sensor::INA219::Calibrate(float, float)+0xde>
  dd:	00 
  de:	f3 0f 59 c1          	mulss  %xmm1,%xmm0
  e2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  e6:	f3 0f 11 40 0c       	movss  %xmm0,0xc(%rax)
  eb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  ef:	f3 0f 10 48 0c       	movss  0xc(%rax),%xmm1
  f4:	f3 0f 10 05 00 00 00 	movss  0x0(%rip),%xmm0        # fc <sensor::INA219::Calibrate(float, float)+0xfc>
  fb:	00 
  fc:	f3 0f 59 c1          	mulss  %xmm1,%xmm0
 100:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 104:	f3 0f 11 40 10       	movss  %xmm0,0x10(%rax)
 109:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 10d:	f3 0f 10 48 0c       	movss  0xc(%rax),%xmm1
 112:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 116:	f3 0f 10 40 1c       	movss  0x1c(%rax),%xmm0
 11b:	f3 0f 59 c8          	mulss  %xmm0,%xmm1
 11f:	f3 0f 10 05 00 00 00 	movss  0x0(%rip),%xmm0        # 127 <sensor::INA219::Calibrate(float, float)+0x127>
 126:	00 
 127:	f3 0f 5e c1          	divss  %xmm1,%xmm0
 12b:	f3 0f 2c c0          	cvttss2si %xmm0,%eax
 12f:	66 89 45 f2          	mov    %ax,-0xe(%rbp)
 133:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 137:	0f b7 55 f2          	movzwl -0xe(%rbp),%edx
 13b:	be 05 00 00 00       	mov    $0x5,%esi
 140:	48 89 c7             	mov    %rax,%rdi
 143:	e8 00 00 00 00       	call   148 <sensor::INA219::Calibrate(float, float)+0x148>
 148:	90                   	nop
 149:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 14d:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 154:	00 00 
 156:	74 05                	je     15d <sensor::INA219::Calibrate(float, float)+0x15d>
 158:	e8 00 00 00 00       	call   15d <sensor::INA219::Calibrate(float, float)+0x15d>
 15d:	c9                   	leave  
 15e:	c3                   	ret    

Disassembly of section .text._ZN6sensor6INA21915GetShuntCurrentEv:

0000000000000000 <sensor::INA219::GetShuntCurrent()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	ba 20 03 00 00       	mov    $0x320,%edx
  28:	be 04 00 00 00       	mov    $0x4,%esi
  2d:	48 89 c7             	mov    %rax,%rdi
  30:	e8 00 00 00 00       	call   35 <sensor::INA219::GetShuntCurrent()+0x35>
  35:	0f b7 c0             	movzwl %ax,%eax
  38:	66 0f ef c9          	pxor   %xmm1,%xmm1
  3c:	f3 0f 2a c8          	cvtsi2ss %eax,%xmm1
  40:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  44:	f3 0f 10 40 0c       	movss  0xc(%rax),%xmm0
  49:	f3 0f 59 c1          	mulss  %xmm1,%xmm0
  4d:	f3 0f 11 45 f4       	movss  %xmm0,-0xc(%rbp)
  52:	f3 0f 10 45 f4       	movss  -0xc(%rbp),%xmm0
  57:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  5b:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  62:	00 00 
  64:	74 05                	je     6b <sensor::INA219::GetShuntCurrent()+0x6b>
  66:	e8 00 00 00 00       	call   6b <sensor::INA219::GetShuntCurrent()+0x6b>
  6b:	c9                   	leave  
  6c:	c3                   	ret    

Disassembly of section .text._ZN6sensor6INA21916GetBusVoltageRawEv:

0000000000000000 <sensor::INA219::GetBusVoltageRaw()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	ba 20 03 00 00       	mov    $0x320,%edx
  28:	be 02 00 00 00       	mov    $0x2,%esi
  2d:	48 89 c7             	mov    %rax,%rdi
  30:	e8 00 00 00 00       	call   35 <sensor::INA219::GetBusVoltageRaw()+0x35>
  35:	66 89 45 f6          	mov    %ax,-0xa(%rbp)
  39:	66 c1 6d f6 03       	shrw   $0x3,-0xa(%rbp)
  3e:	0f b7 45 f6          	movzwl -0xa(%rbp),%eax
  42:	c1 e0 02             	shl    $0x2,%eax
  45:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  49:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  50:	00 00 
  52:	74 05                	je     59 <sensor::INA219::GetBusVoltageRaw()+0x59>
  54:	e8 00 00 00 00       	call   59 <sensor::INA219::GetBusVoltageRaw()+0x59>
  59:	c9                   	leave  
  5a:	c3                   	ret    

Disassembly of section .text._ZN6sensor6INA21913GetBusVoltageEv:

0000000000000000 <sensor::INA219::GetBusVoltage()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	call   2b <sensor::INA219::GetBusVoltage()+0x2b>
  2b:	98                   	cwtl   
  2c:	66 0f ef c9          	pxor   %xmm1,%xmm1
  30:	f3 0f 2a c8          	cvtsi2ss %eax,%xmm1
  34:	f3 0f 10 05 00 00 00 	movss  0x0(%rip),%xmm0        # 3c <sensor::INA219::GetBusVoltage()+0x3c>
  3b:	00 
  3c:	f3 0f 59 c1          	mulss  %xmm1,%xmm0
  40:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  44:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  4b:	00 00 
  4d:	74 05                	je     54 <sensor::INA219::GetBusVoltage()+0x54>
  4f:	e8 00 00 00 00       	call   54 <sensor::INA219::GetBusVoltage()+0x54>
  54:	c9                   	leave  
  55:	c3                   	ret    

Disassembly of section .text._ZN6sensor6INA21911GetBusPowerEv:

0000000000000000 <sensor::INA219::GetBusPower()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	ba 20 03 00 00       	mov    $0x320,%edx
  28:	be 03 00 00 00       	mov    $0x3,%esi
  2d:	48 89 c7             	mov    %rax,%rdi
  30:	e8 00 00 00 00       	call   35 <sensor::INA219::GetBusPower()+0x35>
  35:	0f b7 c0             	movzwl %ax,%eax
  38:	66 0f ef c9          	pxor   %xmm1,%xmm1
  3c:	f3 0f 2a c8          	cvtsi2ss %eax,%xmm1
  40:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  44:	f3 0f 10 40 10       	movss  0x10(%rax),%xmm0
  49:	f3 0f 59 c1          	mulss  %xmm1,%xmm0
  4d:	f3 0f 11 45 f4       	movss  %xmm0,-0xc(%rbp)
  52:	f3 0f 10 45 f4       	movss  -0xc(%rbp),%xmm0
  57:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  5b:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  62:	00 00 
  64:	74 05                	je     6b <sensor::INA219::GetBusPower()+0x6b>
  66:	e8 00 00 00 00       	call   6b <sensor::INA219::GetBusPower()+0x6b>
  6b:	c9                   	leave  
  6c:	c3                   	ret    

max7219matrix.o:     file format elf64-x86-64


Disassembly of section .text.spi_begin:

0000000000000000 <spi_begin>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   f:	00 00 
  11:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  15:	31 c0                	xor    %eax,%eax
  17:	90                   	nop
  18:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1c:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  23:	00 00 
  25:	74 05                	je     2c <spi_begin+0x2c>
  27:	e8 00 00 00 00       	call   2c <spi_begin+0x2c>
  2c:	c9                   	leave  
  2d:	c3                   	ret    

Disassembly of section .text.spi_chipSelect:

0000000000000000 <spi_chipSelect>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	89 f8                	mov    %edi,%eax
   a:	88 45 ec             	mov    %al,-0x14(%rbp)
   d:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  14:	00 00 
  16:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1a:	31 c0                	xor    %eax,%eax
  1c:	90                   	nop
  1d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  21:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  28:	00 00 
  2a:	74 05                	je     31 <spi_chipSelect+0x31>
  2c:	e8 00 00 00 00       	call   31 <spi_chipSelect+0x31>
  31:	c9                   	leave  
  32:	c3                   	ret    

Disassembly of section .text.spi_setDataMode:

0000000000000000 <spi_setDataMode>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	89 f8                	mov    %edi,%eax
   a:	88 45 ec             	mov    %al,-0x14(%rbp)
   d:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  14:	00 00 
  16:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1a:	31 c0                	xor    %eax,%eax
  1c:	90                   	nop
  1d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  21:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  28:	00 00 
  2a:	74 05                	je     31 <spi_setDataMode+0x31>
  2c:	e8 00 00 00 00       	call   31 <spi_setDataMode+0x31>
  31:	c9                   	leave  
  32:	c3                   	ret    

Disassembly of section .text.spi_set_speed_hz:

0000000000000000 <spi_set_speed_hz>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	89 7d ec             	mov    %edi,-0x14(%rbp)
   b:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  12:	00 00 
  14:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  18:	31 c0                	xor    %eax,%eax
  1a:	90                   	nop
  1b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1f:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  26:	00 00 
  28:	74 05                	je     2f <spi_set_speed_hz+0x2f>
  2a:	e8 00 00 00 00       	call   2f <spi_set_speed_hz+0x2f>
  2f:	c9                   	leave  
  30:	c3                   	ret    

Disassembly of section .text.spi_writenb:

0000000000000000 <spi_writenb>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	89 75 e4             	mov    %esi,-0x1c(%rbp)
   f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  16:	00 00 
  18:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1c:	31 c0                	xor    %eax,%eax
  1e:	90                   	nop
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  2a:	00 00 
  2c:	74 05                	je     33 <spi_writenb+0x33>
  2e:	e8 00 00 00 00       	call   33 <spi_writenb+0x33>
  33:	c9                   	leave  
  34:	c3                   	ret    

Disassembly of section .text._ZN7HAL_SPI5SetupEv:

0000000000000000 <HAL_SPI::Setup()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	0f b6 40 04          	movzbl 0x4(%rax),%eax
  27:	0f b6 c0             	movzbl %al,%eax
  2a:	89 c7                	mov    %eax,%edi
  2c:	e8 00 00 00 00       	call   31 <HAL_SPI::Setup()+0x31>
  31:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  35:	0f b6 40 05          	movzbl 0x5(%rax),%eax
  39:	0f b6 c0             	movzbl %al,%eax
  3c:	89 c7                	mov    %eax,%edi
  3e:	e8 00 00 00 00       	call   43 <HAL_SPI::Setup()+0x43>
  43:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  47:	8b 00                	mov    (%rax),%eax
  49:	89 c7                	mov    %eax,%edi
  4b:	e8 00 00 00 00       	call   50 <HAL_SPI::Setup()+0x50>
  50:	90                   	nop
  51:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  55:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  5c:	00 00 
  5e:	74 05                	je     65 <HAL_SPI::Setup()+0x65>
  60:	e8 00 00 00 00       	call   65 <HAL_SPI::Setup()+0x65>
  65:	c9                   	leave  
  66:	c3                   	ret    

Disassembly of section .text._ZN7HAL_SPIC2Ehjh:

0000000000000000 <HAL_SPI::HAL_SPI(unsigned char, unsigned int, unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 55 e0             	mov    %edx,-0x20(%rbp)
  13:	89 c8                	mov    %ecx,%eax
  15:	89 f2                	mov    %esi,%edx
  17:	88 55 e4             	mov    %dl,-0x1c(%rbp)
  1a:	88 45 dc             	mov    %al,-0x24(%rbp)
  1d:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  24:	00 00 
  26:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  2a:	31 c0                	xor    %eax,%eax
  2c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  30:	8b 55 e0             	mov    -0x20(%rbp),%edx
  33:	89 10                	mov    %edx,(%rax)
  35:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  39:	0f b6 55 e4          	movzbl -0x1c(%rbp),%edx
  3d:	88 50 04             	mov    %dl,0x4(%rax)
  40:	0f b6 45 dc          	movzbl -0x24(%rbp),%eax
  44:	83 e0 03             	and    $0x3,%eax
  47:	89 c2                	mov    %eax,%edx
  49:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4d:	88 50 05             	mov    %dl,0x5(%rax)
  50:	e8 00 00 00 00       	call   55 <HAL_SPI::HAL_SPI(unsigned char, unsigned int, unsigned char)+0x55>
  55:	90                   	nop
  56:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  5a:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  61:	00 00 
  63:	74 05                	je     6a <HAL_SPI::HAL_SPI(unsigned char, unsigned int, unsigned char)+0x6a>
  65:	e8 00 00 00 00       	call   6a <HAL_SPI::HAL_SPI(unsigned char, unsigned int, unsigned char)+0x6a>
  6a:	c9                   	leave  
  6b:	c3                   	ret    

Disassembly of section .text._ZN7HAL_SPI5WriteEPKcjb:

0000000000000000 <HAL_SPI::Write(char const*, unsigned int, bool)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  14:	89 55 dc             	mov    %edx,-0x24(%rbp)
  17:	89 c8                	mov    %ecx,%eax
  19:	88 45 d8             	mov    %al,-0x28(%rbp)
  1c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  23:	00 00 
  25:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  29:	31 c0                	xor    %eax,%eax
  2b:	80 7d d8 00          	cmpb   $0x0,-0x28(%rbp)
  2f:	74 0c                	je     3d <HAL_SPI::Write(char const*, unsigned int, bool)+0x3d>
  31:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  35:	48 89 c7             	mov    %rax,%rdi
  38:	e8 00 00 00 00       	call   3d <HAL_SPI::Write(char const*, unsigned int, bool)+0x3d>
  3d:	8b 55 dc             	mov    -0x24(%rbp),%edx
  40:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  44:	89 d6                	mov    %edx,%esi
  46:	48 89 c7             	mov    %rax,%rdi
  49:	e8 00 00 00 00       	call   4e <HAL_SPI::Write(char const*, unsigned int, bool)+0x4e>
  4e:	90                   	nop
  4f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  53:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  5a:	00 00 
  5c:	74 05                	je     63 <HAL_SPI::Write(char const*, unsigned int, bool)+0x63>
  5e:	e8 00 00 00 00       	call   63 <HAL_SPI::Write(char const*, unsigned int, bool)+0x63>
  63:	c9                   	leave  
  64:	c3                   	ret    

Disassembly of section .text._ZN7MAX7219C2Ej:

0000000000000000 <MAX7219::MAX7219(unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  13:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1a:	00 00 
  1c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  20:	31 c0                	xor    %eax,%eax
  22:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  26:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  29:	85 c0                	test   %eax,%eax
  2b:	74 19                	je     46 <MAX7219::MAX7219(unsigned int)+0x46>
  2d:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  30:	3d 80 96 98 00       	cmp    $0x989680,%eax
  35:	77 08                	ja     3f <MAX7219::MAX7219(unsigned int)+0x3f>
  37:	48 8d 45 e4          	lea    -0x1c(%rbp),%rax
  3b:	8b 00                	mov    (%rax),%eax
  3d:	eb 0c                	jmp    4b <MAX7219::MAX7219(unsigned int)+0x4b>
  3f:	b8 80 96 98 00       	mov    $0x989680,%eax
  44:	eb 05                	jmp    4b <MAX7219::MAX7219(unsigned int)+0x4b>
  46:	b8 80 84 1e 00       	mov    $0x1e8480,%eax
  4b:	b9 00 00 00 00       	mov    $0x0,%ecx
  50:	89 c2                	mov    %eax,%edx
  52:	be 00 00 00 00       	mov    $0x0,%esi
  57:	e8 00 00 00 00       	call   5c <MAX7219::MAX7219(unsigned int)+0x5c>
  5c:	90                   	nop
  5d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  61:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  68:	00 00 
  6a:	74 05                	je     71 <MAX7219::MAX7219(unsigned int)+0x71>
  6c:	e8 00 00 00 00       	call   71 <MAX7219::MAX7219(unsigned int)+0x71>
  71:	c9                   	leave  
  72:	c3                   	ret    

Disassembly of section .text._ZN13Max7219MatrixC2Ev:

0000000000000000 <Max7219Matrix::Max7219Matrix()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	53                   	push   %rbx
   9:	48 83 ec 38          	sub    $0x38,%rsp
   d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  11:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  18:	00 00 
  1a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  1e:	31 c0                	xor    %eax,%eax
  20:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  24:	be 00 00 00 00       	mov    $0x0,%esi
  29:	48 89 c7             	mov    %rax,%rdi
  2c:	e8 00 00 00 00       	call   31 <Max7219Matrix::Max7219Matrix()+0x31>
  31:	e8 00 00 00 00       	call   36 <Max7219Matrix::Max7219Matrix()+0x36>
  36:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  3a:	89 42 08             	mov    %eax,0x8(%rdx)
  3d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  41:	66 c7 40 18 04 00    	movw   $0x4,0x18(%rax)
  47:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4b:	8b 40 08             	mov    0x8(%rax),%eax
  4e:	c1 e0 03             	shl    $0x3,%eax
  51:	89 c0                	mov    %eax,%eax
  53:	48 89 c7             	mov    %rax,%rdi
  56:	e8 00 00 00 00       	call   5b <Max7219Matrix::Max7219Matrix()+0x5b>
  5b:	48 89 c2             	mov    %rax,%rdx
  5e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  62:	48 89 50 10          	mov    %rdx,0x10(%rax)
  66:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  6a:	48 8b 40 10          	mov    0x10(%rax),%rax
  6e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  72:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%rbp)
  79:	eb 40                	jmp    bb <Max7219Matrix::Max7219Matrix()+0xbb>
  7b:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%rbp)
  82:	eb 2d                	jmp    b1 <Max7219Matrix::Max7219Matrix()+0xb1>
  84:	b8 07 00 00 00       	mov    $0x7,%eax
  89:	2b 45 dc             	sub    -0x24(%rbp),%eax
  8c:	89 c2                	mov    %eax,%edx
  8e:	48 8b 5d e0          	mov    -0x20(%rbp),%rbx
  92:	48 8d 43 01          	lea    0x1(%rbx),%rax
  96:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  9a:	8b 4d d8             	mov    -0x28(%rbp),%ecx
  9d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  a1:	89 ce                	mov    %ecx,%esi
  a3:	48 89 c7             	mov    %rax,%rdi
  a6:	e8 00 00 00 00       	call   ab <Max7219Matrix::Max7219Matrix()+0xab>
  ab:	88 03                	mov    %al,(%rbx)
  ad:	83 45 dc 01          	addl   $0x1,-0x24(%rbp)
  b1:	83 7d dc 07          	cmpl   $0x7,-0x24(%rbp)
  b5:	76 cd                	jbe    84 <Max7219Matrix::Max7219Matrix()+0x84>
  b7:	83 45 d8 01          	addl   $0x1,-0x28(%rbp)
  bb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  bf:	8b 40 08             	mov    0x8(%rax),%eax
  c2:	39 45 d8             	cmp    %eax,-0x28(%rbp)
  c5:	72 b4                	jb     7b <Max7219Matrix::Max7219Matrix()+0x7b>
  c7:	90                   	nop
  c8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  cc:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  d3:	00 00 
  d5:	74 05                	je     dc <Max7219Matrix::Max7219Matrix()+0xdc>
  d7:	e8 00 00 00 00       	call   dc <Max7219Matrix::Max7219Matrix()+0xdc>
  dc:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  e0:	c9                   	leave  
  e1:	c3                   	ret    

Disassembly of section .text._ZN13Max7219MatrixD2Ev:

0000000000000000 <Max7219Matrix::~Max7219Matrix()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	48 8b 40 10          	mov    0x10(%rax),%rax
  27:	48 85 c0             	test   %rax,%rax
  2a:	74 10                	je     3c <Max7219Matrix::~Max7219Matrix()+0x3c>
  2c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  30:	48 8b 40 10          	mov    0x10(%rax),%rax
  34:	48 89 c7             	mov    %rax,%rdi
  37:	e8 00 00 00 00       	call   3c <Max7219Matrix::~Max7219Matrix()+0x3c>
  3c:	90                   	nop
  3d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  48:	00 00 
  4a:	74 05                	je     51 <Max7219Matrix::~Max7219Matrix()+0x51>
  4c:	e8 00 00 00 00       	call   51 <Max7219Matrix::~Max7219Matrix()+0x51>
  51:	c9                   	leave  
  52:	c3                   	ret    

Disassembly of section .text._ZN13Max7219Matrix4InitEth:

0000000000000000 <Max7219Matrix::Init(unsigned short, unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	66 89 45 e4          	mov    %ax,-0x1c(%rbp)
  16:	89 d0                	mov    %edx,%eax
  18:	88 45 e0             	mov    %al,-0x20(%rbp)
  1b:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  22:	00 00 
  24:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  28:	31 c0                	xor    %eax,%eax
  2a:	66 c7 45 f6 20 00    	movw   $0x20,-0xa(%rbp)
  30:	48 8d 55 f6          	lea    -0xa(%rbp),%rdx
  34:	48 8d 45 e4          	lea    -0x1c(%rbp),%rax
  38:	48 89 d6             	mov    %rdx,%rsi
  3b:	48 89 c7             	mov    %rax,%rdi
  3e:	e8 00 00 00 00       	call   43 <Max7219Matrix::Init(unsigned short, unsigned char)+0x43>
  43:	0f b7 10             	movzwl (%rax),%edx
  46:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4a:	66 89 50 18          	mov    %dx,0x18(%rax)
  4e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  52:	ba 01 00 00 00       	mov    $0x1,%edx
  57:	be 0c 00 00 00       	mov    $0xc,%esi
  5c:	48 89 c7             	mov    %rax,%rdi
  5f:	e8 00 00 00 00       	call   64 <Max7219Matrix::Init(unsigned short, unsigned char)+0x64>
  64:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  68:	ba 00 00 00 00       	mov    $0x0,%edx
  6d:	be 0f 00 00 00       	mov    $0xf,%esi
  72:	48 89 c7             	mov    %rax,%rdi
  75:	e8 00 00 00 00       	call   7a <Max7219Matrix::Init(unsigned short, unsigned char)+0x7a>
  7a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7e:	ba 00 00 00 00       	mov    $0x0,%edx
  83:	be 09 00 00 00       	mov    $0x9,%esi
  88:	48 89 c7             	mov    %rax,%rdi
  8b:	e8 00 00 00 00       	call   90 <Max7219Matrix::Init(unsigned short, unsigned char)+0x90>
  90:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  94:	ba 07 00 00 00       	mov    $0x7,%edx
  99:	be 0b 00 00 00       	mov    $0xb,%esi
  9e:	48 89 c7             	mov    %rax,%rdi
  a1:	e8 00 00 00 00       	call   a6 <Max7219Matrix::Init(unsigned short, unsigned char)+0xa6>
  a6:	0f b6 45 e0          	movzbl -0x20(%rbp),%eax
  aa:	83 e0 0f             	and    $0xf,%eax
  ad:	89 c2                	mov    %eax,%edx
  af:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  b3:	be 0a 00 00 00       	mov    $0xa,%esi
  b8:	48 89 c7             	mov    %rax,%rdi
  bb:	e8 00 00 00 00       	call   c0 <Max7219Matrix::Init(unsigned short, unsigned char)+0xc0>
  c0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  c4:	48 89 c7             	mov    %rax,%rdi
  c7:	e8 00 00 00 00       	call   cc <Max7219Matrix::Init(unsigned short, unsigned char)+0xcc>
  cc:	90                   	nop
  cd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  d1:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  d8:	00 00 
  da:	74 05                	je     e1 <Max7219Matrix::Init(unsigned short, unsigned char)+0xe1>
  dc:	e8 00 00 00 00       	call   e1 <Max7219Matrix::Init(unsigned short, unsigned char)+0xe1>
  e1:	c9                   	leave  
  e2:	c3                   	ret    

Disassembly of section .text._ZN13Max7219Matrix3ClsEv:

0000000000000000 <Max7219Matrix::Cls()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	ba 00 00 00 00       	mov    $0x0,%edx
  28:	be 01 00 00 00       	mov    $0x1,%esi
  2d:	48 89 c7             	mov    %rax,%rdi
  30:	e8 00 00 00 00       	call   35 <Max7219Matrix::Cls()+0x35>
  35:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  39:	ba 00 00 00 00       	mov    $0x0,%edx
  3e:	be 02 00 00 00       	mov    $0x2,%esi
  43:	48 89 c7             	mov    %rax,%rdi
  46:	e8 00 00 00 00       	call   4b <Max7219Matrix::Cls()+0x4b>
  4b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4f:	ba 00 00 00 00       	mov    $0x0,%edx
  54:	be 03 00 00 00       	mov    $0x3,%esi
  59:	48 89 c7             	mov    %rax,%rdi
  5c:	e8 00 00 00 00       	call   61 <Max7219Matrix::Cls()+0x61>
  61:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  65:	ba 00 00 00 00       	mov    $0x0,%edx
  6a:	be 04 00 00 00       	mov    $0x4,%esi
  6f:	48 89 c7             	mov    %rax,%rdi
  72:	e8 00 00 00 00       	call   77 <Max7219Matrix::Cls()+0x77>
  77:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7b:	ba 00 00 00 00       	mov    $0x0,%edx
  80:	be 05 00 00 00       	mov    $0x5,%esi
  85:	48 89 c7             	mov    %rax,%rdi
  88:	e8 00 00 00 00       	call   8d <Max7219Matrix::Cls()+0x8d>
  8d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  91:	ba 00 00 00 00       	mov    $0x0,%edx
  96:	be 06 00 00 00       	mov    $0x6,%esi
  9b:	48 89 c7             	mov    %rax,%rdi
  9e:	e8 00 00 00 00       	call   a3 <Max7219Matrix::Cls()+0xa3>
  a3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  a7:	ba 00 00 00 00       	mov    $0x0,%edx
  ac:	be 07 00 00 00       	mov    $0x7,%esi
  b1:	48 89 c7             	mov    %rax,%rdi
  b4:	e8 00 00 00 00       	call   b9 <Max7219Matrix::Cls()+0xb9>
  b9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  bd:	ba 00 00 00 00       	mov    $0x0,%edx
  c2:	be 08 00 00 00       	mov    $0x8,%esi
  c7:	48 89 c7             	mov    %rax,%rdi
  ca:	e8 00 00 00 00       	call   cf <Max7219Matrix::Cls()+0xcf>
  cf:	90                   	nop
  d0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  d4:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  db:	00 00 
  dd:	74 05                	je     e4 <Max7219Matrix::Cls()+0xe4>
  df:	e8 00 00 00 00       	call   e4 <Max7219Matrix::Cls()+0xe4>
  e4:	c9                   	leave  
  e5:	c3                   	ret    

Disassembly of section .text._ZN13Max7219Matrix5WriteEPKct:

0000000000000000 <Max7219Matrix::Write(char const*, unsigned short)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 40          	sub    $0x40,%rsp
   c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  14:	89 d0                	mov    %edx,%eax
  16:	66 89 45 cc          	mov    %ax,-0x34(%rbp)
  1a:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  21:	00 00 
  23:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  27:	31 c0                	xor    %eax,%eax
  29:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  2d:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  31:	66 39 45 cc          	cmp    %ax,-0x34(%rbp)
  35:	76 0c                	jbe    43 <Max7219Matrix::Write(char const*, unsigned short)+0x43>
  37:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  3b:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  3f:	66 89 45 cc          	mov    %ax,-0x34(%rbp)
  43:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%rbp)
  4a:	e9 19 01 00 00       	jmp    168 <Max7219Matrix::Write(char const*, unsigned short)+0x168>
  4f:	0f b7 45 cc          	movzwl -0x34(%rbp),%eax
  53:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  56:	66 c7 45 e2 00 00    	movw   $0x0,-0x1e(%rbp)
  5c:	eb 2a                	jmp    88 <Max7219Matrix::Write(char const*, unsigned short)+0x88>
  5e:	0f b7 45 e2          	movzwl -0x1e(%rbp),%eax
  62:	48 98                	cltq   
  64:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 6b <Max7219Matrix::Write(char const*, unsigned short)+0x6b>
  6b:	c6 04 10 00          	movb   $0x0,(%rax,%rdx,1)
  6f:	0f b7 45 e2          	movzwl -0x1e(%rbp),%eax
  73:	83 c0 01             	add    $0x1,%eax
  76:	48 98                	cltq   
  78:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 7f <Max7219Matrix::Write(char const*, unsigned short)+0x7f>
  7f:	c6 04 10 00          	movb   $0x0,(%rax,%rdx,1)
  83:	66 83 45 e2 02       	addw   $0x2,-0x1e(%rbp)
  88:	0f b7 55 e2          	movzwl -0x1e(%rbp),%edx
  8c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  90:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  94:	0f b7 c0             	movzwl %ax,%eax
  97:	0f b7 4d cc          	movzwl -0x34(%rbp),%ecx
  9b:	29 c8                	sub    %ecx,%eax
  9d:	01 c0                	add    %eax,%eax
  9f:	39 c2                	cmp    %eax,%edx
  a1:	72 bb                	jb     5e <Max7219Matrix::Write(char const*, unsigned short)+0x5e>
  a3:	e9 8c 00 00 00       	jmp    134 <Max7219Matrix::Write(char const*, unsigned short)+0x134>
  a8:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  ab:	48 63 d0             	movslq %eax,%rdx
  ae:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  b2:	48 01 d0             	add    %rdx,%rax
  b5:	0f b6 00             	movzbl (%rax),%eax
  b8:	0f be c0             	movsbl %al,%eax
  bb:	89 45 ec             	mov    %eax,-0x14(%rbp)
  be:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  c2:	8b 40 08             	mov    0x8(%rax),%eax
  c5:	39 45 ec             	cmp    %eax,-0x14(%rbp)
  c8:	72 07                	jb     d1 <Max7219Matrix::Write(char const*, unsigned short)+0xd1>
  ca:	c7 45 ec 20 00 00 00 	movl   $0x20,-0x14(%rbp)
  d1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  d5:	48 8b 50 10          	mov    0x10(%rax),%rdx
  d9:	8b 45 ec             	mov    -0x14(%rbp),%eax
  dc:	c1 e0 03             	shl    $0x3,%eax
  df:	89 c0                	mov    %eax,%eax
  e1:	48 01 d0             	add    %rdx,%rax
  e4:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  e8:	0f b7 45 e2          	movzwl -0x1e(%rbp),%eax
  ec:	8d 50 01             	lea    0x1(%rax),%edx
  ef:	66 89 55 e2          	mov    %dx,-0x1e(%rbp)
  f3:	0f b7 c0             	movzwl %ax,%eax
  f6:	8b 55 e8             	mov    -0x18(%rbp),%edx
  f9:	89 d1                	mov    %edx,%ecx
  fb:	48 98                	cltq   
  fd:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 104 <Max7219Matrix::Write(char const*, unsigned short)+0x104>
 104:	88 0c 10             	mov    %cl,(%rax,%rdx,1)
 107:	8b 45 e8             	mov    -0x18(%rbp),%eax
 10a:	83 e8 01             	sub    $0x1,%eax
 10d:	89 c2                	mov    %eax,%edx
 10f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 113:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
 117:	0f b7 45 e2          	movzwl -0x1e(%rbp),%eax
 11b:	8d 50 01             	lea    0x1(%rax),%edx
 11e:	66 89 55 e2          	mov    %dx,-0x1e(%rbp)
 122:	0f b7 c0             	movzwl %ax,%eax
 125:	0f b6 11             	movzbl (%rcx),%edx
 128:	48 98                	cltq   
 12a:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 131 <Max7219Matrix::Write(char const*, unsigned short)+0x131>
 131:	88 14 08             	mov    %dl,(%rax,%rcx,1)
 134:	83 6d e4 01          	subl   $0x1,-0x1c(%rbp)
 138:	8b 45 e4             	mov    -0x1c(%rbp),%eax
 13b:	f7 d0                	not    %eax
 13d:	c1 e8 1f             	shr    $0x1f,%eax
 140:	84 c0                	test   %al,%al
 142:	0f 85 60 ff ff ff    	jne    a8 <Max7219Matrix::Write(char const*, unsigned short)+0xa8>
 148:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 14c:	0f b7 55 e2          	movzwl -0x1e(%rbp),%edx
 150:	b9 01 00 00 00       	mov    $0x1,%ecx
 155:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 15c <Max7219Matrix::Write(char const*, unsigned short)+0x15c>
 15c:	48 89 c7             	mov    %rax,%rdi
 15f:	e8 00 00 00 00       	call   164 <Max7219Matrix::Write(char const*, unsigned short)+0x164>
 164:	83 45 e8 01          	addl   $0x1,-0x18(%rbp)
 168:	83 7d e8 08          	cmpl   $0x8,-0x18(%rbp)
 16c:	0f 86 dd fe ff ff    	jbe    4f <Max7219Matrix::Write(char const*, unsigned short)+0x4f>
 172:	90                   	nop
 173:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 177:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 17e:	00 00 
 180:	74 05                	je     187 <Max7219Matrix::Write(char const*, unsigned short)+0x187>
 182:	e8 00 00 00 00       	call   187 <Max7219Matrix::Write(char const*, unsigned short)+0x187>
 187:	c9                   	leave  
 188:	c3                   	ret    

Disassembly of section .text._ZN13Max7219Matrix15UpdateCharacterEjPKh:

0000000000000000 <Max7219Matrix::UpdateCharacter(unsigned int, unsigned char const*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 40          	sub    $0x40,%rsp
   c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10:	89 75 d4             	mov    %esi,-0x2c(%rbp)
  13:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  17:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1e:	00 00 
  20:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  24:	31 c0                	xor    %eax,%eax
  26:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  2a:	8b 40 08             	mov    0x8(%rax),%eax
  2d:	39 45 d4             	cmp    %eax,-0x2c(%rbp)
  30:	0f 87 99 00 00 00    	ja     cf <Max7219Matrix::UpdateCharacter(unsigned int, unsigned char const*)+0xcf>
  36:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  3a:	48 8b 50 10          	mov    0x10(%rax),%rdx
  3e:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  41:	c1 e0 03             	shl    $0x3,%eax
  44:	89 c0                	mov    %eax,%eax
  46:	48 01 d0             	add    %rdx,%rax
  49:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  4d:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  54:	eb 71                	jmp    c7 <Max7219Matrix::UpdateCharacter(unsigned int, unsigned char const*)+0xc7>
  56:	c6 45 e3 00          	movb   $0x0,-0x1d(%rbp)
  5a:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%rbp)
  61:	eb 4a                	jmp    ad <Max7219Matrix::UpdateCharacter(unsigned int, unsigned char const*)+0xad>
  63:	8b 55 e8             	mov    -0x18(%rbp),%edx
  66:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  6a:	48 01 d0             	add    %rdx,%rax
  6d:	0f b6 00             	movzbl (%rax),%eax
  70:	0f b6 d0             	movzbl %al,%edx
  73:	b8 07 00 00 00       	mov    $0x7,%eax
  78:	2b 45 e4             	sub    -0x1c(%rbp),%eax
  7b:	be 01 00 00 00       	mov    $0x1,%esi
  80:	89 c1                	mov    %eax,%ecx
  82:	d3 e6                	shl    %cl,%esi
  84:	89 f0                	mov    %esi,%eax
  86:	21 d0                	and    %edx,%eax
  88:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8b:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  8f:	74 10                	je     a1 <Max7219Matrix::UpdateCharacter(unsigned int, unsigned char const*)+0xa1>
  91:	8b 45 e8             	mov    -0x18(%rbp),%eax
  94:	ba 01 00 00 00       	mov    $0x1,%edx
  99:	89 c1                	mov    %eax,%ecx
  9b:	d3 e2                	shl    %cl,%edx
  9d:	89 d0                	mov    %edx,%eax
  9f:	eb 05                	jmp    a6 <Max7219Matrix::UpdateCharacter(unsigned int, unsigned char const*)+0xa6>
  a1:	b8 00 00 00 00       	mov    $0x0,%eax
  a6:	08 45 e3             	or     %al,-0x1d(%rbp)
  a9:	83 45 e8 01          	addl   $0x1,-0x18(%rbp)
  ad:	83 7d e8 07          	cmpl   $0x7,-0x18(%rbp)
  b1:	76 b0                	jbe    63 <Max7219Matrix::UpdateCharacter(unsigned int, unsigned char const*)+0x63>
  b3:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  b6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  ba:	48 01 c2             	add    %rax,%rdx
  bd:	0f b6 45 e3          	movzbl -0x1d(%rbp),%eax
  c1:	88 02                	mov    %al,(%rdx)
  c3:	83 45 e4 01          	addl   $0x1,-0x1c(%rbp)
  c7:	83 7d e4 07          	cmpl   $0x7,-0x1c(%rbp)
  cb:	76 89                	jbe    56 <Max7219Matrix::UpdateCharacter(unsigned int, unsigned char const*)+0x56>
  cd:	eb 01                	jmp    d0 <Max7219Matrix::UpdateCharacter(unsigned int, unsigned char const*)+0xd0>
  cf:	90                   	nop
  d0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  d4:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  db:	00 00 
  dd:	74 05                	je     e4 <Max7219Matrix::UpdateCharacter(unsigned int, unsigned char const*)+0xe4>
  df:	e8 00 00 00 00       	call   e4 <Max7219Matrix::UpdateCharacter(unsigned int, unsigned char const*)+0xe4>
  e4:	c9                   	leave  
  e5:	c3                   	ret    

Disassembly of section .text._ZN13Max7219Matrix8WriteAllEhh:

0000000000000000 <Max7219Matrix::WriteAll(unsigned char, unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f1                	mov    %esi,%ecx
  12:	89 d0                	mov    %edx,%eax
  14:	89 ca                	mov    %ecx,%edx
  16:	88 55 e4             	mov    %dl,-0x1c(%rbp)
  19:	88 45 e0             	mov    %al,-0x20(%rbp)
  1c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  23:	00 00 
  25:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  29:	31 c0                	xor    %eax,%eax
  2b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  32:	eb 2b                	jmp    5f <Max7219Matrix::WriteAll(unsigned char, unsigned char)+0x5f>
  34:	8b 45 f4             	mov    -0xc(%rbp),%eax
  37:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 3e <Max7219Matrix::WriteAll(unsigned char, unsigned char)+0x3e>
  3e:	0f b6 55 e4          	movzbl -0x1c(%rbp),%edx
  42:	88 14 08             	mov    %dl,(%rax,%rcx,1)
  45:	8b 45 f4             	mov    -0xc(%rbp),%eax
  48:	83 c0 01             	add    $0x1,%eax
  4b:	89 c1                	mov    %eax,%ecx
  4d:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 54 <Max7219Matrix::WriteAll(unsigned char, unsigned char)+0x54>
  54:	0f b6 45 e0          	movzbl -0x20(%rbp),%eax
  58:	88 04 11             	mov    %al,(%rcx,%rdx,1)
  5b:	83 45 f4 02          	addl   $0x2,-0xc(%rbp)
  5f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  63:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  67:	0f b7 c0             	movzwl %ax,%eax
  6a:	01 c0                	add    %eax,%eax
  6c:	39 45 f4             	cmp    %eax,-0xc(%rbp)
  6f:	72 c3                	jb     34 <Max7219Matrix::WriteAll(unsigned char, unsigned char)+0x34>
  71:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  75:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  79:	0f b7 52 18          	movzwl 0x18(%rdx),%edx
  7d:	0f b7 d2             	movzwl %dx,%edx
  80:	01 d2                	add    %edx,%edx
  82:	b9 01 00 00 00       	mov    $0x1,%ecx
  87:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 8e <Max7219Matrix::WriteAll(unsigned char, unsigned char)+0x8e>
  8e:	48 89 c7             	mov    %rax,%rdi
  91:	e8 00 00 00 00       	call   96 <Max7219Matrix::WriteAll(unsigned char, unsigned char)+0x96>
  96:	90                   	nop
  97:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  9b:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  a2:	00 00 
  a4:	74 05                	je     ab <Max7219Matrix::WriteAll(unsigned char, unsigned char)+0xab>
  a6:	e8 00 00 00 00       	call   ab <Max7219Matrix::WriteAll(unsigned char, unsigned char)+0xab>
  ab:	c9                   	leave  
  ac:	c3                   	ret    

Disassembly of section .text._ZN13Max7219Matrix6RotateEjj:

0000000000000000 <Max7219Matrix::Rotate(unsigned int, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10:	89 75 d4             	mov    %esi,-0x2c(%rbp)
  13:	89 55 d0             	mov    %edx,-0x30(%rbp)
  16:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1d:	00 00 
  1f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  23:	31 c0                	xor    %eax,%eax
  25:	c6 45 ef 00          	movb   $0x0,-0x11(%rbp)
  29:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
  30:	eb 52                	jmp    84 <Max7219Matrix::Rotate(unsigned int, unsigned int)+0x84>
  32:	8b 55 f0             	mov    -0x10(%rbp),%edx
  35:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  38:	48 c1 e0 03          	shl    $0x3,%rax
  3c:	48 01 c2             	add    %rax,%rdx
  3f:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 46 <Max7219Matrix::Rotate(unsigned int, unsigned int)+0x46>
  46:	48 01 d0             	add    %rdx,%rax
  49:	0f b6 00             	movzbl (%rax),%eax
  4c:	0f b6 d0             	movzbl %al,%edx
  4f:	8b 45 d0             	mov    -0x30(%rbp),%eax
  52:	be 01 00 00 00       	mov    $0x1,%esi
  57:	89 c1                	mov    %eax,%ecx
  59:	d3 e6                	shl    %cl,%esi
  5b:	89 f0                	mov    %esi,%eax
  5d:	21 d0                	and    %edx,%eax
  5f:	89 45 f4             	mov    %eax,-0xc(%rbp)
  62:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
  66:	74 10                	je     78 <Max7219Matrix::Rotate(unsigned int, unsigned int)+0x78>
  68:	8b 45 f0             	mov    -0x10(%rbp),%eax
  6b:	ba 01 00 00 00       	mov    $0x1,%edx
  70:	89 c1                	mov    %eax,%ecx
  72:	d3 e2                	shl    %cl,%edx
  74:	89 d0                	mov    %edx,%eax
  76:	eb 05                	jmp    7d <Max7219Matrix::Rotate(unsigned int, unsigned int)+0x7d>
  78:	b8 00 00 00 00       	mov    $0x0,%eax
  7d:	08 45 ef             	or     %al,-0x11(%rbp)
  80:	83 45 f0 01          	addl   $0x1,-0x10(%rbp)
  84:	83 7d f0 07          	cmpl   $0x7,-0x10(%rbp)
  88:	76 a8                	jbe    32 <Max7219Matrix::Rotate(unsigned int, unsigned int)+0x32>
  8a:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
  8e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  92:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  99:	00 00 
  9b:	74 05                	je     a2 <Max7219Matrix::Rotate(unsigned int, unsigned int)+0xa2>
  9d:	e8 00 00 00 00       	call   a2 <Max7219Matrix::Rotate(unsigned int, unsigned int)+0xa2>
  a2:	c9                   	leave  
  a3:	c3                   	ret    

Disassembly of section .text._ZSt3minItERKT_S2_S2_:

0000000000000000 <unsigned short const& std::min<unsigned short>(unsigned short const&, unsigned short const&)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  27:	0f b7 10             	movzwl (%rax),%edx
  2a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2e:	0f b7 00             	movzwl (%rax),%eax
  31:	66 39 c2             	cmp    %ax,%dx
  34:	73 06                	jae    3c <unsigned short const& std::min<unsigned short>(unsigned short const&, unsigned short const&)+0x3c>
  36:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  3a:	eb 04                	jmp    40 <unsigned short const& std::min<unsigned short>(unsigned short const&, unsigned short const&)+0x40>
  3c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  44:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  4b:	00 00 
  4d:	74 05                	je     54 <unsigned short const& std::min<unsigned short>(unsigned short const&, unsigned short const&)+0x54>
  4f:	e8 00 00 00 00       	call   54 <unsigned short const& std::min<unsigned short>(unsigned short const&, unsigned short const&)+0x54>
  54:	c9                   	leave  
  55:	c3                   	ret    

mcp3424.o:     file format elf64-x86-64


Disassembly of section .text._ZL16i2c_set_baudratej:

0000000000000000 <i2c_set_baudrate(unsigned int)>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	89 7d ec             	mov    %edi,-0x14(%rbp)
   b:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  12:	00 00 
  14:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  18:	31 c0                	xor    %eax,%eax
  1a:	90                   	nop
  1b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1f:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  26:	00 00 
  28:	74 05                	je     2f <i2c_set_baudrate(unsigned int)+0x2f>
  2a:	e8 00 00 00 00       	call   2f <i2c_set_baudrate(unsigned int)+0x2f>
  2f:	c9                   	leave  
  30:	c3                   	ret    

Disassembly of section .text._ZL15i2c_set_addressh:

0000000000000000 <i2c_set_address(unsigned char)>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	89 f8                	mov    %edi,%eax
   a:	88 45 ec             	mov    %al,-0x14(%rbp)
   d:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  14:	00 00 
  16:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1a:	31 c0                	xor    %eax,%eax
  1c:	90                   	nop
  1d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  21:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  28:	00 00 
  2a:	74 05                	je     31 <i2c_set_address(unsigned char)+0x31>
  2c:	e8 00 00 00 00       	call   31 <i2c_set_address(unsigned char)+0x31>
  31:	c9                   	leave  
  32:	c3                   	ret    

Disassembly of section .text._ZL9i2c_writePKcj:

0000000000000000 <i2c_write(char const*, unsigned int)>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	89 75 e4             	mov    %esi,-0x1c(%rbp)
   f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  16:	00 00 
  18:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1c:	31 c0                	xor    %eax,%eax
  1e:	b8 01 00 00 00       	mov    $0x1,%eax
  23:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  27:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  2e:	00 00 
  30:	74 05                	je     37 <i2c_write(char const*, unsigned int)+0x37>
  32:	e8 00 00 00 00       	call   37 <i2c_write(char const*, unsigned int)+0x37>
  37:	c9                   	leave  
  38:	c3                   	ret    

Disassembly of section .text._ZL8i2c_readPcj:

0000000000000000 <i2c_read(char*, unsigned int)>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	89 75 e4             	mov    %esi,-0x1c(%rbp)
   f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  16:	00 00 
  18:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1c:	31 c0                	xor    %eax,%eax
  1e:	b8 01 00 00 00       	mov    $0x1,%eax
  23:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  27:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  2e:	00 00 
  30:	74 05                	je     37 <i2c_read(char*, unsigned int)+0x37>
  32:	e8 00 00 00 00       	call   37 <i2c_read(char*, unsigned int)+0x37>
  37:	c9                   	leave  
  38:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2CC2Ehj:

0000000000000000 <HAL_I2C::HAL_I2C(unsigned char, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	89 55 e0             	mov    %edx,-0x20(%rbp)
  15:	88 45 e4             	mov    %al,-0x1c(%rbp)
  18:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1f:	00 00 
  21:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  25:	31 c0                	xor    %eax,%eax
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2b:	0f b6 55 e4          	movzbl -0x1c(%rbp),%edx
  2f:	88 10                	mov    %dl,(%rax)
  31:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  35:	8b 55 e0             	mov    -0x20(%rbp),%edx
  38:	89 50 04             	mov    %edx,0x4(%rax)
  3b:	90                   	nop
  3c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  47:	00 00 
  49:	74 05                	je     50 <HAL_I2C::HAL_I2C(unsigned char, unsigned int)+0x50>
  4b:	e8 00 00 00 00       	call   50 <HAL_I2C::HAL_I2C(unsigned char, unsigned int)+0x50>
  50:	c9                   	leave  
  51:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2C11IsConnectedEv:

0000000000000000 <HAL_I2C::IsConnected()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	8b 50 04             	mov    0x4(%rax),%edx
  26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2a:	0f b6 00             	movzbl (%rax),%eax
  2d:	0f b6 c0             	movzbl %al,%eax
  30:	89 d6                	mov    %edx,%esi
  32:	89 c7                	mov    %eax,%edi
  34:	e8 00 00 00 00       	call   39 <HAL_I2C::IsConnected()+0x39>
  39:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  3d:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  44:	00 00 
  46:	74 05                	je     4d <HAL_I2C::IsConnected()+0x4d>
  48:	e8 00 00 00 00       	call   4d <HAL_I2C::IsConnected()+0x4d>
  4d:	c9                   	leave  
  4e:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2C5WriteEh:

0000000000000000 <HAL_I2C::Write(unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	88 45 e4             	mov    %al,-0x1c(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  28:	48 89 c7             	mov    %rax,%rdi
  2b:	e8 00 00 00 00       	call   30 <HAL_I2C::Write(unsigned char)+0x30>
  30:	0f b6 45 e4          	movzbl -0x1c(%rbp),%eax
  34:	88 45 f7             	mov    %al,-0x9(%rbp)
  37:	48 8d 45 f7          	lea    -0x9(%rbp),%rax
  3b:	be 01 00 00 00       	mov    $0x1,%esi
  40:	48 89 c7             	mov    %rax,%rdi
  43:	e8 00 00 00 00       	call   48 <HAL_I2C::Write(unsigned char)+0x48>
  48:	90                   	nop
  49:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4d:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  54:	00 00 
  56:	74 05                	je     5d <HAL_I2C::Write(unsigned char)+0x5d>
  58:	e8 00 00 00 00       	call   5d <HAL_I2C::Write(unsigned char)+0x5d>
  5d:	c9                   	leave  
  5e:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2C4ReadEPcj:

0000000000000000 <HAL_I2C::Read(char*, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  14:	89 55 dc             	mov    %edx,-0x24(%rbp)
  17:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1e:	00 00 
  20:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  24:	31 c0                	xor    %eax,%eax
  26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2a:	48 89 c7             	mov    %rax,%rdi
  2d:	e8 00 00 00 00       	call   32 <HAL_I2C::Read(char*, unsigned int)+0x32>
  32:	8b 55 dc             	mov    -0x24(%rbp),%edx
  35:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  39:	89 d6                	mov    %edx,%esi
  3b:	48 89 c7             	mov    %rax,%rdi
  3e:	e8 00 00 00 00       	call   43 <HAL_I2C::Read(char*, unsigned int)+0x43>
  43:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  47:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  4e:	00 00 
  50:	74 05                	je     57 <HAL_I2C::Read(char*, unsigned int)+0x57>
  52:	e8 00 00 00 00       	call   57 <HAL_I2C::Read(char*, unsigned int)+0x57>
  57:	c9                   	leave  
  58:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2C5SetupEv:

0000000000000000 <HAL_I2C::Setup()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	0f b6 00             	movzbl (%rax),%eax
  26:	0f b6 c0             	movzbl %al,%eax
  29:	89 c7                	mov    %eax,%edi
  2b:	e8 00 00 00 00       	call   30 <HAL_I2C::Setup()+0x30>
  30:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  34:	8b 40 04             	mov    0x4(%rax),%eax
  37:	89 c7                	mov    %eax,%edi
  39:	e8 00 00 00 00       	call   3e <HAL_I2C::Setup()+0x3e>
  3e:	90                   	nop
  3f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  4a:	00 00 
  4c:	74 05                	je     53 <HAL_I2C::Setup()+0x53>
  4e:	e8 00 00 00 00       	call   53 <HAL_I2C::Setup()+0x53>
  53:	c9                   	leave  
  54:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2C12IsConnected_Ehj:

0000000000000000 <HAL_I2C::IsConnected_(unsigned char, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	89 f8                	mov    %edi,%eax
   e:	89 75 e8             	mov    %esi,-0x18(%rbp)
  11:	88 45 ec             	mov    %al,-0x14(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	0f b6 45 ec          	movzbl -0x14(%rbp),%eax
  27:	89 c7                	mov    %eax,%edi
  29:	e8 00 00 00 00       	call   2e <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x2e>
  2e:	8b 45 e8             	mov    -0x18(%rbp),%eax
  31:	89 c7                	mov    %eax,%edi
  33:	e8 00 00 00 00       	call   38 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x38>
  38:	80 7d ec 2f          	cmpb   $0x2f,-0x14(%rbp)
  3c:	76 06                	jbe    44 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x44>
  3e:	80 7d ec 37          	cmpb   $0x37,-0x14(%rbp)
  42:	76 0c                	jbe    50 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x50>
  44:	80 7d ec 4f          	cmpb   $0x4f,-0x14(%rbp)
  48:	76 1e                	jbe    68 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x68>
  4a:	80 7d ec 5f          	cmpb   $0x5f,-0x14(%rbp)
  4e:	77 18                	ja     68 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x68>
  50:	48 8d 45 f7          	lea    -0x9(%rbp),%rax
  54:	be 01 00 00 00       	mov    $0x1,%esi
  59:	48 89 c7             	mov    %rax,%rdi
  5c:	e8 00 00 00 00       	call   61 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x61>
  61:	84 c0                	test   %al,%al
  63:	0f 94 c0             	sete   %al
  66:	eb 14                	jmp    7c <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x7c>
  68:	be 00 00 00 00       	mov    $0x0,%esi
  6d:	bf 00 00 00 00       	mov    $0x0,%edi
  72:	e8 00 00 00 00       	call   77 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x77>
  77:	84 c0                	test   %al,%al
  79:	0f 94 c0             	sete   %al
  7c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  87:	00 00 
  89:	74 05                	je     90 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x90>
  8b:	e8 00 00 00 00       	call   90 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x90>
  90:	c9                   	leave  
  91:	c3                   	ret    

Disassembly of section .text._ZN3adc7mcp3424L4GAINENS0_4GainE:

0000000000000000 <adc::mcp3424::GAIN(adc::mcp3424::Gain)>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	89 7d ec             	mov    %edi,-0x14(%rbp)
   b:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  12:	00 00 
  14:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  18:	31 c0                	xor    %eax,%eax
  1a:	8b 45 ec             	mov    -0x14(%rbp),%eax
  1d:	83 e0 03             	and    $0x3,%eax
  20:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  24:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  2b:	00 00 
  2d:	74 05                	je     34 <adc::mcp3424::GAIN(adc::mcp3424::Gain)+0x34>
  2f:	e8 00 00 00 00       	call   34 <adc::mcp3424::GAIN(adc::mcp3424::Gain)+0x34>
  34:	c9                   	leave  
  35:	c3                   	ret    

Disassembly of section .text._ZN3adc7mcp3424L10RESOLUTIONENS0_10ResolutionE:

0000000000000000 <adc::mcp3424::RESOLUTION(adc::mcp3424::Resolution)>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	89 7d ec             	mov    %edi,-0x14(%rbp)
   b:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  12:	00 00 
  14:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  18:	31 c0                	xor    %eax,%eax
  1a:	8b 45 ec             	mov    -0x14(%rbp),%eax
  1d:	0f b6 c0             	movzbl %al,%eax
  20:	c1 e0 02             	shl    $0x2,%eax
  23:	83 e0 0c             	and    $0xc,%eax
  26:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  2a:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  31:	00 00 
  33:	74 05                	je     3a <adc::mcp3424::RESOLUTION(adc::mcp3424::Resolution)+0x3a>
  35:	e8 00 00 00 00       	call   3a <adc::mcp3424::RESOLUTION(adc::mcp3424::Resolution)+0x3a>
  3a:	c9                   	leave  
  3b:	c3                   	ret    

Disassembly of section .text._ZN3adc7mcp3424L10CONVERSIONENS0_10ConversionE:

0000000000000000 <adc::mcp3424::CONVERSION(adc::mcp3424::Conversion)>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	89 7d ec             	mov    %edi,-0x14(%rbp)
   b:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  12:	00 00 
  14:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  18:	31 c0                	xor    %eax,%eax
  1a:	8b 45 ec             	mov    -0x14(%rbp),%eax
  1d:	0f b6 c0             	movzbl %al,%eax
  20:	c1 e0 04             	shl    $0x4,%eax
  23:	83 e0 10             	and    $0x10,%eax
  26:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  2a:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  31:	00 00 
  33:	74 05                	je     3a <adc::mcp3424::CONVERSION(adc::mcp3424::Conversion)+0x3a>
  35:	e8 00 00 00 00       	call   3a <adc::mcp3424::CONVERSION(adc::mcp3424::Conversion)+0x3a>
  3a:	c9                   	leave  
  3b:	c3                   	ret    

Disassembly of section .text._ZN3adc7mcp3424L7CHANNELEj:

0000000000000000 <adc::mcp3424::CHANNEL(unsigned int)>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	89 7d ec             	mov    %edi,-0x14(%rbp)
   b:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  12:	00 00 
  14:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  18:	31 c0                	xor    %eax,%eax
  1a:	8b 45 ec             	mov    -0x14(%rbp),%eax
  1d:	c1 e0 05             	shl    $0x5,%eax
  20:	83 e0 60             	and    $0x60,%eax
  23:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  27:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  2e:	00 00 
  30:	74 05                	je     37 <adc::mcp3424::CHANNEL(unsigned int)+0x37>
  32:	e8 00 00 00 00       	call   37 <adc::mcp3424::CHANNEL(unsigned int)+0x37>
  37:	c9                   	leave  
  38:	c3                   	ret    

Disassembly of section .text._ZN7MCP3424C2Eh:

0000000000000000 <MCP3424::MCP3424(unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	88 45 e4             	mov    %al,-0x1c(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  28:	0f b6 45 e4          	movzbl -0x1c(%rbp),%eax
  2c:	84 c0                	test   %al,%al
  2e:	74 0c                	je     3c <MCP3424::MCP3424(unsigned char)+0x3c>
  30:	48 8d 45 e4          	lea    -0x1c(%rbp),%rax
  34:	0f b6 00             	movzbl (%rax),%eax
  37:	0f b6 c0             	movzbl %al,%eax
  3a:	eb 05                	jmp    41 <MCP3424::MCP3424(unsigned char)+0x41>
  3c:	b8 68 00 00 00       	mov    $0x68,%eax
  41:	ba 80 1a 06 00       	mov    $0x61a80,%edx
  46:	89 c6                	mov    %eax,%esi
  48:	48 89 cf             	mov    %rcx,%rdi
  4b:	e8 00 00 00 00       	call   50 <MCP3424::MCP3424(unsigned char)+0x50>
  50:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  54:	c6 40 08 00          	movb   $0x0,0x8(%rax)
  58:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5c:	48 89 c7             	mov    %rax,%rdi
  5f:	e8 00 00 00 00       	call   64 <MCP3424::MCP3424(unsigned char)+0x64>
  64:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  68:	88 42 08             	mov    %al,0x8(%rdx)
  6b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  6f:	0f b6 40 08          	movzbl 0x8(%rax),%eax
  73:	84 c0                	test   %al,%al
  75:	74 33                	je     aa <MCP3424::MCP3424(unsigned char)+0xaa>
  77:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7b:	be 00 00 00 00       	mov    $0x0,%esi
  80:	48 89 c7             	mov    %rax,%rdi
  83:	e8 00 00 00 00       	call   88 <MCP3424::MCP3424(unsigned char)+0x88>
  88:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8c:	be 00 00 00 00       	mov    $0x0,%esi
  91:	48 89 c7             	mov    %rax,%rdi
  94:	e8 00 00 00 00       	call   99 <MCP3424::MCP3424(unsigned char)+0x99>
  99:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  9d:	be 01 00 00 00       	mov    $0x1,%esi
  a2:	48 89 c7             	mov    %rax,%rdi
  a5:	e8 00 00 00 00       	call   aa <MCP3424::MCP3424(unsigned char)+0xaa>
  aa:	90                   	nop
  ab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  af:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  b6:	00 00 
  b8:	74 05                	je     bf <MCP3424::MCP3424(unsigned char)+0xbf>
  ba:	e8 00 00 00 00       	call   bf <MCP3424::MCP3424(unsigned char)+0xbf>
  bf:	c9                   	leave  
  c0:	c3                   	ret    

Disassembly of section .text._ZN7MCP34247SetGainEN3adc7mcp34244GainE:

0000000000000000 <MCP3424::SetGain(adc::mcp3424::Gain)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  13:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1a:	00 00 
  1c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  20:	31 c0                	xor    %eax,%eax
  22:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  26:	0f b6 40 09          	movzbl 0x9(%rax),%eax
  2a:	83 e0 fc             	and    $0xfffffffc,%eax
  2d:	89 c2                	mov    %eax,%edx
  2f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  33:	88 50 09             	mov    %dl,0x9(%rax)
  36:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  39:	89 c7                	mov    %eax,%edi
  3b:	e8 00 00 00 00       	call   40 <MCP3424::SetGain(adc::mcp3424::Gain)+0x40>
  40:	89 c2                	mov    %eax,%edx
  42:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  46:	0f b6 40 09          	movzbl 0x9(%rax),%eax
  4a:	09 c2                	or     %eax,%edx
  4c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  50:	88 50 09             	mov    %dl,0x9(%rax)
  53:	90                   	nop
  54:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  58:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  5f:	00 00 
  61:	74 05                	je     68 <MCP3424::SetGain(adc::mcp3424::Gain)+0x68>
  63:	e8 00 00 00 00       	call   68 <MCP3424::SetGain(adc::mcp3424::Gain)+0x68>
  68:	c9                   	leave  
  69:	c3                   	ret    

Disassembly of section .text._ZNK7MCP34247GetGainEv:

0000000000000000 <MCP3424::GetGain() const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	0f b6 40 09          	movzbl 0x9(%rax),%eax
  27:	0f b6 c0             	movzbl %al,%eax
  2a:	83 e0 03             	and    $0x3,%eax
  2d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  31:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  38:	00 00 
  3a:	74 05                	je     41 <MCP3424::GetGain() const+0x41>
  3c:	e8 00 00 00 00       	call   41 <MCP3424::GetGain() const+0x41>
  41:	c9                   	leave  
  42:	c3                   	ret    

Disassembly of section .text._ZN7MCP342413SetResolutionEN3adc7mcp342410ResolutionE:

0000000000000000 <MCP3424::SetResolution(adc::mcp3424::Resolution)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  13:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1a:	00 00 
  1c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  20:	31 c0                	xor    %eax,%eax
  22:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  26:	0f b6 40 09          	movzbl 0x9(%rax),%eax
  2a:	83 e0 f3             	and    $0xfffffff3,%eax
  2d:	89 c2                	mov    %eax,%edx
  2f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  33:	88 50 09             	mov    %dl,0x9(%rax)
  36:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  39:	89 c7                	mov    %eax,%edi
  3b:	e8 00 00 00 00       	call   40 <MCP3424::SetResolution(adc::mcp3424::Resolution)+0x40>
  40:	89 c2                	mov    %eax,%edx
  42:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  46:	0f b6 40 09          	movzbl 0x9(%rax),%eax
  4a:	09 c2                	or     %eax,%edx
  4c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  50:	88 50 09             	mov    %dl,0x9(%rax)
  53:	83 7d e4 03          	cmpl   $0x3,-0x1c(%rbp)
  57:	74 59                	je     b2 <MCP3424::SetResolution(adc::mcp3424::Resolution)+0xb2>
  59:	83 7d e4 03          	cmpl   $0x3,-0x1c(%rbp)
  5d:	7f 66                	jg     c5 <MCP3424::SetResolution(adc::mcp3424::Resolution)+0xc5>
  5f:	83 7d e4 02          	cmpl   $0x2,-0x1c(%rbp)
  63:	74 3a                	je     9f <MCP3424::SetResolution(adc::mcp3424::Resolution)+0x9f>
  65:	83 7d e4 02          	cmpl   $0x2,-0x1c(%rbp)
  69:	7f 5a                	jg     c5 <MCP3424::SetResolution(adc::mcp3424::Resolution)+0xc5>
  6b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  6f:	74 08                	je     79 <MCP3424::SetResolution(adc::mcp3424::Resolution)+0x79>
  71:	83 7d e4 01          	cmpl   $0x1,-0x1c(%rbp)
  75:	74 15                	je     8c <MCP3424::SetResolution(adc::mcp3424::Resolution)+0x8c>
  77:	eb 4c                	jmp    c5 <MCP3424::SetResolution(adc::mcp3424::Resolution)+0xc5>
  79:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7d:	f2 0f 10 05 00 00 00 	movsd  0x0(%rip),%xmm0        # 85 <MCP3424::SetResolution(adc::mcp3424::Resolution)+0x85>
  84:	00 
  85:	f2 0f 11 40 10       	movsd  %xmm0,0x10(%rax)
  8a:	eb 39                	jmp    c5 <MCP3424::SetResolution(adc::mcp3424::Resolution)+0xc5>
  8c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  90:	f2 0f 10 05 00 00 00 	movsd  0x0(%rip),%xmm0        # 98 <MCP3424::SetResolution(adc::mcp3424::Resolution)+0x98>
  97:	00 
  98:	f2 0f 11 40 10       	movsd  %xmm0,0x10(%rax)
  9d:	eb 26                	jmp    c5 <MCP3424::SetResolution(adc::mcp3424::Resolution)+0xc5>
  9f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  a3:	f2 0f 10 05 00 00 00 	movsd  0x0(%rip),%xmm0        # ab <MCP3424::SetResolution(adc::mcp3424::Resolution)+0xab>
  aa:	00 
  ab:	f2 0f 11 40 10       	movsd  %xmm0,0x10(%rax)
  b0:	eb 13                	jmp    c5 <MCP3424::SetResolution(adc::mcp3424::Resolution)+0xc5>
  b2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  b6:	f2 0f 10 05 00 00 00 	movsd  0x0(%rip),%xmm0        # be <MCP3424::SetResolution(adc::mcp3424::Resolution)+0xbe>
  bd:	00 
  be:	f2 0f 11 40 10       	movsd  %xmm0,0x10(%rax)
  c3:	eb 00                	jmp    c5 <MCP3424::SetResolution(adc::mcp3424::Resolution)+0xc5>
  c5:	90                   	nop
  c6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  ca:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  d1:	00 00 
  d3:	74 05                	je     da <MCP3424::SetResolution(adc::mcp3424::Resolution)+0xda>
  d5:	e8 00 00 00 00       	call   da <MCP3424::SetResolution(adc::mcp3424::Resolution)+0xda>
  da:	c9                   	leave  
  db:	c3                   	ret    

Disassembly of section .text._ZNK7MCP342413GetResolutionEv:

0000000000000000 <MCP3424::GetResolution() const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	0f b6 40 09          	movzbl 0x9(%rax),%eax
  27:	c0 e8 02             	shr    $0x2,%al
  2a:	0f b6 c0             	movzbl %al,%eax
  2d:	83 e0 03             	and    $0x3,%eax
  30:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  34:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  3b:	00 00 
  3d:	74 05                	je     44 <MCP3424::GetResolution() const+0x44>
  3f:	e8 00 00 00 00       	call   44 <MCP3424::GetResolution() const+0x44>
  44:	c9                   	leave  
  45:	c3                   	ret    

Disassembly of section .text._ZN7MCP342413SetConversionEN3adc7mcp342410ConversionE:

0000000000000000 <MCP3424::SetConversion(adc::mcp3424::Conversion)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  13:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1a:	00 00 
  1c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  20:	31 c0                	xor    %eax,%eax
  22:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  26:	0f b6 40 09          	movzbl 0x9(%rax),%eax
  2a:	83 e0 ef             	and    $0xffffffef,%eax
  2d:	89 c2                	mov    %eax,%edx
  2f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  33:	88 50 09             	mov    %dl,0x9(%rax)
  36:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  39:	89 c7                	mov    %eax,%edi
  3b:	e8 00 00 00 00       	call   40 <MCP3424::SetConversion(adc::mcp3424::Conversion)+0x40>
  40:	89 c2                	mov    %eax,%edx
  42:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  46:	0f b6 40 09          	movzbl 0x9(%rax),%eax
  4a:	09 c2                	or     %eax,%edx
  4c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  50:	88 50 09             	mov    %dl,0x9(%rax)
  53:	90                   	nop
  54:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  58:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  5f:	00 00 
  61:	74 05                	je     68 <MCP3424::SetConversion(adc::mcp3424::Conversion)+0x68>
  63:	e8 00 00 00 00       	call   68 <MCP3424::SetConversion(adc::mcp3424::Conversion)+0x68>
  68:	c9                   	leave  
  69:	c3                   	ret    

Disassembly of section .text._ZNK7MCP342413GetConversionEv:

0000000000000000 <MCP3424::GetConversion() const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	0f b6 40 09          	movzbl 0x9(%rax),%eax
  27:	c0 e8 04             	shr    $0x4,%al
  2a:	0f b6 c0             	movzbl %al,%eax
  2d:	83 e0 01             	and    $0x1,%eax
  30:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  34:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  3b:	00 00 
  3d:	74 05                	je     44 <MCP3424::GetConversion() const+0x44>
  3f:	e8 00 00 00 00       	call   44 <MCP3424::GetConversion() const+0x44>
  44:	c9                   	leave  
  45:	c3                   	ret    

Disassembly of section .text._ZN7MCP34246GetRawEj:

0000000000000000 <MCP3424::GetRaw(unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	53                   	push   %rbx
   9:	48 83 ec 38          	sub    $0x38,%rsp
   d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  11:	89 75 c4             	mov    %esi,-0x3c(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  27:	0f b6 40 09          	movzbl 0x9(%rax),%eax
  2b:	83 e0 9f             	and    $0xffffff9f,%eax
  2e:	89 c2                	mov    %eax,%edx
  30:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  34:	88 50 09             	mov    %dl,0x9(%rax)
  37:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  3a:	89 c7                	mov    %eax,%edi
  3c:	e8 00 00 00 00       	call   41 <MCP3424::GetRaw(unsigned int)+0x41>
  41:	89 c2                	mov    %eax,%edx
  43:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  47:	0f b6 40 09          	movzbl 0x9(%rax),%eax
  4b:	09 c2                	or     %eax,%edx
  4d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  51:	88 50 09             	mov    %dl,0x9(%rax)
  54:	c7 45 dc 03 00 00 00 	movl   $0x3,-0x24(%rbp)
  5b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  5f:	0f b6 58 09          	movzbl 0x9(%rax),%ebx
  63:	bf 03 00 00 00       	mov    $0x3,%edi
  68:	e8 00 00 00 00       	call   6d <MCP3424::GetRaw(unsigned int)+0x6d>
  6d:	21 c3                	and    %eax,%ebx
  6f:	bf 03 00 00 00       	mov    $0x3,%edi
  74:	e8 00 00 00 00       	call   79 <MCP3424::GetRaw(unsigned int)+0x79>
  79:	38 c3                	cmp    %al,%bl
  7b:	0f 94 c0             	sete   %al
  7e:	84 c0                	test   %al,%al
  80:	74 07                	je     89 <MCP3424::GetRaw(unsigned int)+0x89>
  82:	c7 45 dc 04 00 00 00 	movl   $0x4,-0x24(%rbp)
  89:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  90:	c7 45 e0 40 1f 00 00 	movl   $0x1f40,-0x20(%rbp)
  97:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  9b:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  9f:	0f b6 52 09          	movzbl 0x9(%rdx),%edx
  a3:	0f b6 d2             	movzbl %dl,%edx
  a6:	89 d6                	mov    %edx,%esi
  a8:	48 89 c7             	mov    %rax,%rdi
  ab:	e8 00 00 00 00       	call   b0 <MCP3424::GetRaw(unsigned int)+0xb0>
  b0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  b4:	8b 55 dc             	mov    -0x24(%rbp),%edx
  b7:	48 8d 4d e4          	lea    -0x1c(%rbp),%rcx
  bb:	48 89 ce             	mov    %rcx,%rsi
  be:	48 89 c7             	mov    %rax,%rdi
  c1:	e8 00 00 00 00       	call   c6 <MCP3424::GetRaw(unsigned int)+0xc6>
  c6:	83 7d dc 04          	cmpl   $0x4,-0x24(%rbp)
  ca:	75 0a                	jne    d6 <MCP3424::GetRaw(unsigned int)+0xd6>
  cc:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  d0:	84 c0                	test   %al,%al
  d2:	78 0a                	js     de <MCP3424::GetRaw(unsigned int)+0xde>
  d4:	eb 25                	jmp    fb <MCP3424::GetRaw(unsigned int)+0xfb>
  d6:	0f b6 45 e6          	movzbl -0x1a(%rbp),%eax
  da:	84 c0                	test   %al,%al
  dc:	79 1c                	jns    fa <MCP3424::GetRaw(unsigned int)+0xfa>
  de:	8b 45 e0             	mov    -0x20(%rbp),%eax
  e1:	8d 50 ff             	lea    -0x1(%rax),%edx
  e4:	89 55 e0             	mov    %edx,-0x20(%rbp)
  e7:	85 c0                	test   %eax,%eax
  e9:	0f 94 c0             	sete   %al
  ec:	84 c0                	test   %al,%al
  ee:	74 a7                	je     97 <MCP3424::GetRaw(unsigned int)+0x97>
  f0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  f5:	e9 b0 00 00 00       	jmp    1aa <MCP3424::GetRaw(unsigned int)+0x1aa>
  fa:	90                   	nop
  fb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  ff:	0f b6 40 09          	movzbl 0x9(%rax),%eax
 103:	c0 e8 02             	shr    $0x2,%al
 106:	0f b6 c0             	movzbl %al,%eax
 109:	83 e0 03             	and    $0x3,%eax
 10c:	83 f8 03             	cmp    $0x3,%eax
 10f:	74 71                	je     182 <MCP3424::GetRaw(unsigned int)+0x182>
 111:	83 f8 03             	cmp    $0x3,%eax
 114:	0f 8f 90 00 00 00    	jg     1aa <MCP3424::GetRaw(unsigned int)+0x1aa>
 11a:	83 f8 02             	cmp    $0x2,%eax
 11d:	74 4c                	je     16b <MCP3424::GetRaw(unsigned int)+0x16b>
 11f:	83 f8 02             	cmp    $0x2,%eax
 122:	0f 8f 82 00 00 00    	jg     1aa <MCP3424::GetRaw(unsigned int)+0x1aa>
 128:	85 c0                	test   %eax,%eax
 12a:	74 07                	je     133 <MCP3424::GetRaw(unsigned int)+0x133>
 12c:	83 f8 01             	cmp    $0x1,%eax
 12f:	74 1e                	je     14f <MCP3424::GetRaw(unsigned int)+0x14f>
 131:	eb 77                	jmp    1aa <MCP3424::GetRaw(unsigned int)+0x1aa>
 133:	0f b6 45 e4          	movzbl -0x1c(%rbp),%eax
 137:	0f be c0             	movsbl %al,%eax
 13a:	c1 e0 08             	shl    $0x8,%eax
 13d:	25 00 0f 00 00       	and    $0xf00,%eax
 142:	89 c2                	mov    %eax,%edx
 144:	0f b6 45 e5          	movzbl -0x1b(%rbp),%eax
 148:	0f be c0             	movsbl %al,%eax
 14b:	09 d0                	or     %edx,%eax
 14d:	eb 5b                	jmp    1aa <MCP3424::GetRaw(unsigned int)+0x1aa>
 14f:	0f b6 45 e4          	movzbl -0x1c(%rbp),%eax
 153:	0f be c0             	movsbl %al,%eax
 156:	c1 e0 08             	shl    $0x8,%eax
 159:	25 00 3f 00 00       	and    $0x3f00,%eax
 15e:	89 c2                	mov    %eax,%edx
 160:	0f b6 45 e5          	movzbl -0x1b(%rbp),%eax
 164:	0f be c0             	movsbl %al,%eax
 167:	09 d0                	or     %edx,%eax
 169:	eb 3f                	jmp    1aa <MCP3424::GetRaw(unsigned int)+0x1aa>
 16b:	0f b6 45 e4          	movzbl -0x1c(%rbp),%eax
 16f:	0f be c0             	movsbl %al,%eax
 172:	c1 e0 08             	shl    $0x8,%eax
 175:	89 c2                	mov    %eax,%edx
 177:	0f b6 45 e5          	movzbl -0x1b(%rbp),%eax
 17b:	0f be c0             	movsbl %al,%eax
 17e:	09 d0                	or     %edx,%eax
 180:	eb 28                	jmp    1aa <MCP3424::GetRaw(unsigned int)+0x1aa>
 182:	0f b6 45 e4          	movzbl -0x1c(%rbp),%eax
 186:	0f be c0             	movsbl %al,%eax
 189:	c1 e0 10             	shl    $0x10,%eax
 18c:	25 00 00 03 00       	and    $0x30000,%eax
 191:	89 c2                	mov    %eax,%edx
 193:	0f b6 45 e5          	movzbl -0x1b(%rbp),%eax
 197:	0f be c0             	movsbl %al,%eax
 19a:	c1 e0 08             	shl    $0x8,%eax
 19d:	09 c2                	or     %eax,%edx
 19f:	0f b6 45 e6          	movzbl -0x1a(%rbp),%eax
 1a3:	0f be c0             	movsbl %al,%eax
 1a6:	09 d0                	or     %edx,%eax
 1a8:	eb 00                	jmp    1aa <MCP3424::GetRaw(unsigned int)+0x1aa>
 1aa:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
 1ae:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
 1b5:	00 00 
 1b7:	74 05                	je     1be <MCP3424::GetRaw(unsigned int)+0x1be>
 1b9:	e8 00 00 00 00       	call   1be <MCP3424::GetRaw(unsigned int)+0x1be>
 1be:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
 1c2:	c9                   	leave  
 1c3:	c3                   	ret    

Disassembly of section .text._ZN7MCP342410GetVoltageEj:

0000000000000000 <MCP3424::GetVoltage(unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  13:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1a:	00 00 
  1c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  20:	31 c0                	xor    %eax,%eax
  22:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  25:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  29:	89 d6                	mov    %edx,%esi
  2b:	48 89 c7             	mov    %rax,%rdi
  2e:	e8 00 00 00 00       	call   33 <MCP3424::GetVoltage(unsigned int)+0x33>
  33:	89 c0                	mov    %eax,%eax
  35:	48 85 c0             	test   %rax,%rax
  38:	78 0b                	js     45 <MCP3424::GetVoltage(unsigned int)+0x45>
  3a:	66 0f ef c0          	pxor   %xmm0,%xmm0
  3e:	f2 48 0f 2a c0       	cvtsi2sd %rax,%xmm0
  43:	eb 19                	jmp    5e <MCP3424::GetVoltage(unsigned int)+0x5e>
  45:	48 89 c2             	mov    %rax,%rdx
  48:	48 d1 ea             	shr    %rdx
  4b:	83 e0 01             	and    $0x1,%eax
  4e:	48 09 c2             	or     %rax,%rdx
  51:	66 0f ef c0          	pxor   %xmm0,%xmm0
  55:	f2 48 0f 2a c2       	cvtsi2sd %rdx,%xmm0
  5a:	f2 0f 58 c0          	addsd  %xmm0,%xmm0
  5e:	66 0f 28 c8          	movapd %xmm0,%xmm1
  62:	f2 0f 58 c8          	addsd  %xmm0,%xmm1
  66:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  6a:	f2 0f 10 40 10       	movsd  0x10(%rax),%xmm0
  6f:	f2 0f 59 c1          	mulsd  %xmm1,%xmm0
  73:	f2 0f 11 45 f0       	movsd  %xmm0,-0x10(%rbp)
  78:	f2 0f 10 45 f0       	movsd  -0x10(%rbp),%xmm0
  7d:	66 48 0f 7e c0       	movq   %xmm0,%rax
  82:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  86:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  8d:	00 00 
  8f:	74 05                	je     96 <MCP3424::GetVoltage(unsigned int)+0x96>
  91:	e8 00 00 00 00       	call   96 <MCP3424::GetVoltage(unsigned int)+0x96>
  96:	66 48 0f 6e c0       	movq   %rax,%xmm0
  9b:	c9                   	leave  
  9c:	c3                   	ret    

mcp9808.o:     file format elf64-x86-64


Disassembly of section .text._ZL16i2c_set_baudratej:

0000000000000000 <i2c_set_baudrate(unsigned int)>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	89 7d ec             	mov    %edi,-0x14(%rbp)
   b:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  12:	00 00 
  14:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  18:	31 c0                	xor    %eax,%eax
  1a:	90                   	nop
  1b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1f:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  26:	00 00 
  28:	74 05                	je     2f <i2c_set_baudrate(unsigned int)+0x2f>
  2a:	e8 00 00 00 00       	call   2f <i2c_set_baudrate(unsigned int)+0x2f>
  2f:	c9                   	leave  
  30:	c3                   	ret    

Disassembly of section .text._ZL15i2c_set_addressh:

0000000000000000 <i2c_set_address(unsigned char)>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	89 f8                	mov    %edi,%eax
   a:	88 45 ec             	mov    %al,-0x14(%rbp)
   d:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  14:	00 00 
  16:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1a:	31 c0                	xor    %eax,%eax
  1c:	90                   	nop
  1d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  21:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  28:	00 00 
  2a:	74 05                	je     31 <i2c_set_address(unsigned char)+0x31>
  2c:	e8 00 00 00 00       	call   31 <i2c_set_address(unsigned char)+0x31>
  31:	c9                   	leave  
  32:	c3                   	ret    

Disassembly of section .text._ZL9i2c_writePKcj:

0000000000000000 <i2c_write(char const*, unsigned int)>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	89 75 e4             	mov    %esi,-0x1c(%rbp)
   f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  16:	00 00 
  18:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1c:	31 c0                	xor    %eax,%eax
  1e:	b8 01 00 00 00       	mov    $0x1,%eax
  23:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  27:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  2e:	00 00 
  30:	74 05                	je     37 <i2c_write(char const*, unsigned int)+0x37>
  32:	e8 00 00 00 00       	call   37 <i2c_write(char const*, unsigned int)+0x37>
  37:	c9                   	leave  
  38:	c3                   	ret    

Disassembly of section .text._ZL8i2c_readPcj:

0000000000000000 <i2c_read(char*, unsigned int)>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	89 75 e4             	mov    %esi,-0x1c(%rbp)
   f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  16:	00 00 
  18:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1c:	31 c0                	xor    %eax,%eax
  1e:	b8 01 00 00 00       	mov    $0x1,%eax
  23:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  27:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  2e:	00 00 
  30:	74 05                	je     37 <i2c_read(char*, unsigned int)+0x37>
  32:	e8 00 00 00 00       	call   37 <i2c_read(char*, unsigned int)+0x37>
  37:	c9                   	leave  
  38:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2CC2Ehj:

0000000000000000 <HAL_I2C::HAL_I2C(unsigned char, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	89 55 e0             	mov    %edx,-0x20(%rbp)
  15:	88 45 e4             	mov    %al,-0x1c(%rbp)
  18:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1f:	00 00 
  21:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  25:	31 c0                	xor    %eax,%eax
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2b:	0f b6 55 e4          	movzbl -0x1c(%rbp),%edx
  2f:	88 10                	mov    %dl,(%rax)
  31:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  35:	8b 55 e0             	mov    -0x20(%rbp),%edx
  38:	89 50 04             	mov    %edx,0x4(%rax)
  3b:	90                   	nop
  3c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  47:	00 00 
  49:	74 05                	je     50 <HAL_I2C::HAL_I2C(unsigned char, unsigned int)+0x50>
  4b:	e8 00 00 00 00       	call   50 <HAL_I2C::HAL_I2C(unsigned char, unsigned int)+0x50>
  50:	c9                   	leave  
  51:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2C11IsConnectedEv:

0000000000000000 <HAL_I2C::IsConnected()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	8b 50 04             	mov    0x4(%rax),%edx
  26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2a:	0f b6 00             	movzbl (%rax),%eax
  2d:	0f b6 c0             	movzbl %al,%eax
  30:	89 d6                	mov    %edx,%esi
  32:	89 c7                	mov    %eax,%edi
  34:	e8 00 00 00 00       	call   39 <HAL_I2C::IsConnected()+0x39>
  39:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  3d:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  44:	00 00 
  46:	74 05                	je     4d <HAL_I2C::IsConnected()+0x4d>
  48:	e8 00 00 00 00       	call   4d <HAL_I2C::IsConnected()+0x4d>
  4d:	c9                   	leave  
  4e:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2C6Read16Ev:

0000000000000000 <HAL_I2C::Read16()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	66 c7 45 f6 00 00    	movw   $0x0,-0xa(%rbp)
  25:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  29:	48 89 c7             	mov    %rax,%rdi
  2c:	e8 00 00 00 00       	call   31 <HAL_I2C::Read16()+0x31>
  31:	48 8d 45 f6          	lea    -0xa(%rbp),%rax
  35:	be 02 00 00 00       	mov    $0x2,%esi
  3a:	48 89 c7             	mov    %rax,%rdi
  3d:	e8 00 00 00 00       	call   42 <HAL_I2C::Read16()+0x42>
  42:	0f b6 45 f6          	movzbl -0xa(%rbp),%eax
  46:	66 98                	cbtw   
  48:	0f b7 c0             	movzwl %ax,%eax
  4b:	c1 e0 08             	shl    $0x8,%eax
  4e:	89 c2                	mov    %eax,%edx
  50:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
  54:	66 98                	cbtw   
  56:	09 d0                	or     %edx,%eax
  58:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  5c:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  63:	00 00 
  65:	74 05                	je     6c <HAL_I2C::Read16()+0x6c>
  67:	e8 00 00 00 00       	call   6c <HAL_I2C::Read16()+0x6c>
  6c:	c9                   	leave  
  6d:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2C14ReadRegister16Eh:

0000000000000000 <HAL_I2C::ReadRegister16(unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	88 45 e4             	mov    %al,-0x1c(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	0f b6 45 e4          	movzbl -0x1c(%rbp),%eax
  28:	88 45 f7             	mov    %al,-0x9(%rbp)
  2b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	call   37 <HAL_I2C::ReadRegister16(unsigned char)+0x37>
  37:	48 8d 45 f7          	lea    -0x9(%rbp),%rax
  3b:	be 01 00 00 00       	mov    $0x1,%esi
  40:	48 89 c7             	mov    %rax,%rdi
  43:	e8 00 00 00 00       	call   48 <HAL_I2C::ReadRegister16(unsigned char)+0x48>
  48:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4c:	48 89 c7             	mov    %rax,%rdi
  4f:	e8 00 00 00 00       	call   54 <HAL_I2C::ReadRegister16(unsigned char)+0x54>
  54:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  58:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  5f:	00 00 
  61:	74 05                	je     68 <HAL_I2C::ReadRegister16(unsigned char)+0x68>
  63:	e8 00 00 00 00       	call   68 <HAL_I2C::ReadRegister16(unsigned char)+0x68>
  68:	c9                   	leave  
  69:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2C5SetupEv:

0000000000000000 <HAL_I2C::Setup()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	0f b6 00             	movzbl (%rax),%eax
  26:	0f b6 c0             	movzbl %al,%eax
  29:	89 c7                	mov    %eax,%edi
  2b:	e8 00 00 00 00       	call   30 <HAL_I2C::Setup()+0x30>
  30:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  34:	8b 40 04             	mov    0x4(%rax),%eax
  37:	89 c7                	mov    %eax,%edi
  39:	e8 00 00 00 00       	call   3e <HAL_I2C::Setup()+0x3e>
  3e:	90                   	nop
  3f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  4a:	00 00 
  4c:	74 05                	je     53 <HAL_I2C::Setup()+0x53>
  4e:	e8 00 00 00 00       	call   53 <HAL_I2C::Setup()+0x53>
  53:	c9                   	leave  
  54:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2C12IsConnected_Ehj:

0000000000000000 <HAL_I2C::IsConnected_(unsigned char, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	89 f8                	mov    %edi,%eax
   e:	89 75 e8             	mov    %esi,-0x18(%rbp)
  11:	88 45 ec             	mov    %al,-0x14(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	0f b6 45 ec          	movzbl -0x14(%rbp),%eax
  27:	89 c7                	mov    %eax,%edi
  29:	e8 00 00 00 00       	call   2e <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x2e>
  2e:	8b 45 e8             	mov    -0x18(%rbp),%eax
  31:	89 c7                	mov    %eax,%edi
  33:	e8 00 00 00 00       	call   38 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x38>
  38:	80 7d ec 2f          	cmpb   $0x2f,-0x14(%rbp)
  3c:	76 06                	jbe    44 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x44>
  3e:	80 7d ec 37          	cmpb   $0x37,-0x14(%rbp)
  42:	76 0c                	jbe    50 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x50>
  44:	80 7d ec 4f          	cmpb   $0x4f,-0x14(%rbp)
  48:	76 1e                	jbe    68 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x68>
  4a:	80 7d ec 5f          	cmpb   $0x5f,-0x14(%rbp)
  4e:	77 18                	ja     68 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x68>
  50:	48 8d 45 f7          	lea    -0x9(%rbp),%rax
  54:	be 01 00 00 00       	mov    $0x1,%esi
  59:	48 89 c7             	mov    %rax,%rdi
  5c:	e8 00 00 00 00       	call   61 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x61>
  61:	84 c0                	test   %al,%al
  63:	0f 94 c0             	sete   %al
  66:	eb 14                	jmp    7c <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x7c>
  68:	be 00 00 00 00       	mov    $0x0,%esi
  6d:	bf 00 00 00 00       	mov    $0x0,%edi
  72:	e8 00 00 00 00       	call   77 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x77>
  77:	84 c0                	test   %al,%al
  79:	0f 94 c0             	sete   %al
  7c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  87:	00 00 
  89:	74 05                	je     90 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x90>
  8b:	e8 00 00 00 00       	call   90 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x90>
  90:	c9                   	leave  
  91:	c3                   	ret    

Disassembly of section .text._ZN6sensor7MCP9808C2Eh:

0000000000000000 <sensor::MCP9808::MCP9808(unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	88 45 e4             	mov    %al,-0x1c(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  28:	0f b6 45 e4          	movzbl -0x1c(%rbp),%eax
  2c:	84 c0                	test   %al,%al
  2e:	74 0c                	je     3c <sensor::MCP9808::MCP9808(unsigned char)+0x3c>
  30:	48 8d 45 e4          	lea    -0x1c(%rbp),%rax
  34:	0f b6 00             	movzbl (%rax),%eax
  37:	0f b6 c0             	movzbl %al,%eax
  3a:	eb 05                	jmp    41 <sensor::MCP9808::MCP9808(unsigned char)+0x41>
  3c:	b8 18 00 00 00       	mov    $0x18,%eax
  41:	ba 80 1a 06 00       	mov    $0x61a80,%edx
  46:	89 c6                	mov    %eax,%esi
  48:	48 89 cf             	mov    %rcx,%rdi
  4b:	e8 00 00 00 00       	call   50 <sensor::MCP9808::MCP9808(unsigned char)+0x50>
  50:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  54:	c6 40 08 00          	movb   $0x0,0x8(%rax)
  58:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5c:	48 89 c7             	mov    %rax,%rdi
  5f:	e8 00 00 00 00       	call   64 <sensor::MCP9808::MCP9808(unsigned char)+0x64>
  64:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  68:	88 42 08             	mov    %al,0x8(%rdx)
  6b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  6f:	0f b6 40 08          	movzbl 0x8(%rax),%eax
  73:	84 c0                	test   %al,%al
  75:	74 1f                	je     96 <sensor::MCP9808::MCP9808(unsigned char)+0x96>
  77:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7b:	be 06 00 00 00       	mov    $0x6,%esi
  80:	48 89 c7             	mov    %rax,%rdi
  83:	e8 00 00 00 00       	call   88 <sensor::MCP9808::MCP9808(unsigned char)+0x88>
  88:	66 83 f8 54          	cmp    $0x54,%ax
  8c:	0f 94 c2             	sete   %dl
  8f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  93:	88 50 08             	mov    %dl,0x8(%rax)
  96:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  9a:	0f b6 40 08          	movzbl 0x8(%rax),%eax
  9e:	84 c0                	test   %al,%al
  a0:	74 1f                	je     c1 <sensor::MCP9808::MCP9808(unsigned char)+0xc1>
  a2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  a6:	be 07 00 00 00       	mov    $0x7,%esi
  ab:	48 89 c7             	mov    %rax,%rdi
  ae:	e8 00 00 00 00       	call   b3 <sensor::MCP9808::MCP9808(unsigned char)+0xb3>
  b3:	66 3d 00 04          	cmp    $0x400,%ax
  b7:	0f 94 c2             	sete   %dl
  ba:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  be:	88 50 08             	mov    %dl,0x8(%rax)
  c1:	90                   	nop
  c2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  c6:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  cd:	00 00 
  cf:	74 05                	je     d6 <sensor::MCP9808::MCP9808(unsigned char)+0xd6>
  d1:	e8 00 00 00 00       	call   d6 <sensor::MCP9808::MCP9808(unsigned char)+0xd6>
  d6:	c9                   	leave  
  d7:	c3                   	ret    

Disassembly of section .text._ZN6sensor7MCP98083GetEv:

0000000000000000 <sensor::MCP9808::Get()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	be 05 00 00 00       	mov    $0x5,%esi
  28:	48 89 c7             	mov    %rax,%rdi
  2b:	e8 00 00 00 00       	call   30 <sensor::MCP9808::Get()+0x30>
  30:	66 89 45 f2          	mov    %ax,-0xe(%rbp)
  34:	0f b7 45 f2          	movzwl -0xe(%rbp),%eax
  38:	25 ff 0f 00 00       	and    $0xfff,%eax
  3d:	66 0f ef c0          	pxor   %xmm0,%xmm0
  41:	f3 0f 2a c0          	cvtsi2ss %eax,%xmm0
  45:	f3 0f 11 45 f4       	movss  %xmm0,-0xc(%rbp)
  4a:	f3 0f 10 45 f4       	movss  -0xc(%rbp),%xmm0
  4f:	f3 0f 10 0d 00 00 00 	movss  0x0(%rip),%xmm1        # 57 <sensor::MCP9808::Get()+0x57>
  56:	00 
  57:	f3 0f 5e c1          	divss  %xmm1,%xmm0
  5b:	f3 0f 11 45 f4       	movss  %xmm0,-0xc(%rbp)
  60:	0f b7 45 f2          	movzwl -0xe(%rbp),%eax
  64:	25 00 10 00 00       	and    $0x1000,%eax
  69:	85 c0                	test   %eax,%eax
  6b:	74 16                	je     83 <sensor::MCP9808::Get()+0x83>
  6d:	f3 0f 10 45 f4       	movss  -0xc(%rbp),%xmm0
  72:	f3 0f 10 0d 00 00 00 	movss  0x0(%rip),%xmm1        # 7a <sensor::MCP9808::Get()+0x7a>
  79:	00 
  7a:	f3 0f 5c c1          	subss  %xmm1,%xmm0
  7e:	f3 0f 11 45 f4       	movss  %xmm0,-0xc(%rbp)
  83:	f3 0f 10 45 f4       	movss  -0xc(%rbp),%xmm0
  88:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8c:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  93:	00 00 
  95:	74 05                	je     9c <sensor::MCP9808::Get()+0x9c>
  97:	e8 00 00 00 00       	call   9c <sensor::MCP9808::Get()+0x9c>
  9c:	c9                   	leave  
  9d:	c3                   	ret    

sc16is740.o:     file format elf64-x86-64


Disassembly of section .text._ZL16i2c_set_baudratej:

0000000000000000 <i2c_set_baudrate(unsigned int)>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	89 7d ec             	mov    %edi,-0x14(%rbp)
   b:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  12:	00 00 
  14:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  18:	31 c0                	xor    %eax,%eax
  1a:	90                   	nop
  1b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1f:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  26:	00 00 
  28:	74 05                	je     2f <i2c_set_baudrate(unsigned int)+0x2f>
  2a:	e8 00 00 00 00       	call   2f <i2c_set_baudrate(unsigned int)+0x2f>
  2f:	c9                   	leave  
  30:	c3                   	ret    

Disassembly of section .text._ZL15i2c_set_addressh:

0000000000000000 <i2c_set_address(unsigned char)>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	89 f8                	mov    %edi,%eax
   a:	88 45 ec             	mov    %al,-0x14(%rbp)
   d:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  14:	00 00 
  16:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1a:	31 c0                	xor    %eax,%eax
  1c:	90                   	nop
  1d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  21:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  28:	00 00 
  2a:	74 05                	je     31 <i2c_set_address(unsigned char)+0x31>
  2c:	e8 00 00 00 00       	call   31 <i2c_set_address(unsigned char)+0x31>
  31:	c9                   	leave  
  32:	c3                   	ret    

Disassembly of section .text._ZL9i2c_writePKcj:

0000000000000000 <i2c_write(char const*, unsigned int)>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	89 75 e4             	mov    %esi,-0x1c(%rbp)
   f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  16:	00 00 
  18:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1c:	31 c0                	xor    %eax,%eax
  1e:	b8 01 00 00 00       	mov    $0x1,%eax
  23:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  27:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  2e:	00 00 
  30:	74 05                	je     37 <i2c_write(char const*, unsigned int)+0x37>
  32:	e8 00 00 00 00       	call   37 <i2c_write(char const*, unsigned int)+0x37>
  37:	c9                   	leave  
  38:	c3                   	ret    

Disassembly of section .text._ZL8i2c_readPcj:

0000000000000000 <i2c_read(char*, unsigned int)>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	89 75 e4             	mov    %esi,-0x1c(%rbp)
   f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  16:	00 00 
  18:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1c:	31 c0                	xor    %eax,%eax
  1e:	b8 01 00 00 00       	mov    $0x1,%eax
  23:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  27:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  2e:	00 00 
  30:	74 05                	je     37 <i2c_read(char*, unsigned int)+0x37>
  32:	e8 00 00 00 00       	call   37 <i2c_read(char*, unsigned int)+0x37>
  37:	c9                   	leave  
  38:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2CC2Ehj:

0000000000000000 <HAL_I2C::HAL_I2C(unsigned char, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	89 55 e0             	mov    %edx,-0x20(%rbp)
  15:	88 45 e4             	mov    %al,-0x1c(%rbp)
  18:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1f:	00 00 
  21:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  25:	31 c0                	xor    %eax,%eax
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2b:	0f b6 55 e4          	movzbl -0x1c(%rbp),%edx
  2f:	88 10                	mov    %dl,(%rax)
  31:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  35:	8b 55 e0             	mov    -0x20(%rbp),%edx
  38:	89 50 04             	mov    %edx,0x4(%rax)
  3b:	90                   	nop
  3c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  47:	00 00 
  49:	74 05                	je     50 <HAL_I2C::HAL_I2C(unsigned char, unsigned int)+0x50>
  4b:	e8 00 00 00 00       	call   50 <HAL_I2C::HAL_I2C(unsigned char, unsigned int)+0x50>
  50:	c9                   	leave  
  51:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2C11IsConnectedEv:

0000000000000000 <HAL_I2C::IsConnected()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	8b 50 04             	mov    0x4(%rax),%edx
  26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2a:	0f b6 00             	movzbl (%rax),%eax
  2d:	0f b6 c0             	movzbl %al,%eax
  30:	89 d6                	mov    %edx,%esi
  32:	89 c7                	mov    %eax,%edi
  34:	e8 00 00 00 00       	call   39 <HAL_I2C::IsConnected()+0x39>
  39:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  3d:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  44:	00 00 
  46:	74 05                	je     4d <HAL_I2C::IsConnected()+0x4d>
  48:	e8 00 00 00 00       	call   4d <HAL_I2C::IsConnected()+0x4d>
  4d:	c9                   	leave  
  4e:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2C13WriteRegisterEhh:

0000000000000000 <HAL_I2C::WriteRegister(unsigned char, unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f1                	mov    %esi,%ecx
  12:	89 d0                	mov    %edx,%eax
  14:	89 ca                	mov    %ecx,%edx
  16:	88 55 e4             	mov    %dl,-0x1c(%rbp)
  19:	88 45 e0             	mov    %al,-0x20(%rbp)
  1c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  23:	00 00 
  25:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  29:	31 c0                	xor    %eax,%eax
  2b:	0f b6 45 e4          	movzbl -0x1c(%rbp),%eax
  2f:	88 45 f6             	mov    %al,-0xa(%rbp)
  32:	0f b6 45 e0          	movzbl -0x20(%rbp),%eax
  36:	88 45 f7             	mov    %al,-0x9(%rbp)
  39:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3d:	48 89 c7             	mov    %rax,%rdi
  40:	e8 00 00 00 00       	call   45 <HAL_I2C::WriteRegister(unsigned char, unsigned char)+0x45>
  45:	48 8d 45 f6          	lea    -0xa(%rbp),%rax
  49:	be 02 00 00 00       	mov    $0x2,%esi
  4e:	48 89 c7             	mov    %rax,%rdi
  51:	e8 00 00 00 00       	call   56 <HAL_I2C::WriteRegister(unsigned char, unsigned char)+0x56>
  56:	90                   	nop
  57:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  5b:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  62:	00 00 
  64:	74 05                	je     6b <HAL_I2C::WriteRegister(unsigned char, unsigned char)+0x6b>
  66:	e8 00 00 00 00       	call   6b <HAL_I2C::WriteRegister(unsigned char, unsigned char)+0x6b>
  6b:	c9                   	leave  
  6c:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2C4ReadEv:

0000000000000000 <HAL_I2C::Read()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	c6 45 f7 00          	movb   $0x0,-0x9(%rbp)
  23:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  27:	48 89 c7             	mov    %rax,%rdi
  2a:	e8 00 00 00 00       	call   2f <HAL_I2C::Read()+0x2f>
  2f:	48 8d 45 f7          	lea    -0x9(%rbp),%rax
  33:	be 01 00 00 00       	mov    $0x1,%esi
  38:	48 89 c7             	mov    %rax,%rdi
  3b:	e8 00 00 00 00       	call   40 <HAL_I2C::Read()+0x40>
  40:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
  44:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  48:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  4f:	00 00 
  51:	74 05                	je     58 <HAL_I2C::Read()+0x58>
  53:	e8 00 00 00 00       	call   58 <HAL_I2C::Read()+0x58>
  58:	c9                   	leave  
  59:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2C12ReadRegisterEh:

0000000000000000 <HAL_I2C::ReadRegister(unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	88 45 e4             	mov    %al,-0x1c(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	0f b6 45 e4          	movzbl -0x1c(%rbp),%eax
  28:	88 45 f7             	mov    %al,-0x9(%rbp)
  2b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	call   37 <HAL_I2C::ReadRegister(unsigned char)+0x37>
  37:	48 8d 45 f7          	lea    -0x9(%rbp),%rax
  3b:	be 01 00 00 00       	mov    $0x1,%esi
  40:	48 89 c7             	mov    %rax,%rdi
  43:	e8 00 00 00 00       	call   48 <HAL_I2C::ReadRegister(unsigned char)+0x48>
  48:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4c:	48 89 c7             	mov    %rax,%rdi
  4f:	e8 00 00 00 00       	call   54 <HAL_I2C::ReadRegister(unsigned char)+0x54>
  54:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  58:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  5f:	00 00 
  61:	74 05                	je     68 <HAL_I2C::ReadRegister(unsigned char)+0x68>
  63:	e8 00 00 00 00       	call   68 <HAL_I2C::ReadRegister(unsigned char)+0x68>
  68:	c9                   	leave  
  69:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2C5SetupEv:

0000000000000000 <HAL_I2C::Setup()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	0f b6 00             	movzbl (%rax),%eax
  26:	0f b6 c0             	movzbl %al,%eax
  29:	89 c7                	mov    %eax,%edi
  2b:	e8 00 00 00 00       	call   30 <HAL_I2C::Setup()+0x30>
  30:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  34:	8b 40 04             	mov    0x4(%rax),%eax
  37:	89 c7                	mov    %eax,%edi
  39:	e8 00 00 00 00       	call   3e <HAL_I2C::Setup()+0x3e>
  3e:	90                   	nop
  3f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  4a:	00 00 
  4c:	74 05                	je     53 <HAL_I2C::Setup()+0x53>
  4e:	e8 00 00 00 00       	call   53 <HAL_I2C::Setup()+0x53>
  53:	c9                   	leave  
  54:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2C12IsConnected_Ehj:

0000000000000000 <HAL_I2C::IsConnected_(unsigned char, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	89 f8                	mov    %edi,%eax
   e:	89 75 e8             	mov    %esi,-0x18(%rbp)
  11:	88 45 ec             	mov    %al,-0x14(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	0f b6 45 ec          	movzbl -0x14(%rbp),%eax
  27:	89 c7                	mov    %eax,%edi
  29:	e8 00 00 00 00       	call   2e <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x2e>
  2e:	8b 45 e8             	mov    -0x18(%rbp),%eax
  31:	89 c7                	mov    %eax,%edi
  33:	e8 00 00 00 00       	call   38 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x38>
  38:	80 7d ec 2f          	cmpb   $0x2f,-0x14(%rbp)
  3c:	76 06                	jbe    44 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x44>
  3e:	80 7d ec 37          	cmpb   $0x37,-0x14(%rbp)
  42:	76 0c                	jbe    50 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x50>
  44:	80 7d ec 4f          	cmpb   $0x4f,-0x14(%rbp)
  48:	76 1e                	jbe    68 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x68>
  4a:	80 7d ec 5f          	cmpb   $0x5f,-0x14(%rbp)
  4e:	77 18                	ja     68 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x68>
  50:	48 8d 45 f7          	lea    -0x9(%rbp),%rax
  54:	be 01 00 00 00       	mov    $0x1,%esi
  59:	48 89 c7             	mov    %rax,%rdi
  5c:	e8 00 00 00 00       	call   61 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x61>
  61:	84 c0                	test   %al,%al
  63:	0f 94 c0             	sete   %al
  66:	eb 14                	jmp    7c <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x7c>
  68:	be 00 00 00 00       	mov    $0x0,%esi
  6d:	bf 00 00 00 00       	mov    $0x0,%edi
  72:	e8 00 00 00 00       	call   77 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x77>
  77:	84 c0                	test   %al,%al
  79:	0f 94 c0             	sete   %al
  7c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  87:	00 00 
  89:	74 05                	je     90 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x90>
  8b:	e8 00 00 00 00       	call   90 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x90>
  90:	c9                   	leave  
  91:	c3                   	ret    

Disassembly of section .text._ZN8Hardware3GetEv:

0000000000000000 <Hardware::Get()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 22 <Hardware::Get()+0x22>
  22:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  26:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  2d:	00 00 
  2f:	74 05                	je     36 <Hardware::Get()+0x36>
  31:	e8 00 00 00 00       	call   36 <Hardware::Get()+0x36>
  36:	c9                   	leave  
  37:	c3                   	ret    

Disassembly of section .text._ZN9SC16IS740C2Ehj:

0000000000000000 <SC16IS740::SC16IS740(unsigned char, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	89 55 e0             	mov    %edx,-0x20(%rbp)
  15:	88 45 e4             	mov    %al,-0x1c(%rbp)
  18:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1f:	00 00 
  21:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  25:	31 c0                	xor    %eax,%eax
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2b:	0f b6 4d e4          	movzbl -0x1c(%rbp),%ecx
  2f:	ba 80 1a 06 00       	mov    $0x61a80,%edx
  34:	89 ce                	mov    %ecx,%esi
  36:	48 89 c7             	mov    %rax,%rdi
  39:	e8 00 00 00 00       	call   3e <SC16IS740::SC16IS740(unsigned char, unsigned int)+0x3e>
  3e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  42:	8b 55 e0             	mov    -0x20(%rbp),%edx
  45:	89 50 08             	mov    %edx,0x8(%rax)
  48:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4c:	c6 40 0c 00          	movb   $0x0,0xc(%rax)
  50:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  54:	48 89 c7             	mov    %rax,%rdi
  57:	e8 00 00 00 00       	call   5c <SC16IS740::SC16IS740(unsigned char, unsigned int)+0x5c>
  5c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  60:	88 42 0c             	mov    %al,0xc(%rdx)
  63:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  67:	0f b6 40 0c          	movzbl 0xc(%rax),%eax
  6b:	83 f0 01             	xor    $0x1,%eax
  6e:	84 c0                	test   %al,%al
  70:	0f 85 38 01 00 00    	jne    1ae <SC16IS740::SC16IS740(unsigned char, unsigned int)+0x1ae>
  76:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7a:	b9 01 00 00 00       	mov    $0x1,%ecx
  7f:	ba 00 00 00 00       	mov    $0x0,%edx
  84:	be 08 00 00 00       	mov    $0x8,%esi
  89:	48 89 c7             	mov    %rax,%rdi
  8c:	e8 00 00 00 00       	call   91 <SC16IS740::SC16IS740(unsigned char, unsigned int)+0x91>
  91:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  95:	be 00 c2 01 00       	mov    $0x1c200,%esi
  9a:	48 89 c7             	mov    %rax,%rdi
  9d:	e8 00 00 00 00       	call   a2 <SC16IS740::SC16IS740(unsigned char, unsigned int)+0xa2>
  a2:	c6 45 f5 41          	movb   $0x41,-0xb(%rbp)
  a6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  aa:	ba 41 00 00 00       	mov    $0x41,%edx
  af:	be 38 00 00 00       	mov    $0x38,%esi
  b4:	48 89 c7             	mov    %rax,%rdi
  b7:	e8 00 00 00 00       	call   bc <SC16IS740::SC16IS740(unsigned char, unsigned int)+0xbc>
  bc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  c0:	be 38 00 00 00       	mov    $0x38,%esi
  c5:	48 89 c7             	mov    %rax,%rdi
  c8:	e8 00 00 00 00       	call   cd <SC16IS740::SC16IS740(unsigned char, unsigned int)+0xcd>
  cd:	3c 41                	cmp    $0x41,%al
  cf:	0f 95 c0             	setne  %al
  d2:	84 c0                	test   %al,%al
  d4:	74 0d                	je     e3 <SC16IS740::SC16IS740(unsigned char, unsigned int)+0xe3>
  d6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  da:	c6 40 0c 00          	movb   $0x0,0xc(%rax)
  de:	e9 cc 00 00 00       	jmp    1af <SC16IS740::SC16IS740(unsigned char, unsigned int)+0x1af>
  e3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  e7:	be 20 00 00 00       	mov    $0x20,%esi
  ec:	48 89 c7             	mov    %rax,%rdi
  ef:	e8 00 00 00 00       	call   f4 <SC16IS740::SC16IS740(unsigned char, unsigned int)+0xf4>
  f4:	88 45 f6             	mov    %al,-0xa(%rbp)
  f7:	80 4d f6 04          	orb    $0x4,-0xa(%rbp)
  fb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  ff:	0f b6 55 f6          	movzbl -0xa(%rbp),%edx
 103:	be 20 00 00 00       	mov    $0x20,%esi
 108:	48 89 c7             	mov    %rax,%rdi
 10b:	e8 00 00 00 00       	call   110 <SC16IS740::SC16IS740(unsigned char, unsigned int)+0x110>
 110:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 114:	be 10 00 00 00       	mov    $0x10,%esi
 119:	48 89 c7             	mov    %rax,%rdi
 11c:	e8 00 00 00 00       	call   121 <SC16IS740::SC16IS740(unsigned char, unsigned int)+0x121>
 121:	88 45 f7             	mov    %al,-0x9(%rbp)
 124:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 128:	0f b6 55 f7          	movzbl -0x9(%rbp),%edx
 12c:	83 ca 10             	or     $0x10,%edx
 12f:	0f b6 d2             	movzbl %dl,%edx
 132:	be 10 00 00 00       	mov    $0x10,%esi
 137:	48 89 c7             	mov    %rax,%rdi
 13a:	e8 00 00 00 00       	call   13f <SC16IS740::SC16IS740(unsigned char, unsigned int)+0x13f>
 13f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 143:	ba 10 00 00 00       	mov    $0x10,%edx
 148:	be 38 00 00 00       	mov    $0x38,%esi
 14d:	48 89 c7             	mov    %rax,%rdi
 150:	e8 00 00 00 00       	call   155 <SC16IS740::SC16IS740(unsigned char, unsigned int)+0x155>
 155:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 159:	0f b6 55 f7          	movzbl -0x9(%rbp),%edx
 15d:	be 10 00 00 00       	mov    $0x10,%esi
 162:	48 89 c7             	mov    %rax,%rdi
 165:	e8 00 00 00 00       	call   16a <SC16IS740::SC16IS740(unsigned char, unsigned int)+0x16a>
 16a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 16e:	ba 06 00 00 00       	mov    $0x6,%edx
 173:	be 10 00 00 00       	mov    $0x10,%esi
 178:	48 89 c7             	mov    %rax,%rdi
 17b:	e8 00 00 00 00       	call   180 <SC16IS740::SC16IS740(unsigned char, unsigned int)+0x180>
 180:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 184:	ba 01 00 00 00       	mov    $0x1,%edx
 189:	be 10 00 00 00       	mov    $0x10,%esi
 18e:	48 89 c7             	mov    %rax,%rdi
 191:	e8 00 00 00 00       	call   196 <SC16IS740::SC16IS740(unsigned char, unsigned int)+0x196>
 196:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 19a:	ba 05 00 00 00       	mov    $0x5,%edx
 19f:	be 08 00 00 00       	mov    $0x8,%esi
 1a4:	48 89 c7             	mov    %rax,%rdi
 1a7:	e8 00 00 00 00       	call   1ac <SC16IS740::SC16IS740(unsigned char, unsigned int)+0x1ac>
 1ac:	eb 01                	jmp    1af <SC16IS740::SC16IS740(unsigned char, unsigned int)+0x1af>
 1ae:	90                   	nop
 1af:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 1b3:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 1ba:	00 00 
 1bc:	74 05                	je     1c3 <SC16IS740::SC16IS740(unsigned char, unsigned int)+0x1c3>
 1be:	e8 00 00 00 00       	call   1c3 <SC16IS740::SC16IS740(unsigned char, unsigned int)+0x1c3>
 1c3:	c9                   	leave  
 1c4:	c3                   	ret    

Disassembly of section .text._ZN9SC16IS7409SetFormatEjNS_12SerialParityEj:

0000000000000000 <SC16IS740::SetFormat(unsigned int, SC16IS740::SerialParity, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  13:	89 55 e0             	mov    %edx,-0x20(%rbp)
  16:	89 4d dc             	mov    %ecx,-0x24(%rbp)
  19:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  20:	00 00 
  22:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  26:	31 c0                	xor    %eax,%eax
  28:	c6 45 f7 00          	movb   $0x0,-0x9(%rbp)
  2c:	83 7d e4 08          	cmpl   $0x8,-0x1c(%rbp)
  30:	74 2a                	je     5c <SC16IS740::SetFormat(unsigned int, SC16IS740::SerialParity, unsigned int)+0x5c>
  32:	83 7d e4 08          	cmpl   $0x8,-0x1c(%rbp)
  36:	77 2a                	ja     62 <SC16IS740::SetFormat(unsigned int, SC16IS740::SerialParity, unsigned int)+0x62>
  38:	83 7d e4 07          	cmpl   $0x7,-0x1c(%rbp)
  3c:	74 18                	je     56 <SC16IS740::SetFormat(unsigned int, SC16IS740::SerialParity, unsigned int)+0x56>
  3e:	83 7d e4 07          	cmpl   $0x7,-0x1c(%rbp)
  42:	77 1e                	ja     62 <SC16IS740::SetFormat(unsigned int, SC16IS740::SerialParity, unsigned int)+0x62>
  44:	83 7d e4 05          	cmpl   $0x5,-0x1c(%rbp)
  48:	74 1e                	je     68 <SC16IS740::SetFormat(unsigned int, SC16IS740::SerialParity, unsigned int)+0x68>
  4a:	83 7d e4 06          	cmpl   $0x6,-0x1c(%rbp)
  4e:	75 12                	jne    62 <SC16IS740::SetFormat(unsigned int, SC16IS740::SerialParity, unsigned int)+0x62>
  50:	80 4d f7 01          	orb    $0x1,-0x9(%rbp)
  54:	eb 13                	jmp    69 <SC16IS740::SetFormat(unsigned int, SC16IS740::SerialParity, unsigned int)+0x69>
  56:	80 4d f7 02          	orb    $0x2,-0x9(%rbp)
  5a:	eb 0d                	jmp    69 <SC16IS740::SetFormat(unsigned int, SC16IS740::SerialParity, unsigned int)+0x69>
  5c:	80 4d f7 03          	orb    $0x3,-0x9(%rbp)
  60:	eb 07                	jmp    69 <SC16IS740::SetFormat(unsigned int, SC16IS740::SerialParity, unsigned int)+0x69>
  62:	80 4d f7 03          	orb    $0x3,-0x9(%rbp)
  66:	eb 01                	jmp    69 <SC16IS740::SetFormat(unsigned int, SC16IS740::SerialParity, unsigned int)+0x69>
  68:	90                   	nop
  69:	83 7d e0 04          	cmpl   $0x4,-0x20(%rbp)
  6d:	77 3d                	ja     ac <SC16IS740::SetFormat(unsigned int, SC16IS740::SerialParity, unsigned int)+0xac>
  6f:	8b 45 e0             	mov    -0x20(%rbp),%eax
  72:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
  79:	00 
  7a:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 81 <SC16IS740::SetFormat(unsigned int, SC16IS740::SerialParity, unsigned int)+0x81>
  81:	8b 04 02             	mov    (%rdx,%rax,1),%eax
  84:	48 98                	cltq   
  86:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 8d <SC16IS740::SetFormat(unsigned int, SC16IS740::SerialParity, unsigned int)+0x8d>
  8d:	48 01 d0             	add    %rdx,%rax
  90:	3e ff e0             	notrack jmp *%rax
  93:	80 4d f7 08          	orb    $0x8,-0x9(%rbp)
  97:	eb 13                	jmp    ac <SC16IS740::SetFormat(unsigned int, SC16IS740::SerialParity, unsigned int)+0xac>
  99:	80 4d f7 18          	orb    $0x18,-0x9(%rbp)
  9d:	eb 0d                	jmp    ac <SC16IS740::SetFormat(unsigned int, SC16IS740::SerialParity, unsigned int)+0xac>
  9f:	80 4d f7 28          	orb    $0x28,-0x9(%rbp)
  a3:	eb 07                	jmp    ac <SC16IS740::SetFormat(unsigned int, SC16IS740::SerialParity, unsigned int)+0xac>
  a5:	80 4d f7 38          	orb    $0x38,-0x9(%rbp)
  a9:	eb 01                	jmp    ac <SC16IS740::SetFormat(unsigned int, SC16IS740::SerialParity, unsigned int)+0xac>
  ab:	90                   	nop
  ac:	83 7d dc 01          	cmpl   $0x1,-0x24(%rbp)
  b0:	74 0c                	je     be <SC16IS740::SetFormat(unsigned int, SC16IS740::SerialParity, unsigned int)+0xbe>
  b2:	83 7d dc 02          	cmpl   $0x2,-0x24(%rbp)
  b6:	75 07                	jne    bf <SC16IS740::SetFormat(unsigned int, SC16IS740::SerialParity, unsigned int)+0xbf>
  b8:	80 4d f7 04          	orb    $0x4,-0x9(%rbp)
  bc:	eb 01                	jmp    bf <SC16IS740::SetFormat(unsigned int, SC16IS740::SerialParity, unsigned int)+0xbf>
  be:	90                   	nop
  bf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  c3:	0f b6 55 f7          	movzbl -0x9(%rbp),%edx
  c7:	be 18 00 00 00       	mov    $0x18,%esi
  cc:	48 89 c7             	mov    %rax,%rdi
  cf:	e8 00 00 00 00       	call   d4 <SC16IS740::SetFormat(unsigned int, SC16IS740::SerialParity, unsigned int)+0xd4>
  d4:	90                   	nop
  d5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  d9:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  e0:	00 00 
  e2:	74 05                	je     e9 <SC16IS740::SetFormat(unsigned int, SC16IS740::SerialParity, unsigned int)+0xe9>
  e4:	e8 00 00 00 00       	call   e9 <SC16IS740::SetFormat(unsigned int, SC16IS740::SerialParity, unsigned int)+0xe9>
  e9:	c9                   	leave  
  ea:	c3                   	ret    

Disassembly of section .text._ZN9SC16IS7407SetBaudEj:

0000000000000000 <SC16IS740::SetBaud(unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10:	89 75 d4             	mov    %esi,-0x2c(%rbp)
  13:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1a:	00 00 
  1c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  20:	31 c0                	xor    %eax,%eax
  22:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  26:	be 20 00 00 00       	mov    $0x20,%esi
  2b:	48 89 c7             	mov    %rax,%rdi
  2e:	e8 00 00 00 00       	call   33 <SC16IS740::SetBaud(unsigned int)+0x33>
  33:	0f b6 c0             	movzbl %al,%eax
  36:	25 80 00 00 00       	and    $0x80,%eax
  3b:	3d 80 00 00 00       	cmp    $0x80,%eax
  40:	0f 94 c0             	sete   %al
  43:	84 c0                	test   %al,%al
  45:	74 09                	je     50 <SC16IS740::SetBaud(unsigned int)+0x50>
  47:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%rbp)
  4e:	eb 07                	jmp    57 <SC16IS740::SetBaud(unsigned int)+0x57>
  50:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%rbp)
  57:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  5b:	8b 40 08             	mov    0x8(%rax),%eax
  5e:	ba 00 00 00 00       	mov    $0x0,%edx
  63:	f7 75 f0             	divl   -0x10(%rbp)
  66:	89 c1                	mov    %eax,%ecx
  68:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  6b:	c1 e0 04             	shl    $0x4,%eax
  6e:	89 c6                	mov    %eax,%esi
  70:	89 c8                	mov    %ecx,%eax
  72:	ba 00 00 00 00       	mov    $0x0,%edx
  77:	f7 f6                	div    %esi
  79:	89 45 f4             	mov    %eax,-0xc(%rbp)
  7c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80:	be 18 00 00 00       	mov    $0x18,%esi
  85:	48 89 c7             	mov    %rax,%rdi
  88:	e8 00 00 00 00       	call   8d <SC16IS740::SetBaud(unsigned int)+0x8d>
  8d:	88 45 ef             	mov    %al,-0x11(%rbp)
  90:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  94:	0f b6 55 ef          	movzbl -0x11(%rbp),%edx
  98:	83 ca 80             	or     $0xffffff80,%edx
  9b:	0f b6 d2             	movzbl %dl,%edx
  9e:	be 18 00 00 00       	mov    $0x18,%esi
  a3:	48 89 c7             	mov    %rax,%rdi
  a6:	e8 00 00 00 00       	call   ab <SC16IS740::SetBaud(unsigned int)+0xab>
  ab:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  af:	8b 55 f4             	mov    -0xc(%rbp),%edx
  b2:	0f b6 d2             	movzbl %dl,%edx
  b5:	be 00 00 00 00       	mov    $0x0,%esi
  ba:	48 89 c7             	mov    %rax,%rdi
  bd:	e8 00 00 00 00       	call   c2 <SC16IS740::SetBaud(unsigned int)+0xc2>
  c2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  c6:	8b 55 f4             	mov    -0xc(%rbp),%edx
  c9:	c1 ea 08             	shr    $0x8,%edx
  cc:	0f b6 d2             	movzbl %dl,%edx
  cf:	be 08 00 00 00       	mov    $0x8,%esi
  d4:	48 89 c7             	mov    %rax,%rdi
  d7:	e8 00 00 00 00       	call   dc <SC16IS740::SetBaud(unsigned int)+0xdc>
  dc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  e0:	0f b6 55 ef          	movzbl -0x11(%rbp),%edx
  e4:	be 18 00 00 00       	mov    $0x18,%esi
  e9:	48 89 c7             	mov    %rax,%rdi
  ec:	e8 00 00 00 00       	call   f1 <SC16IS740::SetBaud(unsigned int)+0xf1>
  f1:	90                   	nop
  f2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  f6:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  fd:	00 00 
  ff:	74 05                	je     106 <SC16IS740::SetBaud(unsigned int)+0x106>
 101:	e8 00 00 00 00       	call   106 <SC16IS740::SetBaud(unsigned int)+0x106>
 106:	c9                   	leave  
 107:	c3                   	ret    

Disassembly of section .text._ZN9SC16IS74010WriteBytesEPKhj:

0000000000000000 <SC16IS740::WriteBytes(unsigned char const*, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 40          	sub    $0x40,%rsp
   c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  14:	89 55 cc             	mov    %edx,-0x34(%rbp)
  17:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1e:	00 00 
  20:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  24:	31 c0                	xor    %eax,%eax
  26:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  2a:	0f b6 40 0c          	movzbl 0xc(%rax),%eax
  2e:	83 f0 01             	xor    $0x1,%eax
  31:	84 c0                	test   %al,%al
  33:	75 5f                	jne    94 <SC16IS740::WriteBytes(unsigned char const*, unsigned int)+0x94>
  35:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  39:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  3d:	eb 4d                	jmp    8c <SC16IS740::WriteBytes(unsigned char const*, unsigned int)+0x8c>
  3f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  43:	be 40 00 00 00       	mov    $0x40,%esi
  48:	48 89 c7             	mov    %rax,%rdi
  4b:	e8 00 00 00 00       	call   50 <SC16IS740::WriteBytes(unsigned char const*, unsigned int)+0x50>
  50:	0f b6 c0             	movzbl %al,%eax
  53:	89 45 ec             	mov    %eax,-0x14(%rbp)
  56:	eb 28                	jmp    80 <SC16IS740::WriteBytes(unsigned char const*, unsigned int)+0x80>
  58:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  5c:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  60:	0f b6 12             	movzbl (%rdx),%edx
  63:	0f b6 d2             	movzbl %dl,%edx
  66:	be 00 00 00 00       	mov    $0x0,%esi
  6b:	48 89 c7             	mov    %rax,%rdi
  6e:	e8 00 00 00 00       	call   73 <SC16IS740::WriteBytes(unsigned char const*, unsigned int)+0x73>
  73:	83 6d cc 01          	subl   $0x1,-0x34(%rbp)
  77:	83 6d ec 01          	subl   $0x1,-0x14(%rbp)
  7b:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
  80:	83 7d cc 00          	cmpl   $0x0,-0x34(%rbp)
  84:	74 06                	je     8c <SC16IS740::WriteBytes(unsigned char const*, unsigned int)+0x8c>
  86:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  8a:	75 cc                	jne    58 <SC16IS740::WriteBytes(unsigned char const*, unsigned int)+0x58>
  8c:	83 7d cc 00          	cmpl   $0x0,-0x34(%rbp)
  90:	75 ad                	jne    3f <SC16IS740::WriteBytes(unsigned char const*, unsigned int)+0x3f>
  92:	eb 01                	jmp    95 <SC16IS740::WriteBytes(unsigned char const*, unsigned int)+0x95>
  94:	90                   	nop
  95:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  99:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  a0:	00 00 
  a2:	74 05                	je     a9 <SC16IS740::WriteBytes(unsigned char const*, unsigned int)+0xa9>
  a4:	e8 00 00 00 00       	call   a9 <SC16IS740::WriteBytes(unsigned char const*, unsigned int)+0xa9>
  a9:	c9                   	leave  
  aa:	c3                   	ret    

Disassembly of section .text._ZN9SC16IS7409ReadBytesEPhRjj:

0000000000000000 <SC16IS740::ReadBytes(unsigned char*, unsigned int&, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	53                   	push   %rbx
   9:	48 83 ec 48          	sub    $0x48,%rsp
   d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  11:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  15:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  19:	89 4d b4             	mov    %ecx,-0x4c(%rbp)
  1c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  23:	00 00 
  25:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  29:	31 c0                	xor    %eax,%eax
  2b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  2f:	0f b6 40 0c          	movzbl 0xc(%rax),%eax
  33:	83 f0 01             	xor    $0x1,%eax
  36:	84 c0                	test   %al,%al
  38:	74 0f                	je     49 <SC16IS740::ReadBytes(unsigned char*, unsigned int&, unsigned int)+0x49>
  3a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  3e:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
  44:	e9 bd 00 00 00       	jmp    106 <SC16IS740::ReadBytes(unsigned char*, unsigned int&, unsigned int)+0x106>
  49:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  4d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  51:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  55:	8b 00                	mov    (%rax),%eax
  57:	89 45 d4             	mov    %eax,-0x2c(%rbp)
  5a:	e9 8c 00 00 00       	jmp    eb <SC16IS740::ReadBytes(unsigned char*, unsigned int&, unsigned int)+0xeb>
  5f:	e8 00 00 00 00       	call   64 <SC16IS740::ReadBytes(unsigned char*, unsigned int&, unsigned int)+0x64>
  64:	48 89 c7             	mov    %rax,%rdi
  67:	e8 00 00 00 00       	call   6c <SC16IS740::ReadBytes(unsigned char*, unsigned int&, unsigned int)+0x6c>
  6c:	89 45 dc             	mov    %eax,-0x24(%rbp)
  6f:	eb 23                	jmp    94 <SC16IS740::ReadBytes(unsigned char*, unsigned int&, unsigned int)+0x94>
  71:	e8 00 00 00 00       	call   76 <SC16IS740::ReadBytes(unsigned char*, unsigned int&, unsigned int)+0x76>
  76:	48 89 c7             	mov    %rax,%rdi
  79:	e8 00 00 00 00       	call   7e <SC16IS740::ReadBytes(unsigned char*, unsigned int&, unsigned int)+0x7e>
  7e:	2b 45 b4             	sub    -0x4c(%rbp),%eax
  81:	39 45 dc             	cmp    %eax,-0x24(%rbp)
  84:	0f 92 c0             	setb   %al
  87:	84 c0                	test   %al,%al
  89:	74 09                	je     94 <SC16IS740::ReadBytes(unsigned char*, unsigned int&, unsigned int)+0x94>
  8b:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%rbp)
  92:	eb 22                	jmp    b6 <SC16IS740::ReadBytes(unsigned char*, unsigned int&, unsigned int)+0xb6>
  94:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  98:	be 48 00 00 00       	mov    $0x48,%esi
  9d:	48 89 c7             	mov    %rax,%rdi
  a0:	e8 00 00 00 00       	call   a5 <SC16IS740::ReadBytes(unsigned char*, unsigned int&, unsigned int)+0xa5>
  a5:	0f b6 c0             	movzbl %al,%eax
  a8:	89 45 d8             	mov    %eax,-0x28(%rbp)
  ab:	83 7d d8 00          	cmpl   $0x0,-0x28(%rbp)
  af:	0f 94 c0             	sete   %al
  b2:	84 c0                	test   %al,%al
  b4:	75 bb                	jne    71 <SC16IS740::ReadBytes(unsigned char*, unsigned int&, unsigned int)+0x71>
  b6:	eb 27                	jmp    df <SC16IS740::ReadBytes(unsigned char*, unsigned int&, unsigned int)+0xdf>
  b8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  bc:	48 8b 5d e0          	mov    -0x20(%rbp),%rbx
  c0:	48 8d 53 01          	lea    0x1(%rbx),%rdx
  c4:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
  c8:	be 00 00 00 00       	mov    $0x0,%esi
  cd:	48 89 c7             	mov    %rax,%rdi
  d0:	e8 00 00 00 00       	call   d5 <SC16IS740::ReadBytes(unsigned char*, unsigned int&, unsigned int)+0xd5>
  d5:	88 03                	mov    %al,(%rbx)
  d7:	83 6d d4 01          	subl   $0x1,-0x2c(%rbp)
  db:	83 6d d8 01          	subl   $0x1,-0x28(%rbp)
  df:	83 7d d4 00          	cmpl   $0x0,-0x2c(%rbp)
  e3:	74 06                	je     eb <SC16IS740::ReadBytes(unsigned char*, unsigned int&, unsigned int)+0xeb>
  e5:	83 7d d8 00          	cmpl   $0x0,-0x28(%rbp)
  e9:	75 cd                	jne    b8 <SC16IS740::ReadBytes(unsigned char*, unsigned int&, unsigned int)+0xb8>
  eb:	83 7d d4 00          	cmpl   $0x0,-0x2c(%rbp)
  ef:	0f 85 6a ff ff ff    	jne    5f <SC16IS740::ReadBytes(unsigned char*, unsigned int&, unsigned int)+0x5f>
  f5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  f9:	48 2b 45 c0          	sub    -0x40(%rbp),%rax
  fd:	0f b7 d0             	movzwl %ax,%edx
 100:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 104:	89 10                	mov    %edx,(%rax)
 106:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 10a:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 111:	00 00 
 113:	74 05                	je     11a <SC16IS740::ReadBytes(unsigned char*, unsigned int&, unsigned int)+0x11a>
 115:	e8 00 00 00 00       	call   11a <SC16IS740::ReadBytes(unsigned char*, unsigned int&, unsigned int)+0x11a>
 11a:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
 11e:	c9                   	leave  
 11f:	c3                   	ret    

Disassembly of section .text._ZN9SC16IS7409FlushReadEj:

0000000000000000 <SC16IS740::FlushRead(unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10:	89 75 d4             	mov    %esi,-0x2c(%rbp)
  13:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1a:	00 00 
  1c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  20:	31 c0                	xor    %eax,%eax
  22:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  26:	0f b6 40 0c          	movzbl 0xc(%rax),%eax
  2a:	83 f0 01             	xor    $0x1,%eax
  2d:	84 c0                	test   %al,%al
  2f:	75 7f                	jne    b0 <SC16IS740::FlushRead(unsigned int)+0xb0>
  31:	c6 45 ef 01          	movb   $0x1,-0x11(%rbp)
  35:	eb 71                	jmp    a8 <SC16IS740::FlushRead(unsigned int)+0xa8>
  37:	e8 00 00 00 00       	call   3c <SC16IS740::FlushRead(unsigned int)+0x3c>
  3c:	48 89 c7             	mov    %rax,%rdi
  3f:	e8 00 00 00 00       	call   44 <SC16IS740::FlushRead(unsigned int)+0x44>
  44:	89 45 f4             	mov    %eax,-0xc(%rbp)
  47:	eb 20                	jmp    69 <SC16IS740::FlushRead(unsigned int)+0x69>
  49:	e8 00 00 00 00       	call   4e <SC16IS740::FlushRead(unsigned int)+0x4e>
  4e:	48 89 c7             	mov    %rax,%rdi
  51:	e8 00 00 00 00       	call   56 <SC16IS740::FlushRead(unsigned int)+0x56>
  56:	2b 45 d4             	sub    -0x2c(%rbp),%eax
  59:	39 45 f4             	cmp    %eax,-0xc(%rbp)
  5c:	0f 92 c0             	setb   %al
  5f:	84 c0                	test   %al,%al
  61:	74 06                	je     69 <SC16IS740::FlushRead(unsigned int)+0x69>
  63:	c6 45 ef 00          	movb   $0x0,-0x11(%rbp)
  67:	eb 22                	jmp    8b <SC16IS740::FlushRead(unsigned int)+0x8b>
  69:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  6d:	be 48 00 00 00       	mov    $0x48,%esi
  72:	48 89 c7             	mov    %rax,%rdi
  75:	e8 00 00 00 00       	call   7a <SC16IS740::FlushRead(unsigned int)+0x7a>
  7a:	0f b6 c0             	movzbl %al,%eax
  7d:	89 45 f0             	mov    %eax,-0x10(%rbp)
  80:	83 7d f0 00          	cmpl   $0x0,-0x10(%rbp)
  84:	0f 94 c0             	sete   %al
  87:	84 c0                	test   %al,%al
  89:	75 be                	jne    49 <SC16IS740::FlushRead(unsigned int)+0x49>
  8b:	eb 15                	jmp    a2 <SC16IS740::FlushRead(unsigned int)+0xa2>
  8d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  91:	be 00 00 00 00       	mov    $0x0,%esi
  96:	48 89 c7             	mov    %rax,%rdi
  99:	e8 00 00 00 00       	call   9e <SC16IS740::FlushRead(unsigned int)+0x9e>
  9e:	83 6d f0 01          	subl   $0x1,-0x10(%rbp)
  a2:	83 7d f0 00          	cmpl   $0x0,-0x10(%rbp)
  a6:	75 e5                	jne    8d <SC16IS740::FlushRead(unsigned int)+0x8d>
  a8:	80 7d ef 00          	cmpb   $0x0,-0x11(%rbp)
  ac:	75 89                	jne    37 <SC16IS740::FlushRead(unsigned int)+0x37>
  ae:	eb 01                	jmp    b1 <SC16IS740::FlushRead(unsigned int)+0xb1>
  b0:	90                   	nop
  b1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  b5:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  bc:	00 00 
  be:	74 05                	je     c5 <SC16IS740::FlushRead(unsigned int)+0xc5>
  c0:	e8 00 00 00 00       	call   c5 <SC16IS740::FlushRead(unsigned int)+0xc5>
  c5:	c9                   	leave  
  c6:	c3                   	ret    

si5351a.o:     file format elf64-x86-64


Disassembly of section .text._ZL16i2c_set_baudratej:

0000000000000000 <i2c_set_baudrate(unsigned int)>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	89 7d ec             	mov    %edi,-0x14(%rbp)
   b:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  12:	00 00 
  14:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  18:	31 c0                	xor    %eax,%eax
  1a:	90                   	nop
  1b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1f:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  26:	00 00 
  28:	74 05                	je     2f <i2c_set_baudrate(unsigned int)+0x2f>
  2a:	e8 00 00 00 00       	call   2f <i2c_set_baudrate(unsigned int)+0x2f>
  2f:	c9                   	leave  
  30:	c3                   	ret    

Disassembly of section .text._ZL15i2c_set_addressh:

0000000000000000 <i2c_set_address(unsigned char)>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	89 f8                	mov    %edi,%eax
   a:	88 45 ec             	mov    %al,-0x14(%rbp)
   d:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  14:	00 00 
  16:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1a:	31 c0                	xor    %eax,%eax
  1c:	90                   	nop
  1d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  21:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  28:	00 00 
  2a:	74 05                	je     31 <i2c_set_address(unsigned char)+0x31>
  2c:	e8 00 00 00 00       	call   31 <i2c_set_address(unsigned char)+0x31>
  31:	c9                   	leave  
  32:	c3                   	ret    

Disassembly of section .text._ZL9i2c_writePKcj:

0000000000000000 <i2c_write(char const*, unsigned int)>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	89 75 e4             	mov    %esi,-0x1c(%rbp)
   f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  16:	00 00 
  18:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1c:	31 c0                	xor    %eax,%eax
  1e:	b8 01 00 00 00       	mov    $0x1,%eax
  23:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  27:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  2e:	00 00 
  30:	74 05                	je     37 <i2c_write(char const*, unsigned int)+0x37>
  32:	e8 00 00 00 00       	call   37 <i2c_write(char const*, unsigned int)+0x37>
  37:	c9                   	leave  
  38:	c3                   	ret    

Disassembly of section .text._ZL8i2c_readPcj:

0000000000000000 <i2c_read(char*, unsigned int)>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	89 75 e4             	mov    %esi,-0x1c(%rbp)
   f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  16:	00 00 
  18:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1c:	31 c0                	xor    %eax,%eax
  1e:	b8 01 00 00 00       	mov    $0x1,%eax
  23:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  27:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  2e:	00 00 
  30:	74 05                	je     37 <i2c_read(char*, unsigned int)+0x37>
  32:	e8 00 00 00 00       	call   37 <i2c_read(char*, unsigned int)+0x37>
  37:	c9                   	leave  
  38:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2CC2Ehj:

0000000000000000 <HAL_I2C::HAL_I2C(unsigned char, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	89 55 e0             	mov    %edx,-0x20(%rbp)
  15:	88 45 e4             	mov    %al,-0x1c(%rbp)
  18:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1f:	00 00 
  21:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  25:	31 c0                	xor    %eax,%eax
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2b:	0f b6 55 e4          	movzbl -0x1c(%rbp),%edx
  2f:	88 10                	mov    %dl,(%rax)
  31:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  35:	8b 55 e0             	mov    -0x20(%rbp),%edx
  38:	89 50 04             	mov    %edx,0x4(%rax)
  3b:	90                   	nop
  3c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  47:	00 00 
  49:	74 05                	je     50 <HAL_I2C::HAL_I2C(unsigned char, unsigned int)+0x50>
  4b:	e8 00 00 00 00       	call   50 <HAL_I2C::HAL_I2C(unsigned char, unsigned int)+0x50>
  50:	c9                   	leave  
  51:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2C11IsConnectedEv:

0000000000000000 <HAL_I2C::IsConnected()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	8b 50 04             	mov    0x4(%rax),%edx
  26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2a:	0f b6 00             	movzbl (%rax),%eax
  2d:	0f b6 c0             	movzbl %al,%eax
  30:	89 d6                	mov    %edx,%esi
  32:	89 c7                	mov    %eax,%edi
  34:	e8 00 00 00 00       	call   39 <HAL_I2C::IsConnected()+0x39>
  39:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  3d:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  44:	00 00 
  46:	74 05                	je     4d <HAL_I2C::IsConnected()+0x4d>
  48:	e8 00 00 00 00       	call   4d <HAL_I2C::IsConnected()+0x4d>
  4d:	c9                   	leave  
  4e:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2C13WriteRegisterEhh:

0000000000000000 <HAL_I2C::WriteRegister(unsigned char, unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f1                	mov    %esi,%ecx
  12:	89 d0                	mov    %edx,%eax
  14:	89 ca                	mov    %ecx,%edx
  16:	88 55 e4             	mov    %dl,-0x1c(%rbp)
  19:	88 45 e0             	mov    %al,-0x20(%rbp)
  1c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  23:	00 00 
  25:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  29:	31 c0                	xor    %eax,%eax
  2b:	0f b6 45 e4          	movzbl -0x1c(%rbp),%eax
  2f:	88 45 f6             	mov    %al,-0xa(%rbp)
  32:	0f b6 45 e0          	movzbl -0x20(%rbp),%eax
  36:	88 45 f7             	mov    %al,-0x9(%rbp)
  39:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3d:	48 89 c7             	mov    %rax,%rdi
  40:	e8 00 00 00 00       	call   45 <HAL_I2C::WriteRegister(unsigned char, unsigned char)+0x45>
  45:	48 8d 45 f6          	lea    -0xa(%rbp),%rax
  49:	be 02 00 00 00       	mov    $0x2,%esi
  4e:	48 89 c7             	mov    %rax,%rdi
  51:	e8 00 00 00 00       	call   56 <HAL_I2C::WriteRegister(unsigned char, unsigned char)+0x56>
  56:	90                   	nop
  57:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  5b:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  62:	00 00 
  64:	74 05                	je     6b <HAL_I2C::WriteRegister(unsigned char, unsigned char)+0x6b>
  66:	e8 00 00 00 00       	call   6b <HAL_I2C::WriteRegister(unsigned char, unsigned char)+0x6b>
  6b:	c9                   	leave  
  6c:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2C5SetupEv:

0000000000000000 <HAL_I2C::Setup()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	0f b6 00             	movzbl (%rax),%eax
  26:	0f b6 c0             	movzbl %al,%eax
  29:	89 c7                	mov    %eax,%edi
  2b:	e8 00 00 00 00       	call   30 <HAL_I2C::Setup()+0x30>
  30:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  34:	8b 40 04             	mov    0x4(%rax),%eax
  37:	89 c7                	mov    %eax,%edi
  39:	e8 00 00 00 00       	call   3e <HAL_I2C::Setup()+0x3e>
  3e:	90                   	nop
  3f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  4a:	00 00 
  4c:	74 05                	je     53 <HAL_I2C::Setup()+0x53>
  4e:	e8 00 00 00 00       	call   53 <HAL_I2C::Setup()+0x53>
  53:	c9                   	leave  
  54:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2C12IsConnected_Ehj:

0000000000000000 <HAL_I2C::IsConnected_(unsigned char, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	89 f8                	mov    %edi,%eax
   e:	89 75 e8             	mov    %esi,-0x18(%rbp)
  11:	88 45 ec             	mov    %al,-0x14(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	0f b6 45 ec          	movzbl -0x14(%rbp),%eax
  27:	89 c7                	mov    %eax,%edi
  29:	e8 00 00 00 00       	call   2e <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x2e>
  2e:	8b 45 e8             	mov    -0x18(%rbp),%eax
  31:	89 c7                	mov    %eax,%edi
  33:	e8 00 00 00 00       	call   38 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x38>
  38:	80 7d ec 2f          	cmpb   $0x2f,-0x14(%rbp)
  3c:	76 06                	jbe    44 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x44>
  3e:	80 7d ec 37          	cmpb   $0x37,-0x14(%rbp)
  42:	76 0c                	jbe    50 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x50>
  44:	80 7d ec 4f          	cmpb   $0x4f,-0x14(%rbp)
  48:	76 1e                	jbe    68 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x68>
  4a:	80 7d ec 5f          	cmpb   $0x5f,-0x14(%rbp)
  4e:	77 18                	ja     68 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x68>
  50:	48 8d 45 f7          	lea    -0x9(%rbp),%rax
  54:	be 01 00 00 00       	mov    $0x1,%esi
  59:	48 89 c7             	mov    %rax,%rdi
  5c:	e8 00 00 00 00       	call   61 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x61>
  61:	84 c0                	test   %al,%al
  63:	0f 94 c0             	sete   %al
  66:	eb 14                	jmp    7c <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x7c>
  68:	be 00 00 00 00       	mov    $0x0,%esi
  6d:	bf 00 00 00 00       	mov    $0x0,%edi
  72:	e8 00 00 00 00       	call   77 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x77>
  77:	84 c0                	test   %al,%al
  79:	0f 94 c0             	sete   %al
  7c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  87:	00 00 
  89:	74 05                	je     90 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x90>
  8b:	e8 00 00 00 00       	call   90 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x90>
  90:	c9                   	leave  
  91:	c3                   	ret    

Disassembly of section .text._ZN7SI5351AC2Eh:

0000000000000000 <SI5351A::SI5351A(unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	88 45 e4             	mov    %al,-0x1c(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  28:	0f b6 45 e4          	movzbl -0x1c(%rbp),%eax
  2c:	84 c0                	test   %al,%al
  2e:	74 0c                	je     3c <SI5351A::SI5351A(unsigned char)+0x3c>
  30:	48 8d 45 e4          	lea    -0x1c(%rbp),%rax
  34:	0f b6 00             	movzbl (%rax),%eax
  37:	0f b6 c0             	movzbl %al,%eax
  3a:	eb 05                	jmp    41 <SI5351A::SI5351A(unsigned char)+0x41>
  3c:	b8 60 00 00 00       	mov    $0x60,%eax
  41:	ba 80 1a 06 00       	mov    $0x61a80,%edx
  46:	89 c6                	mov    %eax,%esi
  48:	48 89 cf             	mov    %rcx,%rdi
  4b:	e8 00 00 00 00       	call   50 <SI5351A::SI5351A(unsigned char)+0x50>
  50:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  54:	c6 40 08 00          	movb   $0x0,0x8(%rax)
  58:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5c:	48 89 c7             	mov    %rax,%rdi
  5f:	e8 00 00 00 00       	call   64 <SI5351A::SI5351A(unsigned char)+0x64>
  64:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  68:	88 42 08             	mov    %al,0x8(%rdx)
  6b:	90                   	nop
  6c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  70:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  77:	00 00 
  79:	74 05                	je     80 <SI5351A::SI5351A(unsigned char)+0x80>
  7b:	e8 00 00 00 00       	call   80 <SI5351A::SI5351A(unsigned char)+0x80>
  80:	c9                   	leave  
  81:	c3                   	ret    

Disassembly of section .text._ZN7SI5351A12ClockBuilderEv:

0000000000000000 <SI5351A::ClockBuilder()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	call   2b <SI5351A::ClockBuilder()+0x2b>
  2b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  32:	eb 3c                	jmp    70 <SI5351A::ClockBuilder()+0x70>
  34:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  38:	8b 55 f4             	mov    -0xc(%rbp),%edx
  3b:	48 8d 0c 12          	lea    (%rdx,%rdx,1),%rcx
  3f:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 46 <SI5351A::ClockBuilder()+0x46>
  46:	0f b6 14 11          	movzbl (%rcx,%rdx,1),%edx
  4a:	0f b6 d2             	movzbl %dl,%edx
  4d:	8b 4d f4             	mov    -0xc(%rbp),%ecx
  50:	48 8d 34 09          	lea    (%rcx,%rcx,1),%rsi
  54:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 5b <SI5351A::ClockBuilder()+0x5b>
  5b:	0f b6 0c 0e          	movzbl (%rsi,%rcx,1),%ecx
  5f:	0f b6 c9             	movzbl %cl,%ecx
  62:	89 ce                	mov    %ecx,%esi
  64:	48 89 c7             	mov    %rax,%rdi
  67:	e8 00 00 00 00       	call   6c <SI5351A::ClockBuilder()+0x6c>
  6c:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  70:	83 7d f4 38          	cmpl   $0x38,-0xc(%rbp)
  74:	76 be                	jbe    34 <SI5351A::ClockBuilder()+0x34>
  76:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7a:	48 89 c7             	mov    %rax,%rdi
  7d:	e8 00 00 00 00       	call   82 <SI5351A::ClockBuilder()+0x82>
  82:	90                   	nop
  83:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  87:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  8e:	00 00 
  90:	74 05                	je     97 <SI5351A::ClockBuilder()+0x97>
  92:	e8 00 00 00 00       	call   97 <SI5351A::ClockBuilder()+0x97>
  97:	c9                   	leave  
  98:	c3                   	ret    

Disassembly of section .text._ZN7SI5351A3PreEv:

0000000000000000 <SI5351A::Pre()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	ba ff 00 00 00       	mov    $0xff,%edx
  28:	be 03 00 00 00       	mov    $0x3,%esi
  2d:	48 89 c7             	mov    %rax,%rdi
  30:	e8 00 00 00 00       	call   35 <SI5351A::Pre()+0x35>
  35:	c7 45 f4 10 00 00 00 	movl   $0x10,-0xc(%rbp)
  3c:	eb 1d                	jmp    5b <SI5351A::Pre()+0x5b>
  3e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  42:	8b 55 f4             	mov    -0xc(%rbp),%edx
  45:	0f b6 ca             	movzbl %dl,%ecx
  48:	ba 80 00 00 00       	mov    $0x80,%edx
  4d:	89 ce                	mov    %ecx,%esi
  4f:	48 89 c7             	mov    %rax,%rdi
  52:	e8 00 00 00 00       	call   57 <SI5351A::Pre()+0x57>
  57:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  5b:	83 7d f4 17          	cmpl   $0x17,-0xc(%rbp)
  5f:	76 dd                	jbe    3e <SI5351A::Pre()+0x3e>
  61:	90                   	nop
  62:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  66:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  6d:	00 00 
  6f:	74 05                	je     76 <SI5351A::Pre()+0x76>
  71:	e8 00 00 00 00       	call   76 <SI5351A::Pre()+0x76>
  76:	c9                   	leave  
  77:	c3                   	ret    

Disassembly of section .text._ZN7SI5351A4PostEv:

0000000000000000 <SI5351A::Post()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	ba ac 00 00 00       	mov    $0xac,%edx
  28:	be b1 00 00 00       	mov    $0xb1,%esi
  2d:	48 89 c7             	mov    %rax,%rdi
  30:	e8 00 00 00 00       	call   35 <SI5351A::Post()+0x35>
  35:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  39:	ba 00 00 00 00       	mov    $0x0,%edx
  3e:	be 03 00 00 00       	mov    $0x3,%esi
  43:	48 89 c7             	mov    %rax,%rdi
  46:	e8 00 00 00 00       	call   4b <SI5351A::Post()+0x4b>
  4b:	90                   	nop
  4c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  50:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  57:	00 00 
  59:	74 05                	je     60 <SI5351A::Post()+0x60>
  5b:	e8 00 00 00 00       	call   60 <SI5351A::Post()+0x60>
  60:	c9                   	leave  
  61:	c3                   	ret    

si7021.o:     file format elf64-x86-64


Disassembly of section .text.udelay:

0000000000000000 <udelay>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	89 7d ec             	mov    %edi,-0x14(%rbp)
   f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  16:	00 00 
  18:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1c:	31 c0                	xor    %eax,%eax
  1e:	90                   	nop
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  2a:	00 00 
  2c:	74 05                	je     33 <udelay+0x33>
  2e:	e8 00 00 00 00       	call   33 <udelay+0x33>
  33:	c9                   	leave  
  34:	c3                   	ret    

Disassembly of section .text._ZL16i2c_set_baudratej:

0000000000000000 <i2c_set_baudrate(unsigned int)>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	89 7d ec             	mov    %edi,-0x14(%rbp)
   b:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  12:	00 00 
  14:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  18:	31 c0                	xor    %eax,%eax
  1a:	90                   	nop
  1b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1f:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  26:	00 00 
  28:	74 05                	je     2f <i2c_set_baudrate(unsigned int)+0x2f>
  2a:	e8 00 00 00 00       	call   2f <i2c_set_baudrate(unsigned int)+0x2f>
  2f:	c9                   	leave  
  30:	c3                   	ret    

Disassembly of section .text._ZL15i2c_set_addressh:

0000000000000000 <i2c_set_address(unsigned char)>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	89 f8                	mov    %edi,%eax
   a:	88 45 ec             	mov    %al,-0x14(%rbp)
   d:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  14:	00 00 
  16:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1a:	31 c0                	xor    %eax,%eax
  1c:	90                   	nop
  1d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  21:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  28:	00 00 
  2a:	74 05                	je     31 <i2c_set_address(unsigned char)+0x31>
  2c:	e8 00 00 00 00       	call   31 <i2c_set_address(unsigned char)+0x31>
  31:	c9                   	leave  
  32:	c3                   	ret    

Disassembly of section .text._ZL9i2c_writePKcj:

0000000000000000 <i2c_write(char const*, unsigned int)>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	89 75 e4             	mov    %esi,-0x1c(%rbp)
   f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  16:	00 00 
  18:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1c:	31 c0                	xor    %eax,%eax
  1e:	b8 01 00 00 00       	mov    $0x1,%eax
  23:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  27:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  2e:	00 00 
  30:	74 05                	je     37 <i2c_write(char const*, unsigned int)+0x37>
  32:	e8 00 00 00 00       	call   37 <i2c_write(char const*, unsigned int)+0x37>
  37:	c9                   	leave  
  38:	c3                   	ret    

Disassembly of section .text._ZL8i2c_readPcj:

0000000000000000 <i2c_read(char*, unsigned int)>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	89 75 e4             	mov    %esi,-0x1c(%rbp)
   f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  16:	00 00 
  18:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1c:	31 c0                	xor    %eax,%eax
  1e:	b8 01 00 00 00       	mov    $0x1,%eax
  23:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  27:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  2e:	00 00 
  30:	74 05                	je     37 <i2c_read(char*, unsigned int)+0x37>
  32:	e8 00 00 00 00       	call   37 <i2c_read(char*, unsigned int)+0x37>
  37:	c9                   	leave  
  38:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2CC2Ehj:

0000000000000000 <HAL_I2C::HAL_I2C(unsigned char, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	89 55 e0             	mov    %edx,-0x20(%rbp)
  15:	88 45 e4             	mov    %al,-0x1c(%rbp)
  18:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1f:	00 00 
  21:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  25:	31 c0                	xor    %eax,%eax
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2b:	0f b6 55 e4          	movzbl -0x1c(%rbp),%edx
  2f:	88 10                	mov    %dl,(%rax)
  31:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  35:	8b 55 e0             	mov    -0x20(%rbp),%edx
  38:	89 50 04             	mov    %edx,0x4(%rax)
  3b:	90                   	nop
  3c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  47:	00 00 
  49:	74 05                	je     50 <HAL_I2C::HAL_I2C(unsigned char, unsigned int)+0x50>
  4b:	e8 00 00 00 00       	call   50 <HAL_I2C::HAL_I2C(unsigned char, unsigned int)+0x50>
  50:	c9                   	leave  
  51:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2C11IsConnectedEv:

0000000000000000 <HAL_I2C::IsConnected()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	8b 50 04             	mov    0x4(%rax),%edx
  26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2a:	0f b6 00             	movzbl (%rax),%eax
  2d:	0f b6 c0             	movzbl %al,%eax
  30:	89 d6                	mov    %edx,%esi
  32:	89 c7                	mov    %eax,%edi
  34:	e8 00 00 00 00       	call   39 <HAL_I2C::IsConnected()+0x39>
  39:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  3d:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  44:	00 00 
  46:	74 05                	je     4d <HAL_I2C::IsConnected()+0x4d>
  48:	e8 00 00 00 00       	call   4d <HAL_I2C::IsConnected()+0x4d>
  4d:	c9                   	leave  
  4e:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2C5WriteEh:

0000000000000000 <HAL_I2C::Write(unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	88 45 e4             	mov    %al,-0x1c(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  28:	48 89 c7             	mov    %rax,%rdi
  2b:	e8 00 00 00 00       	call   30 <HAL_I2C::Write(unsigned char)+0x30>
  30:	0f b6 45 e4          	movzbl -0x1c(%rbp),%eax
  34:	88 45 f7             	mov    %al,-0x9(%rbp)
  37:	48 8d 45 f7          	lea    -0x9(%rbp),%rax
  3b:	be 01 00 00 00       	mov    $0x1,%esi
  40:	48 89 c7             	mov    %rax,%rdi
  43:	e8 00 00 00 00       	call   48 <HAL_I2C::Write(unsigned char)+0x48>
  48:	90                   	nop
  49:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4d:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  54:	00 00 
  56:	74 05                	je     5d <HAL_I2C::Write(unsigned char)+0x5d>
  58:	e8 00 00 00 00       	call   5d <HAL_I2C::Write(unsigned char)+0x5d>
  5d:	c9                   	leave  
  5e:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2C4ReadEPcj:

0000000000000000 <HAL_I2C::Read(char*, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  14:	89 55 dc             	mov    %edx,-0x24(%rbp)
  17:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1e:	00 00 
  20:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  24:	31 c0                	xor    %eax,%eax
  26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2a:	48 89 c7             	mov    %rax,%rdi
  2d:	e8 00 00 00 00       	call   32 <HAL_I2C::Read(char*, unsigned int)+0x32>
  32:	8b 55 dc             	mov    -0x24(%rbp),%edx
  35:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  39:	89 d6                	mov    %edx,%esi
  3b:	48 89 c7             	mov    %rax,%rdi
  3e:	e8 00 00 00 00       	call   43 <HAL_I2C::Read(char*, unsigned int)+0x43>
  43:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  47:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  4e:	00 00 
  50:	74 05                	je     57 <HAL_I2C::Read(char*, unsigned int)+0x57>
  52:	e8 00 00 00 00       	call   57 <HAL_I2C::Read(char*, unsigned int)+0x57>
  57:	c9                   	leave  
  58:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2C5SetupEv:

0000000000000000 <HAL_I2C::Setup()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	0f b6 00             	movzbl (%rax),%eax
  26:	0f b6 c0             	movzbl %al,%eax
  29:	89 c7                	mov    %eax,%edi
  2b:	e8 00 00 00 00       	call   30 <HAL_I2C::Setup()+0x30>
  30:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  34:	8b 40 04             	mov    0x4(%rax),%eax
  37:	89 c7                	mov    %eax,%edi
  39:	e8 00 00 00 00       	call   3e <HAL_I2C::Setup()+0x3e>
  3e:	90                   	nop
  3f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  4a:	00 00 
  4c:	74 05                	je     53 <HAL_I2C::Setup()+0x53>
  4e:	e8 00 00 00 00       	call   53 <HAL_I2C::Setup()+0x53>
  53:	c9                   	leave  
  54:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2C12IsConnected_Ehj:

0000000000000000 <HAL_I2C::IsConnected_(unsigned char, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	89 f8                	mov    %edi,%eax
   e:	89 75 e8             	mov    %esi,-0x18(%rbp)
  11:	88 45 ec             	mov    %al,-0x14(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	0f b6 45 ec          	movzbl -0x14(%rbp),%eax
  27:	89 c7                	mov    %eax,%edi
  29:	e8 00 00 00 00       	call   2e <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x2e>
  2e:	8b 45 e8             	mov    -0x18(%rbp),%eax
  31:	89 c7                	mov    %eax,%edi
  33:	e8 00 00 00 00       	call   38 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x38>
  38:	80 7d ec 2f          	cmpb   $0x2f,-0x14(%rbp)
  3c:	76 06                	jbe    44 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x44>
  3e:	80 7d ec 37          	cmpb   $0x37,-0x14(%rbp)
  42:	76 0c                	jbe    50 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x50>
  44:	80 7d ec 4f          	cmpb   $0x4f,-0x14(%rbp)
  48:	76 1e                	jbe    68 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x68>
  4a:	80 7d ec 5f          	cmpb   $0x5f,-0x14(%rbp)
  4e:	77 18                	ja     68 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x68>
  50:	48 8d 45 f7          	lea    -0x9(%rbp),%rax
  54:	be 01 00 00 00       	mov    $0x1,%esi
  59:	48 89 c7             	mov    %rax,%rdi
  5c:	e8 00 00 00 00       	call   61 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x61>
  61:	84 c0                	test   %al,%al
  63:	0f 94 c0             	sete   %al
  66:	eb 14                	jmp    7c <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x7c>
  68:	be 00 00 00 00       	mov    $0x0,%esi
  6d:	bf 00 00 00 00       	mov    $0x0,%edi
  72:	e8 00 00 00 00       	call   77 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x77>
  77:	84 c0                	test   %al,%al
  79:	0f 94 c0             	sete   %al
  7c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  87:	00 00 
  89:	74 05                	je     90 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x90>
  8b:	e8 00 00 00 00       	call   90 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x90>
  90:	c9                   	leave  
  91:	c3                   	ret    

Disassembly of section .text._ZN6sensor6SI7021C2Eh:

0000000000000000 <sensor::SI7021::SI7021(unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	88 45 e4             	mov    %al,-0x1c(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  28:	0f b6 45 e4          	movzbl -0x1c(%rbp),%eax
  2c:	84 c0                	test   %al,%al
  2e:	74 0c                	je     3c <sensor::SI7021::SI7021(unsigned char)+0x3c>
  30:	48 8d 45 e4          	lea    -0x1c(%rbp),%rax
  34:	0f b6 00             	movzbl (%rax),%eax
  37:	0f b6 c0             	movzbl %al,%eax
  3a:	eb 05                	jmp    41 <sensor::SI7021::SI7021(unsigned char)+0x41>
  3c:	b8 40 00 00 00       	mov    $0x40,%eax
  41:	ba 80 1a 06 00       	mov    $0x61a80,%edx
  46:	89 c6                	mov    %eax,%esi
  48:	48 89 cf             	mov    %rcx,%rdi
  4b:	e8 00 00 00 00       	call   50 <sensor::SI7021::SI7021(unsigned char)+0x50>
  50:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  54:	c6 40 08 00          	movb   $0x0,0x8(%rax)
  58:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5c:	48 89 c7             	mov    %rax,%rdi
  5f:	e8 00 00 00 00       	call   64 <sensor::SI7021::SI7021(unsigned char)+0x64>
  64:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  68:	88 42 08             	mov    %al,0x8(%rdx)
  6b:	90                   	nop
  6c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  70:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  77:	00 00 
  79:	74 05                	je     80 <sensor::SI7021::SI7021(unsigned char)+0x80>
  7b:	e8 00 00 00 00       	call   80 <sensor::SI7021::SI7021(unsigned char)+0x80>
  80:	c9                   	leave  
  81:	c3                   	ret    

Disassembly of section .text._ZN6sensor6SI702114GetTemperatureEv:

0000000000000000 <sensor::SI7021::GetTemperature()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	be f3 00 00 00       	mov    $0xf3,%esi
  28:	48 89 c7             	mov    %rax,%rdi
  2b:	e8 00 00 00 00       	call   30 <sensor::SI7021::GetTemperature()+0x30>
  30:	0f b7 c0             	movzwl %ax,%eax
  33:	66 0f ef c0          	pxor   %xmm0,%xmm0
  37:	f3 0f 2a c0          	cvtsi2ss %eax,%xmm0
  3b:	f3 0f 10 0d 00 00 00 	movss  0x0(%rip),%xmm1        # 43 <sensor::SI7021::GetTemperature()+0x43>
  42:	00 
  43:	f3 0f 5e c1          	divss  %xmm1,%xmm0
  47:	f3 0f 11 45 f4       	movss  %xmm0,-0xc(%rbp)
  4c:	f3 0f 10 4d f4       	movss  -0xc(%rbp),%xmm1
  51:	f3 0f 10 05 00 00 00 	movss  0x0(%rip),%xmm0        # 59 <sensor::SI7021::GetTemperature()+0x59>
  58:	00 
  59:	f3 0f 59 c1          	mulss  %xmm1,%xmm0
  5d:	f3 0f 10 0d 00 00 00 	movss  0x0(%rip),%xmm1        # 65 <sensor::SI7021::GetTemperature()+0x65>
  64:	00 
  65:	f3 0f 5c c1          	subss  %xmm1,%xmm0
  69:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  6d:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  74:	00 00 
  76:	74 05                	je     7d <sensor::SI7021::GetTemperature()+0x7d>
  78:	e8 00 00 00 00       	call   7d <sensor::SI7021::GetTemperature()+0x7d>
  7d:	c9                   	leave  
  7e:	c3                   	ret    

Disassembly of section .text._ZN6sensor6SI702111GetHumidityEv:

0000000000000000 <sensor::SI7021::GetHumidity()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	be f5 00 00 00       	mov    $0xf5,%esi
  28:	48 89 c7             	mov    %rax,%rdi
  2b:	e8 00 00 00 00       	call   30 <sensor::SI7021::GetHumidity()+0x30>
  30:	0f b7 c0             	movzwl %ax,%eax
  33:	66 0f ef c0          	pxor   %xmm0,%xmm0
  37:	f3 0f 2a c0          	cvtsi2ss %eax,%xmm0
  3b:	f3 0f 10 0d 00 00 00 	movss  0x0(%rip),%xmm1        # 43 <sensor::SI7021::GetHumidity()+0x43>
  42:	00 
  43:	f3 0f 5e c1          	divss  %xmm1,%xmm0
  47:	f3 0f 11 45 f4       	movss  %xmm0,-0xc(%rbp)
  4c:	f3 0f 10 4d f4       	movss  -0xc(%rbp),%xmm1
  51:	f3 0f 10 05 00 00 00 	movss  0x0(%rip),%xmm0        # 59 <sensor::SI7021::GetHumidity()+0x59>
  58:	00 
  59:	f3 0f 59 c1          	mulss  %xmm1,%xmm0
  5d:	f3 0f 10 0d 00 00 00 	movss  0x0(%rip),%xmm1        # 65 <sensor::SI7021::GetHumidity()+0x65>
  64:	00 
  65:	f3 0f 5c c1          	subss  %xmm1,%xmm0
  69:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  6d:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  74:	00 00 
  76:	74 05                	je     7d <sensor::SI7021::GetHumidity()+0x7d>
  78:	e8 00 00 00 00       	call   7d <sensor::SI7021::GetHumidity()+0x7d>
  7d:	c9                   	leave  
  7e:	c3                   	ret    

Disassembly of section .text._ZN6sensor6SI70217ReadRawEh:

0000000000000000 <sensor::SI7021::ReadRaw(unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	88 45 d4             	mov    %al,-0x2c(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  28:	0f b6 55 d4          	movzbl -0x2c(%rbp),%edx
  2c:	89 d6                	mov    %edx,%esi
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	call   36 <sensor::SI7021::ReadRaw(unsigned char)+0x36>
  36:	66 c7 45 f5 00 00    	movw   $0x0,-0xb(%rbp)
  3c:	c6 45 f7 00          	movb   $0x0,-0x9(%rbp)
  40:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
  47:	eb 35                	jmp    7e <sensor::SI7021::ReadRaw(unsigned char)+0x7e>
  49:	bf 10 27 00 00       	mov    $0x2710,%edi
  4e:	e8 00 00 00 00       	call   53 <sensor::SI7021::ReadRaw(unsigned char)+0x53>
  53:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  57:	48 8d 4d f5          	lea    -0xb(%rbp),%rcx
  5b:	ba 03 00 00 00       	mov    $0x3,%edx
  60:	48 89 ce             	mov    %rcx,%rsi
  63:	48 89 c7             	mov    %rax,%rdi
  66:	e8 00 00 00 00       	call   6b <sensor::SI7021::ReadRaw(unsigned char)+0x6b>
  6b:	0f b6 45 f5          	movzbl -0xb(%rbp),%eax
  6f:	0f be c0             	movsbl %al,%eax
  72:	83 e0 03             	and    $0x3,%eax
  75:	83 f8 02             	cmp    $0x2,%eax
  78:	74 0c                	je     86 <sensor::SI7021::ReadRaw(unsigned char)+0x86>
  7a:	83 45 f0 01          	addl   $0x1,-0x10(%rbp)
  7e:	83 7d f0 07          	cmpl   $0x7,-0x10(%rbp)
  82:	76 c5                	jbe    49 <sensor::SI7021::ReadRaw(unsigned char)+0x49>
  84:	eb 01                	jmp    87 <sensor::SI7021::ReadRaw(unsigned char)+0x87>
  86:	90                   	nop
  87:	0f b6 45 f5          	movzbl -0xb(%rbp),%eax
  8b:	0f be c0             	movsbl %al,%eax
  8e:	c1 e0 08             	shl    $0x8,%eax
  91:	89 c2                	mov    %eax,%edx
  93:	0f b6 45 f6          	movzbl -0xa(%rbp),%eax
  97:	66 98                	cbtw   
  99:	09 d0                	or     %edx,%eax
  9b:	66 89 45 ee          	mov    %ax,-0x12(%rbp)
  9f:	0f b7 45 ee          	movzwl -0x12(%rbp),%eax
  a3:	83 e0 fc             	and    $0xfffffffc,%eax
  a6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  aa:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  b1:	00 00 
  b3:	74 05                	je     ba <sensor::SI7021::ReadRaw(unsigned char)+0xba>
  b5:	e8 00 00 00 00       	call   ba <sensor::SI7021::ReadRaw(unsigned char)+0xba>
  ba:	c9                   	leave  
  bb:	c3                   	ret    

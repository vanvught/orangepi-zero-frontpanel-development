In archive lib_linux/libproperties.a:

devicesparamsconst.o:     file format elf64-x86-64


parse.o:     file format elf64-x86-64


Disassembly of section .text._ZN5Parse11DmxSlotInfoEPcRbRhRt:

0000000000000000 <Parse::DmxSlotInfo(char*, bool&, unsigned char&, unsigned short&)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 40          	sub    $0x40,%rsp
   c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  14:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  18:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
  1c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  23:	00 00 
  25:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  29:	31 c0                	xor    %eax,%eax
  2b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  2f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  33:	c6 45 eb 00          	movb   $0x0,-0x15(%rbp)
  37:	66 c7 45 ee 00 00    	movw   $0x0,-0x12(%rbp)
  3d:	eb 6f                	jmp    ae <Parse::DmxSlotInfo(char*, bool&, unsigned char&, unsigned short&)+0xae>
  3f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  43:	0f b6 00             	movzbl (%rax),%eax
  46:	0f be c0             	movsbl %al,%eax
  49:	89 c7                	mov    %eax,%edi
  4b:	e8 00 00 00 00       	call   50 <Parse::DmxSlotInfo(char*, bool&, unsigned char&, unsigned short&)+0x50>
  50:	85 c0                	test   %eax,%eax
  52:	75 11                	jne    65 <Parse::DmxSlotInfo(char*, bool&, unsigned char&, unsigned short&)+0x65>
  54:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  58:	c6 00 00             	movb   $0x0,(%rax)
  5b:	b8 00 00 00 00       	mov    $0x0,%eax
  60:	e9 98 01 00 00       	jmp    1fd <Parse::DmxSlotInfo(char*, bool&, unsigned char&, unsigned short&)+0x1fd>
  65:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  69:	0f b6 00             	movzbl (%rax),%eax
  6c:	3c 39                	cmp    $0x39,%al
  6e:	7e 0f                	jle    7f <Parse::DmxSlotInfo(char*, bool&, unsigned char&, unsigned short&)+0x7f>
  70:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  74:	0f b6 00             	movzbl (%rax),%eax
  77:	83 c8 20             	or     $0x20,%eax
  7a:	83 e8 57             	sub    $0x57,%eax
  7d:	eb 0a                	jmp    89 <Parse::DmxSlotInfo(char*, bool&, unsigned char&, unsigned short&)+0x89>
  7f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  83:	0f b6 00             	movzbl (%rax),%eax
  86:	83 e8 30             	sub    $0x30,%eax
  89:	88 45 ec             	mov    %al,-0x14(%rbp)
  8c:	0f b7 45 ee          	movzwl -0x12(%rbp),%eax
  90:	c1 e0 04             	shl    $0x4,%eax
  93:	89 c2                	mov    %eax,%edx
  95:	0f b6 45 ec          	movzbl -0x14(%rbp),%eax
  99:	09 d0                	or     %edx,%eax
  9b:	66 89 45 ee          	mov    %ax,-0x12(%rbp)
  9f:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
  a4:	0f b6 45 eb          	movzbl -0x15(%rbp),%eax
  a8:	83 c0 01             	add    $0x1,%eax
  ab:	88 45 eb             	mov    %al,-0x15(%rbp)
  ae:	80 7d eb 01          	cmpb   $0x1,-0x15(%rbp)
  b2:	77 0b                	ja     bf <Parse::DmxSlotInfo(char*, bool&, unsigned char&, unsigned short&)+0xbf>
  b4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  b8:	0f b6 00             	movzbl (%rax),%eax
  bb:	3c 3a                	cmp    $0x3a,%al
  bd:	75 80                	jne    3f <Parse::DmxSlotInfo(char*, bool&, unsigned char&, unsigned short&)+0x3f>
  bf:	80 7d eb 02          	cmpb   $0x2,-0x15(%rbp)
  c3:	74 1c                	je     e1 <Parse::DmxSlotInfo(char*, bool&, unsigned char&, unsigned short&)+0xe1>
  c5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  c9:	0f b6 00             	movzbl (%rax),%eax
  cc:	3c 3a                	cmp    $0x3a,%al
  ce:	74 11                	je     e1 <Parse::DmxSlotInfo(char*, bool&, unsigned char&, unsigned short&)+0xe1>
  d0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  d4:	c6 00 00             	movb   $0x0,(%rax)
  d7:	b8 00 00 00 00       	mov    $0x0,%eax
  dc:	e9 1c 01 00 00       	jmp    1fd <Parse::DmxSlotInfo(char*, bool&, unsigned char&, unsigned short&)+0x1fd>
  e1:	0f b7 45 ee          	movzwl -0x12(%rbp),%eax
  e5:	89 c2                	mov    %eax,%edx
  e7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  eb:	88 10                	mov    %dl,(%rax)
  ed:	c6 45 eb 00          	movb   $0x0,-0x15(%rbp)
  f1:	66 c7 45 ee 00 00    	movw   $0x0,-0x12(%rbp)
  f7:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
  fc:	eb 6f                	jmp    16d <Parse::DmxSlotInfo(char*, bool&, unsigned char&, unsigned short&)+0x16d>
  fe:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 102:	0f b6 00             	movzbl (%rax),%eax
 105:	0f be c0             	movsbl %al,%eax
 108:	89 c7                	mov    %eax,%edi
 10a:	e8 00 00 00 00       	call   10f <Parse::DmxSlotInfo(char*, bool&, unsigned char&, unsigned short&)+0x10f>
 10f:	85 c0                	test   %eax,%eax
 111:	75 11                	jne    124 <Parse::DmxSlotInfo(char*, bool&, unsigned char&, unsigned short&)+0x124>
 113:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 117:	c6 00 00             	movb   $0x0,(%rax)
 11a:	b8 00 00 00 00       	mov    $0x0,%eax
 11f:	e9 d9 00 00 00       	jmp    1fd <Parse::DmxSlotInfo(char*, bool&, unsigned char&, unsigned short&)+0x1fd>
 124:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 128:	0f b6 00             	movzbl (%rax),%eax
 12b:	3c 39                	cmp    $0x39,%al
 12d:	7e 0f                	jle    13e <Parse::DmxSlotInfo(char*, bool&, unsigned char&, unsigned short&)+0x13e>
 12f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 133:	0f b6 00             	movzbl (%rax),%eax
 136:	83 c8 20             	or     $0x20,%eax
 139:	83 e8 57             	sub    $0x57,%eax
 13c:	eb 0a                	jmp    148 <Parse::DmxSlotInfo(char*, bool&, unsigned char&, unsigned short&)+0x148>
 13e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 142:	0f b6 00             	movzbl (%rax),%eax
 145:	83 e8 30             	sub    $0x30,%eax
 148:	88 45 ed             	mov    %al,-0x13(%rbp)
 14b:	0f b7 45 ee          	movzwl -0x12(%rbp),%eax
 14f:	c1 e0 04             	shl    $0x4,%eax
 152:	89 c2                	mov    %eax,%edx
 154:	0f b6 45 ed          	movzbl -0x13(%rbp),%eax
 158:	09 d0                	or     %edx,%eax
 15a:	66 89 45 ee          	mov    %ax,-0x12(%rbp)
 15e:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
 163:	0f b6 45 eb          	movzbl -0x15(%rbp),%eax
 167:	83 c0 01             	add    $0x1,%eax
 16a:	88 45 eb             	mov    %al,-0x15(%rbp)
 16d:	80 7d eb 03          	cmpb   $0x3,-0x15(%rbp)
 171:	77 1a                	ja     18d <Parse::DmxSlotInfo(char*, bool&, unsigned char&, unsigned short&)+0x18d>
 173:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 177:	0f b6 00             	movzbl (%rax),%eax
 17a:	3c 2c                	cmp    $0x2c,%al
 17c:	74 0f                	je     18d <Parse::DmxSlotInfo(char*, bool&, unsigned char&, unsigned short&)+0x18d>
 17e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 182:	0f b6 00             	movzbl (%rax),%eax
 185:	84 c0                	test   %al,%al
 187:	0f 85 71 ff ff ff    	jne    fe <Parse::DmxSlotInfo(char*, bool&, unsigned char&, unsigned short&)+0xfe>
 18d:	80 7d eb 04          	cmpb   $0x4,-0x15(%rbp)
 191:	74 0e                	je     1a1 <Parse::DmxSlotInfo(char*, bool&, unsigned char&, unsigned short&)+0x1a1>
 193:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 197:	c6 00 00             	movb   $0x0,(%rax)
 19a:	b8 00 00 00 00       	mov    $0x0,%eax
 19f:	eb 5c                	jmp    1fd <Parse::DmxSlotInfo(char*, bool&, unsigned char&, unsigned short&)+0x1fd>
 1a1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 1a5:	0f b6 00             	movzbl (%rax),%eax
 1a8:	3c 2c                	cmp    $0x2c,%al
 1aa:	74 24                	je     1d0 <Parse::DmxSlotInfo(char*, bool&, unsigned char&, unsigned short&)+0x1d0>
 1ac:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 1b0:	0f b6 00             	movzbl (%rax),%eax
 1b3:	3c 20                	cmp    $0x20,%al
 1b5:	74 19                	je     1d0 <Parse::DmxSlotInfo(char*, bool&, unsigned char&, unsigned short&)+0x1d0>
 1b7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 1bb:	0f b6 00             	movzbl (%rax),%eax
 1be:	84 c0                	test   %al,%al
 1c0:	74 0e                	je     1d0 <Parse::DmxSlotInfo(char*, bool&, unsigned char&, unsigned short&)+0x1d0>
 1c2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 1c6:	c6 00 00             	movb   $0x0,(%rax)
 1c9:	b8 00 00 00 00       	mov    $0x0,%eax
 1ce:	eb 2d                	jmp    1fd <Parse::DmxSlotInfo(char*, bool&, unsigned char&, unsigned short&)+0x1fd>
 1d0:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
 1d4:	0f b7 55 ee          	movzwl -0x12(%rbp),%edx
 1d8:	66 89 10             	mov    %dx,(%rax)
 1db:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 1df:	c6 00 01             	movb   $0x1,(%rax)
 1e2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 1e6:	0f b6 00             	movzbl (%rax),%eax
 1e9:	84 c0                	test   %al,%al
 1eb:	75 07                	jne    1f4 <Parse::DmxSlotInfo(char*, bool&, unsigned char&, unsigned short&)+0x1f4>
 1ed:	b8 00 00 00 00       	mov    $0x0,%eax
 1f2:	eb 09                	jmp    1fd <Parse::DmxSlotInfo(char*, bool&, unsigned char&, unsigned short&)+0x1fd>
 1f4:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
 1f9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 1fd:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
 201:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
 208:	00 00 
 20a:	74 05                	je     211 <Parse::DmxSlotInfo(char*, bool&, unsigned char&, unsigned short&)+0x211>
 20c:	e8 00 00 00 00       	call   211 <Parse::DmxSlotInfo(char*, bool&, unsigned char&, unsigned short&)+0x211>
 211:	c9                   	leave  
 212:	c3                   	ret    

propertiesbuilderaddhex.o:     file format elf64-x86-64


Disassembly of section .text._ZN17PropertiesBuilder6AddHexEPKcjbj:

0000000000000000 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	53                   	push   %rbx
   6:	48 83 ec 18          	sub    $0x18,%rsp
   a:	0f b7 6f 08          	movzwl 0x8(%rdi),%ebp
   e:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  15:	00 00 
  17:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  1c:	31 c0                	xor    %eax,%eax
  1e:	0f b7 47 0a          	movzwl 0xa(%rdi),%eax
  22:	66 39 e8             	cmp    %bp,%ax
  25:	72 04                	jb     2b <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x2b>
  27:	31 c0                	xor    %eax,%eax
  29:	eb 56                	jmp    81 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x81>
  2b:	48 89 fb             	mov    %rdi,%rbx
  2e:	29 c5                	sub    %eax,%ebp
  30:	0f b7 f8             	movzwl %ax,%edi
  33:	49 89 f2             	mov    %rsi,%r10
  36:	8a 43 0c             	mov    0xc(%rbx),%al
  39:	41 89 d1             	mov    %edx,%r9d
  3c:	48 03 3b             	add    (%rbx),%rdi
  3f:	48 63 f5             	movslq %ebp,%rsi
  42:	84 c9                	test   %cl,%cl
  44:	75 06                	jne    4c <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x4c>
  46:	84 c0                	test   %al,%al
  48:	75 10                	jne    5a <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x5a>
  4a:	eb 1a                	jmp    66 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x66>
  4c:	4c 89 d1             	mov    %r10,%rcx
  4f:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 56 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x56>
  56:	84 c0                	test   %al,%al
  58:	74 16                	je     70 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x70>
  5a:	4c 89 d1             	mov    %r10,%rcx
  5d:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 64 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x64>
  64:	eb 0a                	jmp    70 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x70>
  66:	4c 89 d1             	mov    %r10,%rcx
  69:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 70 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x70>
  70:	31 c0                	xor    %eax,%eax
  72:	e8 00 00 00 00       	call   77 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x77>
  77:	39 c5                	cmp    %eax,%ebp
  79:	7c ac                	jl     27 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x27>
  7b:	66 01 43 0a          	add    %ax,0xa(%rbx)
  7f:	b0 01                	mov    $0x1,%al
  81:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  86:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  8d:	00 00 
  8f:	74 05                	je     96 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x96>
  91:	e8 00 00 00 00       	call   96 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x96>
  96:	48 83 c4 18          	add    $0x18,%rsp
  9a:	5b                   	pop    %rbx
  9b:	5d                   	pop    %rbp
  9c:	c3                   	ret    

propertiesbuilder.o:     file format elf64-x86-64


Disassembly of section .text._ZN16PropertiesConfig6IsJSONEv:

0000000000000000 <PropertiesConfig::IsJSON()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 ec 18          	sub    $0x18,%rsp
   8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   f:	00 00 
  11:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  16:	31 c0                	xor    %eax,%eax
  18:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  1d:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  24:	00 00 
  26:	74 05                	je     2d <PropertiesConfig::IsJSON()+0x2d>
  28:	e8 00 00 00 00       	call   2d <PropertiesConfig::IsJSON()+0x2d>
  2d:	bf 01 00 00 00       	mov    $0x1,%edi
  32:	48 83 c4 18          	add    $0x18,%rsp
  36:	e9 00 00 00 00       	jmp    3b <.LC2+0x17>

Disassembly of section .text._ZN16PropertiesConfig9isMaskSetEh:

0000000000000000 <PropertiesConfig::isMaskSet(unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 ec 18          	sub    $0x18,%rsp
   8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   f:	00 00 
  11:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  16:	31 c0                	xor    %eax,%eax
  18:	8a 05 00 00 00 00    	mov    0x0(%rip),%al        # 1e <PropertiesConfig::isMaskSet(unsigned char)+0x1e>
  1e:	21 f8                	and    %edi,%eax
  20:	40 38 f8             	cmp    %dil,%al
  23:	0f 94 c0             	sete   %al
  26:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  2b:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  32:	00 00 
  34:	74 05                	je     3b <PropertiesConfig::isMaskSet(unsigned char)+0x3b>
  36:	e8 00 00 00 00       	call   3b <PropertiesConfig::isMaskSet(unsigned char)+0x3b>
  3b:	48 83 c4 18          	add    $0x18,%rsp
  3f:	c3                   	ret    

Disassembly of section .text._ZN17PropertiesBuilderC2EPKcPcj:

0000000000000000 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	41 56                	push   %r14
   6:	41 55                	push   %r13
   8:	49 89 fd             	mov    %rdi,%r13
   b:	41 54                	push   %r12
   d:	41 89 cc             	mov    %ecx,%r12d
  10:	55                   	push   %rbp
  11:	48 89 f5             	mov    %rsi,%rbp
  14:	45 0f b7 e4          	movzwl %r12w,%r12d
  18:	53                   	push   %rbx
  19:	48 89 d3             	mov    %rdx,%rbx
  1c:	48 83 ec 10          	sub    $0x10,%rsp
  20:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  27:	00 00 
  29:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  2e:	31 c0                	xor    %eax,%eax
  30:	48 89 17             	mov    %rdx,(%rdi)
  33:	66 89 4f 08          	mov    %cx,0x8(%rdi)
  37:	66 c7 47 0a 00 00    	movw   $0x0,0xa(%rdi)
  3d:	e8 00 00 00 00       	call   42 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x42>
  42:	48 89 ef             	mov    %rbp,%rdi
  45:	41 88 45 0c          	mov    %al,0xc(%r13)
  49:	41 89 c6             	mov    %eax,%r14d
  4c:	e8 00 00 00 00       	call   51 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x51>
  51:	48 89 c2             	mov    %rax,%rdx
  54:	45 84 f6             	test   %r14b,%r14b
  57:	74 31                	je     8a <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x8a>
  59:	48 8d 40 04          	lea    0x4(%rax),%rax
  5d:	4c 39 e0             	cmp    %r12,%rax
  60:	77 50                	ja     b2 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0xb2>
  62:	48 8d 43 02          	lea    0x2(%rbx),%rax
  66:	66 c7 03 7b 22       	movw   $0x227b,(%rbx)
  6b:	48 89 d1             	mov    %rdx,%rcx
  6e:	48 89 ee             	mov    %rbp,%rsi
  71:	48 89 c7             	mov    %rax,%rdi
  74:	f3 a4                	rep movsb %ds:(%rsi),%es:(%rdi)
  76:	c6 44 13 02 22       	movb   $0x22,0x2(%rbx,%rdx,1)
  7b:	c6 44 13 03 3a       	movb   $0x3a,0x3(%rbx,%rdx,1)
  80:	c6 44 13 04 7b       	movb   $0x7b,0x4(%rbx,%rdx,1)
  85:	83 c2 05             	add    $0x5,%edx
  88:	eb 23                	jmp    ad <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0xad>
  8a:	48 8d 40 02          	lea    0x2(%rax),%rax
  8e:	4c 39 e0             	cmp    %r12,%rax
  91:	77 1f                	ja     b2 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0xb2>
  93:	48 8d 43 01          	lea    0x1(%rbx),%rax
  97:	c6 03 23             	movb   $0x23,(%rbx)
  9a:	48 89 d1             	mov    %rdx,%rcx
  9d:	48 89 ee             	mov    %rbp,%rsi
  a0:	48 89 c7             	mov    %rax,%rdi
  a3:	f3 a4                	rep movsb %ds:(%rsi),%es:(%rdi)
  a5:	c6 44 13 01 0a       	movb   $0xa,0x1(%rbx,%rdx,1)
  aa:	83 c2 02             	add    $0x2,%edx
  ad:	66 41 89 55 0a       	mov    %dx,0xa(%r13)
  b2:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  b7:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  be:	00 00 
  c0:	74 05                	je     c7 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0xc7>
  c2:	e8 00 00 00 00       	call   c7 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0xc7>
  c7:	48 83 c4 10          	add    $0x10,%rsp
  cb:	5b                   	pop    %rbx
  cc:	5d                   	pop    %rbp
  cd:	41 5c                	pop    %r12
  cf:	41 5d                	pop    %r13
  d1:	41 5e                	pop    %r14
  d3:	c3                   	ret    

Disassembly of section .text._ZN17PropertiesBuilder12AddIpAddressEPKcjb:

0000000000000000 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	41 56                	push   %r14
   6:	89 d0                	mov    %edx,%eax
   8:	41 54                	push   %r12
   a:	55                   	push   %rbp
   b:	53                   	push   %rbx
   c:	48 83 ec 18          	sub    $0x18,%rsp
  10:	0f b7 5f 08          	movzwl 0x8(%rdi),%ebx
  14:	64 48 8b 14 25 28 00 	mov    %fs:0x28,%rdx
  1b:	00 00 
  1d:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  22:	31 d2                	xor    %edx,%edx
  24:	0f b7 57 0a          	movzwl 0xa(%rdi),%edx
  28:	66 39 da             	cmp    %bx,%dx
  2b:	72 07                	jb     34 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x34>
  2d:	31 c0                	xor    %eax,%eax
  2f:	e9 85 00 00 00       	jmp    b9 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0xb9>
  34:	48 89 fd             	mov    %rdi,%rbp
  37:	29 d3                	sub    %edx,%ebx
  39:	0f b7 fa             	movzwl %dx,%edi
  3c:	89 c2                	mov    %eax,%edx
  3e:	41 89 ce             	mov    %ecx,%r14d
  41:	41 89 c3             	mov    %eax,%r11d
  44:	c1 ea 10             	shr    $0x10,%edx
  47:	0f b6 cc             	movzbl %ah,%ecx
  4a:	49 89 f2             	mov    %rsi,%r10
  4d:	44 8a 65 0c          	mov    0xc(%rbp),%r12b
  51:	48 03 7d 00          	add    0x0(%rbp),%rdi
  55:	48 63 f3             	movslq %ebx,%rsi
  58:	41 c1 eb 18          	shr    $0x18,%r11d
  5c:	0f b6 d2             	movzbl %dl,%edx
  5f:	41 89 c9             	mov    %ecx,%r9d
  62:	44 0f b6 c0          	movzbl %al,%r8d
  66:	45 84 f6             	test   %r14b,%r14b
  69:	75 07                	jne    72 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x72>
  6b:	45 84 e4             	test   %r12b,%r12b
  6e:	75 07                	jne    77 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x77>
  70:	eb 23                	jmp    95 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x95>
  72:	45 84 e4             	test   %r12b,%r12b
  75:	74 0f                	je     86 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x86>
  77:	41 53                	push   %r11
  79:	4c 89 d1             	mov    %r10,%rcx
  7c:	52                   	push   %rdx
  7d:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 84 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x84>
  84:	eb 1c                	jmp    a2 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0xa2>
  86:	41 53                	push   %r11
  88:	4c 89 d1             	mov    %r10,%rcx
  8b:	52                   	push   %rdx
  8c:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 93 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x93>
  93:	eb 0d                	jmp    a2 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0xa2>
  95:	41 53                	push   %r11
  97:	4c 89 d1             	mov    %r10,%rcx
  9a:	52                   	push   %rdx
  9b:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # a2 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0xa2>
  a2:	31 c0                	xor    %eax,%eax
  a4:	e8 00 00 00 00       	call   a9 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0xa9>
  a9:	5a                   	pop    %rdx
  aa:	59                   	pop    %rcx
  ab:	39 c3                	cmp    %eax,%ebx
  ad:	0f 8c 7a ff ff ff    	jl     2d <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x2d>
  b3:	66 01 45 0a          	add    %ax,0xa(%rbp)
  b7:	b0 01                	mov    $0x1,%al
  b9:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  be:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  c5:	00 00 
  c7:	74 05                	je     ce <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0xce>
  c9:	e8 00 00 00 00       	call   ce <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0xce>
  ce:	48 83 c4 18          	add    $0x18,%rsp
  d2:	5b                   	pop    %rbx
  d3:	5d                   	pop    %rbp
  d4:	41 5c                	pop    %r12
  d6:	41 5e                	pop    %r14
  d8:	c3                   	ret    

Disassembly of section .text._ZN17PropertiesBuilder10AddCommentEPKc:

0000000000000000 <PropertiesBuilder::AddComment(char const*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	41 54                	push   %r12
   6:	55                   	push   %rbp
   7:	53                   	push   %rbx
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	44 8a 67 0c          	mov    0xc(%rdi),%r12b
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  1e:	31 c0                	xor    %eax,%eax
  20:	45 84 e4             	test   %r12b,%r12b
  23:	75 37                	jne    5c <PropertiesBuilder::AddComment(char const*)+0x5c>
  25:	48 89 fb             	mov    %rdi,%rbx
  28:	0f b7 7f 0a          	movzwl 0xa(%rdi),%edi
  2c:	0f b7 6b 08          	movzwl 0x8(%rbx),%ebp
  30:	66 39 ef             	cmp    %bp,%di
  33:	73 27                	jae    5c <PropertiesBuilder::AddComment(char const*)+0x5c>
  35:	0f b7 c7             	movzwl %di,%eax
  38:	48 89 f1             	mov    %rsi,%rcx
  3b:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 42 <PropertiesBuilder::AddComment(char const*)+0x42>
  42:	48 03 3b             	add    (%rbx),%rdi
  45:	29 c5                	sub    %eax,%ebp
  47:	31 c0                	xor    %eax,%eax
  49:	48 63 f5             	movslq %ebp,%rsi
  4c:	e8 00 00 00 00       	call   51 <PropertiesBuilder::AddComment(char const*)+0x51>
  51:	39 c5                	cmp    %eax,%ebp
  53:	7c 07                	jl     5c <PropertiesBuilder::AddComment(char const*)+0x5c>
  55:	66 01 43 0a          	add    %ax,0xa(%rbx)
  59:	41 b4 01             	mov    $0x1,%r12b
  5c:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  61:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  68:	00 00 
  6a:	74 05                	je     71 <PropertiesBuilder::AddComment(char const*)+0x71>
  6c:	e8 00 00 00 00       	call   71 <PropertiesBuilder::AddComment(char const*)+0x71>
  71:	48 83 c4 10          	add    $0x10,%rsp
  75:	44 89 e0             	mov    %r12d,%eax
  78:	5b                   	pop    %rbx
  79:	5d                   	pop    %rbp
  7a:	41 5c                	pop    %r12
  7c:	c3                   	ret    

propertiesconfig.o:     file format elf64-x86-64


properties.o:     file format elf64-x86-64


Disassembly of section .text._ZN10properties17convert_json_fileEPcjb:

0000000000000000 <properties::convert_json_file(char*, unsigned int, bool)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 40          	sub    $0x40,%rsp
   c:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  10:	89 75 c4             	mov    %esi,-0x3c(%rbp)
  13:	89 d0                	mov    %edx,%eax
  15:	88 45 c0             	mov    %al,-0x40(%rbp)
  18:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1f:	00 00 
  21:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  25:	31 c0                	xor    %eax,%eax
  27:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  2b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  2f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  33:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  37:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3b:	0f b6 00             	movzbl (%rax),%eax
  3e:	3c 7b                	cmp    $0x7b,%al
  40:	74 0a                	je     4c <properties::convert_json_file(char*, unsigned int, bool)+0x4c>
  42:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  47:	e9 07 03 00 00       	jmp    353 <properties::convert_json_file(char*, unsigned int, bool)+0x353>
  4c:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%rbp)
  53:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%rbp)
  5a:	0f b6 45 c0          	movzbl -0x40(%rbp),%eax
  5e:	83 f0 01             	xor    $0x1,%eax
  61:	84 c0                	test   %al,%al
  63:	0f 84 c1 00 00 00    	je     12a <properties::convert_json_file(char*, unsigned int, bool)+0x12a>
  69:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  6d:	c6 00 23             	movb   $0x23,(%rax)
  70:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
  75:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
  7a:	eb 1c                	jmp    98 <properties::convert_json_file(char*, unsigned int, bool)+0x98>
  7c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80:	48 8d 50 01          	lea    0x1(%rax),%rdx
  84:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  88:	0f b6 00             	movzbl (%rax),%eax
  8b:	3c 22                	cmp    $0x22,%al
  8d:	0f 94 c0             	sete   %al
  90:	84 c0                	test   %al,%al
  92:	75 0e                	jne    a2 <properties::convert_json_file(char*, unsigned int, bool)+0xa2>
  94:	83 45 e0 01          	addl   $0x1,-0x20(%rbp)
  98:	8b 45 e0             	mov    -0x20(%rbp),%eax
  9b:	3b 45 c4             	cmp    -0x3c(%rbp),%eax
  9e:	72 dc                	jb     7c <properties::convert_json_file(char*, unsigned int, bool)+0x7c>
  a0:	eb 28                	jmp    ca <properties::convert_json_file(char*, unsigned int, bool)+0xca>
  a2:	90                   	nop
  a3:	eb 25                	jmp    ca <properties::convert_json_file(char*, unsigned int, bool)+0xca>
  a5:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  a9:	48 8d 42 01          	lea    0x1(%rdx),%rax
  ad:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  b1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  b5:	48 8d 48 01          	lea    0x1(%rax),%rcx
  b9:	48 89 4d f0          	mov    %rcx,-0x10(%rbp)
  bd:	0f b6 12             	movzbl (%rdx),%edx
  c0:	88 10                	mov    %dl,(%rax)
  c2:	83 45 dc 01          	addl   $0x1,-0x24(%rbp)
  c6:	83 45 e0 01          	addl   $0x1,-0x20(%rbp)
  ca:	8b 45 e0             	mov    -0x20(%rbp),%eax
  cd:	3b 45 c4             	cmp    -0x3c(%rbp),%eax
  d0:	73 0b                	jae    dd <properties::convert_json_file(char*, unsigned int, bool)+0xdd>
  d2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  d6:	0f b6 00             	movzbl (%rax),%eax
  d9:	3c 22                	cmp    $0x22,%al
  db:	75 c8                	jne    a5 <properties::convert_json_file(char*, unsigned int, bool)+0xa5>
  dd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  e1:	48 8d 50 01          	lea    0x1(%rax),%rdx
  e5:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
  e9:	c6 00 0a             	movb   $0xa,(%rax)
  ec:	83 45 dc 01          	addl   $0x1,-0x24(%rbp)
  f0:	eb 05                	jmp    f7 <properties::convert_json_file(char*, unsigned int, bool)+0xf7>
  f2:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
  f7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  fb:	0f b6 00             	movzbl (%rax),%eax
  fe:	3c 7b                	cmp    $0x7b,%al
 100:	74 15                	je     117 <properties::convert_json_file(char*, unsigned int, bool)+0x117>
 102:	8b 45 e0             	mov    -0x20(%rbp),%eax
 105:	8d 50 01             	lea    0x1(%rax),%edx
 108:	89 55 e0             	mov    %edx,-0x20(%rbp)
 10b:	39 45 c4             	cmp    %eax,-0x3c(%rbp)
 10e:	76 07                	jbe    117 <properties::convert_json_file(char*, unsigned int, bool)+0x117>
 110:	b8 01 00 00 00       	mov    $0x1,%eax
 115:	eb 05                	jmp    11c <properties::convert_json_file(char*, unsigned int, bool)+0x11c>
 117:	b8 00 00 00 00       	mov    $0x0,%eax
 11c:	84 c0                	test   %al,%al
 11e:	75 d2                	jne    f2 <properties::convert_json_file(char*, unsigned int, bool)+0xf2>
 120:	e9 1f 02 00 00       	jmp    344 <properties::convert_json_file(char*, unsigned int, bool)+0x344>
 125:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
 12a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 12e:	0f b6 00             	movzbl (%rax),%eax
 131:	3c 7b                	cmp    $0x7b,%al
 133:	74 15                	je     14a <properties::convert_json_file(char*, unsigned int, bool)+0x14a>
 135:	8b 45 e0             	mov    -0x20(%rbp),%eax
 138:	8d 50 01             	lea    0x1(%rax),%edx
 13b:	89 55 e0             	mov    %edx,-0x20(%rbp)
 13e:	39 45 c4             	cmp    %eax,-0x3c(%rbp)
 141:	76 07                	jbe    14a <properties::convert_json_file(char*, unsigned int, bool)+0x14a>
 143:	b8 01 00 00 00       	mov    $0x1,%eax
 148:	eb 05                	jmp    14f <properties::convert_json_file(char*, unsigned int, bool)+0x14f>
 14a:	b8 00 00 00 00       	mov    $0x0,%eax
 14f:	84 c0                	test   %al,%al
 151:	75 d2                	jne    125 <properties::convert_json_file(char*, unsigned int, bool)+0x125>
 153:	e9 ec 01 00 00       	jmp    344 <properties::convert_json_file(char*, unsigned int, bool)+0x344>
 158:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 15c:	48 8d 50 01          	lea    0x1(%rax),%rdx
 160:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
 164:	0f b6 00             	movzbl (%rax),%eax
 167:	3c 22                	cmp    $0x22,%al
 169:	0f 94 c0             	sete   %al
 16c:	84 c0                	test   %al,%al
 16e:	75 15                	jne    185 <properties::convert_json_file(char*, unsigned int, bool)+0x185>
 170:	8b 45 e0             	mov    -0x20(%rbp),%eax
 173:	8d 50 01             	lea    0x1(%rax),%edx
 176:	89 55 e0             	mov    %edx,-0x20(%rbp)
 179:	39 45 c4             	cmp    %eax,-0x3c(%rbp)
 17c:	0f 97 c0             	seta   %al
 17f:	84 c0                	test   %al,%al
 181:	75 d5                	jne    158 <properties::convert_json_file(char*, unsigned int, bool)+0x158>
 183:	eb 24                	jmp    1a9 <properties::convert_json_file(char*, unsigned int, bool)+0x1a9>
 185:	90                   	nop
 186:	eb 21                	jmp    1a9 <properties::convert_json_file(char*, unsigned int, bool)+0x1a9>
 188:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
 18c:	48 8d 42 01          	lea    0x1(%rdx),%rax
 190:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
 194:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 198:	48 8d 48 01          	lea    0x1(%rax),%rcx
 19c:	48 89 4d f0          	mov    %rcx,-0x10(%rbp)
 1a0:	0f b6 12             	movzbl (%rdx),%edx
 1a3:	88 10                	mov    %dl,(%rax)
 1a5:	83 45 dc 01          	addl   $0x1,-0x24(%rbp)
 1a9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 1ad:	0f b6 00             	movzbl (%rax),%eax
 1b0:	3c 22                	cmp    $0x22,%al
 1b2:	74 15                	je     1c9 <properties::convert_json_file(char*, unsigned int, bool)+0x1c9>
 1b4:	8b 45 e0             	mov    -0x20(%rbp),%eax
 1b7:	8d 50 01             	lea    0x1(%rax),%edx
 1ba:	89 55 e0             	mov    %edx,-0x20(%rbp)
 1bd:	39 45 c4             	cmp    %eax,-0x3c(%rbp)
 1c0:	76 07                	jbe    1c9 <properties::convert_json_file(char*, unsigned int, bool)+0x1c9>
 1c2:	b8 01 00 00 00       	mov    $0x1,%eax
 1c7:	eb 05                	jmp    1ce <properties::convert_json_file(char*, unsigned int, bool)+0x1ce>
 1c9:	b8 00 00 00 00       	mov    $0x0,%eax
 1ce:	84 c0                	test   %al,%al
 1d0:	75 b6                	jne    188 <properties::convert_json_file(char*, unsigned int, bool)+0x188>
 1d2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 1d6:	0f b6 00             	movzbl (%rax),%eax
 1d9:	3c 22                	cmp    $0x22,%al
 1db:	75 2d                	jne    20a <properties::convert_json_file(char*, unsigned int, bool)+0x20a>
 1dd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 1e1:	48 8d 50 01          	lea    0x1(%rax),%rdx
 1e5:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
 1e9:	c6 00 3d             	movb   $0x3d,(%rax)
 1ec:	83 45 dc 01          	addl   $0x1,-0x24(%rbp)
 1f0:	eb 18                	jmp    20a <properties::convert_json_file(char*, unsigned int, bool)+0x20a>
 1f2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 1f6:	48 8d 50 01          	lea    0x1(%rax),%rdx
 1fa:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
 1fe:	0f b6 00             	movzbl (%rax),%eax
 201:	3c 3a                	cmp    $0x3a,%al
 203:	0f 94 c0             	sete   %al
 206:	84 c0                	test   %al,%al
 208:	75 15                	jne    21f <properties::convert_json_file(char*, unsigned int, bool)+0x21f>
 20a:	8b 45 e0             	mov    -0x20(%rbp),%eax
 20d:	8d 50 01             	lea    0x1(%rax),%edx
 210:	89 55 e0             	mov    %edx,-0x20(%rbp)
 213:	39 45 c4             	cmp    %eax,-0x3c(%rbp)
 216:	0f 97 c0             	seta   %al
 219:	84 c0                	test   %al,%al
 21b:	75 d5                	jne    1f2 <properties::convert_json_file(char*, unsigned int, bool)+0x1f2>
 21d:	eb 08                	jmp    227 <properties::convert_json_file(char*, unsigned int, bool)+0x227>
 21f:	90                   	nop
 220:	eb 05                	jmp    227 <properties::convert_json_file(char*, unsigned int, bool)+0x227>
 222:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
 227:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 22b:	0f b6 00             	movzbl (%rax),%eax
 22e:	3c 20                	cmp    $0x20,%al
 230:	75 15                	jne    247 <properties::convert_json_file(char*, unsigned int, bool)+0x247>
 232:	8b 45 e0             	mov    -0x20(%rbp),%eax
 235:	8d 50 01             	lea    0x1(%rax),%edx
 238:	89 55 e0             	mov    %edx,-0x20(%rbp)
 23b:	39 45 c4             	cmp    %eax,-0x3c(%rbp)
 23e:	76 07                	jbe    247 <properties::convert_json_file(char*, unsigned int, bool)+0x247>
 240:	b8 01 00 00 00       	mov    $0x1,%eax
 245:	eb 05                	jmp    24c <properties::convert_json_file(char*, unsigned int, bool)+0x24c>
 247:	b8 00 00 00 00       	mov    $0x0,%eax
 24c:	84 c0                	test   %al,%al
 24e:	75 d2                	jne    222 <properties::convert_json_file(char*, unsigned int, bool)+0x222>
 250:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 254:	0f b6 00             	movzbl (%rax),%eax
 257:	3c 22                	cmp    $0x22,%al
 259:	75 05                	jne    260 <properties::convert_json_file(char*, unsigned int, bool)+0x260>
 25b:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
 260:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 264:	0f b6 00             	movzbl (%rax),%eax
 267:	3c 22                	cmp    $0x22,%al
 269:	75 41                	jne    2ac <properties::convert_json_file(char*, unsigned int, bool)+0x2ac>
 26b:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
 270:	eb 3a                	jmp    2ac <properties::convert_json_file(char*, unsigned int, bool)+0x2ac>
 272:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 276:	0f b6 00             	movzbl (%rax),%eax
 279:	0f be c0             	movsbl %al,%eax
 27c:	89 45 e4             	mov    %eax,-0x1c(%rbp)
 27f:	83 7d e4 1f          	cmpl   $0x1f,-0x1c(%rbp)
 283:	7e 27                	jle    2ac <properties::convert_json_file(char*, unsigned int, bool)+0x2ac>
 285:	83 7d e4 7a          	cmpl   $0x7a,-0x1c(%rbp)
 289:	7f 21                	jg     2ac <properties::convert_json_file(char*, unsigned int, bool)+0x2ac>
 28b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
 28f:	48 8d 42 01          	lea    0x1(%rdx),%rax
 293:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
 297:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 29b:	48 8d 48 01          	lea    0x1(%rax),%rcx
 29f:	48 89 4d f0          	mov    %rcx,-0x10(%rbp)
 2a3:	0f b6 12             	movzbl (%rdx),%edx
 2a6:	88 10                	mov    %dl,(%rax)
 2a8:	83 45 dc 01          	addl   $0x1,-0x24(%rbp)
 2ac:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 2b0:	0f b6 00             	movzbl (%rax),%eax
 2b3:	3c 22                	cmp    $0x22,%al
 2b5:	74 2b                	je     2e2 <properties::convert_json_file(char*, unsigned int, bool)+0x2e2>
 2b7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 2bb:	0f b6 00             	movzbl (%rax),%eax
 2be:	3c 2c                	cmp    $0x2c,%al
 2c0:	74 20                	je     2e2 <properties::convert_json_file(char*, unsigned int, bool)+0x2e2>
 2c2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 2c6:	0f b6 00             	movzbl (%rax),%eax
 2c9:	3c 7d                	cmp    $0x7d,%al
 2cb:	74 15                	je     2e2 <properties::convert_json_file(char*, unsigned int, bool)+0x2e2>
 2cd:	8b 45 e0             	mov    -0x20(%rbp),%eax
 2d0:	8d 50 01             	lea    0x1(%rax),%edx
 2d3:	89 55 e0             	mov    %edx,-0x20(%rbp)
 2d6:	39 45 c4             	cmp    %eax,-0x3c(%rbp)
 2d9:	76 07                	jbe    2e2 <properties::convert_json_file(char*, unsigned int, bool)+0x2e2>
 2db:	b8 01 00 00 00       	mov    $0x1,%eax
 2e0:	eb 05                	jmp    2e7 <properties::convert_json_file(char*, unsigned int, bool)+0x2e7>
 2e2:	b8 00 00 00 00       	mov    $0x0,%eax
 2e7:	84 c0                	test   %al,%al
 2e9:	75 87                	jne    272 <properties::convert_json_file(char*, unsigned int, bool)+0x272>
 2eb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 2ef:	0f b6 00             	movzbl (%rax),%eax
 2f2:	3c 22                	cmp    $0x22,%al
 2f4:	74 16                	je     30c <properties::convert_json_file(char*, unsigned int, bool)+0x30c>
 2f6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 2fa:	0f b6 00             	movzbl (%rax),%eax
 2fd:	3c 2c                	cmp    $0x2c,%al
 2ff:	74 0b                	je     30c <properties::convert_json_file(char*, unsigned int, bool)+0x30c>
 301:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 305:	0f b6 00             	movzbl (%rax),%eax
 308:	3c 7d                	cmp    $0x7d,%al
 30a:	75 2f                	jne    33b <properties::convert_json_file(char*, unsigned int, bool)+0x33b>
 30c:	0f b6 45 c0          	movzbl -0x40(%rbp),%eax
 310:	83 f0 01             	xor    $0x1,%eax
 313:	84 c0                	test   %al,%al
 315:	74 11                	je     328 <properties::convert_json_file(char*, unsigned int, bool)+0x328>
 317:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 31b:	48 8d 50 01          	lea    0x1(%rax),%rdx
 31f:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
 323:	c6 00 0a             	movb   $0xa,(%rax)
 326:	eb 0f                	jmp    337 <properties::convert_json_file(char*, unsigned int, bool)+0x337>
 328:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 32c:	48 8d 50 01          	lea    0x1(%rax),%rdx
 330:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
 334:	c6 00 00             	movb   $0x0,(%rax)
 337:	83 45 dc 01          	addl   $0x1,-0x24(%rbp)
 33b:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
 340:	83 45 e0 01          	addl   $0x1,-0x20(%rbp)
 344:	8b 45 e0             	mov    -0x20(%rbp),%eax
 347:	3b 45 c4             	cmp    -0x3c(%rbp),%eax
 34a:	0f 82 20 fe ff ff    	jb     170 <properties::convert_json_file(char*, unsigned int, bool)+0x170>
 350:	8b 45 dc             	mov    -0x24(%rbp),%eax
 353:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
 357:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
 35e:	00 00 
 360:	74 05                	je     367 <properties::convert_json_file(char*, unsigned int, bool)+0x367>
 362:	e8 00 00 00 00       	call   367 <properties::convert_json_file(char*, unsigned int, bool)+0x367>
 367:	c9                   	leave  
 368:	c3                   	ret    

readconfigfile.o:     file format elf64-x86-64


Disassembly of section .text._ZN14ReadConfigFileC2EPFvPvPKcES0_:

0000000000000000 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  14:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  18:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1f:	00 00 
  21:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  25:	31 c0                	xor    %eax,%eax
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2b:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  2f:	48 89 10             	mov    %rdx,(%rax)
  32:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  36:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  3a:	48 89 50 08          	mov    %rdx,0x8(%rax)
  3e:	90                   	nop
  3f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  4a:	00 00 
  4c:	74 05                	je     53 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)+0x53>
  4e:	e8 00 00 00 00       	call   53 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)+0x53>
  53:	c9                   	leave  
  54:	c3                   	ret    

Disassembly of section .text._ZN14ReadConfigFileD2Ev:

0000000000000000 <ReadConfigFile::~ReadConfigFile()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  2a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2e:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  35:	00 
  36:	90                   	nop
  37:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3b:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  42:	00 00 
  44:	74 05                	je     4b <ReadConfigFile::~ReadConfigFile()+0x4b>
  46:	e8 00 00 00 00       	call   4b <ReadConfigFile::~ReadConfigFile()+0x4b>
  4b:	c9                   	leave  
  4c:	c3                   	ret    

Disassembly of section .text._ZN14ReadConfigFile4ReadEPKc:

0000000000000000 <ReadConfigFile::Read(char const*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 81 ec c0 00 00 00 	sub    $0xc0,%rsp
   f:	48 89 bd 48 ff ff ff 	mov    %rdi,-0xb8(%rbp)
  16:	48 89 b5 40 ff ff ff 	mov    %rsi,-0xc0(%rbp)
  1d:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  24:	00 00 
  26:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  2a:	31 c0                	xor    %eax,%eax
  2c:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  33:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 3a <ReadConfigFile::Read(char const*)+0x3a>
  3a:	48 89 d6             	mov    %rdx,%rsi
  3d:	48 89 c7             	mov    %rax,%rdi
  40:	e8 00 00 00 00       	call   45 <ReadConfigFile::Read(char const*)+0x45>
  45:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  4c:	48 83 bd 68 ff ff ff 	cmpq   $0x0,-0x98(%rbp)
  53:	00 
  54:	0f 84 e1 00 00 00    	je     13b <ReadConfigFile::Read(char const*)+0x13b>
  5a:	48 8b 95 68 ff ff ff 	mov    -0x98(%rbp),%rdx
  61:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
  68:	be 7f 00 00 00       	mov    $0x7f,%esi
  6d:	48 89 c7             	mov    %rax,%rdi
  70:	e8 00 00 00 00       	call   75 <ReadConfigFile::Read(char const*)+0x75>
  75:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
  7c:	48 39 d0             	cmp    %rdx,%rax
  7f:	0f 95 c0             	setne  %al
  82:	84 c0                	test   %al,%al
  84:	0f 85 9a 00 00 00    	jne    124 <ReadConfigFile::Read(char const*)+0x124>
  8a:	0f b6 85 70 ff ff ff 	movzbl -0x90(%rbp),%eax
  91:	3c 60                	cmp    $0x60,%al
  93:	7e c5                	jle    5a <ReadConfigFile::Read(char const*)+0x5a>
  95:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
  9c:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  a3:	c7 85 5c ff ff ff 00 	movl   $0x0,-0xa4(%rbp)
  aa:	00 00 00 
  ad:	eb 35                	jmp    e4 <ReadConfigFile::Read(char const*)+0xe4>
  af:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  b6:	0f b6 00             	movzbl (%rax),%eax
  b9:	3c 0d                	cmp    $0xd,%al
  bb:	74 0e                	je     cb <ReadConfigFile::Read(char const*)+0xcb>
  bd:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  c4:	0f b6 00             	movzbl (%rax),%eax
  c7:	3c 0a                	cmp    $0xa,%al
  c9:	75 0a                	jne    d5 <ReadConfigFile::Read(char const*)+0xd5>
  cb:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  d2:	c6 00 00             	movb   $0x0,(%rax)
  d5:	48 83 85 60 ff ff ff 	addq   $0x1,-0xa0(%rbp)
  dc:	01 
  dd:	83 85 5c ff ff ff 01 	addl   $0x1,-0xa4(%rbp)
  e4:	83 bd 5c ff ff ff 7e 	cmpl   $0x7e,-0xa4(%rbp)
  eb:	77 0e                	ja     fb <ReadConfigFile::Read(char const*)+0xfb>
  ed:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  f4:	0f b6 00             	movzbl (%rax),%eax
  f7:	84 c0                	test   %al,%al
  f9:	75 b4                	jne    af <ReadConfigFile::Read(char const*)+0xaf>
  fb:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
 102:	48 8b 08             	mov    (%rax),%rcx
 105:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
 10c:	48 8b 40 08          	mov    0x8(%rax),%rax
 110:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
 117:	48 89 d6             	mov    %rdx,%rsi
 11a:	48 89 c7             	mov    %rax,%rdi
 11d:	ff d1                	call   *%rcx
 11f:	e9 36 ff ff ff       	jmp    5a <ReadConfigFile::Read(char const*)+0x5a>
 124:	90                   	nop
 125:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
 12c:	48 89 c7             	mov    %rax,%rdi
 12f:	e8 00 00 00 00       	call   134 <ReadConfigFile::Read(char const*)+0x134>
 134:	b8 01 00 00 00       	mov    $0x1,%eax
 139:	eb 05                	jmp    140 <ReadConfigFile::Read(char const*)+0x140>
 13b:	b8 00 00 00 00       	mov    $0x0,%eax
 140:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
 144:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
 14b:	00 00 
 14d:	74 05                	je     154 <ReadConfigFile::Read(char const*)+0x154>
 14f:	e8 00 00 00 00       	call   154 <ReadConfigFile::Read(char const*)+0x154>
 154:	c9                   	leave  
 155:	c3                   	ret    

Disassembly of section .text._ZN14ReadConfigFile4ReadEPKcj:

0000000000000000 <ReadConfigFile::Read(char const*, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 81 ec c0 00 00 00 	sub    $0xc0,%rsp
   f:	48 89 bd 58 ff ff ff 	mov    %rdi,-0xa8(%rbp)
  16:	48 89 b5 50 ff ff ff 	mov    %rsi,-0xb0(%rbp)
  1d:	89 95 4c ff ff ff    	mov    %edx,-0xb4(%rbp)
  23:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  2a:	00 00 
  2c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  30:	31 c0                	xor    %eax,%eax
  32:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  39:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  40:	c6 85 70 ff ff ff 0a 	movb   $0xa,-0x90(%rbp)
  47:	e9 ef 00 00 00       	jmp    13b <ReadConfigFile::Read(char const*, unsigned int)+0x13b>
  4c:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
  53:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  5a:	eb 4b                	jmp    a7 <ReadConfigFile::Read(char const*, unsigned int)+0xa7>
  5c:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  63:	48 8d 42 01          	lea    0x1(%rdx),%rax
  67:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  6e:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  75:	48 8d 48 01          	lea    0x1(%rax),%rcx
  79:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
  80:	0f b6 12             	movzbl (%rdx),%edx
  83:	88 10                	mov    %dl,(%rax)
  85:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
  8c:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  93:	48 29 d0             	sub    %rdx,%rax
  96:	48 83 f8 7f          	cmp    $0x7f,%rax
  9a:	0f 8f aa 00 00 00    	jg     14a <ReadConfigFile::Read(char const*, unsigned int)+0x14a>
  a0:	83 ad 4c ff ff ff 01 	subl   $0x1,-0xb4(%rbp)
  a7:	83 bd 4c ff ff ff 00 	cmpl   $0x0,-0xb4(%rbp)
  ae:	74 2d                	je     dd <ReadConfigFile::Read(char const*, unsigned int)+0xdd>
  b0:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  b7:	0f b6 00             	movzbl (%rax),%eax
  ba:	3c 0d                	cmp    $0xd,%al
  bc:	74 1f                	je     dd <ReadConfigFile::Read(char const*, unsigned int)+0xdd>
  be:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  c5:	0f b6 00             	movzbl (%rax),%eax
  c8:	3c 0a                	cmp    $0xa,%al
  ca:	75 90                	jne    5c <ReadConfigFile::Read(char const*, unsigned int)+0x5c>
  cc:	eb 0f                	jmp    dd <ReadConfigFile::Read(char const*, unsigned int)+0xdd>
  ce:	48 83 85 60 ff ff ff 	addq   $0x1,-0xa0(%rbp)
  d5:	01 
  d6:	83 ad 4c ff ff ff 01 	subl   $0x1,-0xb4(%rbp)
  dd:	83 bd 4c ff ff ff 00 	cmpl   $0x0,-0xb4(%rbp)
  e4:	74 1c                	je     102 <ReadConfigFile::Read(char const*, unsigned int)+0x102>
  e6:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  ed:	0f b6 00             	movzbl (%rax),%eax
  f0:	3c 0d                	cmp    $0xd,%al
  f2:	74 da                	je     ce <ReadConfigFile::Read(char const*, unsigned int)+0xce>
  f4:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  fb:	0f b6 00             	movzbl (%rax),%eax
  fe:	3c 0a                	cmp    $0xa,%al
 100:	74 cc                	je     ce <ReadConfigFile::Read(char const*, unsigned int)+0xce>
 102:	0f b6 85 70 ff ff ff 	movzbl -0x90(%rbp),%eax
 109:	3c 60                	cmp    $0x60,%al
 10b:	7e 2e                	jle    13b <ReadConfigFile::Read(char const*, unsigned int)+0x13b>
 10d:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
 114:	c6 00 00             	movb   $0x0,(%rax)
 117:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
 11e:	48 8b 08             	mov    (%rax),%rcx
 121:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
 128:	48 8b 40 08          	mov    0x8(%rax),%rax
 12c:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
 133:	48 89 d6             	mov    %rdx,%rsi
 136:	48 89 c7             	mov    %rax,%rdi
 139:	ff d1                	call   *%rcx
 13b:	83 bd 4c ff ff ff 00 	cmpl   $0x0,-0xb4(%rbp)
 142:	0f 85 04 ff ff ff    	jne    4c <ReadConfigFile::Read(char const*, unsigned int)+0x4c>
 148:	eb 01                	jmp    14b <ReadConfigFile::Read(char const*, unsigned int)+0x14b>
 14a:	90                   	nop
 14b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 14f:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 156:	00 00 
 158:	74 05                	je     15f <ReadConfigFile::Read(char const*, unsigned int)+0x15f>
 15a:	e8 00 00 00 00       	call   15f <ReadConfigFile::Read(char const*, unsigned int)+0x15f>
 15f:	c9                   	leave  
 160:	c3                   	ret    

sscanchar.o:     file format elf64-x86-64


Disassembly of section .text._ZN5Sscan4CharEPKcS1_PcRj:

0000000000000000 <Sscan::Char(char const*, char const*, char*, unsigned int&)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 d5             	mov    %rdx,%rbp
   8:	53                   	push   %rbx
   9:	48 89 cb             	mov    %rcx,%rbx
   c:	48 83 ec 18          	sub    $0x18,%rsp
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  1e:	31 c0                	xor    %eax,%eax
  20:	e8 00 00 00 00       	call   25 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x25>
  25:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  2b:	31 d2                	xor    %edx,%edx
  2d:	48 85 c0             	test   %rax,%rax
  30:	74 29                	je     5b <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x5b>
  32:	8a 0c 10             	mov    (%rax,%rdx,1),%cl
  35:	8b 3b                	mov    (%rbx),%edi
  37:	0f b7 f2             	movzwl %dx,%esi
  3a:	84 c9                	test   %cl,%cl
  3c:	74 18                	je     56 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x56>
  3e:	39 fe                	cmp    %edi,%esi
  40:	73 09                	jae    4b <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x4b>
  42:	88 4c 15 00          	mov    %cl,0x0(%rbp,%rdx,1)
  46:	48 ff c2             	inc    %rdx
  49:	eb e7                	jmp    32 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x32>
  4b:	41 b8 02 00 00 00    	mov    $0x2,%r8d
  51:	80 f9 0a             	cmp    $0xa,%cl
  54:	75 05                	jne    5b <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x5b>
  56:	89 33                	mov    %esi,(%rbx)
  58:	45 31 c0             	xor    %r8d,%r8d
  5b:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  60:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  67:	00 00 
  69:	74 05                	je     70 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x70>
  6b:	e8 00 00 00 00       	call   70 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x70>
  70:	48 83 c4 18          	add    $0x18,%rsp
  74:	44 89 c0             	mov    %r8d,%eax
  77:	5b                   	pop    %rbx
  78:	5d                   	pop    %rbp
  79:	c3                   	ret    

sscan.o:     file format elf64-x86-64


Disassembly of section .text._ZN5Sscan7fromHexEPKc:

0000000000000000 <Sscan::fromHex(char const*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	48 83 c0 01          	add    $0x1,%rax
  27:	0f b6 00             	movzbl (%rax),%eax
  2a:	84 c0                	test   %al,%al
  2c:	74 75                	je     a3 <Sscan::fromHex(char const*)+0xa3>
  2e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  32:	48 83 c0 01          	add    $0x1,%rax
  36:	0f b6 00             	movzbl (%rax),%eax
  39:	3c 39                	cmp    $0x39,%al
  3b:	7e 16                	jle    53 <Sscan::fromHex(char const*)+0x53>
  3d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  41:	48 83 c0 01          	add    $0x1,%rax
  45:	0f b6 00             	movzbl (%rax),%eax
  48:	83 c8 20             	or     $0x20,%eax
  4b:	0f be c0             	movsbl %al,%eax
  4e:	83 e8 57             	sub    $0x57,%eax
  51:	eb 11                	jmp    64 <Sscan::fromHex(char const*)+0x64>
  53:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  57:	48 83 c0 01          	add    $0x1,%rax
  5b:	0f b6 00             	movzbl (%rax),%eax
  5e:	0f be c0             	movsbl %al,%eax
  61:	83 e8 30             	sub    $0x30,%eax
  64:	89 45 f0             	mov    %eax,-0x10(%rbp)
  67:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  6b:	0f b6 00             	movzbl (%rax),%eax
  6e:	3c 39                	cmp    $0x39,%al
  70:	7e 12                	jle    84 <Sscan::fromHex(char const*)+0x84>
  72:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  76:	0f b6 00             	movzbl (%rax),%eax
  79:	83 c8 20             	or     $0x20,%eax
  7c:	0f be c0             	movsbl %al,%eax
  7f:	83 e8 57             	sub    $0x57,%eax
  82:	eb 0d                	jmp    91 <Sscan::fromHex(char const*)+0x91>
  84:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  88:	0f b6 00             	movzbl (%rax),%eax
  8b:	0f be c0             	movsbl %al,%eax
  8e:	83 e8 30             	sub    $0x30,%eax
  91:	89 45 f4             	mov    %eax,-0xc(%rbp)
  94:	8b 45 f4             	mov    -0xc(%rbp),%eax
  97:	c1 e0 04             	shl    $0x4,%eax
  9a:	89 c2                	mov    %eax,%edx
  9c:	8b 45 f0             	mov    -0x10(%rbp),%eax
  9f:	09 d0                	or     %edx,%eax
  a1:	eb 24                	jmp    c7 <Sscan::fromHex(char const*)+0xc7>
  a3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  a7:	0f b6 00             	movzbl (%rax),%eax
  aa:	3c 39                	cmp    $0x39,%al
  ac:	7e 0f                	jle    bd <Sscan::fromHex(char const*)+0xbd>
  ae:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  b2:	0f b6 00             	movzbl (%rax),%eax
  b5:	83 c8 20             	or     $0x20,%eax
  b8:	83 e8 57             	sub    $0x57,%eax
  bb:	eb 0a                	jmp    c7 <Sscan::fromHex(char const*)+0xc7>
  bd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  c1:	0f b6 00             	movzbl (%rax),%eax
  c4:	83 e8 30             	sub    $0x30,%eax
  c7:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  cb:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  d2:	00 00 
  d4:	74 05                	je     db <Sscan::fromHex(char const*)+0xdb>
  d6:	e8 00 00 00 00       	call   db <Sscan::fromHex(char const*)+0xdb>
  db:	c9                   	leave  
  dc:	c3                   	ret    

Disassembly of section .text._ZN5Sscan9checkNameEPKcS1_:

0000000000000000 <Sscan::checkName(char const*, char const*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	eb 2e                	jmp    53 <Sscan::checkName(char const*, char const*)+0x53>
  25:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  29:	48 8d 50 01          	lea    0x1(%rax),%rdx
  2d:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
  31:	0f b6 08             	movzbl (%rax),%ecx
  34:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  38:	48 8d 50 01          	lea    0x1(%rax),%rdx
  3c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  40:	0f b6 00             	movzbl (%rax),%eax
  43:	38 c1                	cmp    %al,%cl
  45:	0f 95 c0             	setne  %al
  48:	84 c0                	test   %al,%al
  4a:	74 07                	je     53 <Sscan::checkName(char const*, char const*)+0x53>
  4c:	b8 00 00 00 00       	mov    $0x0,%eax
  51:	eb 68                	jmp    bb <Sscan::checkName(char const*, char const*)+0xbb>
  53:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  57:	0f b6 00             	movzbl (%rax),%eax
  5a:	84 c0                	test   %al,%al
  5c:	74 0b                	je     69 <Sscan::checkName(char const*, char const*)+0x69>
  5e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  62:	0f b6 00             	movzbl (%rax),%eax
  65:	84 c0                	test   %al,%al
  67:	75 bc                	jne    25 <Sscan::checkName(char const*, char const*)+0x25>
  69:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  6d:	0f b6 00             	movzbl (%rax),%eax
  70:	84 c0                	test   %al,%al
  72:	74 07                	je     7b <Sscan::checkName(char const*, char const*)+0x7b>
  74:	b8 00 00 00 00       	mov    $0x0,%eax
  79:	eb 40                	jmp    bb <Sscan::checkName(char const*, char const*)+0xbb>
  7b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7f:	48 8d 50 01          	lea    0x1(%rax),%rdx
  83:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  87:	0f b6 00             	movzbl (%rax),%eax
  8a:	3c 3d                	cmp    $0x3d,%al
  8c:	0f 95 c0             	setne  %al
  8f:	84 c0                	test   %al,%al
  91:	74 07                	je     9a <Sscan::checkName(char const*, char const*)+0x9a>
  93:	b8 00 00 00 00       	mov    $0x0,%eax
  98:	eb 21                	jmp    bb <Sscan::checkName(char const*, char const*)+0xbb>
  9a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  9e:	0f b6 00             	movzbl (%rax),%eax
  a1:	3c 20                	cmp    $0x20,%al
  a3:	74 0b                	je     b0 <Sscan::checkName(char const*, char const*)+0xb0>
  a5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  a9:	0f b6 00             	movzbl (%rax),%eax
  ac:	84 c0                	test   %al,%al
  ae:	75 07                	jne    b7 <Sscan::checkName(char const*, char const*)+0xb7>
  b0:	b8 00 00 00 00       	mov    $0x0,%eax
  b5:	eb 04                	jmp    bb <Sscan::checkName(char const*, char const*)+0xbb>
  b7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  bb:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  bf:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  c6:	00 00 
  c8:	74 05                	je     cf <Sscan::checkName(char const*, char const*)+0xcf>
  ca:	e8 00 00 00 00       	call   cf <Sscan::checkName(char const*, char const*)+0xcf>
  cf:	c9                   	leave  
  d0:	c3                   	ret    

sscanfloat.o:     file format elf64-x86-64


Disassembly of section .text._ZN5Sscan5FloatEPKcS1_Rf:

0000000000000000 <Sscan::Float(char const*, char const*, float&)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	53                   	push   %rbx
   5:	48 89 d3             	mov    %rdx,%rbx
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  1a:	31 c0                	xor    %eax,%eax
  1c:	e8 00 00 00 00       	call   21 <Sscan::Float(char const*, char const*, float&)+0x21>
  21:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  27:	48 85 c0             	test   %rax,%rax
  2a:	0f 84 bc 00 00 00    	je     ec <Sscan::Float(char const*, char const*, float&)+0xec>
  30:	31 ff                	xor    %edi,%edi
  32:	80 38 2d             	cmpb   $0x2d,(%rax)
  35:	75 06                	jne    3d <Sscan::Float(char const*, char const*, float&)+0x3d>
  37:	48 ff c0             	inc    %rax
  3a:	40 b7 01             	mov    $0x1,%dil
  3d:	31 d2                	xor    %edx,%edx
  3f:	f6 00 df             	testb  $0xdf,(%rax)
  42:	75 29                	jne    6d <Sscan::Float(char const*, char const*, float&)+0x6d>
  44:	41 b8 02 00 00 00    	mov    $0x2,%r8d
  4a:	e9 9d 00 00 00       	jmp    ec <Sscan::Float(char const*, char const*, float&)+0xec>
  4f:	6b d2 0a             	imul   $0xa,%edx,%edx
  52:	40 8a 70 01          	mov    0x1(%rax),%sil
  56:	8d 54 11 d0          	lea    -0x30(%rcx,%rdx,1),%edx
  5a:	48 8d 48 01          	lea    0x1(%rax),%rcx
  5e:	40 f6 c6 df          	test   $0xdf,%sil
  62:	74 16                	je     7a <Sscan::Float(char const*, char const*, float&)+0x7a>
  64:	40 80 fe 2e          	cmp    $0x2e,%sil
  68:	74 10                	je     7a <Sscan::Float(char const*, char const*, float&)+0x7a>
  6a:	48 89 c8             	mov    %rcx,%rax
  6d:	0f be 08             	movsbl (%rax),%ecx
  70:	8d 71 d0             	lea    -0x30(%rcx),%esi
  73:	83 fe 09             	cmp    $0x9,%esi
  76:	76 d7                	jbe    4f <Sscan::Float(char const*, char const*, float&)+0x4f>
  78:	eb ca                	jmp    44 <Sscan::Float(char const*, char const*, float&)+0x44>
  7a:	f3 48 0f 2a ca       	cvtsi2ss %rdx,%xmm1
  7f:	f3 0f 11 0b          	movss  %xmm1,(%rbx)
  83:	80 39 2e             	cmpb   $0x2e,(%rcx)
  86:	74 12                	je     9a <Sscan::Float(char const*, char const*, float&)+0x9a>
  88:	40 84 ff             	test   %dil,%dil
  8b:	74 5c                	je     e9 <Sscan::Float(char const*, char const*, float&)+0xe9>
  8d:	0f 57 0d 00 00 00 00 	xorps  0x0(%rip),%xmm1        # 94 <Sscan::Float(char const*, char const*, float&)+0x94>
  94:	f3 0f 11 0b          	movss  %xmm1,(%rbx)
  98:	eb 4f                	jmp    e9 <Sscan::Float(char const*, char const*, float&)+0xe9>
  9a:	48 83 c0 02          	add    $0x2,%rax
  9e:	b9 01 00 00 00       	mov    $0x1,%ecx
  a3:	31 d2                	xor    %edx,%edx
  a5:	0f be 30             	movsbl (%rax),%esi
  a8:	40 f6 c6 df          	test   $0xdf,%sil
  ac:	74 19                	je     c7 <Sscan::Float(char const*, char const*, float&)+0xc7>
  ae:	44 8d 46 d0          	lea    -0x30(%rsi),%r8d
  b2:	41 83 f8 09          	cmp    $0x9,%r8d
  b6:	77 8c                	ja     44 <Sscan::Float(char const*, char const*, float&)+0x44>
  b8:	6b d2 0a             	imul   $0xa,%edx,%edx
  bb:	48 ff c0             	inc    %rax
  be:	6b c9 0a             	imul   $0xa,%ecx,%ecx
  c1:	8d 54 16 d0          	lea    -0x30(%rsi,%rdx,1),%edx
  c5:	eb de                	jmp    a5 <Sscan::Float(char const*, char const*, float&)+0xa5>
  c7:	f3 48 0f 2a c2       	cvtsi2ss %rdx,%xmm0
  cc:	f3 48 0f 2a d1       	cvtsi2ss %rcx,%xmm2
  d1:	f3 0f 5e c2          	divss  %xmm2,%xmm0
  d5:	f3 0f 58 c1          	addss  %xmm1,%xmm0
  d9:	40 84 ff             	test   %dil,%dil
  dc:	74 07                	je     e5 <Sscan::Float(char const*, char const*, float&)+0xe5>
  de:	0f 57 05 00 00 00 00 	xorps  0x0(%rip),%xmm0        # e5 <Sscan::Float(char const*, char const*, float&)+0xe5>
  e5:	f3 0f 11 03          	movss  %xmm0,(%rbx)
  e9:	45 31 c0             	xor    %r8d,%r8d
  ec:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  f1:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  f8:	00 00 
  fa:	74 05                	je     101 <Sscan::Float(char const*, char const*, float&)+0x101>
  fc:	e8 00 00 00 00       	call   101 <Sscan::Float(char const*, char const*, float&)+0x101>
 101:	48 83 c4 10          	add    $0x10,%rsp
 105:	44 89 c0             	mov    %r8d,%eax
 108:	5b                   	pop    %rbx
 109:	c3                   	ret    

sscanhex24uint32.o:     file format elf64-x86-64


Disassembly of section .text._ZN5Sscan11Hex24Uint32EPKcS1_Rj:

0000000000000000 <Sscan::Hex24Uint32(char const*, char const*, unsigned int&)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	41 56                	push   %r14
   6:	41 55                	push   %r13
   8:	49 89 d5             	mov    %rdx,%r13
   b:	41 54                	push   %r12
   d:	55                   	push   %rbp
   e:	53                   	push   %rbx
   f:	48 83 ec 10          	sub    $0x10,%rsp
  13:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1a:	00 00 
  1c:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21:	31 c0                	xor    %eax,%eax
  23:	e8 00 00 00 00       	call   28 <Sscan::Hex24Uint32(char const*, char const*, unsigned int&)+0x28>
  28:	48 85 c0             	test   %rax,%rax
  2b:	75 07                	jne    34 <Sscan::Hex24Uint32(char const*, char const*, unsigned int&)+0x34>
  2d:	b8 01 00 00 00       	mov    $0x1,%eax
  32:	eb 5a                	jmp    8e <Sscan::Hex24Uint32(char const*, char const*, unsigned int&)+0x8e>
  34:	49 89 c6             	mov    %rax,%r14
  37:	31 ed                	xor    %ebp,%ebp
  39:	45 31 e4             	xor    %r12d,%r12d
  3c:	45 89 65 00          	mov    %r12d,0x0(%r13)
  40:	41 8a 1c 2e          	mov    (%r14,%rbp,1),%bl
  44:	89 e8                	mov    %ebp,%eax
  46:	84 db                	test   %bl,%bl
  48:	74 39                	je     83 <Sscan::Hex24Uint32(char const*, char const*, unsigned int&)+0x83>
  4a:	48 83 fd 06          	cmp    $0x6,%rbp
  4e:	74 29                	je     79 <Sscan::Hex24Uint32(char const*, char const*, unsigned int&)+0x79>
  50:	0f be fb             	movsbl %bl,%edi
  53:	e8 00 00 00 00       	call   58 <Sscan::Hex24Uint32(char const*, char const*, unsigned int&)+0x58>
  58:	85 c0                	test   %eax,%eax
  5a:	74 d1                	je     2d <Sscan::Hex24Uint32(char const*, char const*, unsigned int&)+0x2d>
  5c:	8d 43 d0             	lea    -0x30(%rbx),%eax
  5f:	80 fb 39             	cmp    $0x39,%bl
  62:	7e 06                	jle    6a <Sscan::Hex24Uint32(char const*, char const*, unsigned int&)+0x6a>
  64:	83 cb 20             	or     $0x20,%ebx
  67:	8d 43 a9             	lea    -0x57(%rbx),%eax
  6a:	41 c1 e4 04          	shl    $0x4,%r12d
  6e:	0f b6 c0             	movzbl %al,%eax
  71:	48 ff c5             	inc    %rbp
  74:	41 09 c4             	or     %eax,%r12d
  77:	eb c3                	jmp    3c <Sscan::Hex24Uint32(char const*, char const*, unsigned int&)+0x3c>
  79:	80 fb 20             	cmp    $0x20,%bl
  7c:	75 af                	jne    2d <Sscan::Hex24Uint32(char const*, char const*, unsigned int&)+0x2d>
  7e:	b8 06 00 00 00       	mov    $0x6,%eax
  83:	83 f8 06             	cmp    $0x6,%eax
  86:	0f 95 c0             	setne  %al
  89:	0f b6 c0             	movzbl %al,%eax
  8c:	01 c0                	add    %eax,%eax
  8e:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  93:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  9a:	00 00 
  9c:	74 05                	je     a3 <Sscan::Hex24Uint32(char const*, char const*, unsigned int&)+0xa3>
  9e:	e8 00 00 00 00       	call   a3 <Sscan::Hex24Uint32(char const*, char const*, unsigned int&)+0xa3>
  a3:	48 83 c4 10          	add    $0x10,%rsp
  a7:	5b                   	pop    %rbx
  a8:	5d                   	pop    %rbp
  a9:	41 5c                	pop    %r12
  ab:	41 5d                	pop    %r13
  ad:	41 5e                	pop    %r14
  af:	c3                   	ret    

sscanhexuint16.o:     file format elf64-x86-64


Disassembly of section .text._ZN5Sscan9HexUint16EPKcS1_Rt:

0000000000000000 <Sscan::HexUint16(char const*, char const*, unsigned short&)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	41 56                	push   %r14
   6:	41 55                	push   %r13
   8:	49 89 d5             	mov    %rdx,%r13
   b:	41 54                	push   %r12
   d:	55                   	push   %rbp
   e:	53                   	push   %rbx
   f:	48 83 ec 10          	sub    $0x10,%rsp
  13:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1a:	00 00 
  1c:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  21:	31 c0                	xor    %eax,%eax
  23:	e8 00 00 00 00       	call   28 <Sscan::HexUint16(char const*, char const*, unsigned short&)+0x28>
  28:	48 85 c0             	test   %rax,%rax
  2b:	75 07                	jne    34 <Sscan::HexUint16(char const*, char const*, unsigned short&)+0x34>
  2d:	b8 01 00 00 00       	mov    $0x1,%eax
  32:	eb 5b                	jmp    8f <Sscan::HexUint16(char const*, char const*, unsigned short&)+0x8f>
  34:	49 89 c6             	mov    %rax,%r14
  37:	31 ed                	xor    %ebp,%ebp
  39:	45 31 e4             	xor    %r12d,%r12d
  3c:	66 45 89 65 00       	mov    %r12w,0x0(%r13)
  41:	41 8a 1c 2e          	mov    (%r14,%rbp,1),%bl
  45:	89 e8                	mov    %ebp,%eax
  47:	84 db                	test   %bl,%bl
  49:	74 39                	je     84 <Sscan::HexUint16(char const*, char const*, unsigned short&)+0x84>
  4b:	48 83 fd 04          	cmp    $0x4,%rbp
  4f:	74 29                	je     7a <Sscan::HexUint16(char const*, char const*, unsigned short&)+0x7a>
  51:	0f be fb             	movsbl %bl,%edi
  54:	e8 00 00 00 00       	call   59 <Sscan::HexUint16(char const*, char const*, unsigned short&)+0x59>
  59:	85 c0                	test   %eax,%eax
  5b:	74 d0                	je     2d <Sscan::HexUint16(char const*, char const*, unsigned short&)+0x2d>
  5d:	8d 43 d0             	lea    -0x30(%rbx),%eax
  60:	80 fb 39             	cmp    $0x39,%bl
  63:	7e 06                	jle    6b <Sscan::HexUint16(char const*, char const*, unsigned short&)+0x6b>
  65:	83 cb 20             	or     $0x20,%ebx
  68:	8d 43 a9             	lea    -0x57(%rbx),%eax
  6b:	41 c1 e4 04          	shl    $0x4,%r12d
  6f:	0f b6 c0             	movzbl %al,%eax
  72:	48 ff c5             	inc    %rbp
  75:	41 09 c4             	or     %eax,%r12d
  78:	eb c2                	jmp    3c <Sscan::HexUint16(char const*, char const*, unsigned short&)+0x3c>
  7a:	80 fb 20             	cmp    $0x20,%bl
  7d:	75 ae                	jne    2d <Sscan::HexUint16(char const*, char const*, unsigned short&)+0x2d>
  7f:	b8 04 00 00 00       	mov    $0x4,%eax
  84:	83 f8 04             	cmp    $0x4,%eax
  87:	0f 95 c0             	setne  %al
  8a:	0f b6 c0             	movzbl %al,%eax
  8d:	01 c0                	add    %eax,%eax
  8f:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  94:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  9b:	00 00 
  9d:	74 05                	je     a4 <Sscan::HexUint16(char const*, char const*, unsigned short&)+0xa4>
  9f:	e8 00 00 00 00       	call   a4 <Sscan::HexUint16(char const*, char const*, unsigned short&)+0xa4>
  a4:	48 83 c4 10          	add    $0x10,%rsp
  a8:	5b                   	pop    %rbx
  a9:	5d                   	pop    %rbp
  aa:	41 5c                	pop    %r12
  ac:	41 5d                	pop    %r13
  ae:	41 5e                	pop    %r14
  b0:	c3                   	ret    

sscani2caddress.o:     file format elf64-x86-64


Disassembly of section .text._ZN5Sscan10I2cAddressEPKcS1_Rh:

0000000000000000 <Sscan::I2cAddress(char const*, char const*, unsigned char&)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	41 55                	push   %r13
   6:	49 89 d5             	mov    %rdx,%r13
   9:	41 54                	push   %r12
   b:	55                   	push   %rbp
   c:	53                   	push   %rbx
   d:	48 83 ec 18          	sub    $0x18,%rsp
  11:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  18:	00 00 
  1a:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  1f:	31 c0                	xor    %eax,%eax
  21:	e8 00 00 00 00       	call   26 <Sscan::I2cAddress(char const*, char const*, unsigned char&)+0x26>
  26:	48 85 c0             	test   %rax,%rax
  29:	75 07                	jne    32 <Sscan::I2cAddress(char const*, char const*, unsigned char&)+0x32>
  2b:	b8 01 00 00 00       	mov    $0x1,%eax
  30:	eb 50                	jmp    82 <Sscan::I2cAddress(char const*, char const*, unsigned char&)+0x82>
  32:	66 c7 44 24 06 00 00 	movw   $0x0,0x6(%rsp)
  39:	49 89 c4             	mov    %rax,%r12
  3c:	31 db                	xor    %ebx,%ebx
  3e:	41 8a 2c 1c          	mov    (%r12,%rbx,1),%bpl
  42:	40 84 ed             	test   %bpl,%bpl
  45:	74 23                	je     6a <Sscan::I2cAddress(char const*, char const*, unsigned char&)+0x6a>
  47:	48 83 fb 02          	cmp    $0x2,%rbx
  4b:	74 17                	je     64 <Sscan::I2cAddress(char const*, char const*, unsigned char&)+0x64>
  4d:	40 0f be fd          	movsbl %bpl,%edi
  51:	e8 00 00 00 00       	call   56 <Sscan::I2cAddress(char const*, char const*, unsigned char&)+0x56>
  56:	85 c0                	test   %eax,%eax
  58:	74 d1                	je     2b <Sscan::I2cAddress(char const*, char const*, unsigned char&)+0x2b>
  5a:	40 88 6c 1c 06       	mov    %bpl,0x6(%rsp,%rbx,1)
  5f:	48 ff c3             	inc    %rbx
  62:	eb da                	jmp    3e <Sscan::I2cAddress(char const*, char const*, unsigned char&)+0x3e>
  64:	40 80 fd 20          	cmp    $0x20,%bpl
  68:	75 c1                	jne    2b <Sscan::I2cAddress(char const*, char const*, unsigned char&)+0x2b>
  6a:	48 8d 7c 24 06       	lea    0x6(%rsp),%rdi
  6f:	e8 00 00 00 00       	call   74 <Sscan::I2cAddress(char const*, char const*, unsigned char&)+0x74>
  74:	3c 7e                	cmp    $0x7e,%al
  76:	41 88 45 00          	mov    %al,0x0(%r13)
  7a:	0f 97 c0             	seta   %al
  7d:	0f b6 c0             	movzbl %al,%eax
  80:	01 c0                	add    %eax,%eax
  82:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  87:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  8e:	00 00 
  90:	74 05                	je     97 <Sscan::I2cAddress(char const*, char const*, unsigned char&)+0x97>
  92:	e8 00 00 00 00       	call   97 <Sscan::I2cAddress(char const*, char const*, unsigned char&)+0x97>
  97:	48 83 c4 18          	add    $0x18,%rsp
  9b:	5b                   	pop    %rbx
  9c:	5d                   	pop    %rbp
  9d:	41 5c                	pop    %r12
  9f:	41 5d                	pop    %r13
  a1:	c3                   	ret    

sscani2c.o:     file format elf64-x86-64


Disassembly of section .text._ZN5Sscan3I2cEPKcPcRhS3_S3_:

0000000000000000 <Sscan::I2c(char const*, char*, unsigned char&, unsigned char&, unsigned char&)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	41 56                	push   %r14
   6:	41 55                	push   %r13
   8:	49 89 cd             	mov    %rcx,%r13
   b:	41 54                	push   %r12
   d:	55                   	push   %rbp
   e:	4c 89 c5             	mov    %r8,%rbp
  11:	53                   	push   %rbx
  12:	48 83 ec 10          	sub    $0x10,%rsp
  16:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1d:	00 00 
  1f:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  24:	31 c0                	xor    %eax,%eax
  26:	8a 0c 07             	mov    (%rdi,%rax,1),%cl
  29:	48 8d 1c 07          	lea    (%rdi,%rax,1),%rbx
  2d:	84 c9                	test   %cl,%cl
  2f:	74 05                	je     36 <Sscan::I2c(char const*, char*, unsigned char&, unsigned char&, unsigned char&)+0x36>
  31:	80 f9 3d             	cmp    $0x3d,%cl
  34:	75 18                	jne    4e <Sscan::I2c(char const*, char*, unsigned char&, unsigned char&, unsigned char&)+0x4e>
  36:	88 02                	mov    %al,(%rdx)
  38:	8a 13                	mov    (%rbx),%dl
  3a:	84 d2                	test   %dl,%dl
  3c:	74 21                	je     5f <Sscan::I2c(char const*, char*, unsigned char&, unsigned char&, unsigned char&)+0x5f>
  3e:	b8 01 00 00 00       	mov    $0x1,%eax
  43:	80 fa 3d             	cmp    $0x3d,%dl
  46:	0f 85 94 00 00 00    	jne    e0 <Sscan::I2c(char const*, char*, unsigned char&, unsigned char&, unsigned char&)+0xe0>
  4c:	eb 11                	jmp    5f <Sscan::I2c(char const*, char*, unsigned char&, unsigned char&, unsigned char&)+0x5f>
  4e:	44 0f b6 0a          	movzbl (%rdx),%r9d
  52:	41 39 c1             	cmp    %eax,%r9d
  55:	76 df                	jbe    36 <Sscan::I2c(char const*, char*, unsigned char&, unsigned char&, unsigned char&)+0x36>
  57:	88 0c 06             	mov    %cl,(%rsi,%rax,1)
  5a:	48 ff c0             	inc    %rax
  5d:	eb c7                	jmp    26 <Sscan::I2c(char const*, char*, unsigned char&, unsigned char&, unsigned char&)+0x26>
  5f:	c6 44 24 07 00       	movb   $0x0,0x7(%rsp)
  64:	48 ff c3             	inc    %rbx
  67:	45 31 e4             	xor    %r12d,%r12d
  6a:	44 8a 33             	mov    (%rbx),%r14b
  6d:	44 89 e0             	mov    %r12d,%eax
  70:	45 84 f6             	test   %r14b,%r14b
  73:	74 2d                	je     a2 <Sscan::I2c(char const*, char*, unsigned char&, unsigned char&, unsigned char&)+0xa2>
  75:	41 80 fe 3a          	cmp    $0x3a,%r14b
  79:	74 27                	je     a2 <Sscan::I2c(char const*, char*, unsigned char&, unsigned char&, unsigned char&)+0xa2>
  7b:	49 83 fc 02          	cmp    $0x2,%r12
  7f:	74 25                	je     a6 <Sscan::I2c(char const*, char*, unsigned char&, unsigned char&, unsigned char&)+0xa6>
  81:	41 0f be fe          	movsbl %r14b,%edi
  85:	e8 00 00 00 00       	call   8a <Sscan::I2c(char const*, char*, unsigned char&, unsigned char&, unsigned char&)+0x8a>
  8a:	85 c0                	test   %eax,%eax
  8c:	75 07                	jne    95 <Sscan::I2c(char const*, char*, unsigned char&, unsigned char&, unsigned char&)+0x95>
  8e:	b8 02 00 00 00       	mov    $0x2,%eax
  93:	eb 4b                	jmp    e0 <Sscan::I2c(char const*, char*, unsigned char&, unsigned char&, unsigned char&)+0xe0>
  95:	46 88 74 24 06       	mov    %r14b,0x6(%rsp,%r12,1)
  9a:	48 ff c3             	inc    %rbx
  9d:	49 ff c4             	inc    %r12
  a0:	eb c8                	jmp    6a <Sscan::I2c(char const*, char*, unsigned char&, unsigned char&, unsigned char&)+0x6a>
  a2:	85 c0                	test   %eax,%eax
  a4:	74 e8                	je     8e <Sscan::I2c(char const*, char*, unsigned char&, unsigned char&, unsigned char&)+0x8e>
  a6:	48 8d 7c 24 06       	lea    0x6(%rsp),%rdi
  ab:	e8 00 00 00 00       	call   b0 <Sscan::I2c(char const*, char*, unsigned char&, unsigned char&, unsigned char&)+0xb0>
  b0:	41 88 45 00          	mov    %al,0x0(%r13)
  b4:	31 c0                	xor    %eax,%eax
  b6:	c6 45 00 ff          	movb   $0xff,0x0(%rbp)
  ba:	8a 13                	mov    (%rbx),%dl
  bc:	f6 c2 df             	test   $0xdf,%dl
  bf:	74 1f                	je     e0 <Sscan::I2c(char const*, char*, unsigned char&, unsigned char&, unsigned char&)+0xe0>
  c1:	80 fa 3a             	cmp    $0x3a,%dl
  c4:	75 c8                	jne    8e <Sscan::I2c(char const*, char*, unsigned char&, unsigned char&, unsigned char&)+0x8e>
  c6:	0f be 53 01          	movsbl 0x1(%rbx),%edx
  ca:	89 d0                	mov    %edx,%eax
  cc:	83 ea 30             	sub    $0x30,%edx
  cf:	83 fa 09             	cmp    $0x9,%edx
  d2:	77 ba                	ja     8e <Sscan::I2c(char const*, char*, unsigned char&, unsigned char&, unsigned char&)+0x8e>
  d4:	83 e8 30             	sub    $0x30,%eax
  d7:	3c 07                	cmp    $0x7,%al
  d9:	77 b3                	ja     8e <Sscan::I2c(char const*, char*, unsigned char&, unsigned char&, unsigned char&)+0x8e>
  db:	88 45 00             	mov    %al,0x0(%rbp)
  de:	31 c0                	xor    %eax,%eax
  e0:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  e5:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  ec:	00 00 
  ee:	74 05                	je     f5 <Sscan::I2c(char const*, char*, unsigned char&, unsigned char&, unsigned char&)+0xf5>
  f0:	e8 00 00 00 00       	call   f5 <Sscan::I2c(char const*, char*, unsigned char&, unsigned char&, unsigned char&)+0xf5>
  f5:	48 83 c4 10          	add    $0x10,%rsp
  f9:	5b                   	pop    %rbx
  fa:	5d                   	pop    %rbp
  fb:	41 5c                	pop    %r12
  fd:	41 5d                	pop    %r13
  ff:	41 5e                	pop    %r14
 101:	c3                   	ret    

sscanipaddress.o:     file format elf64-x86-64


Disassembly of section .text._ZN5Sscan9IpAddressEPKcS1_Rj:

0000000000000000 <Sscan::IpAddress(char const*, char const*, unsigned int&)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	53                   	push   %rbx
   5:	48 89 d3             	mov    %rdx,%rbx
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  1a:	31 c0                	xor    %eax,%eax
  1c:	e8 00 00 00 00       	call   21 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x21>
  21:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  27:	31 f6                	xor    %esi,%esi
  29:	48 85 c0             	test   %rax,%rax
  2c:	0f 84 89 00 00 00    	je     bb <Sscan::IpAddress(char const*, char const*, unsigned int&)+0xbb>
  32:	48 8d 78 03          	lea    0x3(%rax),%rdi
  36:	31 d2                	xor    %edx,%edx
  38:	0f be 08             	movsbl (%rax),%ecx
  3b:	80 f9 2e             	cmp    $0x2e,%cl
  3e:	74 27                	je     67 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x67>
  40:	84 c9                	test   %cl,%cl
  42:	74 23                	je     67 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x67>
  44:	48 39 c7             	cmp    %rax,%rdi
  47:	75 08                	jne    51 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x51>
  49:	41 b8 02 00 00 00    	mov    $0x2,%r8d
  4f:	eb 6a                	jmp    bb <Sscan::IpAddress(char const*, char const*, unsigned int&)+0xbb>
  51:	44 8d 41 d0          	lea    -0x30(%rcx),%r8d
  55:	41 83 f8 09          	cmp    $0x9,%r8d
  59:	77 ee                	ja     49 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x49>
  5b:	6b d2 0a             	imul   $0xa,%edx,%edx
  5e:	48 ff c0             	inc    %rax
  61:	8d 54 11 d0          	lea    -0x30(%rcx,%rdx,1),%edx
  65:	eb d1                	jmp    38 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x38>
  67:	81 fa ff 00 00 00    	cmp    $0xff,%edx
  6d:	77 da                	ja     49 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x49>
  6f:	88 54 34 04          	mov    %dl,0x4(%rsp,%rsi,1)
  73:	48 ff c6             	inc    %rsi
  76:	48 ff c0             	inc    %rax
  79:	48 83 fe 03          	cmp    $0x3,%rsi
  7d:	75 b3                	jne    32 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x32>
  7f:	31 f6                	xor    %esi,%esi
  81:	31 d2                	xor    %edx,%edx
  83:	0f be 0c 30          	movsbl (%rax,%rsi,1),%ecx
  87:	f6 c1 df             	test   $0xdf,%cl
  8a:	74 1a                	je     a6 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0xa6>
  8c:	48 83 fe 03          	cmp    $0x3,%rsi
  90:	74 b7                	je     49 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x49>
  92:	8d 79 d0             	lea    -0x30(%rcx),%edi
  95:	48 ff c6             	inc    %rsi
  98:	83 ff 09             	cmp    $0x9,%edi
  9b:	77 ac                	ja     49 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x49>
  9d:	6b d2 0a             	imul   $0xa,%edx,%edx
  a0:	8d 54 11 d0          	lea    -0x30(%rcx,%rdx,1),%edx
  a4:	eb dd                	jmp    83 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x83>
  a6:	81 fa ff 00 00 00    	cmp    $0xff,%edx
  ac:	77 9b                	ja     49 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x49>
  ae:	88 54 24 07          	mov    %dl,0x7(%rsp)
  b2:	8b 44 24 04          	mov    0x4(%rsp),%eax
  b6:	45 31 c0             	xor    %r8d,%r8d
  b9:	89 03                	mov    %eax,(%rbx)
  bb:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  c0:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  c7:	00 00 
  c9:	74 05                	je     d0 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0xd0>
  cb:	e8 00 00 00 00       	call   d0 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0xd0>
  d0:	48 83 c4 10          	add    $0x10,%rsp
  d4:	44 89 c0             	mov    %r8d,%eax
  d7:	5b                   	pop    %rbx
  d8:	c3                   	ret    

sscanspi.o:     file format elf64-x86-64


Disassembly of section .text._ZN5Sscan3SpiEPKcRcPcRhS4_RtRj:

0000000000000000 <Sscan::Spi(char const*, char&, char*, unsigned char&, unsigned char&, unsigned short&, unsigned int&)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	41 57                	push   %r15
   6:	48 89 f8             	mov    %rdi,%rax
   9:	48 89 f7             	mov    %rsi,%rdi
   c:	48 89 d6             	mov    %rdx,%rsi
   f:	41 56                	push   %r14
  11:	41 55                	push   %r13
  13:	4d 89 c5             	mov    %r8,%r13
  16:	41 54                	push   %r12
  18:	4d 89 cc             	mov    %r9,%r12
  1b:	55                   	push   %rbp
  1c:	53                   	push   %rbx
  1d:	48 83 ec 18          	sub    $0x18,%rsp
  21:	44 0f be 00          	movsbl (%rax),%r8d
  25:	64 48 8b 14 25 28 00 	mov    %fs:0x28,%rdx
  2c:	00 00 
  2e:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  33:	31 d2                	xor    %edx,%edx
  35:	48 8b 6c 24 50       	mov    0x50(%rsp),%rbp
  3a:	44 89 c2             	mov    %r8d,%edx
  3d:	41 83 e8 30          	sub    $0x30,%r8d
  41:	41 83 f8 09          	cmp    $0x9,%r8d
  45:	76 11                	jbe    58 <Sscan::Spi(char const*, char&, char*, unsigned char&, unsigned char&, unsigned short&, unsigned int&)+0x58>
  47:	80 78 01 2c          	cmpb   $0x2c,0x1(%rax)
  4b:	74 0b                	je     58 <Sscan::Spi(char const*, char&, char*, unsigned char&, unsigned char&, unsigned short&, unsigned int&)+0x58>
  4d:	41 b8 02 00 00 00    	mov    $0x2,%r8d
  53:	e9 51 01 00 00       	jmp    1a9 <Sscan::Spi(char const*, char&, char*, unsigned char&, unsigned char&, unsigned short&, unsigned int&)+0x1a9>
  58:	83 ea 30             	sub    $0x30,%edx
  5b:	48 83 c0 02          	add    $0x2,%rax
  5f:	88 17                	mov    %dl,(%rdi)
  61:	31 d2                	xor    %edx,%edx
  63:	40 8a 38             	mov    (%rax),%dil
  66:	4c 8d 04 16          	lea    (%rsi,%rdx,1),%r8
  6a:	40 84 ff             	test   %dil,%dil
  6d:	74 1b                	je     8a <Sscan::Spi(char const*, char&, char*, unsigned char&, unsigned char&, unsigned short&, unsigned int&)+0x8a>
  6f:	44 0f b6 09          	movzbl (%rcx),%r9d
  73:	41 39 d1             	cmp    %edx,%r9d
  76:	76 12                	jbe    8a <Sscan::Spi(char const*, char&, char*, unsigned char&, unsigned char&, unsigned short&, unsigned int&)+0x8a>
  78:	40 80 ff 2c          	cmp    $0x2c,%dil
  7c:	74 0c                	je     8a <Sscan::Spi(char const*, char&, char*, unsigned char&, unsigned char&, unsigned short&, unsigned int&)+0x8a>
  7e:	40 88 3c 16          	mov    %dil,(%rsi,%rdx,1)
  82:	48 ff c0             	inc    %rax
  85:	48 ff c2             	inc    %rdx
  88:	eb d9                	jmp    63 <Sscan::Spi(char const*, char&, char*, unsigned char&, unsigned char&, unsigned short&, unsigned int&)+0x63>
  8a:	88 11                	mov    %dl,(%rcx)
  8c:	41 c6 00 00          	movb   $0x0,(%r8)
  90:	80 38 2c             	cmpb   $0x2c,(%rax)
  93:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  99:	0f 85 0a 01 00 00    	jne    1a9 <Sscan::Spi(char const*, char&, char*, unsigned char&, unsigned char&, unsigned short&, unsigned int&)+0x1a9>
  9f:	c6 44 24 07 00       	movb   $0x0,0x7(%rsp)
  a4:	48 8d 58 01          	lea    0x1(%rax),%rbx
  a8:	45 31 ff             	xor    %r15d,%r15d
  ab:	44 8a 33             	mov    (%rbx),%r14b
  ae:	44 89 f8             	mov    %r15d,%eax
  b1:	45 84 f6             	test   %r14b,%r14b
  b4:	74 2a                	je     e0 <Sscan::Spi(char const*, char&, char*, unsigned char&, unsigned char&, unsigned short&, unsigned int&)+0xe0>
  b6:	41 80 fe 2c          	cmp    $0x2c,%r14b
  ba:	74 24                	je     e0 <Sscan::Spi(char const*, char&, char*, unsigned char&, unsigned char&, unsigned short&, unsigned int&)+0xe0>
  bc:	49 83 ff 02          	cmp    $0x2,%r15
  c0:	74 8b                	je     4d <Sscan::Spi(char const*, char&, char*, unsigned char&, unsigned char&, unsigned short&, unsigned int&)+0x4d>
  c2:	41 0f be fe          	movsbl %r14b,%edi
  c6:	e8 00 00 00 00       	call   cb <Sscan::Spi(char const*, char&, char*, unsigned char&, unsigned char&, unsigned short&, unsigned int&)+0xcb>
  cb:	85 c0                	test   %eax,%eax
  cd:	0f 84 7a ff ff ff    	je     4d <Sscan::Spi(char const*, char&, char*, unsigned char&, unsigned char&, unsigned short&, unsigned int&)+0x4d>
  d3:	46 88 74 3c 06       	mov    %r14b,0x6(%rsp,%r15,1)
  d8:	48 ff c3             	inc    %rbx
  db:	49 ff c7             	inc    %r15
  de:	eb cb                	jmp    ab <Sscan::Spi(char const*, char&, char*, unsigned char&, unsigned char&, unsigned short&, unsigned int&)+0xab>
  e0:	85 c0                	test   %eax,%eax
  e2:	0f 84 65 ff ff ff    	je     4d <Sscan::Spi(char const*, char&, char*, unsigned char&, unsigned char&, unsigned short&, unsigned int&)+0x4d>
  e8:	41 80 fe 2c          	cmp    $0x2c,%r14b
  ec:	0f 85 5b ff ff ff    	jne    4d <Sscan::Spi(char const*, char&, char*, unsigned char&, unsigned char&, unsigned short&, unsigned int&)+0x4d>
  f2:	48 8d 7c 24 06       	lea    0x6(%rsp),%rdi
  f7:	e8 00 00 00 00       	call   fc <Sscan::Spi(char const*, char&, char*, unsigned char&, unsigned char&, unsigned short&, unsigned int&)+0xfc>
  fc:	31 c9                	xor    %ecx,%ecx
  fe:	31 f6                	xor    %esi,%esi
 100:	41 88 45 00          	mov    %al,0x0(%r13)
 104:	48 8d 43 01          	lea    0x1(%rbx),%rax
 108:	66 0f be 10          	movsbw (%rax),%dx
 10c:	84 d2                	test   %dl,%dl
 10e:	74 2b                	je     13b <Sscan::Spi(char const*, char&, char*, unsigned char&, unsigned char&, unsigned short&, unsigned int&)+0x13b>
 110:	80 fa 2c             	cmp    $0x2c,%dl
 113:	74 26                	je     13b <Sscan::Spi(char const*, char&, char*, unsigned char&, unsigned char&, unsigned short&, unsigned int&)+0x13b>
 115:	83 fe 03             	cmp    $0x3,%esi
 118:	0f 84 2f ff ff ff    	je     4d <Sscan::Spi(char const*, char&, char*, unsigned char&, unsigned char&, unsigned short&, unsigned int&)+0x4d>
 11e:	0f be fa             	movsbl %dl,%edi
 121:	83 ef 30             	sub    $0x30,%edi
 124:	83 ff 09             	cmp    $0x9,%edi
 127:	0f 87 20 ff ff ff    	ja     4d <Sscan::Spi(char const*, char&, char*, unsigned char&, unsigned char&, unsigned short&, unsigned int&)+0x4d>
 12d:	6b c9 0a             	imul   $0xa,%ecx,%ecx
 130:	ff c6                	inc    %esi
 132:	48 ff c0             	inc    %rax
 135:	8d 4c 11 d0          	lea    -0x30(%rcx,%rdx,1),%ecx
 139:	eb cd                	jmp    108 <Sscan::Spi(char const*, char&, char*, unsigned char&, unsigned char&, unsigned short&, unsigned int&)+0x108>
 13b:	85 f6                	test   %esi,%esi
 13d:	0f 84 0a ff ff ff    	je     4d <Sscan::Spi(char const*, char&, char*, unsigned char&, unsigned char&, unsigned short&, unsigned int&)+0x4d>
 143:	80 fa 2c             	cmp    $0x2c,%dl
 146:	0f 85 01 ff ff ff    	jne    4d <Sscan::Spi(char const*, char&, char*, unsigned char&, unsigned char&, unsigned short&, unsigned int&)+0x4d>
 14c:	66 41 89 0c 24       	mov    %cx,(%r12)
 151:	66 81 f9 00 02       	cmp    $0x200,%cx
 156:	0f 87 f1 fe ff ff    	ja     4d <Sscan::Spi(char const*, char&, char*, unsigned char&, unsigned char&, unsigned short&, unsigned int&)+0x4d>
 15c:	31 f6                	xor    %esi,%esi
 15e:	31 c9                	xor    %ecx,%ecx
 160:	0f be 54 30 01       	movsbl 0x1(%rax,%rsi,1),%edx
 165:	89 f7                	mov    %esi,%edi
 167:	84 d2                	test   %dl,%dl
 169:	74 34                	je     19f <Sscan::Spi(char const*, char&, char*, unsigned char&, unsigned char&, unsigned short&, unsigned int&)+0x19f>
 16b:	48 83 fe 09          	cmp    $0x9,%rsi
 16f:	74 1d                	je     18e <Sscan::Spi(char const*, char&, char*, unsigned char&, unsigned char&, unsigned short&, unsigned int&)+0x18e>
 171:	80 fa 20             	cmp    $0x20,%dl
 174:	74 29                	je     19f <Sscan::Spi(char const*, char&, char*, unsigned char&, unsigned char&, unsigned short&, unsigned int&)+0x19f>
 176:	8d 7a d0             	lea    -0x30(%rdx),%edi
 179:	48 ff c6             	inc    %rsi
 17c:	83 ff 09             	cmp    $0x9,%edi
 17f:	0f 87 c8 fe ff ff    	ja     4d <Sscan::Spi(char const*, char&, char*, unsigned char&, unsigned char&, unsigned short&, unsigned int&)+0x4d>
 185:	6b c9 0a             	imul   $0xa,%ecx,%ecx
 188:	8d 4c 0a d0          	lea    -0x30(%rdx,%rcx,1),%ecx
 18c:	eb d2                	jmp    160 <Sscan::Spi(char const*, char&, char*, unsigned char&, unsigned char&, unsigned short&, unsigned int&)+0x160>
 18e:	80 fa 20             	cmp    $0x20,%dl
 191:	0f 85 b6 fe ff ff    	jne    4d <Sscan::Spi(char const*, char&, char*, unsigned char&, unsigned char&, unsigned short&, unsigned int&)+0x4d>
 197:	89 4d 00             	mov    %ecx,0x0(%rbp)
 19a:	45 31 c0             	xor    %r8d,%r8d
 19d:	eb 0a                	jmp    1a9 <Sscan::Spi(char const*, char&, char*, unsigned char&, unsigned char&, unsigned short&, unsigned int&)+0x1a9>
 19f:	85 ff                	test   %edi,%edi
 1a1:	0f 84 a6 fe ff ff    	je     4d <Sscan::Spi(char const*, char&, char*, unsigned char&, unsigned char&, unsigned short&, unsigned int&)+0x4d>
 1a7:	eb ee                	jmp    197 <Sscan::Spi(char const*, char&, char*, unsigned char&, unsigned char&, unsigned short&, unsigned int&)+0x197>
 1a9:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
 1ae:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 1b5:	00 00 
 1b7:	74 05                	je     1be <Sscan::Spi(char const*, char&, char*, unsigned char&, unsigned char&, unsigned short&, unsigned int&)+0x1be>
 1b9:	e8 00 00 00 00       	call   1be <Sscan::Spi(char const*, char&, char*, unsigned char&, unsigned char&, unsigned short&, unsigned int&)+0x1be>
 1be:	48 83 c4 18          	add    $0x18,%rsp
 1c2:	44 89 c0             	mov    %r8d,%eax
 1c5:	5b                   	pop    %rbx
 1c6:	5d                   	pop    %rbp
 1c7:	41 5c                	pop    %r12
 1c9:	41 5d                	pop    %r13
 1cb:	41 5e                	pop    %r14
 1cd:	41 5f                	pop    %r15
 1cf:	c3                   	ret    

sscanuint16.o:     file format elf64-x86-64


Disassembly of section .text._ZN5Sscan6Uint16EPKcS1_Rt:

0000000000000000 <Sscan::Uint16(char const*, char const*, unsigned short&)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	53                   	push   %rbx
   5:	48 89 d3             	mov    %rdx,%rbx
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  1a:	31 c0                	xor    %eax,%eax
  1c:	e8 00 00 00 00       	call   21 <Sscan::Uint16(char const*, char const*, unsigned short&)+0x21>
  21:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  27:	48 85 c0             	test   %rax,%rax
  2a:	74 38                	je     64 <Sscan::Uint16(char const*, char const*, unsigned short&)+0x64>
  2c:	31 c9                	xor    %ecx,%ecx
  2e:	0f be 10             	movsbl (%rax),%edx
  31:	8d 72 d0             	lea    -0x30(%rdx),%esi
  34:	83 fe 09             	cmp    $0x9,%esi
  37:	77 25                	ja     5e <Sscan::Uint16(char const*, char const*, unsigned short&)+0x5e>
  39:	6b c9 0a             	imul   $0xa,%ecx,%ecx
  3c:	48 ff c0             	inc    %rax
  3f:	8d 4c 0a d0          	lea    -0x30(%rdx,%rcx,1),%ecx
  43:	f6 00 df             	testb  $0xdf,(%rax)
  46:	75 e6                	jne    2e <Sscan::Uint16(char const*, char const*, unsigned short&)+0x2e>
  48:	41 b8 02 00 00 00    	mov    $0x2,%r8d
  4e:	81 f9 ff ff 00 00    	cmp    $0xffff,%ecx
  54:	77 0e                	ja     64 <Sscan::Uint16(char const*, char const*, unsigned short&)+0x64>
  56:	66 89 0b             	mov    %cx,(%rbx)
  59:	45 31 c0             	xor    %r8d,%r8d
  5c:	eb 06                	jmp    64 <Sscan::Uint16(char const*, char const*, unsigned short&)+0x64>
  5e:	41 b8 02 00 00 00    	mov    $0x2,%r8d
  64:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  69:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  70:	00 00 
  72:	74 05                	je     79 <Sscan::Uint16(char const*, char const*, unsigned short&)+0x79>
  74:	e8 00 00 00 00       	call   79 <Sscan::Uint16(char const*, char const*, unsigned short&)+0x79>
  79:	48 83 c4 10          	add    $0x10,%rsp
  7d:	44 89 c0             	mov    %r8d,%eax
  80:	5b                   	pop    %rbx
  81:	c3                   	ret    

sscanuint32.o:     file format elf64-x86-64


Disassembly of section .text._ZN5Sscan6Uint32EPKcS1_Rj:

0000000000000000 <Sscan::Uint32(char const*, char const*, unsigned int&)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	53                   	push   %rbx
   5:	48 89 d3             	mov    %rdx,%rbx
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  1a:	31 c0                	xor    %eax,%eax
  1c:	e8 00 00 00 00       	call   21 <Sscan::Uint32(char const*, char const*, unsigned int&)+0x21>
  21:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  27:	48 85 c0             	test   %rax,%rax
  2a:	74 3f                	je     6b <Sscan::Uint32(char const*, char const*, unsigned int&)+0x6b>
  2c:	31 d2                	xor    %edx,%edx
  2e:	48 0f be 30          	movsbq (%rax),%rsi
  32:	48 89 f1             	mov    %rsi,%rcx
  35:	83 ee 30             	sub    $0x30,%esi
  38:	83 fe 09             	cmp    $0x9,%esi
  3b:	77 28                	ja     65 <Sscan::Uint32(char const*, char const*, unsigned int&)+0x65>
  3d:	48 6b d2 0a          	imul   $0xa,%rdx,%rdx
  41:	48 ff c0             	inc    %rax
  44:	48 8d 54 0a d0       	lea    -0x30(%rdx,%rcx,1),%rdx
  49:	f6 00 df             	testb  $0xdf,(%rax)
  4c:	75 e0                	jne    2e <Sscan::Uint32(char const*, char const*, unsigned int&)+0x2e>
  4e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  53:	41 b8 02 00 00 00    	mov    $0x2,%r8d
  59:	48 39 c2             	cmp    %rax,%rdx
  5c:	77 0d                	ja     6b <Sscan::Uint32(char const*, char const*, unsigned int&)+0x6b>
  5e:	89 13                	mov    %edx,(%rbx)
  60:	45 31 c0             	xor    %r8d,%r8d
  63:	eb 06                	jmp    6b <Sscan::Uint32(char const*, char const*, unsigned int&)+0x6b>
  65:	41 b8 02 00 00 00    	mov    $0x2,%r8d
  6b:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  70:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  77:	00 00 
  79:	74 05                	je     80 <Sscan::Uint32(char const*, char const*, unsigned int&)+0x80>
  7b:	e8 00 00 00 00       	call   80 <Sscan::Uint32(char const*, char const*, unsigned int&)+0x80>
  80:	48 83 c4 10          	add    $0x10,%rsp
  84:	44 89 c0             	mov    %r8d,%eax
  87:	5b                   	pop    %rbx
  88:	c3                   	ret    

sscanuint8.o:     file format elf64-x86-64


Disassembly of section .text._ZN5Sscan5Uint8EPKcS1_Rh:

0000000000000000 <Sscan::Uint8(char const*, char const*, unsigned char&)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	53                   	push   %rbx
   5:	48 89 d3             	mov    %rdx,%rbx
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  1a:	31 c0                	xor    %eax,%eax
  1c:	e8 00 00 00 00       	call   21 <Sscan::Uint8(char const*, char const*, unsigned char&)+0x21>
  21:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  27:	48 85 c0             	test   %rax,%rax
  2a:	74 37                	je     63 <Sscan::Uint8(char const*, char const*, unsigned char&)+0x63>
  2c:	31 c9                	xor    %ecx,%ecx
  2e:	0f be 10             	movsbl (%rax),%edx
  31:	8d 72 d0             	lea    -0x30(%rdx),%esi
  34:	83 fe 09             	cmp    $0x9,%esi
  37:	77 24                	ja     5d <Sscan::Uint8(char const*, char const*, unsigned char&)+0x5d>
  39:	6b c9 0a             	imul   $0xa,%ecx,%ecx
  3c:	48 ff c0             	inc    %rax
  3f:	8d 4c 0a d0          	lea    -0x30(%rdx,%rcx,1),%ecx
  43:	f6 00 df             	testb  $0xdf,(%rax)
  46:	75 e6                	jne    2e <Sscan::Uint8(char const*, char const*, unsigned char&)+0x2e>
  48:	41 b8 02 00 00 00    	mov    $0x2,%r8d
  4e:	81 f9 ff 00 00 00    	cmp    $0xff,%ecx
  54:	77 0d                	ja     63 <Sscan::Uint8(char const*, char const*, unsigned char&)+0x63>
  56:	88 0b                	mov    %cl,(%rbx)
  58:	45 31 c0             	xor    %r8d,%r8d
  5b:	eb 06                	jmp    63 <Sscan::Uint8(char const*, char const*, unsigned char&)+0x63>
  5d:	41 b8 02 00 00 00    	mov    $0x2,%r8d
  63:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  68:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  6f:	00 00 
  71:	74 05                	je     78 <Sscan::Uint8(char const*, char const*, unsigned char&)+0x78>
  73:	e8 00 00 00 00       	call   78 <Sscan::Uint8(char const*, char const*, unsigned char&)+0x78>
  78:	48 83 c4 10          	add    $0x10,%rsp
  7c:	44 89 c0             	mov    %r8d,%eax
  7f:	5b                   	pop    %rbx
  80:	c3                   	ret    

In archive lib_linux/libdisplay.a:

display_timeout.o:     file format elf64-x86-64


Disassembly of section .text._ZN7display7timeout9gpio_initEv:

0000000000000000 <display::timeout::gpio_init()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	90                   	nop
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  27:	00 00 
  29:	74 05                	je     30 <display::timeout::gpio_init()+0x30>
  2b:	e8 00 00 00 00       	call   30 <display::timeout::gpio_init()+0x30>
  30:	c9                   	leave  
  31:	c3                   	ret    

Disassembly of section .text._ZN7display7timeout10gpio_renewEv:

0000000000000000 <display::timeout::gpio_renew()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	b8 00 00 00 00       	mov    $0x0,%eax
  20:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  24:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  2b:	00 00 
  2d:	74 05                	je     34 <display::timeout::gpio_renew()+0x34>
  2f:	e8 00 00 00 00       	call   34 <display::timeout::gpio_renew()+0x34>
  34:	c9                   	leave  
  35:	c3                   	ret    

display.o:     file format elf64-x86-64


Disassembly of section .text._ZL16i2c_set_baudratej:

0000000000000000 <i2c_set_baudrate(unsigned int)>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	89 7d ec             	mov    %edi,-0x14(%rbp)
   b:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  12:	00 00 
  14:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  18:	31 c0                	xor    %eax,%eax
  1a:	90                   	nop
  1b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1f:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  26:	00 00 
  28:	74 05                	je     2f <i2c_set_baudrate(unsigned int)+0x2f>
  2a:	e8 00 00 00 00       	call   2f <i2c_set_baudrate(unsigned int)+0x2f>
  2f:	c9                   	leave  
  30:	c3                   	ret    

Disassembly of section .text._ZL15i2c_set_addressh:

0000000000000000 <i2c_set_address(unsigned char)>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	89 f8                	mov    %edi,%eax
   a:	88 45 ec             	mov    %al,-0x14(%rbp)
   d:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  14:	00 00 
  16:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1a:	31 c0                	xor    %eax,%eax
  1c:	90                   	nop
  1d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  21:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  28:	00 00 
  2a:	74 05                	je     31 <i2c_set_address(unsigned char)+0x31>
  2c:	e8 00 00 00 00       	call   31 <i2c_set_address(unsigned char)+0x31>
  31:	c9                   	leave  
  32:	c3                   	ret    

Disassembly of section .text._ZL9i2c_writePKcj:

0000000000000000 <i2c_write(char const*, unsigned int)>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	89 75 e4             	mov    %esi,-0x1c(%rbp)
   f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  16:	00 00 
  18:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1c:	31 c0                	xor    %eax,%eax
  1e:	b8 01 00 00 00       	mov    $0x1,%eax
  23:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  27:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  2e:	00 00 
  30:	74 05                	je     37 <i2c_write(char const*, unsigned int)+0x37>
  32:	e8 00 00 00 00       	call   37 <i2c_write(char const*, unsigned int)+0x37>
  37:	c9                   	leave  
  38:	c3                   	ret    

Disassembly of section .text._ZL8i2c_readPcj:

0000000000000000 <i2c_read(char*, unsigned int)>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	89 75 e4             	mov    %esi,-0x1c(%rbp)
   f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  16:	00 00 
  18:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1c:	31 c0                	xor    %eax,%eax
  1e:	b8 01 00 00 00       	mov    $0x1,%eax
  23:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  27:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  2e:	00 00 
  30:	74 05                	je     37 <i2c_read(char*, unsigned int)+0x37>
  32:	e8 00 00 00 00       	call   37 <i2c_read(char*, unsigned int)+0x37>
  37:	c9                   	leave  
  38:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2CC2Ehj:

0000000000000000 <HAL_I2C::HAL_I2C(unsigned char, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	89 55 e0             	mov    %edx,-0x20(%rbp)
  15:	88 45 e4             	mov    %al,-0x1c(%rbp)
  18:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1f:	00 00 
  21:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  25:	31 c0                	xor    %eax,%eax
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2b:	0f b6 55 e4          	movzbl -0x1c(%rbp),%edx
  2f:	88 10                	mov    %dl,(%rax)
  31:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  35:	8b 55 e0             	mov    -0x20(%rbp),%edx
  38:	89 50 04             	mov    %edx,0x4(%rax)
  3b:	90                   	nop
  3c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  47:	00 00 
  49:	74 05                	je     50 <HAL_I2C::HAL_I2C(unsigned char, unsigned int)+0x50>
  4b:	e8 00 00 00 00       	call   50 <HAL_I2C::HAL_I2C(unsigned char, unsigned int)+0x50>
  50:	c9                   	leave  
  51:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2C11IsConnectedEv:

0000000000000000 <HAL_I2C::IsConnected()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	8b 50 04             	mov    0x4(%rax),%edx
  26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2a:	0f b6 00             	movzbl (%rax),%eax
  2d:	0f b6 c0             	movzbl %al,%eax
  30:	89 d6                	mov    %edx,%esi
  32:	89 c7                	mov    %eax,%edi
  34:	e8 00 00 00 00       	call   39 <HAL_I2C::IsConnected()+0x39>
  39:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  3d:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  44:	00 00 
  46:	74 05                	je     4d <HAL_I2C::IsConnected()+0x4d>
  48:	e8 00 00 00 00       	call   4d <HAL_I2C::IsConnected()+0x4d>
  4d:	c9                   	leave  
  4e:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2C11IsConnectedEhj:

0000000000000000 <HAL_I2C::IsConnected(unsigned char, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	89 f8                	mov    %edi,%eax
   e:	89 75 e8             	mov    %esi,-0x18(%rbp)
  11:	88 45 ec             	mov    %al,-0x14(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	0f b6 45 ec          	movzbl -0x14(%rbp),%eax
  27:	8b 55 e8             	mov    -0x18(%rbp),%edx
  2a:	89 d6                	mov    %edx,%esi
  2c:	89 c7                	mov    %eax,%edi
  2e:	e8 00 00 00 00       	call   33 <HAL_I2C::IsConnected(unsigned char, unsigned int)+0x33>
  33:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  37:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  3e:	00 00 
  40:	74 05                	je     47 <HAL_I2C::IsConnected(unsigned char, unsigned int)+0x47>
  42:	e8 00 00 00 00       	call   47 <HAL_I2C::IsConnected(unsigned char, unsigned int)+0x47>
  47:	c9                   	leave  
  48:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2C13WriteRegisterEht:

0000000000000000 <HAL_I2C::WriteRegister(unsigned char, unsigned short)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f1                	mov    %esi,%ecx
  12:	89 d0                	mov    %edx,%eax
  14:	89 ca                	mov    %ecx,%edx
  16:	88 55 e4             	mov    %dl,-0x1c(%rbp)
  19:	66 89 45 e0          	mov    %ax,-0x20(%rbp)
  1d:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  24:	00 00 
  26:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  2a:	31 c0                	xor    %eax,%eax
  2c:	0f b6 45 e4          	movzbl -0x1c(%rbp),%eax
  30:	88 45 f5             	mov    %al,-0xb(%rbp)
  33:	0f b7 45 e0          	movzwl -0x20(%rbp),%eax
  37:	66 c1 e8 08          	shr    $0x8,%ax
  3b:	88 45 f6             	mov    %al,-0xa(%rbp)
  3e:	0f b7 45 e0          	movzwl -0x20(%rbp),%eax
  42:	88 45 f7             	mov    %al,-0x9(%rbp)
  45:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  49:	48 89 c7             	mov    %rax,%rdi
  4c:	e8 00 00 00 00       	call   51 <HAL_I2C::WriteRegister(unsigned char, unsigned short)+0x51>
  51:	48 8d 45 f5          	lea    -0xb(%rbp),%rax
  55:	be 03 00 00 00       	mov    $0x3,%esi
  5a:	48 89 c7             	mov    %rax,%rdi
  5d:	e8 00 00 00 00       	call   62 <HAL_I2C::WriteRegister(unsigned char, unsigned short)+0x62>
  62:	90                   	nop
  63:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  67:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  6e:	00 00 
  70:	74 05                	je     77 <HAL_I2C::WriteRegister(unsigned char, unsigned short)+0x77>
  72:	e8 00 00 00 00       	call   77 <HAL_I2C::WriteRegister(unsigned char, unsigned short)+0x77>
  77:	c9                   	leave  
  78:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2C5SetupEv:

0000000000000000 <HAL_I2C::Setup()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	0f b6 00             	movzbl (%rax),%eax
  26:	0f b6 c0             	movzbl %al,%eax
  29:	89 c7                	mov    %eax,%edi
  2b:	e8 00 00 00 00       	call   30 <HAL_I2C::Setup()+0x30>
  30:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  34:	8b 40 04             	mov    0x4(%rax),%eax
  37:	89 c7                	mov    %eax,%edi
  39:	e8 00 00 00 00       	call   3e <HAL_I2C::Setup()+0x3e>
  3e:	90                   	nop
  3f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  4a:	00 00 
  4c:	74 05                	je     53 <HAL_I2C::Setup()+0x53>
  4e:	e8 00 00 00 00       	call   53 <HAL_I2C::Setup()+0x53>
  53:	c9                   	leave  
  54:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2C12IsConnected_Ehj:

0000000000000000 <HAL_I2C::IsConnected_(unsigned char, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	89 f8                	mov    %edi,%eax
   e:	89 75 e8             	mov    %esi,-0x18(%rbp)
  11:	88 45 ec             	mov    %al,-0x14(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	0f b6 45 ec          	movzbl -0x14(%rbp),%eax
  27:	89 c7                	mov    %eax,%edi
  29:	e8 00 00 00 00       	call   2e <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x2e>
  2e:	8b 45 e8             	mov    -0x18(%rbp),%eax
  31:	89 c7                	mov    %eax,%edi
  33:	e8 00 00 00 00       	call   38 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x38>
  38:	80 7d ec 2f          	cmpb   $0x2f,-0x14(%rbp)
  3c:	76 06                	jbe    44 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x44>
  3e:	80 7d ec 37          	cmpb   $0x37,-0x14(%rbp)
  42:	76 0c                	jbe    50 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x50>
  44:	80 7d ec 4f          	cmpb   $0x4f,-0x14(%rbp)
  48:	76 1e                	jbe    68 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x68>
  4a:	80 7d ec 5f          	cmpb   $0x5f,-0x14(%rbp)
  4e:	77 18                	ja     68 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x68>
  50:	48 8d 45 f7          	lea    -0x9(%rbp),%rax
  54:	be 01 00 00 00       	mov    $0x1,%esi
  59:	48 89 c7             	mov    %rax,%rdi
  5c:	e8 00 00 00 00       	call   61 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x61>
  61:	84 c0                	test   %al,%al
  63:	0f 94 c0             	sete   %al
  66:	eb 14                	jmp    7c <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x7c>
  68:	be 00 00 00 00       	mov    $0x0,%esi
  6d:	bf 00 00 00 00       	mov    $0x0,%edi
  72:	e8 00 00 00 00       	call   77 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x77>
  77:	84 c0                	test   %al,%al
  79:	0f 94 c0             	sete   %al
  7c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  87:	00 00 
  89:	74 05                	je     90 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x90>
  8b:	e8 00 00 00 00       	call   90 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x90>
  90:	c9                   	leave  
  91:	c3                   	ret    

Disassembly of section .text._ZN8Hardware3GetEv:

0000000000000000 <Hardware::Get()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 22 <Hardware::Get()+0x22>
  22:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  26:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  2d:	00 00 
  2f:	74 05                	je     36 <Hardware::Get()+0x36>
  31:	e8 00 00 00 00       	call   36 <Hardware::Get()+0x36>
  36:	c9                   	leave  
  37:	c3                   	ret    

Disassembly of section .text._ZN7Display9PrintInfoEv:

0000000000000000 <Display::PrintInfo()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	48 8b 40 20          	mov    0x20(%rax),%rax
  27:	48 85 c0             	test   %rax,%rax
  2a:	75 11                	jne    3d <Display::PrintInfo()+0x3d>
  2c:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 33 <Display::PrintInfo()+0x33>
  33:	48 89 c7             	mov    %rax,%rdi
  36:	e8 00 00 00 00       	call   3b <Display::PrintInfo()+0x3b>
  3b:	eb 1f                	jmp    5c <Display::PrintInfo()+0x5c>
  3d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  41:	48 8b 40 20          	mov    0x20(%rax),%rax
  45:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  49:	48 8b 52 20          	mov    0x20(%rdx),%rdx
  4d:	48 8b 12             	mov    (%rdx),%rdx
  50:	48 83 c2 68          	add    $0x68,%rdx
  54:	48 8b 12             	mov    (%rdx),%rdx
  57:	48 89 c7             	mov    %rax,%rdi
  5a:	ff d2                	call   *%rdx
  5c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  60:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  67:	00 00 
  69:	74 05                	je     70 <Display::PrintInfo()+0x70>
  6b:	e8 00 00 00 00       	call   70 <Display::PrintInfo()+0x70>
  70:	c9                   	leave  
  71:	c3                   	ret    

Disassembly of section .text._ZN7Display6PrintfEjPKcz:

0000000000000000 <Display::Printf(unsigned int, char const*, ...)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 81 ec 20 01 00 00 	sub    $0x120,%rsp
   f:	48 89 bd f8 fe ff ff 	mov    %rdi,-0x108(%rbp)
  16:	89 b5 f4 fe ff ff    	mov    %esi,-0x10c(%rbp)
  1c:	48 89 95 e8 fe ff ff 	mov    %rdx,-0x118(%rbp)
  23:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
  2a:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
  31:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)
  38:	84 c0                	test   %al,%al
  3a:	74 20                	je     5c <Display::Printf(unsigned int, char const*, ...)+0x5c>
  3c:	0f 29 45 80          	movaps %xmm0,-0x80(%rbp)
  40:	0f 29 4d 90          	movaps %xmm1,-0x70(%rbp)
  44:	0f 29 55 a0          	movaps %xmm2,-0x60(%rbp)
  48:	0f 29 5d b0          	movaps %xmm3,-0x50(%rbp)
  4c:	0f 29 65 c0          	movaps %xmm4,-0x40(%rbp)
  50:	0f 29 6d d0          	movaps %xmm5,-0x30(%rbp)
  54:	0f 29 75 e0          	movaps %xmm6,-0x20(%rbp)
  58:	0f 29 7d f0          	movaps %xmm7,-0x10(%rbp)
  5c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  63:	00 00 
  65:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  6c:	31 c0                	xor    %eax,%eax
  6e:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  75:	48 8b 40 20          	mov    0x20(%rax),%rax
  79:	48 85 c0             	test   %rax,%rax
  7c:	75 0a                	jne    88 <Display::Printf(unsigned int, char const*, ...)+0x88>
  7e:	b8 00 00 00 00       	mov    $0x0,%eax
  83:	e9 94 00 00 00       	jmp    11c <Display::Printf(unsigned int, char const*, ...)+0x11c>
  88:	c7 85 08 ff ff ff 18 	movl   $0x18,-0xf8(%rbp)
  8f:	00 00 00 
  92:	c7 85 0c ff ff ff 30 	movl   $0x30,-0xf4(%rbp)
  99:	00 00 00 
  9c:	48 8d 45 10          	lea    0x10(%rbp),%rax
  a0:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
  a7:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  ae:	48 89 85 18 ff ff ff 	mov    %rax,-0xe8(%rbp)
  b5:	48 8d 8d 08 ff ff ff 	lea    -0xf8(%rbp),%rcx
  bc:	48 8b 95 e8 fe ff ff 	mov    -0x118(%rbp),%rdx
  c3:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
  ca:	be 20 00 00 00       	mov    $0x20,%esi
  cf:	48 89 c7             	mov    %rax,%rdi
  d2:	e8 00 00 00 00       	call   d7 <Display::Printf(unsigned int, char const*, ...)+0xd7>
  d7:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%rbp)
  dd:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  e4:	48 8b 40 20          	mov    0x20(%rax),%rax
  e8:	48 8b 95 f8 fe ff ff 	mov    -0x108(%rbp),%rdx
  ef:	48 8b 52 20          	mov    0x20(%rdx),%rdx
  f3:	48 8b 12             	mov    (%rdx),%rdx
  f6:	48 83 c2 38          	add    $0x38,%rdx
  fa:	4c 8b 02             	mov    (%rdx),%r8
  fd:	8b 8d 04 ff ff ff    	mov    -0xfc(%rbp),%ecx
 103:	48 8d 95 20 ff ff ff 	lea    -0xe0(%rbp),%rdx
 10a:	8b b5 f4 fe ff ff    	mov    -0x10c(%rbp),%esi
 110:	48 89 c7             	mov    %rax,%rdi
 113:	41 ff d0             	call   *%r8
 116:	8b 85 04 ff ff ff    	mov    -0xfc(%rbp),%eax
 11c:	48 8b 95 48 ff ff ff 	mov    -0xb8(%rbp),%rdx
 123:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
 12a:	00 00 
 12c:	74 05                	je     133 <Display::Printf(unsigned int, char const*, ...)+0x133>
 12e:	e8 00 00 00 00       	call   133 <Display::Printf(unsigned int, char const*, ...)+0x133>
 133:	c9                   	leave  
 134:	c3                   	ret    

Disassembly of section .text._ZN7Display6StatusE22Display7SegmentMessage:

0000000000000000 <Display::Status(Display7SegmentMessage)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  13:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1a:	00 00 
  1c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  20:	31 c0                	xor    %eax,%eax
  22:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  26:	0f b6 40 11          	movzbl 0x11(%rax),%eax
  2a:	84 c0                	test   %al,%al
  2c:	74 1f                	je     4d <Display::Status(Display7SegmentMessage)+0x4d>
  2e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  32:	48 8d 48 08          	lea    0x8(%rax),%rcx
  36:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  39:	f7 d0                	not    %eax
  3b:	0f b7 c0             	movzwl %ax,%eax
  3e:	89 c2                	mov    %eax,%edx
  40:	be 12 00 00 00       	mov    $0x12,%esi
  45:	48 89 cf             	mov    %rcx,%rdi
  48:	e8 00 00 00 00       	call   4d <Display::Status(Display7SegmentMessage)+0x4d>
  4d:	90                   	nop
  4e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  52:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  59:	00 00 
  5b:	74 05                	je     62 <Display::Status(Display7SegmentMessage)+0x62>
  5d:	e8 00 00 00 00       	call   62 <Display::Status(Display7SegmentMessage)+0x62>
  62:	c9                   	leave  
  63:	c3                   	ret    

Disassembly of section .text._ZN7Display14Detect7SegmentEv:

0000000000000000 <Display::Detect7Segment()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	48 83 c0 08          	add    $0x8,%rax
  27:	48 89 c7             	mov    %rax,%rdi
  2a:	e8 00 00 00 00       	call   2f <Display::Detect7Segment()+0x2f>
  2f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  33:	88 42 11             	mov    %al,0x11(%rdx)
  36:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3a:	0f b6 40 11          	movzbl 0x11(%rax),%eax
  3e:	84 c0                	test   %al,%al
  40:	74 2b                	je     6d <Display::Detect7Segment()+0x6d>
  42:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  46:	48 83 c0 08          	add    $0x8,%rax
  4a:	ba 00 00 00 00       	mov    $0x0,%edx
  4f:	be 00 00 00 00       	mov    $0x0,%esi
  54:	48 89 c7             	mov    %rax,%rdi
  57:	e8 00 00 00 00       	call   5c <Display::Detect7Segment()+0x5c>
  5c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  60:	be 00 3f 00 00       	mov    $0x3f00,%esi
  65:	48 89 c7             	mov    %rax,%rdi
  68:	e8 00 00 00 00       	call   6d <Display::Detect7Segment()+0x6d>
  6d:	90                   	nop
  6e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  72:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  79:	00 00 
  7b:	74 05                	je     82 <Display::Detect7Segment()+0x82>
  7d:	e8 00 00 00 00       	call   82 <Display::Detect7Segment()+0x82>
  82:	c9                   	leave  
  83:	c3                   	ret    

Disassembly of section .text._ZN7DisplayC2Ev:

0000000000000000 <Display::Display()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	c7 00 04 00 00 00    	movl   $0x4,(%rax)
  29:	e8 00 00 00 00       	call   2e <Display::Display()+0x2e>
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	call   36 <Display::Display()+0x36>
  36:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  3a:	89 42 04             	mov    %eax,0x4(%rdx)
  3d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  41:	48 83 c0 08          	add    $0x8,%rax
  45:	ba 80 1a 06 00       	mov    $0x61a80,%edx
  4a:	be 21 00 00 00       	mov    $0x21,%esi
  4f:	48 89 c7             	mov    %rax,%rdi
  52:	e8 00 00 00 00       	call   57 <Display::Display()+0x57>
  57:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5b:	c6 40 10 00          	movb   $0x0,0x10(%rax)
  5f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  63:	c6 40 11 00          	movb   $0x0,0x11(%rax)
  67:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  6b:	c7 40 14 e0 93 04 00 	movl   $0x493e0,0x14(%rax)
  72:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  76:	c6 40 18 7f          	movb   $0x7f,0x18(%rax)
  7a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7e:	c6 40 19 00          	movb   $0x0,0x19(%rax)
  82:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  86:	48 c7 40 20 00 00 00 	movq   $0x0,0x20(%rax)
  8d:	00 
  8e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  92:	48 89 05 00 00 00 00 	mov    %rax,0x0(%rip)        # 99 <Display::Display()+0x99>
  99:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  9d:	48 8b 40 20          	mov    0x20(%rax),%rax
  a1:	48 85 c0             	test   %rax,%rax
  a4:	75 11                	jne    b7 <Display::Display()+0xb7>
  a6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  aa:	be 02 00 00 00       	mov    $0x2,%esi
  af:	48 89 c7             	mov    %rax,%rdi
  b2:	e8 00 00 00 00       	call   b7 <Display::Display()+0xb7>
  b7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  bb:	48 89 c7             	mov    %rax,%rdi
  be:	e8 00 00 00 00       	call   c3 <Display::Display()+0xc3>
  c3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  c7:	48 8b 40 20          	mov    0x20(%rax),%rax
  cb:	48 85 c0             	test   %rax,%rax
  ce:	74 05                	je     d5 <Display::Display()+0xd5>
  d0:	e8 00 00 00 00       	call   d5 <Display::Display()+0xd5>
  d5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  d9:	48 89 c7             	mov    %rax,%rdi
  dc:	e8 00 00 00 00       	call   e1 <Display::Display()+0xe1>
  e1:	90                   	nop
  e2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  e6:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  ed:	00 00 
  ef:	74 05                	je     f6 <Display::Display()+0xf6>
  f1:	e8 00 00 00 00       	call   f6 <Display::Display()+0xf6>
  f6:	c9                   	leave  
  f7:	c3                   	ret    

Disassembly of section .text._ZN7DisplayC2Ej:

0000000000000000 <Display::Display(unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  13:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1a:	00 00 
  1c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  20:	31 c0                	xor    %eax,%eax
  22:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  26:	c7 00 04 00 00 00    	movl   $0x4,(%rax)
  2c:	e8 00 00 00 00       	call   31 <Display::Display(unsigned int)+0x31>
  31:	48 89 c7             	mov    %rax,%rdi
  34:	e8 00 00 00 00       	call   39 <Display::Display(unsigned int)+0x39>
  39:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  3d:	89 42 04             	mov    %eax,0x4(%rdx)
  40:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  44:	48 83 c0 08          	add    $0x8,%rax
  48:	ba 80 1a 06 00       	mov    $0x61a80,%edx
  4d:	be 21 00 00 00       	mov    $0x21,%esi
  52:	48 89 c7             	mov    %rax,%rdi
  55:	e8 00 00 00 00       	call   5a <Display::Display(unsigned int)+0x5a>
  5a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5e:	c6 40 10 00          	movb   $0x0,0x10(%rax)
  62:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  66:	c6 40 11 00          	movb   $0x0,0x11(%rax)
  6a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  6e:	c7 40 14 e0 93 04 00 	movl   $0x493e0,0x14(%rax)
  75:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  79:	c6 40 18 7f          	movb   $0x7f,0x18(%rax)
  7d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  81:	c6 40 19 00          	movb   $0x0,0x19(%rax)
  85:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  89:	48 c7 40 20 00 00 00 	movq   $0x0,0x20(%rax)
  90:	00 
  91:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  95:	48 89 05 00 00 00 00 	mov    %rax,0x0(%rip)        # 9c <Display::Display(unsigned int)+0x9c>
  9c:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  9f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  a3:	89 d6                	mov    %edx,%esi
  a5:	48 89 c7             	mov    %rax,%rdi
  a8:	e8 00 00 00 00       	call   ad <Display::Display(unsigned int)+0xad>
  ad:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  b1:	48 89 c7             	mov    %rax,%rdi
  b4:	e8 00 00 00 00       	call   b9 <Display::Display(unsigned int)+0xb9>
  b9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  bd:	48 8b 40 20          	mov    0x20(%rax),%rax
  c1:	48 85 c0             	test   %rax,%rax
  c4:	74 05                	je     cb <Display::Display(unsigned int)+0xcb>
  c6:	e8 00 00 00 00       	call   cb <Display::Display(unsigned int)+0xcb>
  cb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  cf:	48 89 c7             	mov    %rax,%rdi
  d2:	e8 00 00 00 00       	call   d7 <Display::Display(unsigned int)+0xd7>
  d7:	90                   	nop
  d8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  dc:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  e3:	00 00 
  e5:	74 05                	je     ec <Display::Display(unsigned int)+0xec>
  e7:	e8 00 00 00 00       	call   ec <Display::Display(unsigned int)+0xec>
  ec:	c9                   	leave  
  ed:	c3                   	ret    

Disassembly of section .text._ZN7DisplayC2EN7display4TypeE:

0000000000000000 <Display::Display(display::Type)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  13:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1a:	00 00 
  1c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  20:	31 c0                	xor    %eax,%eax
  22:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  26:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  29:	89 10                	mov    %edx,(%rax)
  2b:	e8 00 00 00 00       	call   30 <Display::Display(display::Type)+0x30>
  30:	48 89 c7             	mov    %rax,%rdi
  33:	e8 00 00 00 00       	call   38 <Display::Display(display::Type)+0x38>
  38:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  3c:	89 42 04             	mov    %eax,0x4(%rdx)
  3f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43:	48 83 c0 08          	add    $0x8,%rax
  47:	ba 80 1a 06 00       	mov    $0x61a80,%edx
  4c:	be 21 00 00 00       	mov    $0x21,%esi
  51:	48 89 c7             	mov    %rax,%rdi
  54:	e8 00 00 00 00       	call   59 <Display::Display(display::Type)+0x59>
  59:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5d:	c6 40 10 00          	movb   $0x0,0x10(%rax)
  61:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  65:	c6 40 11 00          	movb   $0x0,0x11(%rax)
  69:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  6d:	c7 40 14 e0 93 04 00 	movl   $0x493e0,0x14(%rax)
  74:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  78:	c6 40 18 7f          	movb   $0x7f,0x18(%rax)
  7c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80:	c6 40 19 00          	movb   $0x0,0x19(%rax)
  84:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  88:	48 c7 40 20 00 00 00 	movq   $0x0,0x20(%rax)
  8f:	00 
  90:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  94:	48 89 05 00 00 00 00 	mov    %rax,0x0(%rip)        # 9b <Display::Display(display::Type)+0x9b>
  9b:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  9e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  a2:	89 d6                	mov    %edx,%esi
  a4:	48 89 c7             	mov    %rax,%rdi
  a7:	e8 00 00 00 00       	call   ac <Display::Display(display::Type)+0xac>
  ac:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  b0:	48 89 c7             	mov    %rax,%rdi
  b3:	e8 00 00 00 00       	call   b8 <Display::Display(display::Type)+0xb8>
  b8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  bc:	48 8b 40 20          	mov    0x20(%rax),%rax
  c0:	48 85 c0             	test   %rax,%rax
  c3:	74 05                	je     ca <Display::Display(display::Type)+0xca>
  c5:	e8 00 00 00 00       	call   ca <Display::Display(display::Type)+0xca>
  ca:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  ce:	48 89 c7             	mov    %rax,%rdi
  d1:	e8 00 00 00 00       	call   d6 <Display::Display(display::Type)+0xd6>
  d6:	90                   	nop
  d7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  db:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  e2:	00 00 
  e4:	74 05                	je     eb <Display::Display(display::Type)+0xeb>
  e6:	e8 00 00 00 00       	call   eb <Display::Display(display::Type)+0xeb>
  eb:	c9                   	leave  
  ec:	c3                   	ret    

Disassembly of section .text._ZN7Display6DetectEN7display4TypeE:

0000000000000000 <Display::Detect(display::Type)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	53                   	push   %rbx
   9:	48 83 ec 28          	sub    $0x28,%rsp
   d:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  11:	89 75 d4             	mov    %esi,-0x2c(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	83 7d d4 02          	cmpl   $0x2,-0x2c(%rbp)
  27:	74 08                	je     31 <Display::Detect(display::Type)+0x31>
  29:	83 7d d4 04          	cmpl   $0x4,-0x2c(%rbp)
  2d:	74 26                	je     55 <Display::Detect(display::Type)+0x55>
  2f:	eb 2e                	jmp    5f <Display::Detect(display::Type)+0x5f>
  31:	bf 40 00 00 00       	mov    $0x40,%edi
  36:	e8 00 00 00 00       	call   3b <Display::Detect(display::Type)+0x3b>
  3b:	48 89 c3             	mov    %rax,%rbx
  3e:	be 00 00 00 00       	mov    $0x0,%esi
  43:	48 89 df             	mov    %rbx,%rdi
  46:	e8 00 00 00 00       	call   4b <Display::Detect(display::Type)+0x4b>
  4b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4f:	48 89 58 20          	mov    %rbx,0x20(%rax)
  53:	eb 0b                	jmp    60 <Display::Detect(display::Type)+0x60>
  55:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  59:	c7 00 04 00 00 00    	movl   $0x4,(%rax)
  5f:	90                   	nop
  60:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  64:	48 8b 40 20          	mov    0x20(%rax),%rax
  68:	48 85 c0             	test   %rax,%rax
  6b:	74 79                	je     e6 <Display::Detect(display::Type)+0xe6>
  6d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  71:	48 8b 40 20          	mov    0x20(%rax),%rax
  75:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  79:	48 8b 52 20          	mov    0x20(%rdx),%rdx
  7d:	48 8b 12             	mov    (%rdx),%rdx
  80:	48 83 c2 10          	add    $0x10,%rdx
  84:	48 8b 12             	mov    (%rdx),%rdx
  87:	48 89 c7             	mov    %rax,%rdi
  8a:	ff d2                	call   *%rdx
  8c:	83 f0 01             	xor    $0x1,%eax
  8f:	84 c0                	test   %al,%al
  91:	74 34                	je     c7 <Display::Detect(display::Type)+0xc7>
  93:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  97:	48 8b 40 20          	mov    0x20(%rax),%rax
  9b:	48 85 c0             	test   %rax,%rax
  9e:	74 0f                	je     af <Display::Detect(display::Type)+0xaf>
  a0:	48 8b 10             	mov    (%rax),%rdx
  a3:	48 83 c2 08          	add    $0x8,%rdx
  a7:	48 8b 12             	mov    (%rdx),%rdx
  aa:	48 89 c7             	mov    %rax,%rdi
  ad:	ff d2                	call   *%rdx
  af:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  b3:	48 c7 40 20 00 00 00 	movq   $0x0,0x20(%rax)
  ba:	00 
  bb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  bf:	c7 00 04 00 00 00    	movl   $0x4,(%rax)
  c5:	eb 1f                	jmp    e6 <Display::Detect(display::Type)+0xe6>
  c7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  cb:	48 8b 40 20          	mov    0x20(%rax),%rax
  cf:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  d3:	48 8b 52 20          	mov    0x20(%rdx),%rdx
  d7:	48 8b 12             	mov    (%rdx),%rdx
  da:	48 83 c2 18          	add    $0x18,%rdx
  de:	48 8b 12             	mov    (%rdx),%rdx
  e1:	48 89 c7             	mov    %rax,%rdi
  e4:	ff d2                	call   *%rdx
  e6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  ea:	48 8b 40 20          	mov    0x20(%rax),%rax
  ee:	48 85 c0             	test   %rax,%rax
  f1:	75 0b                	jne    fe <Display::Detect(display::Type)+0xfe>
  f3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  f7:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%rax)
  fe:	90                   	nop
  ff:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 103:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 10a:	00 00 
 10c:	74 05                	je     113 <Display::Detect(display::Type)+0x113>
 10e:	e8 00 00 00 00       	call   113 <Display::Detect(display::Type)+0x113>
 113:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
 117:	c9                   	leave  
 118:	c3                   	ret    

Disassembly of section .text._ZN7Display6DetectEj:

0000000000000000 <Display::Detect(unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	53                   	push   %rbx
   9:	48 83 ec 28          	sub    $0x28,%rsp
   d:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  11:	89 75 d4             	mov    %esi,-0x2c(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	be a0 86 01 00       	mov    $0x186a0,%esi
  28:	bf 3c 00 00 00       	mov    $0x3c,%edi
  2d:	e8 00 00 00 00       	call   32 <Display::Detect(unsigned int)+0x32>
  32:	84 c0                	test   %al,%al
  34:	0f 84 96 00 00 00    	je     d0 <Display::Detect(unsigned int)+0xd0>
  3a:	83 7d d4 04          	cmpl   $0x4,-0x2c(%rbp)
  3e:	77 24                	ja     64 <Display::Detect(unsigned int)+0x64>
  40:	bf 40 00 00 00       	mov    $0x40,%edi
  45:	e8 00 00 00 00       	call   4a <Display::Detect(unsigned int)+0x4a>
  4a:	48 89 c3             	mov    %rax,%rbx
  4d:	be 01 00 00 00       	mov    $0x1,%esi
  52:	48 89 df             	mov    %rbx,%rdi
  55:	e8 00 00 00 00       	call   5a <Display::Detect(unsigned int)+0x5a>
  5a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  5e:	48 89 58 20          	mov    %rbx,0x20(%rax)
  62:	eb 22                	jmp    86 <Display::Detect(unsigned int)+0x86>
  64:	bf 40 00 00 00       	mov    $0x40,%edi
  69:	e8 00 00 00 00       	call   6e <Display::Detect(unsigned int)+0x6e>
  6e:	48 89 c3             	mov    %rax,%rbx
  71:	be 00 00 00 00       	mov    $0x0,%esi
  76:	48 89 df             	mov    %rbx,%rdi
  79:	e8 00 00 00 00       	call   7e <Display::Detect(unsigned int)+0x7e>
  7e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  82:	48 89 58 20          	mov    %rbx,0x20(%rax)
  86:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8a:	48 8b 40 20          	mov    0x20(%rax),%rax
  8e:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  92:	48 8b 52 20          	mov    0x20(%rdx),%rdx
  96:	48 8b 12             	mov    (%rdx),%rdx
  99:	48 83 c2 10          	add    $0x10,%rdx
  9d:	48 8b 12             	mov    (%rdx),%rdx
  a0:	48 89 c7             	mov    %rax,%rdi
  a3:	ff d2                	call   *%rdx
  a5:	84 c0                	test   %al,%al
  a7:	74 27                	je     d0 <Display::Detect(unsigned int)+0xd0>
  a9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  ad:	c7 00 02 00 00 00    	movl   $0x2,(%rax)
  b3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  b7:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # be <Display::Detect(unsigned int)+0xbe>
  be:	be 01 00 00 00       	mov    $0x1,%esi
  c3:	48 89 c7             	mov    %rax,%rdi
  c6:	b8 00 00 00 00       	mov    $0x0,%eax
  cb:	e8 00 00 00 00       	call   d0 <Display::Detect(unsigned int)+0xd0>
  d0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  d4:	48 8b 40 20          	mov    0x20(%rax),%rax
  d8:	48 85 c0             	test   %rax,%rax
  db:	75 0b                	jne    e8 <Display::Detect(unsigned int)+0xe8>
  dd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  e1:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%rax)
  e8:	90                   	nop
  e9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  ed:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  f4:	00 00 
  f6:	74 05                	je     fd <Display::Detect(unsigned int)+0xfd>
  f8:	e8 00 00 00 00       	call   fd <Display::Detect(unsigned int)+0xfd>
  fd:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
 101:	c9                   	leave  
 102:	c3                   	ret    

hd44780.o:     file format elf64-x86-64


Disassembly of section .text._ZN10DisplaySetD2Ev:

0000000000000000 <DisplaySet::~DisplaySet()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 26 <DisplaySet::~DisplaySet()+0x26>
  26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2a:	48 89 10             	mov    %rdx,(%rax)
  2d:	90                   	nop
  2e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  32:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  39:	00 00 
  3b:	74 05                	je     42 <DisplaySet::~DisplaySet()+0x42>
  3d:	e8 00 00 00 00       	call   42 <DisplaySet::~DisplaySet()+0x42>
  42:	c9                   	leave  
  43:	c3                   	ret    

Disassembly of section .text._ZN10DisplaySetD0Ev:

0000000000000000 <DisplaySet::~DisplaySet()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	call   2b <DisplaySet::~DisplaySet()+0x2b>
  2b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	call   37 <DisplaySet::~DisplaySet()+0x37>
  37:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3b:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  42:	00 00 
  44:	74 05                	je     4b <DisplaySet::~DisplaySet()+0x4b>
  46:	e8 00 00 00 00       	call   4b <DisplaySet::~DisplaySet()+0x4b>
  4b:	c9                   	leave  
  4c:	c3                   	ret    

Disassembly of section .text._ZN10DisplaySet8SetSleepEb:

0000000000000000 <DisplaySet::SetSleep(bool)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	88 45 e4             	mov    %al,-0x1c(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	90                   	nop
  25:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  29:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  30:	00 00 
  32:	74 05                	je     39 <DisplaySet::SetSleep(bool)+0x39>
  34:	e8 00 00 00 00       	call   39 <DisplaySet::SetSleep(bool)+0x39>
  39:	c9                   	leave  
  3a:	c3                   	ret    

Disassembly of section .text._ZN10DisplaySet11SetContrastEh:

0000000000000000 <DisplaySet::SetContrast(unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	88 45 e4             	mov    %al,-0x1c(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	90                   	nop
  25:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  29:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  30:	00 00 
  32:	74 05                	je     39 <DisplaySet::SetContrast(unsigned char)+0x39>
  34:	e8 00 00 00 00       	call   39 <DisplaySet::SetContrast(unsigned char)+0x39>
  39:	c9                   	leave  
  3a:	c3                   	ret    

Disassembly of section .text._ZN10DisplaySet17SetFlipVerticallyEb:

0000000000000000 <DisplaySet::SetFlipVertically(bool)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	88 45 e4             	mov    %al,-0x1c(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	90                   	nop
  25:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  29:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  30:	00 00 
  32:	74 05                	je     39 <DisplaySet::SetFlipVertically(bool)+0x39>
  34:	e8 00 00 00 00       	call   39 <DisplaySet::SetFlipVertically(bool)+0x39>
  39:	c9                   	leave  
  3a:	c3                   	ret    

Disassembly of section .text._ZN10DisplaySet9PrintInfoEv:

0000000000000000 <DisplaySet::PrintInfo()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	90                   	nop
  20:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  24:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  2b:	00 00 
  2d:	74 05                	je     34 <DisplaySet::PrintInfo()+0x34>
  2f:	e8 00 00 00 00       	call   34 <DisplaySet::PrintInfo()+0x34>
  34:	c9                   	leave  
  35:	c3                   	ret    

Disassembly of section .text.udelay:

0000000000000000 <udelay>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	89 7d ec             	mov    %edi,-0x14(%rbp)
   f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  16:	00 00 
  18:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1c:	31 c0                	xor    %eax,%eax
  1e:	90                   	nop
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  2a:	00 00 
  2c:	74 05                	je     33 <udelay+0x33>
  2e:	e8 00 00 00 00       	call   33 <udelay+0x33>
  33:	c9                   	leave  
  34:	c3                   	ret    

Disassembly of section .text._ZL16i2c_set_baudratej:

0000000000000000 <i2c_set_baudrate(unsigned int)>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	89 7d ec             	mov    %edi,-0x14(%rbp)
   b:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  12:	00 00 
  14:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  18:	31 c0                	xor    %eax,%eax
  1a:	90                   	nop
  1b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1f:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  26:	00 00 
  28:	74 05                	je     2f <i2c_set_baudrate(unsigned int)+0x2f>
  2a:	e8 00 00 00 00       	call   2f <i2c_set_baudrate(unsigned int)+0x2f>
  2f:	c9                   	leave  
  30:	c3                   	ret    

Disassembly of section .text._ZL15i2c_set_addressh:

0000000000000000 <i2c_set_address(unsigned char)>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	89 f8                	mov    %edi,%eax
   a:	88 45 ec             	mov    %al,-0x14(%rbp)
   d:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  14:	00 00 
  16:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1a:	31 c0                	xor    %eax,%eax
  1c:	90                   	nop
  1d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  21:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  28:	00 00 
  2a:	74 05                	je     31 <i2c_set_address(unsigned char)+0x31>
  2c:	e8 00 00 00 00       	call   31 <i2c_set_address(unsigned char)+0x31>
  31:	c9                   	leave  
  32:	c3                   	ret    

Disassembly of section .text._ZL9i2c_writePKcj:

0000000000000000 <i2c_write(char const*, unsigned int)>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	89 75 e4             	mov    %esi,-0x1c(%rbp)
   f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  16:	00 00 
  18:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1c:	31 c0                	xor    %eax,%eax
  1e:	b8 01 00 00 00       	mov    $0x1,%eax
  23:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  27:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  2e:	00 00 
  30:	74 05                	je     37 <i2c_write(char const*, unsigned int)+0x37>
  32:	e8 00 00 00 00       	call   37 <i2c_write(char const*, unsigned int)+0x37>
  37:	c9                   	leave  
  38:	c3                   	ret    

Disassembly of section .text._ZL8i2c_readPcj:

0000000000000000 <i2c_read(char*, unsigned int)>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	89 75 e4             	mov    %esi,-0x1c(%rbp)
   f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  16:	00 00 
  18:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1c:	31 c0                	xor    %eax,%eax
  1e:	b8 01 00 00 00       	mov    $0x1,%eax
  23:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  27:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  2e:	00 00 
  30:	74 05                	je     37 <i2c_read(char*, unsigned int)+0x37>
  32:	e8 00 00 00 00       	call   37 <i2c_read(char*, unsigned int)+0x37>
  37:	c9                   	leave  
  38:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2CC2Ehj:

0000000000000000 <HAL_I2C::HAL_I2C(unsigned char, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	89 55 e0             	mov    %edx,-0x20(%rbp)
  15:	88 45 e4             	mov    %al,-0x1c(%rbp)
  18:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1f:	00 00 
  21:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  25:	31 c0                	xor    %eax,%eax
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2b:	0f b6 55 e4          	movzbl -0x1c(%rbp),%edx
  2f:	88 10                	mov    %dl,(%rax)
  31:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  35:	8b 55 e0             	mov    -0x20(%rbp),%edx
  38:	89 50 04             	mov    %edx,0x4(%rax)
  3b:	90                   	nop
  3c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  47:	00 00 
  49:	74 05                	je     50 <HAL_I2C::HAL_I2C(unsigned char, unsigned int)+0x50>
  4b:	e8 00 00 00 00       	call   50 <HAL_I2C::HAL_I2C(unsigned char, unsigned int)+0x50>
  50:	c9                   	leave  
  51:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2C11IsConnectedEv:

0000000000000000 <HAL_I2C::IsConnected()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	8b 50 04             	mov    0x4(%rax),%edx
  26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2a:	0f b6 00             	movzbl (%rax),%eax
  2d:	0f b6 c0             	movzbl %al,%eax
  30:	89 d6                	mov    %edx,%esi
  32:	89 c7                	mov    %eax,%edi
  34:	e8 00 00 00 00       	call   39 <HAL_I2C::IsConnected()+0x39>
  39:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  3d:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  44:	00 00 
  46:	74 05                	je     4d <HAL_I2C::IsConnected()+0x4d>
  48:	e8 00 00 00 00       	call   4d <HAL_I2C::IsConnected()+0x4d>
  4d:	c9                   	leave  
  4e:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2C5WriteEh:

0000000000000000 <HAL_I2C::Write(unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	88 45 e4             	mov    %al,-0x1c(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  28:	48 89 c7             	mov    %rax,%rdi
  2b:	e8 00 00 00 00       	call   30 <HAL_I2C::Write(unsigned char)+0x30>
  30:	0f b6 45 e4          	movzbl -0x1c(%rbp),%eax
  34:	88 45 f7             	mov    %al,-0x9(%rbp)
  37:	48 8d 45 f7          	lea    -0x9(%rbp),%rax
  3b:	be 01 00 00 00       	mov    $0x1,%esi
  40:	48 89 c7             	mov    %rax,%rdi
  43:	e8 00 00 00 00       	call   48 <HAL_I2C::Write(unsigned char)+0x48>
  48:	90                   	nop
  49:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4d:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  54:	00 00 
  56:	74 05                	je     5d <HAL_I2C::Write(unsigned char)+0x5d>
  58:	e8 00 00 00 00       	call   5d <HAL_I2C::Write(unsigned char)+0x5d>
  5d:	c9                   	leave  
  5e:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2C5SetupEv:

0000000000000000 <HAL_I2C::Setup()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	0f b6 00             	movzbl (%rax),%eax
  26:	0f b6 c0             	movzbl %al,%eax
  29:	89 c7                	mov    %eax,%edi
  2b:	e8 00 00 00 00       	call   30 <HAL_I2C::Setup()+0x30>
  30:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  34:	8b 40 04             	mov    0x4(%rax),%eax
  37:	89 c7                	mov    %eax,%edi
  39:	e8 00 00 00 00       	call   3e <HAL_I2C::Setup()+0x3e>
  3e:	90                   	nop
  3f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  4a:	00 00 
  4c:	74 05                	je     53 <HAL_I2C::Setup()+0x53>
  4e:	e8 00 00 00 00       	call   53 <HAL_I2C::Setup()+0x53>
  53:	c9                   	leave  
  54:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2C12IsConnected_Ehj:

0000000000000000 <HAL_I2C::IsConnected_(unsigned char, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	89 f8                	mov    %edi,%eax
   e:	89 75 e8             	mov    %esi,-0x18(%rbp)
  11:	88 45 ec             	mov    %al,-0x14(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	0f b6 45 ec          	movzbl -0x14(%rbp),%eax
  27:	89 c7                	mov    %eax,%edi
  29:	e8 00 00 00 00       	call   2e <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x2e>
  2e:	8b 45 e8             	mov    -0x18(%rbp),%eax
  31:	89 c7                	mov    %eax,%edi
  33:	e8 00 00 00 00       	call   38 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x38>
  38:	80 7d ec 2f          	cmpb   $0x2f,-0x14(%rbp)
  3c:	76 06                	jbe    44 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x44>
  3e:	80 7d ec 37          	cmpb   $0x37,-0x14(%rbp)
  42:	76 0c                	jbe    50 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x50>
  44:	80 7d ec 4f          	cmpb   $0x4f,-0x14(%rbp)
  48:	76 1e                	jbe    68 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x68>
  4a:	80 7d ec 5f          	cmpb   $0x5f,-0x14(%rbp)
  4e:	77 18                	ja     68 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x68>
  50:	48 8d 45 f7          	lea    -0x9(%rbp),%rax
  54:	be 01 00 00 00       	mov    $0x1,%esi
  59:	48 89 c7             	mov    %rax,%rdi
  5c:	e8 00 00 00 00       	call   61 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x61>
  61:	84 c0                	test   %al,%al
  63:	0f 94 c0             	sete   %al
  66:	eb 14                	jmp    7c <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x7c>
  68:	be 00 00 00 00       	mov    $0x0,%esi
  6d:	bf 00 00 00 00       	mov    $0x0,%edi
  72:	e8 00 00 00 00       	call   77 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x77>
  77:	84 c0                	test   %al,%al
  79:	0f 94 c0             	sete   %al
  7c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  87:	00 00 
  89:	74 05                	je     90 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x90>
  8b:	e8 00 00 00 00       	call   90 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x90>
  90:	c9                   	leave  
  91:	c3                   	ret    

Disassembly of section .text._ZN10DisplaySetC2Ev:

0000000000000000 <DisplaySet::DisplaySet()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 26 <DisplaySet::DisplaySet()+0x26>
  26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2a:	48 89 10             	mov    %rdx,(%rax)
  2d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  31:	c6 40 10 00          	movb   $0x0,0x10(%rax)
  35:	90                   	nop
  36:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3a:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  41:	00 00 
  43:	74 05                	je     4a <DisplaySet::DisplaySet()+0x4a>
  45:	e8 00 00 00 00       	call   4a <DisplaySet::DisplaySet()+0x4a>
  4a:	c9                   	leave  
  4b:	c3                   	ret    

Disassembly of section .text._ZN7Hd44780C2Ev:

0000000000000000 <Hd44780::Hd44780()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	call   2b <Hd44780::Hd44780()+0x2b>
  2b:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 32 <Hd44780::Hd44780()+0x32>
  32:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  36:	48 89 10             	mov    %rdx,(%rax)
  39:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3d:	48 83 c0 14          	add    $0x14,%rax
  41:	ba 80 1a 06 00       	mov    $0x61a80,%edx
  46:	be 27 00 00 00       	mov    $0x27,%esi
  4b:	48 89 c7             	mov    %rax,%rdi
  4e:	e8 00 00 00 00       	call   53 <Hd44780::Hd44780()+0x53>
  53:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  57:	c7 40 08 10 00 00 00 	movl   $0x10,0x8(%rax)
  5e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  62:	c7 40 0c 02 00 00 00 	movl   $0x2,0xc(%rax)
  69:	90                   	nop
  6a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  6e:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  75:	00 00 
  77:	74 05                	je     7e <Hd44780::Hd44780()+0x7e>
  79:	e8 00 00 00 00       	call   7e <Hd44780::Hd44780()+0x7e>
  7e:	c9                   	leave  
  7f:	c3                   	ret    

Disassembly of section .text._ZN7Hd44780C2Ehh:

0000000000000000 <Hd44780::Hd44780(unsigned char, unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f1                	mov    %esi,%ecx
  12:	89 d0                	mov    %edx,%eax
  14:	89 ca                	mov    %ecx,%edx
  16:	88 55 e4             	mov    %dl,-0x1c(%rbp)
  19:	88 45 e0             	mov    %al,-0x20(%rbp)
  1c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  23:	00 00 
  25:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  29:	31 c0                	xor    %eax,%eax
  2b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	call   37 <Hd44780::Hd44780(unsigned char, unsigned char)+0x37>
  37:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 3e <Hd44780::Hd44780(unsigned char, unsigned char)+0x3e>
  3e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  42:	48 89 10             	mov    %rdx,(%rax)
  45:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  49:	48 83 c0 14          	add    $0x14,%rax
  4d:	ba 80 1a 06 00       	mov    $0x61a80,%edx
  52:	be 27 00 00 00       	mov    $0x27,%esi
  57:	48 89 c7             	mov    %rax,%rdi
  5a:	e8 00 00 00 00       	call   5f <Hd44780::Hd44780(unsigned char, unsigned char)+0x5f>
  5f:	80 7d e4 13          	cmpb   $0x13,-0x1c(%rbp)
  63:	77 13                	ja     78 <Hd44780::Hd44780(unsigned char, unsigned char)+0x78>
  65:	0f b6 45 e4          	movzbl -0x1c(%rbp),%eax
  69:	ba 10 00 00 00       	mov    $0x10,%edx
  6e:	38 d0                	cmp    %dl,%al
  70:	0f 42 c2             	cmovb  %edx,%eax
  73:	0f b6 c0             	movzbl %al,%eax
  76:	eb 05                	jmp    7d <Hd44780::Hd44780(unsigned char, unsigned char)+0x7d>
  78:	b8 14 00 00 00       	mov    $0x14,%eax
  7d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  81:	89 42 08             	mov    %eax,0x8(%rdx)
  84:	80 7d e0 03          	cmpb   $0x3,-0x20(%rbp)
  88:	77 13                	ja     9d <Hd44780::Hd44780(unsigned char, unsigned char)+0x9d>
  8a:	0f b6 45 e0          	movzbl -0x20(%rbp),%eax
  8e:	ba 02 00 00 00       	mov    $0x2,%edx
  93:	38 d0                	cmp    %dl,%al
  95:	0f 42 c2             	cmovb  %edx,%eax
  98:	0f b6 c0             	movzbl %al,%eax
  9b:	eb 05                	jmp    a2 <Hd44780::Hd44780(unsigned char, unsigned char)+0xa2>
  9d:	b8 04 00 00 00       	mov    $0x4,%eax
  a2:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  a6:	89 42 0c             	mov    %eax,0xc(%rdx)
  a9:	90                   	nop
  aa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  ae:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  b5:	00 00 
  b7:	74 05                	je     be <Hd44780::Hd44780(unsigned char, unsigned char)+0xbe>
  b9:	e8 00 00 00 00       	call   be <Hd44780::Hd44780(unsigned char, unsigned char)+0xbe>
  be:	c9                   	leave  
  bf:	c3                   	ret    

Disassembly of section .text._ZN7Hd44780C2Ehhh:

0000000000000000 <Hd44780::Hd44780(unsigned char, unsigned char, unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 c8                	mov    %ecx,%eax
  12:	89 f1                	mov    %esi,%ecx
  14:	88 4d e4             	mov    %cl,-0x1c(%rbp)
  17:	88 55 e0             	mov    %dl,-0x20(%rbp)
  1a:	88 45 dc             	mov    %al,-0x24(%rbp)
  1d:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  24:	00 00 
  26:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  2a:	31 c0                	xor    %eax,%eax
  2c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  30:	48 89 c7             	mov    %rax,%rdi
  33:	e8 00 00 00 00       	call   38 <Hd44780::Hd44780(unsigned char, unsigned char, unsigned char)+0x38>
  38:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 3f <Hd44780::Hd44780(unsigned char, unsigned char, unsigned char)+0x3f>
  3f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43:	48 89 10             	mov    %rdx,(%rax)
  46:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4a:	48 8d 48 14          	lea    0x14(%rax),%rcx
  4e:	0f b6 45 e4          	movzbl -0x1c(%rbp),%eax
  52:	84 c0                	test   %al,%al
  54:	74 0c                	je     62 <Hd44780::Hd44780(unsigned char, unsigned char, unsigned char)+0x62>
  56:	48 8d 45 e4          	lea    -0x1c(%rbp),%rax
  5a:	0f b6 00             	movzbl (%rax),%eax
  5d:	0f b6 c0             	movzbl %al,%eax
  60:	eb 05                	jmp    67 <Hd44780::Hd44780(unsigned char, unsigned char, unsigned char)+0x67>
  62:	b8 27 00 00 00       	mov    $0x27,%eax
  67:	ba 80 1a 06 00       	mov    $0x61a80,%edx
  6c:	89 c6                	mov    %eax,%esi
  6e:	48 89 cf             	mov    %rcx,%rdi
  71:	e8 00 00 00 00       	call   76 <Hd44780::Hd44780(unsigned char, unsigned char, unsigned char)+0x76>
  76:	80 7d e0 13          	cmpb   $0x13,-0x20(%rbp)
  7a:	77 13                	ja     8f <Hd44780::Hd44780(unsigned char, unsigned char, unsigned char)+0x8f>
  7c:	0f b6 45 e0          	movzbl -0x20(%rbp),%eax
  80:	ba 10 00 00 00       	mov    $0x10,%edx
  85:	38 d0                	cmp    %dl,%al
  87:	0f 42 c2             	cmovb  %edx,%eax
  8a:	0f b6 c0             	movzbl %al,%eax
  8d:	eb 05                	jmp    94 <Hd44780::Hd44780(unsigned char, unsigned char, unsigned char)+0x94>
  8f:	b8 14 00 00 00       	mov    $0x14,%eax
  94:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  98:	89 42 08             	mov    %eax,0x8(%rdx)
  9b:	80 7d dc 03          	cmpb   $0x3,-0x24(%rbp)
  9f:	77 13                	ja     b4 <Hd44780::Hd44780(unsigned char, unsigned char, unsigned char)+0xb4>
  a1:	0f b6 45 dc          	movzbl -0x24(%rbp),%eax
  a5:	ba 02 00 00 00       	mov    $0x2,%edx
  aa:	38 d0                	cmp    %dl,%al
  ac:	0f 42 c2             	cmovb  %edx,%eax
  af:	0f b6 c0             	movzbl %al,%eax
  b2:	eb 05                	jmp    b9 <Hd44780::Hd44780(unsigned char, unsigned char, unsigned char)+0xb9>
  b4:	b8 04 00 00 00       	mov    $0x4,%eax
  b9:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  bd:	89 42 0c             	mov    %eax,0xc(%rdx)
  c0:	90                   	nop
  c1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  c5:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  cc:	00 00 
  ce:	74 05                	je     d5 <Hd44780::Hd44780(unsigned char, unsigned char, unsigned char)+0xd5>
  d0:	e8 00 00 00 00       	call   d5 <Hd44780::Hd44780(unsigned char, unsigned char, unsigned char)+0xd5>
  d5:	c9                   	leave  
  d6:	c3                   	ret    

Disassembly of section .text._ZN7Hd447805StartEv:

0000000000000000 <Hd44780::Start()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	48 83 c0 14          	add    $0x14,%rax
  27:	48 89 c7             	mov    %rax,%rdi
  2a:	e8 00 00 00 00       	call   2f <Hd44780::Start()+0x2f>
  2f:	83 f0 01             	xor    $0x1,%eax
  32:	84 c0                	test   %al,%al
  34:	74 07                	je     3d <Hd44780::Start()+0x3d>
  36:	b8 00 00 00 00       	mov    $0x0,%eax
  3b:	eb 75                	jmp    b2 <Hd44780::Start()+0xb2>
  3d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  41:	be 33 00 00 00       	mov    $0x33,%esi
  46:	48 89 c7             	mov    %rax,%rdi
  49:	e8 00 00 00 00       	call   4e <Hd44780::Start()+0x4e>
  4e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  52:	be 32 00 00 00       	mov    $0x32,%esi
  57:	48 89 c7             	mov    %rax,%rdi
  5a:	e8 00 00 00 00       	call   5f <Hd44780::Start()+0x5f>
  5f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  63:	be 28 00 00 00       	mov    $0x28,%esi
  68:	48 89 c7             	mov    %rax,%rdi
  6b:	e8 00 00 00 00       	call   70 <Hd44780::Start()+0x70>
  70:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  74:	be 0c 00 00 00       	mov    $0xc,%esi
  79:	48 89 c7             	mov    %rax,%rdi
  7c:	e8 00 00 00 00       	call   81 <Hd44780::Start()+0x81>
  81:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  85:	be 01 00 00 00       	mov    $0x1,%esi
  8a:	48 89 c7             	mov    %rax,%rdi
  8d:	e8 00 00 00 00       	call   92 <Hd44780::Start()+0x92>
  92:	bf cb 05 00 00       	mov    $0x5cb,%edi
  97:	e8 00 00 00 00       	call   9c <Hd44780::Start()+0x9c>
  9c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  a0:	be 06 00 00 00       	mov    $0x6,%esi
  a5:	48 89 c7             	mov    %rax,%rdi
  a8:	e8 00 00 00 00       	call   ad <Hd44780::Start()+0xad>
  ad:	b8 01 00 00 00       	mov    $0x1,%eax
  b2:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  b6:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  bd:	00 00 
  bf:	74 05                	je     c6 <Hd44780::Start()+0xc6>
  c1:	e8 00 00 00 00       	call   c6 <Hd44780::Start()+0xc6>
  c6:	c9                   	leave  
  c7:	c3                   	ret    

Disassembly of section .text._ZN7Hd447803ClsEv:

0000000000000000 <Hd44780::Cls()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	be 01 00 00 00       	mov    $0x1,%esi
  28:	48 89 c7             	mov    %rax,%rdi
  2b:	e8 00 00 00 00       	call   30 <Hd44780::Cls()+0x30>
  30:	bf cb 05 00 00       	mov    $0x5cb,%edi
  35:	e8 00 00 00 00       	call   3a <Hd44780::Cls()+0x3a>
  3a:	90                   	nop
  3b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3f:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  46:	00 00 
  48:	74 05                	je     4f <Hd44780::Cls()+0x4f>
  4a:	e8 00 00 00 00       	call   4f <Hd44780::Cls()+0x4f>
  4f:	c9                   	leave  
  50:	c3                   	ret    

Disassembly of section .text._ZN7Hd447807PutCharEi:

0000000000000000 <Hd44780::PutChar(int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  13:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1a:	00 00 
  1c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  20:	31 c0                	xor    %eax,%eax
  22:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  25:	0f b6 d0             	movzbl %al,%edx
  28:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2c:	89 d6                	mov    %edx,%esi
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	call   36 <Hd44780::PutChar(int)+0x36>
  36:	90                   	nop
  37:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3b:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  42:	00 00 
  44:	74 05                	je     4b <Hd44780::PutChar(int)+0x4b>
  46:	e8 00 00 00 00       	call   4b <Hd44780::PutChar(int)+0x4b>
  4b:	c9                   	leave  
  4c:	c3                   	ret    

Disassembly of section .text._ZN7Hd447809PutStringEPKc:

0000000000000000 <Hd44780::PutString(char const*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  27:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  2b:	eb 1d                	jmp    4a <Hd44780::PutString(char const*)+0x4a>
  2d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  31:	0f b6 00             	movzbl (%rax),%eax
  34:	0f be d0             	movsbl %al,%edx
  37:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3b:	89 d6                	mov    %edx,%esi
  3d:	48 89 c7             	mov    %rax,%rdi
  40:	e8 00 00 00 00       	call   45 <Hd44780::PutString(char const*)+0x45>
  45:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
  4a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4e:	0f b6 00             	movzbl (%rax),%eax
  51:	84 c0                	test   %al,%al
  53:	75 d8                	jne    2d <Hd44780::PutString(char const*)+0x2d>
  55:	90                   	nop
  56:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  5a:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  61:	00 00 
  63:	74 05                	je     6a <Hd44780::PutString(char const*)+0x6a>
  65:	e8 00 00 00 00       	call   6a <Hd44780::PutString(char const*)+0x6a>
  6a:	c9                   	leave  
  6b:	c3                   	ret    

Disassembly of section .text._ZN7Hd447804TextEPKcj:

0000000000000000 <Hd44780::Text(char const*, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  14:	89 55 dc             	mov    %edx,-0x24(%rbp)
  17:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1e:	00 00 
  20:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  24:	31 c0                	xor    %eax,%eax
  26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2a:	8b 40 08             	mov    0x8(%rax),%eax
  2d:	39 45 dc             	cmp    %eax,-0x24(%rbp)
  30:	76 0a                	jbe    3c <Hd44780::Text(char const*, unsigned int)+0x3c>
  32:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  36:	8b 40 08             	mov    0x8(%rax),%eax
  39:	89 45 dc             	mov    %eax,-0x24(%rbp)
  3c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  43:	eb 22                	jmp    67 <Hd44780::Text(char const*, unsigned int)+0x67>
  45:	8b 55 f4             	mov    -0xc(%rbp),%edx
  48:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4c:	48 01 d0             	add    %rdx,%rax
  4f:	0f b6 00             	movzbl (%rax),%eax
  52:	0f b6 d0             	movzbl %al,%edx
  55:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  59:	89 d6                	mov    %edx,%esi
  5b:	48 89 c7             	mov    %rax,%rdi
  5e:	e8 00 00 00 00       	call   63 <Hd44780::Text(char const*, unsigned int)+0x63>
  63:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  67:	8b 45 f4             	mov    -0xc(%rbp),%eax
  6a:	3b 45 dc             	cmp    -0x24(%rbp),%eax
  6d:	72 d6                	jb     45 <Hd44780::Text(char const*, unsigned int)+0x45>
  6f:	90                   	nop
  70:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  74:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  7b:	00 00 
  7d:	74 05                	je     84 <Hd44780::Text(char const*, unsigned int)+0x84>
  7f:	e8 00 00 00 00       	call   84 <Hd44780::Text(char const*, unsigned int)+0x84>
  84:	c9                   	leave  
  85:	c3                   	ret    

Disassembly of section .text._ZN7Hd447808TextLineEjPKcj:

0000000000000000 <Hd44780::TextLine(unsigned int, char const*, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  13:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  17:	89 4d e0             	mov    %ecx,-0x20(%rbp)
  1a:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  21:	00 00 
  23:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  27:	31 c0                	xor    %eax,%eax
  29:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2d:	8b 40 0c             	mov    0xc(%rax),%eax
  30:	39 45 e4             	cmp    %eax,-0x1c(%rbp)
  33:	77 32                	ja     67 <Hd44780::TextLine(unsigned int, char const*, unsigned int)+0x67>
  35:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  38:	83 e8 01             	sub    $0x1,%eax
  3b:	0f b6 d0             	movzbl %al,%edx
  3e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  42:	be 00 00 00 00       	mov    $0x0,%esi
  47:	48 89 c7             	mov    %rax,%rdi
  4a:	e8 00 00 00 00       	call   4f <Hd44780::TextLine(unsigned int, char const*, unsigned int)+0x4f>
  4f:	8b 55 e0             	mov    -0x20(%rbp),%edx
  52:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  56:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5a:	48 89 ce             	mov    %rcx,%rsi
  5d:	48 89 c7             	mov    %rax,%rdi
  60:	e8 00 00 00 00       	call   65 <Hd44780::TextLine(unsigned int, char const*, unsigned int)+0x65>
  65:	eb 01                	jmp    68 <Hd44780::TextLine(unsigned int, char const*, unsigned int)+0x68>
  67:	90                   	nop
  68:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  6c:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  73:	00 00 
  75:	74 05                	je     7c <Hd44780::TextLine(unsigned int, char const*, unsigned int)+0x7c>
  77:	e8 00 00 00 00       	call   7c <Hd44780::TextLine(unsigned int, char const*, unsigned int)+0x7c>
  7c:	c9                   	leave  
  7d:	c3                   	ret    

Disassembly of section .text._ZN7Hd447809ClearLineEj:

0000000000000000 <Hd44780::ClearLine(unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  13:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1a:	00 00 
  1c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  20:	31 c0                	xor    %eax,%eax
  22:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  26:	8b 40 0c             	mov    0xc(%rax),%eax
  29:	39 45 e4             	cmp    %eax,-0x1c(%rbp)
  2c:	77 60                	ja     8e <Hd44780::ClearLine(unsigned int)+0x8e>
  2e:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  31:	83 e8 01             	sub    $0x1,%eax
  34:	0f b6 d0             	movzbl %al,%edx
  37:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3b:	be 00 00 00 00       	mov    $0x0,%esi
  40:	48 89 c7             	mov    %rax,%rdi
  43:	e8 00 00 00 00       	call   48 <Hd44780::ClearLine(unsigned int)+0x48>
  48:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  4f:	eb 15                	jmp    66 <Hd44780::ClearLine(unsigned int)+0x66>
  51:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  55:	be 20 00 00 00       	mov    $0x20,%esi
  5a:	48 89 c7             	mov    %rax,%rdi
  5d:	e8 00 00 00 00       	call   62 <Hd44780::ClearLine(unsigned int)+0x62>
  62:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  66:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  6a:	8b 40 08             	mov    0x8(%rax),%eax
  6d:	39 45 f4             	cmp    %eax,-0xc(%rbp)
  70:	72 df                	jb     51 <Hd44780::ClearLine(unsigned int)+0x51>
  72:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  75:	83 e8 01             	sub    $0x1,%eax
  78:	0f b6 d0             	movzbl %al,%edx
  7b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7f:	be 00 00 00 00       	mov    $0x0,%esi
  84:	48 89 c7             	mov    %rax,%rdi
  87:	e8 00 00 00 00       	call   8c <Hd44780::ClearLine(unsigned int)+0x8c>
  8c:	eb 01                	jmp    8f <Hd44780::ClearLine(unsigned int)+0x8f>
  8e:	90                   	nop
  8f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  93:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  9a:	00 00 
  9c:	74 05                	je     a3 <Hd44780::ClearLine(unsigned int)+0xa3>
  9e:	e8 00 00 00 00       	call   a3 <Hd44780::ClearLine(unsigned int)+0xa3>
  a3:	c9                   	leave  
  a4:	c3                   	ret    

Disassembly of section .text._ZN7Hd447809PrintInfoEv:

0000000000000000 <Hd44780::PrintInfo()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	8b 50 08             	mov    0x8(%rax),%edx
  26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2a:	8b 40 0c             	mov    0xc(%rax),%eax
  2d:	89 c6                	mov    %eax,%esi
  2f:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 36 <Hd44780::PrintInfo()+0x36>
  36:	48 89 c7             	mov    %rax,%rdi
  39:	b8 00 00 00 00       	mov    $0x0,%eax
  3e:	e8 00 00 00 00       	call   43 <Hd44780::PrintInfo()+0x43>
  43:	90                   	nop
  44:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  48:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  4f:	00 00 
  51:	74 05                	je     58 <Hd44780::PrintInfo()+0x58>
  53:	e8 00 00 00 00       	call   58 <Hd44780::PrintInfo()+0x58>
  58:	c9                   	leave  
  59:	c3                   	ret    

Disassembly of section .text._ZN7Hd4478012SetCursorPosEjj:

0000000000000000 <Hd44780::SetCursorPos(unsigned int, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  13:	89 55 e0             	mov    %edx,-0x20(%rbp)
  16:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1d:	00 00 
  1f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  23:	31 c0                	xor    %eax,%eax
  25:	c7 45 f4 00 40 14 54 	movl   $0x54144000,-0xc(%rbp)
  2c:	8b 45 e0             	mov    -0x20(%rbp),%eax
  2f:	83 e0 03             	and    $0x3,%eax
  32:	89 c0                	mov    %eax,%eax
  34:	0f b6 44 05 f4       	movzbl -0xc(%rbp,%rax,1),%eax
  39:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  3c:	01 d0                	add    %edx,%eax
  3e:	83 c8 80             	or     $0xffffff80,%eax
  41:	0f b6 d0             	movzbl %al,%edx
  44:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  48:	89 d6                	mov    %edx,%esi
  4a:	48 89 c7             	mov    %rax,%rdi
  4d:	e8 00 00 00 00       	call   52 <Hd44780::SetCursorPos(unsigned int, unsigned int)+0x52>
  52:	90                   	nop
  53:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  57:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  5e:	00 00 
  60:	74 05                	je     67 <Hd44780::SetCursorPos(unsigned int, unsigned int)+0x67>
  62:	e8 00 00 00 00       	call   67 <Hd44780::SetCursorPos(unsigned int, unsigned int)+0x67>
  67:	c9                   	leave  
  68:	c3                   	ret    

Disassembly of section .text._ZN7Hd4478010Write4bitsEh:

0000000000000000 <Hd44780::Write4bits(unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	88 45 e4             	mov    %al,-0x1c(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  28:	48 8d 50 14          	lea    0x14(%rax),%rdx
  2c:	0f b6 45 e4          	movzbl -0x1c(%rbp),%eax
  30:	89 c6                	mov    %eax,%esi
  32:	48 89 d7             	mov    %rdx,%rdi
  35:	e8 00 00 00 00       	call   3a <Hd44780::Write4bits(unsigned char)+0x3a>
  3a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3e:	48 8d 50 14          	lea    0x14(%rax),%rdx
  42:	0f b6 45 e4          	movzbl -0x1c(%rbp),%eax
  46:	83 c8 0c             	or     $0xc,%eax
  49:	0f b6 c0             	movzbl %al,%eax
  4c:	89 c6                	mov    %eax,%esi
  4e:	48 89 d7             	mov    %rdx,%rdi
  51:	e8 00 00 00 00       	call   56 <Hd44780::Write4bits(unsigned char)+0x56>
  56:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5a:	48 8d 50 14          	lea    0x14(%rax),%rdx
  5e:	0f b6 45 e4          	movzbl -0x1c(%rbp),%eax
  62:	83 e0 f3             	and    $0xfffffff3,%eax
  65:	83 c8 08             	or     $0x8,%eax
  68:	0f b6 c0             	movzbl %al,%eax
  6b:	89 c6                	mov    %eax,%esi
  6d:	48 89 d7             	mov    %rdx,%rdi
  70:	e8 00 00 00 00       	call   75 <Hd44780::Write4bits(unsigned char)+0x75>
  75:	90                   	nop
  76:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  7a:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  81:	00 00 
  83:	74 05                	je     8a <Hd44780::Write4bits(unsigned char)+0x8a>
  85:	e8 00 00 00 00       	call   8a <Hd44780::Write4bits(unsigned char)+0x8a>
  8a:	c9                   	leave  
  8b:	c3                   	ret    

Disassembly of section .text._ZN7Hd447808WriteCmdEh:

0000000000000000 <Hd44780::WriteCmd(unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	88 45 e4             	mov    %al,-0x1c(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	0f b6 45 e4          	movzbl -0x1c(%rbp),%eax
  28:	25 f0 00 00 00       	and    $0xf0,%eax
  2d:	89 c2                	mov    %eax,%edx
  2f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  33:	89 d6                	mov    %edx,%esi
  35:	48 89 c7             	mov    %rax,%rdi
  38:	e8 00 00 00 00       	call   3d <Hd44780::WriteCmd(unsigned char)+0x3d>
  3d:	0f b6 45 e4          	movzbl -0x1c(%rbp),%eax
  41:	c1 e0 04             	shl    $0x4,%eax
  44:	0f b6 d0             	movzbl %al,%edx
  47:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4b:	89 d6                	mov    %edx,%esi
  4d:	48 89 c7             	mov    %rax,%rdi
  50:	e8 00 00 00 00       	call   55 <Hd44780::WriteCmd(unsigned char)+0x55>
  55:	bf 25 00 00 00       	mov    $0x25,%edi
  5a:	e8 00 00 00 00       	call   5f <Hd44780::WriteCmd(unsigned char)+0x5f>
  5f:	90                   	nop
  60:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  64:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  6b:	00 00 
  6d:	74 05                	je     74 <Hd44780::WriteCmd(unsigned char)+0x74>
  6f:	e8 00 00 00 00       	call   74 <Hd44780::WriteCmd(unsigned char)+0x74>
  74:	c9                   	leave  
  75:	c3                   	ret    

Disassembly of section .text._ZN7Hd447808WriteRegEh:

0000000000000000 <Hd44780::WriteReg(unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	88 45 e4             	mov    %al,-0x1c(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	0f b6 45 e4          	movzbl -0x1c(%rbp),%eax
  28:	83 e0 f0             	and    $0xfffffff0,%eax
  2b:	83 c8 01             	or     $0x1,%eax
  2e:	0f b6 d0             	movzbl %al,%edx
  31:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  35:	89 d6                	mov    %edx,%esi
  37:	48 89 c7             	mov    %rax,%rdi
  3a:	e8 00 00 00 00       	call   3f <Hd44780::WriteReg(unsigned char)+0x3f>
  3f:	0f b6 45 e4          	movzbl -0x1c(%rbp),%eax
  43:	c1 e0 04             	shl    $0x4,%eax
  46:	83 c8 01             	or     $0x1,%eax
  49:	0f b6 d0             	movzbl %al,%edx
  4c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  50:	89 d6                	mov    %edx,%esi
  52:	48 89 c7             	mov    %rax,%rdi
  55:	e8 00 00 00 00       	call   5a <Hd44780::WriteReg(unsigned char)+0x5a>
  5a:	bf 2b 00 00 00       	mov    $0x2b,%edi
  5f:	e8 00 00 00 00       	call   64 <Hd44780::WriteReg(unsigned char)+0x64>
  64:	90                   	nop
  65:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  69:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  70:	00 00 
  72:	74 05                	je     79 <Hd44780::WriteReg(unsigned char)+0x79>
  74:	e8 00 00 00 00       	call   79 <Hd44780::WriteReg(unsigned char)+0x79>
  79:	c9                   	leave  
  7a:	c3                   	ret    

Disassembly of section .text._ZN7Hd447809SetCursorEj:

0000000000000000 <Hd44780::SetCursor(unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  13:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1a:	00 00 
  1c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  20:	31 c0                	xor    %eax,%eax
  22:	c6 45 f7 0c          	movb   $0xc,-0x9(%rbp)
  26:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  29:	83 e0 01             	and    $0x1,%eax
  2c:	85 c0                	test   %eax,%eax
  2e:	74 04                	je     34 <Hd44780::SetCursor(unsigned int)+0x34>
  30:	80 4d f7 02          	orb    $0x2,-0x9(%rbp)
  34:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  37:	83 e0 02             	and    $0x2,%eax
  3a:	85 c0                	test   %eax,%eax
  3c:	74 04                	je     42 <Hd44780::SetCursor(unsigned int)+0x42>
  3e:	80 4d f7 01          	orb    $0x1,-0x9(%rbp)
  42:	0f b6 55 f7          	movzbl -0x9(%rbp),%edx
  46:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4a:	89 d6                	mov    %edx,%esi
  4c:	48 89 c7             	mov    %rax,%rdi
  4f:	e8 00 00 00 00       	call   54 <Hd44780::SetCursor(unsigned int)+0x54>
  54:	90                   	nop
  55:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  59:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  60:	00 00 
  62:	74 05                	je     69 <Hd44780::SetCursor(unsigned int)+0x69>
  64:	e8 00 00 00 00       	call   69 <Hd44780::SetCursor(unsigned int)+0x69>
  69:	c9                   	leave  
  6a:	c3                   	ret    

Disassembly of section .text._ZN7Hd44780D2Ev:

0000000000000000 <Hd44780::~Hd44780()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 26 <Hd44780::~Hd44780()+0x26>
  26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2a:	48 89 10             	mov    %rdx,(%rax)
  2d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  31:	48 89 c7             	mov    %rax,%rdi
  34:	e8 00 00 00 00       	call   39 <Hd44780::~Hd44780()+0x39>
  39:	90                   	nop
  3a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3e:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  45:	00 00 
  47:	74 05                	je     4e <Hd44780::~Hd44780()+0x4e>
  49:	e8 00 00 00 00       	call   4e <Hd44780::~Hd44780()+0x4e>
  4e:	c9                   	leave  
  4f:	c3                   	ret    

Disassembly of section .text._ZN7Hd44780D0Ev:

0000000000000000 <Hd44780::~Hd44780()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	call   2b <Hd44780::~Hd44780()+0x2b>
  2b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	call   37 <Hd44780::~Hd44780()+0x37>
  37:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3b:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  42:	00 00 
  44:	74 05                	je     4b <Hd44780::~Hd44780()+0x4b>
  46:	e8 00 00 00 00       	call   4b <Hd44780::~Hd44780()+0x4b>
  4b:	c9                   	leave  
  4c:	c3                   	ret    

ssd1306.o:     file format elf64-x86-64


Disassembly of section .text._ZN10DisplaySetD2Ev:

0000000000000000 <DisplaySet::~DisplaySet()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 26 <DisplaySet::~DisplaySet()+0x26>
  26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2a:	48 89 10             	mov    %rdx,(%rax)
  2d:	90                   	nop
  2e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  32:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  39:	00 00 
  3b:	74 05                	je     42 <DisplaySet::~DisplaySet()+0x42>
  3d:	e8 00 00 00 00       	call   42 <DisplaySet::~DisplaySet()+0x42>
  42:	c9                   	leave  
  43:	c3                   	ret    

Disassembly of section .text._ZN10DisplaySetD0Ev:

0000000000000000 <DisplaySet::~DisplaySet()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	call   2b <DisplaySet::~DisplaySet()+0x2b>
  2b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	call   37 <DisplaySet::~DisplaySet()+0x37>
  37:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3b:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  42:	00 00 
  44:	74 05                	je     4b <DisplaySet::~DisplaySet()+0x4b>
  46:	e8 00 00 00 00       	call   4b <DisplaySet::~DisplaySet()+0x4b>
  4b:	c9                   	leave  
  4c:	c3                   	ret    

Disassembly of section .text._ZN10DisplaySet8SetSleepEb:

0000000000000000 <DisplaySet::SetSleep(bool)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	88 45 e4             	mov    %al,-0x1c(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	90                   	nop
  25:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  29:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  30:	00 00 
  32:	74 05                	je     39 <DisplaySet::SetSleep(bool)+0x39>
  34:	e8 00 00 00 00       	call   39 <DisplaySet::SetSleep(bool)+0x39>
  39:	c9                   	leave  
  3a:	c3                   	ret    

Disassembly of section .text._ZN10DisplaySet11SetContrastEh:

0000000000000000 <DisplaySet::SetContrast(unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	88 45 e4             	mov    %al,-0x1c(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	90                   	nop
  25:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  29:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  30:	00 00 
  32:	74 05                	je     39 <DisplaySet::SetContrast(unsigned char)+0x39>
  34:	e8 00 00 00 00       	call   39 <DisplaySet::SetContrast(unsigned char)+0x39>
  39:	c9                   	leave  
  3a:	c3                   	ret    

Disassembly of section .text._ZN10DisplaySet17SetFlipVerticallyEb:

0000000000000000 <DisplaySet::SetFlipVertically(bool)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	88 45 e4             	mov    %al,-0x1c(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	90                   	nop
  25:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  29:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  30:	00 00 
  32:	74 05                	je     39 <DisplaySet::SetFlipVertically(bool)+0x39>
  34:	e8 00 00 00 00       	call   39 <DisplaySet::SetFlipVertically(bool)+0x39>
  39:	c9                   	leave  
  3a:	c3                   	ret    

Disassembly of section .text._ZN10DisplaySet9PrintInfoEv:

0000000000000000 <DisplaySet::PrintInfo()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	90                   	nop
  20:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  24:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  2b:	00 00 
  2d:	74 05                	je     34 <DisplaySet::PrintInfo()+0x34>
  2f:	e8 00 00 00 00       	call   34 <DisplaySet::PrintInfo()+0x34>
  34:	c9                   	leave  
  35:	c3                   	ret    

Disassembly of section .text._ZL16i2c_set_baudratej:

0000000000000000 <i2c_set_baudrate(unsigned int)>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	89 7d ec             	mov    %edi,-0x14(%rbp)
   b:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  12:	00 00 
  14:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  18:	31 c0                	xor    %eax,%eax
  1a:	90                   	nop
  1b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1f:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  26:	00 00 
  28:	74 05                	je     2f <i2c_set_baudrate(unsigned int)+0x2f>
  2a:	e8 00 00 00 00       	call   2f <i2c_set_baudrate(unsigned int)+0x2f>
  2f:	c9                   	leave  
  30:	c3                   	ret    

Disassembly of section .text._ZL15i2c_set_addressh:

0000000000000000 <i2c_set_address(unsigned char)>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	89 f8                	mov    %edi,%eax
   a:	88 45 ec             	mov    %al,-0x14(%rbp)
   d:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  14:	00 00 
  16:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1a:	31 c0                	xor    %eax,%eax
  1c:	90                   	nop
  1d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  21:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  28:	00 00 
  2a:	74 05                	je     31 <i2c_set_address(unsigned char)+0x31>
  2c:	e8 00 00 00 00       	call   31 <i2c_set_address(unsigned char)+0x31>
  31:	c9                   	leave  
  32:	c3                   	ret    

Disassembly of section .text._ZL9i2c_writePKcj:

0000000000000000 <i2c_write(char const*, unsigned int)>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	89 75 e4             	mov    %esi,-0x1c(%rbp)
   f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  16:	00 00 
  18:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1c:	31 c0                	xor    %eax,%eax
  1e:	b8 01 00 00 00       	mov    $0x1,%eax
  23:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  27:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  2e:	00 00 
  30:	74 05                	je     37 <i2c_write(char const*, unsigned int)+0x37>
  32:	e8 00 00 00 00       	call   37 <i2c_write(char const*, unsigned int)+0x37>
  37:	c9                   	leave  
  38:	c3                   	ret    

Disassembly of section .text._ZL8i2c_readPcj:

0000000000000000 <i2c_read(char*, unsigned int)>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	89 75 e4             	mov    %esi,-0x1c(%rbp)
   f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  16:	00 00 
  18:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1c:	31 c0                	xor    %eax,%eax
  1e:	b8 01 00 00 00       	mov    $0x1,%eax
  23:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  27:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  2e:	00 00 
  30:	74 05                	je     37 <i2c_read(char*, unsigned int)+0x37>
  32:	e8 00 00 00 00       	call   37 <i2c_read(char*, unsigned int)+0x37>
  37:	c9                   	leave  
  38:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2CC2Ehj:

0000000000000000 <HAL_I2C::HAL_I2C(unsigned char, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	89 55 e0             	mov    %edx,-0x20(%rbp)
  15:	88 45 e4             	mov    %al,-0x1c(%rbp)
  18:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1f:	00 00 
  21:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  25:	31 c0                	xor    %eax,%eax
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2b:	0f b6 55 e4          	movzbl -0x1c(%rbp),%edx
  2f:	88 10                	mov    %dl,(%rax)
  31:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  35:	8b 55 e0             	mov    -0x20(%rbp),%edx
  38:	89 50 04             	mov    %edx,0x4(%rax)
  3b:	90                   	nop
  3c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  47:	00 00 
  49:	74 05                	je     50 <HAL_I2C::HAL_I2C(unsigned char, unsigned int)+0x50>
  4b:	e8 00 00 00 00       	call   50 <HAL_I2C::HAL_I2C(unsigned char, unsigned int)+0x50>
  50:	c9                   	leave  
  51:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2C11IsConnectedEv:

0000000000000000 <HAL_I2C::IsConnected()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	8b 50 04             	mov    0x4(%rax),%edx
  26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2a:	0f b6 00             	movzbl (%rax),%eax
  2d:	0f b6 c0             	movzbl %al,%eax
  30:	89 d6                	mov    %edx,%esi
  32:	89 c7                	mov    %eax,%edi
  34:	e8 00 00 00 00       	call   39 <HAL_I2C::IsConnected()+0x39>
  39:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  3d:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  44:	00 00 
  46:	74 05                	je     4d <HAL_I2C::IsConnected()+0x4d>
  48:	e8 00 00 00 00       	call   4d <HAL_I2C::IsConnected()+0x4d>
  4d:	c9                   	leave  
  4e:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2C5WriteEh:

0000000000000000 <HAL_I2C::Write(unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	88 45 e4             	mov    %al,-0x1c(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  28:	48 89 c7             	mov    %rax,%rdi
  2b:	e8 00 00 00 00       	call   30 <HAL_I2C::Write(unsigned char)+0x30>
  30:	0f b6 45 e4          	movzbl -0x1c(%rbp),%eax
  34:	88 45 f7             	mov    %al,-0x9(%rbp)
  37:	48 8d 45 f7          	lea    -0x9(%rbp),%rax
  3b:	be 01 00 00 00       	mov    $0x1,%esi
  40:	48 89 c7             	mov    %rax,%rdi
  43:	e8 00 00 00 00       	call   48 <HAL_I2C::Write(unsigned char)+0x48>
  48:	90                   	nop
  49:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4d:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  54:	00 00 
  56:	74 05                	je     5d <HAL_I2C::Write(unsigned char)+0x5d>
  58:	e8 00 00 00 00       	call   5d <HAL_I2C::Write(unsigned char)+0x5d>
  5d:	c9                   	leave  
  5e:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2C5WriteEPKcj:

0000000000000000 <HAL_I2C::Write(char const*, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  14:	89 55 dc             	mov    %edx,-0x24(%rbp)
  17:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1e:	00 00 
  20:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  24:	31 c0                	xor    %eax,%eax
  26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2a:	48 89 c7             	mov    %rax,%rdi
  2d:	e8 00 00 00 00       	call   32 <HAL_I2C::Write(char const*, unsigned int)+0x32>
  32:	8b 55 dc             	mov    -0x24(%rbp),%edx
  35:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  39:	89 d6                	mov    %edx,%esi
  3b:	48 89 c7             	mov    %rax,%rdi
  3e:	e8 00 00 00 00       	call   43 <HAL_I2C::Write(char const*, unsigned int)+0x43>
  43:	90                   	nop
  44:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  48:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  4f:	00 00 
  51:	74 05                	je     58 <HAL_I2C::Write(char const*, unsigned int)+0x58>
  53:	e8 00 00 00 00       	call   58 <HAL_I2C::Write(char const*, unsigned int)+0x58>
  58:	c9                   	leave  
  59:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2C13WriteRegisterEhh:

0000000000000000 <HAL_I2C::WriteRegister(unsigned char, unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f1                	mov    %esi,%ecx
  12:	89 d0                	mov    %edx,%eax
  14:	89 ca                	mov    %ecx,%edx
  16:	88 55 e4             	mov    %dl,-0x1c(%rbp)
  19:	88 45 e0             	mov    %al,-0x20(%rbp)
  1c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  23:	00 00 
  25:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  29:	31 c0                	xor    %eax,%eax
  2b:	0f b6 45 e4          	movzbl -0x1c(%rbp),%eax
  2f:	88 45 f6             	mov    %al,-0xa(%rbp)
  32:	0f b6 45 e0          	movzbl -0x20(%rbp),%eax
  36:	88 45 f7             	mov    %al,-0x9(%rbp)
  39:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3d:	48 89 c7             	mov    %rax,%rdi
  40:	e8 00 00 00 00       	call   45 <HAL_I2C::WriteRegister(unsigned char, unsigned char)+0x45>
  45:	48 8d 45 f6          	lea    -0xa(%rbp),%rax
  49:	be 02 00 00 00       	mov    $0x2,%esi
  4e:	48 89 c7             	mov    %rax,%rdi
  51:	e8 00 00 00 00       	call   56 <HAL_I2C::WriteRegister(unsigned char, unsigned char)+0x56>
  56:	90                   	nop
  57:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  5b:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  62:	00 00 
  64:	74 05                	je     6b <HAL_I2C::WriteRegister(unsigned char, unsigned char)+0x6b>
  66:	e8 00 00 00 00       	call   6b <HAL_I2C::WriteRegister(unsigned char, unsigned char)+0x6b>
  6b:	c9                   	leave  
  6c:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2C4ReadEPcj:

0000000000000000 <HAL_I2C::Read(char*, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  14:	89 55 dc             	mov    %edx,-0x24(%rbp)
  17:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1e:	00 00 
  20:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  24:	31 c0                	xor    %eax,%eax
  26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2a:	48 89 c7             	mov    %rax,%rdi
  2d:	e8 00 00 00 00       	call   32 <HAL_I2C::Read(char*, unsigned int)+0x32>
  32:	8b 55 dc             	mov    -0x24(%rbp),%edx
  35:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  39:	89 d6                	mov    %edx,%esi
  3b:	48 89 c7             	mov    %rax,%rdi
  3e:	e8 00 00 00 00       	call   43 <HAL_I2C::Read(char*, unsigned int)+0x43>
  43:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  47:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  4e:	00 00 
  50:	74 05                	je     57 <HAL_I2C::Read(char*, unsigned int)+0x57>
  52:	e8 00 00 00 00       	call   57 <HAL_I2C::Read(char*, unsigned int)+0x57>
  57:	c9                   	leave  
  58:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2C5SetupEv:

0000000000000000 <HAL_I2C::Setup()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	0f b6 00             	movzbl (%rax),%eax
  26:	0f b6 c0             	movzbl %al,%eax
  29:	89 c7                	mov    %eax,%edi
  2b:	e8 00 00 00 00       	call   30 <HAL_I2C::Setup()+0x30>
  30:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  34:	8b 40 04             	mov    0x4(%rax),%eax
  37:	89 c7                	mov    %eax,%edi
  39:	e8 00 00 00 00       	call   3e <HAL_I2C::Setup()+0x3e>
  3e:	90                   	nop
  3f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  4a:	00 00 
  4c:	74 05                	je     53 <HAL_I2C::Setup()+0x53>
  4e:	e8 00 00 00 00       	call   53 <HAL_I2C::Setup()+0x53>
  53:	c9                   	leave  
  54:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2C12IsConnected_Ehj:

0000000000000000 <HAL_I2C::IsConnected_(unsigned char, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	89 f8                	mov    %edi,%eax
   e:	89 75 e8             	mov    %esi,-0x18(%rbp)
  11:	88 45 ec             	mov    %al,-0x14(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	0f b6 45 ec          	movzbl -0x14(%rbp),%eax
  27:	89 c7                	mov    %eax,%edi
  29:	e8 00 00 00 00       	call   2e <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x2e>
  2e:	8b 45 e8             	mov    -0x18(%rbp),%eax
  31:	89 c7                	mov    %eax,%edi
  33:	e8 00 00 00 00       	call   38 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x38>
  38:	80 7d ec 2f          	cmpb   $0x2f,-0x14(%rbp)
  3c:	76 06                	jbe    44 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x44>
  3e:	80 7d ec 37          	cmpb   $0x37,-0x14(%rbp)
  42:	76 0c                	jbe    50 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x50>
  44:	80 7d ec 4f          	cmpb   $0x4f,-0x14(%rbp)
  48:	76 1e                	jbe    68 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x68>
  4a:	80 7d ec 5f          	cmpb   $0x5f,-0x14(%rbp)
  4e:	77 18                	ja     68 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x68>
  50:	48 8d 45 f7          	lea    -0x9(%rbp),%rax
  54:	be 01 00 00 00       	mov    $0x1,%esi
  59:	48 89 c7             	mov    %rax,%rdi
  5c:	e8 00 00 00 00       	call   61 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x61>
  61:	84 c0                	test   %al,%al
  63:	0f 94 c0             	sete   %al
  66:	eb 14                	jmp    7c <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x7c>
  68:	be 00 00 00 00       	mov    $0x0,%esi
  6d:	bf 00 00 00 00       	mov    $0x0,%edi
  72:	e8 00 00 00 00       	call   77 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x77>
  77:	84 c0                	test   %al,%al
  79:	0f 94 c0             	sete   %al
  7c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  87:	00 00 
  89:	74 05                	je     90 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x90>
  8b:	e8 00 00 00 00       	call   90 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x90>
  90:	c9                   	leave  
  91:	c3                   	ret    

Disassembly of section .text._ZN7Ssd1306D2Ev:

0000000000000000 <Ssd1306::~Ssd1306()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 26 <Ssd1306::~Ssd1306()+0x26>
  26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2a:	48 89 10             	mov    %rdx,(%rax)
  2d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  31:	48 8b 40 28          	mov    0x28(%rax),%rax
  35:	48 85 c0             	test   %rax,%rax
  38:	74 10                	je     4a <Ssd1306::~Ssd1306()+0x4a>
  3a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3e:	48 8b 40 28          	mov    0x28(%rax),%rax
  42:	48 89 c7             	mov    %rax,%rdi
  45:	e8 00 00 00 00       	call   4a <Ssd1306::~Ssd1306()+0x4a>
  4a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4e:	48 c7 40 28 00 00 00 	movq   $0x0,0x28(%rax)
  55:	00 
  56:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5a:	48 89 c7             	mov    %rax,%rdi
  5d:	e8 00 00 00 00       	call   62 <Ssd1306::~Ssd1306()+0x62>
  62:	90                   	nop
  63:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  67:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  6e:	00 00 
  70:	74 05                	je     77 <Ssd1306::~Ssd1306()+0x77>
  72:	e8 00 00 00 00       	call   77 <Ssd1306::~Ssd1306()+0x77>
  77:	c9                   	leave  
  78:	c3                   	ret    

Disassembly of section .text._ZN7Ssd1306D0Ev:

0000000000000000 <Ssd1306::~Ssd1306()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	call   2b <Ssd1306::~Ssd1306()+0x2b>
  2b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	call   37 <Ssd1306::~Ssd1306()+0x37>
  37:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3b:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  42:	00 00 
  44:	74 05                	je     4b <Ssd1306::~Ssd1306()+0x4b>
  46:	e8 00 00 00 00       	call   4b <Ssd1306::~Ssd1306()+0x4b>
  4b:	c9                   	leave  
  4c:	c3                   	ret    

Disassembly of section .text._ZN10DisplaySetC2Ev:

0000000000000000 <DisplaySet::DisplaySet()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 26 <DisplaySet::DisplaySet()+0x26>
  26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2a:	48 89 10             	mov    %rdx,(%rax)
  2d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  31:	c6 40 10 00          	movb   $0x0,0x10(%rax)
  35:	90                   	nop
  36:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3a:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  41:	00 00 
  43:	74 05                	je     4a <DisplaySet::DisplaySet()+0x4a>
  45:	e8 00 00 00 00       	call   4a <DisplaySet::DisplaySet()+0x4a>
  4a:	c9                   	leave  
  4b:	c3                   	ret    

Disassembly of section .text._ZN7Ssd1306C2Ev:

0000000000000000 <Ssd1306::Ssd1306()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	call   2b <Ssd1306::Ssd1306()+0x2b>
  2b:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 32 <Ssd1306::Ssd1306()+0x32>
  32:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  36:	48 89 10             	mov    %rdx,(%rax)
  39:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3d:	48 83 c0 14          	add    $0x14,%rax
  41:	ba 80 1a 06 00       	mov    $0x61a80,%edx
  46:	be 3c 00 00 00       	mov    $0x3c,%esi
  4b:	48 89 c7             	mov    %rax,%rdi
  4e:	e8 00 00 00 00       	call   53 <Ssd1306::Ssd1306()+0x53>
  53:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  57:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%rax)
  5e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  62:	c6 40 20 00          	movb   $0x0,0x20(%rax)
  66:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  6a:	48 c7 40 28 00 00 00 	movq   $0x0,0x28(%rax)
  71:	00 
  72:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  76:	c7 40 30 00 00 00 00 	movl   $0x0,0x30(%rax)
  7d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  81:	c7 40 34 00 00 00 00 	movl   $0x0,0x34(%rax)
  88:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8c:	48 89 05 00 00 00 00 	mov    %rax,0x0(%rip)        # 93 <Ssd1306::Ssd1306()+0x93>
  93:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  97:	48 89 c7             	mov    %rax,%rdi
  9a:	e8 00 00 00 00       	call   9f <Ssd1306::Ssd1306()+0x9f>
  9f:	90                   	nop
  a0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  a4:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  ab:	00 00 
  ad:	74 05                	je     b4 <Ssd1306::Ssd1306()+0xb4>
  af:	e8 00 00 00 00       	call   b4 <Ssd1306::Ssd1306()+0xb4>
  b4:	c9                   	leave  
  b5:	c3                   	ret    

Disassembly of section .text._ZN7Ssd1306C2E10TOledPanel:

0000000000000000 <Ssd1306::Ssd1306(TOledPanel)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  13:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1a:	00 00 
  1c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  20:	31 c0                	xor    %eax,%eax
  22:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  26:	48 89 c7             	mov    %rax,%rdi
  29:	e8 00 00 00 00       	call   2e <Ssd1306::Ssd1306(TOledPanel)+0x2e>
  2e:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 35 <Ssd1306::Ssd1306(TOledPanel)+0x35>
  35:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  39:	48 89 10             	mov    %rdx,(%rax)
  3c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40:	48 83 c0 14          	add    $0x14,%rax
  44:	ba 80 1a 06 00       	mov    $0x61a80,%edx
  49:	be 3c 00 00 00       	mov    $0x3c,%esi
  4e:	48 89 c7             	mov    %rax,%rdi
  51:	e8 00 00 00 00       	call   56 <Ssd1306::Ssd1306(TOledPanel)+0x56>
  56:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5a:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  5d:	89 50 1c             	mov    %edx,0x1c(%rax)
  60:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  64:	c6 40 20 00          	movb   $0x0,0x20(%rax)
  68:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  6c:	48 c7 40 28 00 00 00 	movq   $0x0,0x28(%rax)
  73:	00 
  74:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  78:	c7 40 30 00 00 00 00 	movl   $0x0,0x30(%rax)
  7f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  83:	c7 40 34 00 00 00 00 	movl   $0x0,0x34(%rax)
  8a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8e:	48 89 05 00 00 00 00 	mov    %rax,0x0(%rip)        # 95 <Ssd1306::Ssd1306(TOledPanel)+0x95>
  95:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  99:	48 89 c7             	mov    %rax,%rdi
  9c:	e8 00 00 00 00       	call   a1 <Ssd1306::Ssd1306(TOledPanel)+0xa1>
  a1:	90                   	nop
  a2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  a6:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  ad:	00 00 
  af:	74 05                	je     b6 <Ssd1306::Ssd1306(TOledPanel)+0xb6>
  b1:	e8 00 00 00 00       	call   b6 <Ssd1306::Ssd1306(TOledPanel)+0xb6>
  b6:	c9                   	leave  
  b7:	c3                   	ret    

Disassembly of section .text._ZN7Ssd1306C2Eh10TOledPanel:

0000000000000000 <Ssd1306::Ssd1306(unsigned char, TOledPanel)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	89 55 e0             	mov    %edx,-0x20(%rbp)
  15:	88 45 e4             	mov    %al,-0x1c(%rbp)
  18:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1f:	00 00 
  21:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  25:	31 c0                	xor    %eax,%eax
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2b:	48 89 c7             	mov    %rax,%rdi
  2e:	e8 00 00 00 00       	call   33 <Ssd1306::Ssd1306(unsigned char, TOledPanel)+0x33>
  33:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 3a <Ssd1306::Ssd1306(unsigned char, TOledPanel)+0x3a>
  3a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3e:	48 89 10             	mov    %rdx,(%rax)
  41:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  45:	48 8d 48 14          	lea    0x14(%rax),%rcx
  49:	80 7d e4 00          	cmpb   $0x0,-0x1c(%rbp)
  4d:	74 06                	je     55 <Ssd1306::Ssd1306(unsigned char, TOledPanel)+0x55>
  4f:	0f b6 45 e4          	movzbl -0x1c(%rbp),%eax
  53:	eb 05                	jmp    5a <Ssd1306::Ssd1306(unsigned char, TOledPanel)+0x5a>
  55:	b8 3c 00 00 00       	mov    $0x3c,%eax
  5a:	ba 80 1a 06 00       	mov    $0x61a80,%edx
  5f:	89 c6                	mov    %eax,%esi
  61:	48 89 cf             	mov    %rcx,%rdi
  64:	e8 00 00 00 00       	call   69 <Ssd1306::Ssd1306(unsigned char, TOledPanel)+0x69>
  69:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  6d:	8b 55 e0             	mov    -0x20(%rbp),%edx
  70:	89 50 1c             	mov    %edx,0x1c(%rax)
  73:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  77:	c6 40 20 00          	movb   $0x0,0x20(%rax)
  7b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7f:	48 c7 40 28 00 00 00 	movq   $0x0,0x28(%rax)
  86:	00 
  87:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8b:	c7 40 30 00 00 00 00 	movl   $0x0,0x30(%rax)
  92:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  96:	c7 40 34 00 00 00 00 	movl   $0x0,0x34(%rax)
  9d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  a1:	48 89 05 00 00 00 00 	mov    %rax,0x0(%rip)        # a8 <Ssd1306::Ssd1306(unsigned char, TOledPanel)+0xa8>
  a8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  ac:	48 89 c7             	mov    %rax,%rdi
  af:	e8 00 00 00 00       	call   b4 <Ssd1306::Ssd1306(unsigned char, TOledPanel)+0xb4>
  b4:	90                   	nop
  b5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  b9:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  c0:	00 00 
  c2:	74 05                	je     c9 <Ssd1306::Ssd1306(unsigned char, TOledPanel)+0xc9>
  c4:	e8 00 00 00 00       	call   c9 <Ssd1306::Ssd1306(unsigned char, TOledPanel)+0xc9>
  c9:	c9                   	leave  
  ca:	c3                   	ret    

Disassembly of section .text._ZN7Ssd13069PrintInfoEv:

0000000000000000 <Ssd1306::PrintInfo()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	8b 48 08             	mov    0x8(%rax),%ecx
  26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2a:	8b 50 0c             	mov    0xc(%rax),%edx
  2d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  31:	0f b6 40 20          	movzbl 0x20(%rax),%eax
  35:	84 c0                	test   %al,%al
  37:	74 09                	je     42 <Ssd1306::PrintInfo()+0x42>
  39:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 40 <Ssd1306::PrintInfo()+0x40>
  40:	eb 07                	jmp    49 <Ssd1306::PrintInfo()+0x49>
  42:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 49 <Ssd1306::PrintInfo()+0x49>
  49:	48 89 c6             	mov    %rax,%rsi
  4c:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 53 <Ssd1306::PrintInfo()+0x53>
  53:	48 89 c7             	mov    %rax,%rdi
  56:	b8 00 00 00 00       	mov    $0x0,%eax
  5b:	e8 00 00 00 00       	call   60 <Ssd1306::PrintInfo()+0x60>
  60:	90                   	nop
  61:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  65:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  6c:	00 00 
  6e:	74 05                	je     75 <Ssd1306::PrintInfo()+0x75>
  70:	e8 00 00 00 00       	call   75 <Ssd1306::PrintInfo()+0x75>
  75:	c9                   	leave  
  76:	c3                   	ret    

Disassembly of section .text._ZN7Ssd130611CheckSH1106Ev:

0000000000000000 <Ssd1306::CheckSH1106()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  23:	be 00 00 00 00       	mov    $0x0,%esi
  28:	48 89 c7             	mov    %rax,%rdi
  2b:	e8 00 00 00 00       	call   30 <Ssd1306::CheckSH1106()+0x30>
  30:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  34:	be 90 00 00 00       	mov    $0x90,%esi
  39:	48 89 c7             	mov    %rax,%rdi
  3c:	e8 00 00 00 00       	call   41 <Ssd1306::CheckSH1106()+0x41>
  41:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  45:	be b0 00 00 00       	mov    $0xb0,%esi
  4a:	48 89 c7             	mov    %rax,%rdi
  4d:	e8 00 00 00 00       	call   52 <Ssd1306::CheckSH1106()+0x52>
  52:	c7 45 ee 40 aa ee aa 	movl   $0xaaeeaa40,-0x12(%rbp)
  59:	c6 45 f2 ee          	movb   $0xee,-0xe(%rbp)
  5d:	48 8d 4d ee          	lea    -0x12(%rbp),%rcx
  61:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  65:	ba 05 00 00 00       	mov    $0x5,%edx
  6a:	48 89 ce             	mov    %rcx,%rsi
  6d:	48 89 c7             	mov    %rax,%rdi
  70:	e8 00 00 00 00       	call   75 <Ssd1306::CheckSH1106()+0x75>
  75:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  79:	be 00 00 00 00       	mov    $0x0,%esi
  7e:	48 89 c7             	mov    %rax,%rdi
  81:	e8 00 00 00 00       	call   86 <Ssd1306::CheckSH1106()+0x86>
  86:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8a:	be 90 00 00 00       	mov    $0x90,%esi
  8f:	48 89 c7             	mov    %rax,%rdi
  92:	e8 00 00 00 00       	call   97 <Ssd1306::CheckSH1106()+0x97>
  97:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  9b:	be b0 00 00 00       	mov    $0xb0,%esi
  a0:	48 89 c7             	mov    %rax,%rdi
  a3:	e8 00 00 00 00       	call   a8 <Ssd1306::CheckSH1106()+0xa8>
  a8:	c7 45 f3 00 00 00 00 	movl   $0x0,-0xd(%rbp)
  af:	c6 45 f7 00          	movb   $0x0,-0x9(%rbp)
  b3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  b7:	48 83 c0 14          	add    $0x14,%rax
  bb:	be 40 00 00 00       	mov    $0x40,%esi
  c0:	48 89 c7             	mov    %rax,%rdi
  c3:	e8 00 00 00 00       	call   c8 <Ssd1306::CheckSH1106()+0xc8>
  c8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  cc:	48 8d 48 14          	lea    0x14(%rax),%rcx
  d0:	48 8d 45 f3          	lea    -0xd(%rbp),%rax
  d4:	ba 05 00 00 00       	mov    $0x5,%edx
  d9:	48 89 c6             	mov    %rax,%rsi
  dc:	48 89 cf             	mov    %rcx,%rdi
  df:	e8 00 00 00 00       	call   e4 <Ssd1306::CheckSH1106()+0xe4>
  e4:	48 8d 45 f3          	lea    -0xd(%rbp),%rax
  e8:	48 8d 48 01          	lea    0x1(%rax),%rcx
  ec:	48 8d 45 ee          	lea    -0x12(%rbp),%rax
  f0:	48 83 c0 01          	add    $0x1,%rax
  f4:	ba 04 00 00 00       	mov    $0x4,%edx
  f9:	48 89 ce             	mov    %rcx,%rsi
  fc:	48 89 c7             	mov    %rax,%rdi
  ff:	e8 00 00 00 00       	call   104 <Ssd1306::CheckSH1106()+0x104>
 104:	85 c0                	test   %eax,%eax
 106:	0f 94 c2             	sete   %dl
 109:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 10d:	88 50 20             	mov    %dl,0x20(%rax)
 110:	90                   	nop
 111:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 115:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 11c:	00 00 
 11e:	74 05                	je     125 <Ssd1306::CheckSH1106()+0x125>
 120:	e8 00 00 00 00       	call   125 <Ssd1306::CheckSH1106()+0x125>
 125:	c9                   	leave  
 126:	c3                   	ret    

Disassembly of section .text._ZN7Ssd13065StartEv:

0000000000000000 <Ssd1306::Start()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  23:	48 83 c0 14          	add    $0x14,%rax
  27:	48 89 c7             	mov    %rax,%rdi
  2a:	e8 00 00 00 00       	call   2f <Ssd1306::Start()+0x2f>
  2f:	83 f0 01             	xor    $0x1,%eax
  32:	84 c0                	test   %al,%al
  34:	74 0a                	je     40 <Ssd1306::Start()+0x40>
  36:	b8 00 00 00 00       	mov    $0x0,%eax
  3b:	e9 f3 00 00 00       	jmp    133 <Ssd1306::Start()+0x133>
  40:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  44:	8b 40 1c             	mov    0x1c(%rax),%eax
  47:	85 c0                	test   %eax,%eax
  49:	74 0e                	je     59 <Ssd1306::Start()+0x59>
  4b:	85 c0                	test   %eax,%eax
  4d:	78 7e                	js     cd <Ssd1306::Start()+0xcd>
  4f:	83 e8 01             	sub    $0x1,%eax
  52:	83 f8 01             	cmp    $0x1,%eax
  55:	77 76                	ja     cd <Ssd1306::Start()+0xcd>
  57:	eb 3a                	jmp    93 <Ssd1306::Start()+0x93>
  59:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  60:	00 
  61:	eb 27                	jmp    8a <Ssd1306::Start()+0x8a>
  63:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 6a <Ssd1306::Start()+0x6a>
  6a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  6e:	48 01 d0             	add    %rdx,%rax
  71:	0f b6 00             	movzbl (%rax),%eax
  74:	0f b6 d0             	movzbl %al,%edx
  77:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  7b:	89 d6                	mov    %edx,%esi
  7d:	48 89 c7             	mov    %rax,%rdi
  80:	e8 00 00 00 00       	call   85 <Ssd1306::Start()+0x85>
  85:	48 83 45 e0 01       	addq   $0x1,-0x20(%rbp)
  8a:	48 83 7d e0 17       	cmpq   $0x17,-0x20(%rbp)
  8f:	76 d2                	jbe    63 <Ssd1306::Start()+0x63>
  91:	eb 41                	jmp    d4 <Ssd1306::Start()+0xd4>
  93:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  9a:	00 
  9b:	eb 27                	jmp    c4 <Ssd1306::Start()+0xc4>
  9d:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # a4 <Ssd1306::Start()+0xa4>
  a4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  a8:	48 01 d0             	add    %rdx,%rax
  ab:	0f b6 00             	movzbl (%rax),%eax
  ae:	0f b6 d0             	movzbl %al,%edx
  b1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  b5:	89 d6                	mov    %edx,%esi
  b7:	48 89 c7             	mov    %rax,%rdi
  ba:	e8 00 00 00 00       	call   bf <Ssd1306::Start()+0xbf>
  bf:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
  c4:	48 83 7d e8 17       	cmpq   $0x17,-0x18(%rbp)
  c9:	76 d2                	jbe    9d <Ssd1306::Start()+0x9d>
  cb:	eb 07                	jmp    d4 <Ssd1306::Start()+0xd4>
  cd:	b8 00 00 00 00       	mov    $0x0,%eax
  d2:	eb 5f                	jmp    133 <Ssd1306::Start()+0x133>
  d4:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  db:	00 
  dc:	eb 16                	jmp    f4 <Ssd1306::Start()+0xf4>
  de:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # e5 <Ssd1306::Start()+0xe5>
  e5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  e9:	48 01 d0             	add    %rdx,%rax
  ec:	c6 00 00             	movb   $0x0,(%rax)
  ef:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
  f4:	48 81 7d f0 85 00 00 	cmpq   $0x85,-0x10(%rbp)
  fb:	00 
  fc:	76 e0                	jbe    de <Ssd1306::Start()+0xde>
  fe:	c6 05 00 00 00 00 40 	movb   $0x40,0x0(%rip)        # 105 <Ssd1306::Start()+0x105>
 105:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 109:	48 89 c7             	mov    %rax,%rdi
 10c:	e8 00 00 00 00       	call   111 <Ssd1306::Start()+0x111>
 111:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 115:	48 89 c7             	mov    %rax,%rdi
 118:	e8 00 00 00 00       	call   11d <Ssd1306::Start()+0x11d>
 11d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 121:	be af 00 00 00       	mov    $0xaf,%esi
 126:	48 89 c7             	mov    %rax,%rdi
 129:	e8 00 00 00 00       	call   12e <Ssd1306::Start()+0x12e>
 12e:	b8 01 00 00 00       	mov    $0x1,%eax
 133:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
 137:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
 13e:	00 00 
 140:	74 05                	je     147 <Ssd1306::Start()+0x147>
 142:	e8 00 00 00 00       	call   147 <Ssd1306::Start()+0x147>
 147:	c9                   	leave  
 148:	c3                   	ret    

Disassembly of section .text._ZN7Ssd13063ClsEv:

0000000000000000 <Ssd1306::Cls()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
  26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2a:	0f b6 40 20          	movzbl 0x20(%rax),%eax
  2e:	84 c0                	test   %al,%al
  30:	74 07                	je     39 <Ssd1306::Cls()+0x39>
  32:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%rbp)
  39:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  40:	eb 6a                	jmp    ac <Ssd1306::Cls()+0xac>
  42:	8b 45 f0             	mov    -0x10(%rbp),%eax
  45:	0f b6 c0             	movzbl %al,%eax
  48:	83 e0 0f             	and    $0xf,%eax
  4b:	89 c2                	mov    %eax,%edx
  4d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  51:	89 d6                	mov    %edx,%esi
  53:	48 89 c7             	mov    %rax,%rdi
  56:	e8 00 00 00 00       	call   5b <Ssd1306::Cls()+0x5b>
  5b:	8b 45 f0             	mov    -0x10(%rbp),%eax
  5e:	83 c8 10             	or     $0x10,%eax
  61:	0f b6 d0             	movzbl %al,%edx
  64:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  68:	89 d6                	mov    %edx,%esi
  6a:	48 89 c7             	mov    %rax,%rdi
  6d:	e8 00 00 00 00       	call   72 <Ssd1306::Cls()+0x72>
  72:	8b 45 f4             	mov    -0xc(%rbp),%eax
  75:	83 c8 b0             	or     $0xffffffb0,%eax
  78:	0f b6 d0             	movzbl %al,%edx
  7b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7f:	89 d6                	mov    %edx,%esi
  81:	48 89 c7             	mov    %rax,%rdi
  84:	e8 00 00 00 00       	call   89 <Ssd1306::Cls()+0x89>
  89:	8b 45 f0             	mov    -0x10(%rbp),%eax
  8c:	8d 90 81 00 00 00    	lea    0x81(%rax),%edx
  92:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  96:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 9d <Ssd1306::Cls()+0x9d>
  9d:	48 89 ce             	mov    %rcx,%rsi
  a0:	48 89 c7             	mov    %rax,%rdi
  a3:	e8 00 00 00 00       	call   a8 <Ssd1306::Cls()+0xa8>
  a8:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  ac:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  b0:	8b 40 24             	mov    0x24(%rax),%eax
  b3:	39 45 f4             	cmp    %eax,-0xc(%rbp)
  b6:	72 8a                	jb     42 <Ssd1306::Cls()+0x42>
  b8:	8b 45 f0             	mov    -0x10(%rbp),%eax
  bb:	0f b6 c0             	movzbl %al,%eax
  be:	83 e0 0f             	and    $0xf,%eax
  c1:	89 c2                	mov    %eax,%edx
  c3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  c7:	89 d6                	mov    %edx,%esi
  c9:	48 89 c7             	mov    %rax,%rdi
  cc:	e8 00 00 00 00       	call   d1 <Ssd1306::Cls()+0xd1>
  d1:	8b 45 f0             	mov    -0x10(%rbp),%eax
  d4:	83 c8 10             	or     $0x10,%eax
  d7:	0f b6 d0             	movzbl %al,%edx
  da:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  de:	89 d6                	mov    %edx,%esi
  e0:	48 89 c7             	mov    %rax,%rdi
  e3:	e8 00 00 00 00       	call   e8 <Ssd1306::Cls()+0xe8>
  e8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  ec:	be b0 00 00 00       	mov    $0xb0,%esi
  f1:	48 89 c7             	mov    %rax,%rdi
  f4:	e8 00 00 00 00       	call   f9 <Ssd1306::Cls()+0xf9>
  f9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  fd:	c7 40 30 00 00 00 00 	movl   $0x0,0x30(%rax)
 104:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 108:	8b 50 0c             	mov    0xc(%rax),%edx
 10b:	89 d0                	mov    %edx,%eax
 10d:	c1 e0 02             	shl    $0x2,%eax
 110:	01 d0                	add    %edx,%eax
 112:	c1 e0 02             	shl    $0x2,%eax
 115:	01 d0                	add    %edx,%eax
 117:	89 c2                	mov    %eax,%edx
 119:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 11d:	48 8b 40 28          	mov    0x28(%rax),%rax
 121:	be 20 00 00 00       	mov    $0x20,%esi
 126:	48 89 c7             	mov    %rax,%rdi
 129:	e8 00 00 00 00       	call   12e <Ssd1306::Cls()+0x12e>
 12e:	90                   	nop
 12f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 133:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 13a:	00 00 
 13c:	74 05                	je     143 <Ssd1306::Cls()+0x143>
 13e:	e8 00 00 00 00       	call   143 <Ssd1306::Cls()+0x143>
 143:	c9                   	leave  
 144:	c3                   	ret    

Disassembly of section .text._ZN7Ssd13067PutCharEi:

0000000000000000 <Ssd1306::PutChar(int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10:	89 75 d4             	mov    %esi,-0x2c(%rbp)
  13:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1a:	00 00 
  1c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  20:	31 c0                	xor    %eax,%eax
  22:	83 7d d4 1f          	cmpl   $0x1f,-0x2c(%rbp)
  26:	7e 06                	jle    2e <Ssd1306::PutChar(int)+0x2e>
  28:	83 7d d4 7f          	cmpl   $0x7f,-0x2c(%rbp)
  2c:	7e 10                	jle    3e <Ssd1306::PutChar(int)+0x3e>
  2e:	c7 45 d4 20 00 00 00 	movl   $0x20,-0x2c(%rbp)
  35:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  3c:	eb 09                	jmp    47 <Ssd1306::PutChar(int)+0x47>
  3e:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  41:	83 e8 20             	sub    $0x20,%eax
  44:	89 45 ec             	mov    %eax,-0x14(%rbp)
  47:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4b:	48 8b 70 28          	mov    0x28(%rax),%rsi
  4f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  53:	8b 40 30             	mov    0x30(%rax),%eax
  56:	8d 48 01             	lea    0x1(%rax),%ecx
  59:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  5d:	89 4a 30             	mov    %ecx,0x30(%rdx)
  60:	89 c0                	mov    %eax,%eax
  62:	48 01 f0             	add    %rsi,%rax
  65:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  68:	88 10                	mov    %dl,(%rax)
  6a:	8b 55 ec             	mov    -0x14(%rbp),%edx
  6d:	89 d0                	mov    %edx,%eax
  6f:	c1 e0 03             	shl    $0x3,%eax
  72:	29 d0                	sub    %edx,%eax
  74:	48 98                	cltq   
  76:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 7d <Ssd1306::PutChar(int)+0x7d>
  7d:	48 01 d0             	add    %rdx,%rax
  80:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  84:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  88:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8c:	ba 07 00 00 00       	mov    $0x7,%edx
  91:	48 89 ce             	mov    %rcx,%rsi
  94:	48 89 c7             	mov    %rax,%rdi
  97:	e8 00 00 00 00       	call   9c <Ssd1306::PutChar(int)+0x9c>
  9c:	90                   	nop
  9d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  a1:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  a8:	00 00 
  aa:	74 05                	je     b1 <Ssd1306::PutChar(int)+0xb1>
  ac:	e8 00 00 00 00       	call   b1 <Ssd1306::PutChar(int)+0xb1>
  b1:	c9                   	leave  
  b2:	c3                   	ret    

Disassembly of section .text._ZN7Ssd13069PutStringEPKc:

0000000000000000 <Ssd1306::PutString(char const*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  27:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  2b:	eb 1d                	jmp    4a <Ssd1306::PutString(char const*)+0x4a>
  2d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  31:	0f b6 00             	movzbl (%rax),%eax
  34:	0f be d0             	movsbl %al,%edx
  37:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  3b:	89 d6                	mov    %edx,%esi
  3d:	48 89 c7             	mov    %rax,%rdi
  40:	e8 00 00 00 00       	call   45 <Ssd1306::PutString(char const*)+0x45>
  45:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
  4a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4e:	0f b6 00             	movzbl (%rax),%eax
  51:	84 c0                	test   %al,%al
  53:	75 d8                	jne    2d <Ssd1306::PutString(char const*)+0x2d>
  55:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  59:	0f b6 40 10          	movzbl 0x10(%rax),%eax
  5d:	84 c0                	test   %al,%al
  5f:	74 36                	je     97 <Ssd1306::PutString(char const*)+0x97>
  61:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  65:	c6 40 10 00          	movb   $0x0,0x10(%rax)
  69:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  6d:	48 2b 45 d0          	sub    -0x30(%rbp),%rax
  71:	89 45 ec             	mov    %eax,-0x14(%rbp)
  74:	eb 15                	jmp    8b <Ssd1306::PutString(char const*)+0x8b>
  76:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  7a:	be 20 00 00 00       	mov    $0x20,%esi
  7f:	48 89 c7             	mov    %rax,%rdi
  82:	e8 00 00 00 00       	call   87 <Ssd1306::PutString(char const*)+0x87>
  87:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
  8b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8f:	8b 40 08             	mov    0x8(%rax),%eax
  92:	39 45 ec             	cmp    %eax,-0x14(%rbp)
  95:	72 df                	jb     76 <Ssd1306::PutString(char const*)+0x76>
  97:	90                   	nop
  98:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  9c:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  a3:	00 00 
  a5:	74 05                	je     ac <Ssd1306::PutString(char const*)+0xac>
  a7:	e8 00 00 00 00       	call   ac <Ssd1306::PutString(char const*)+0xac>
  ac:	c9                   	leave  
  ad:	c3                   	ret    

Disassembly of section .text._ZN7Ssd13069ClearLineEj:

0000000000000000 <Ssd1306::ClearLine(unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  13:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1a:	00 00 
  1c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  20:	31 c0                	xor    %eax,%eax
  22:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  26:	8b 40 0c             	mov    0xc(%rax),%eax
  29:	39 45 e4             	cmp    %eax,-0x1c(%rbp)
  2c:	0f 97 c0             	seta   %al
  2f:	0f b6 c0             	movzbl %al,%eax
  32:	48 85 c0             	test   %rax,%rax
  35:	75 77                	jne    ae <Ssd1306::ClearLine(unsigned int)+0xae>
  37:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  3a:	83 e8 01             	sub    $0x1,%eax
  3d:	0f b6 d0             	movzbl %al,%edx
  40:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  44:	be 00 00 00 00       	mov    $0x0,%esi
  49:	48 89 c7             	mov    %rax,%rdi
  4c:	e8 00 00 00 00       	call   51 <Ssd1306::ClearLine(unsigned int)+0x51>
  51:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  55:	ba 81 00 00 00       	mov    $0x81,%edx
  5a:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 61 <Ssd1306::ClearLine(unsigned int)+0x61>
  61:	48 89 ce             	mov    %rcx,%rsi
  64:	48 89 c7             	mov    %rax,%rdi
  67:	e8 00 00 00 00       	call   6c <Ssd1306::ClearLine(unsigned int)+0x6c>
  6c:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  6f:	83 e8 01             	sub    $0x1,%eax
  72:	0f b6 d0             	movzbl %al,%edx
  75:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  79:	be 00 00 00 00       	mov    $0x0,%esi
  7e:	48 89 c7             	mov    %rax,%rdi
  81:	e8 00 00 00 00       	call   86 <Ssd1306::ClearLine(unsigned int)+0x86>
  86:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8a:	48 8b 50 28          	mov    0x28(%rax),%rdx
  8e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  92:	8b 40 30             	mov    0x30(%rax),%eax
  95:	89 c0                	mov    %eax,%eax
  97:	48 01 d0             	add    %rdx,%rax
  9a:	ba 15 00 00 00       	mov    $0x15,%edx
  9f:	be 20 00 00 00       	mov    $0x20,%esi
  a4:	48 89 c7             	mov    %rax,%rdi
  a7:	e8 00 00 00 00       	call   ac <Ssd1306::ClearLine(unsigned int)+0xac>
  ac:	eb 01                	jmp    af <Ssd1306::ClearLine(unsigned int)+0xaf>
  ae:	90                   	nop
  af:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  b3:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  ba:	00 00 
  bc:	74 05                	je     c3 <Ssd1306::ClearLine(unsigned int)+0xc3>
  be:	e8 00 00 00 00       	call   c3 <Ssd1306::ClearLine(unsigned int)+0xc3>
  c3:	c9                   	leave  
  c4:	c3                   	ret    

Disassembly of section .text._ZN7Ssd13068TextLineEjPKcj:

0000000000000000 <Ssd1306::TextLine(unsigned int, char const*, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  13:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  17:	89 4d e0             	mov    %ecx,-0x20(%rbp)
  1a:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  21:	00 00 
  23:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  27:	31 c0                	xor    %eax,%eax
  29:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2d:	8b 40 0c             	mov    0xc(%rax),%eax
  30:	39 45 e4             	cmp    %eax,-0x1c(%rbp)
  33:	0f 97 c0             	seta   %al
  36:	0f b6 c0             	movzbl %al,%eax
  39:	48 85 c0             	test   %rax,%rax
  3c:	75 32                	jne    70 <Ssd1306::TextLine(unsigned int, char const*, unsigned int)+0x70>
  3e:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  41:	83 e8 01             	sub    $0x1,%eax
  44:	0f b6 d0             	movzbl %al,%edx
  47:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4b:	be 00 00 00 00       	mov    $0x0,%esi
  50:	48 89 c7             	mov    %rax,%rdi
  53:	e8 00 00 00 00       	call   58 <Ssd1306::TextLine(unsigned int, char const*, unsigned int)+0x58>
  58:	8b 55 e0             	mov    -0x20(%rbp),%edx
  5b:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  5f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  63:	48 89 ce             	mov    %rcx,%rsi
  66:	48 89 c7             	mov    %rax,%rdi
  69:	e8 00 00 00 00       	call   6e <Ssd1306::TextLine(unsigned int, char const*, unsigned int)+0x6e>
  6e:	eb 01                	jmp    71 <Ssd1306::TextLine(unsigned int, char const*, unsigned int)+0x71>
  70:	90                   	nop
  71:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  75:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  7c:	00 00 
  7e:	74 05                	je     85 <Ssd1306::TextLine(unsigned int, char const*, unsigned int)+0x85>
  80:	e8 00 00 00 00       	call   85 <Ssd1306::TextLine(unsigned int, char const*, unsigned int)+0x85>
  85:	c9                   	leave  
  86:	c3                   	ret    

Disassembly of section .text._ZN7Ssd13064TextEPKcj:

0000000000000000 <Ssd1306::Text(char const*, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  14:	89 55 dc             	mov    %edx,-0x24(%rbp)
  17:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1e:	00 00 
  20:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  24:	31 c0                	xor    %eax,%eax
  26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2a:	8b 40 08             	mov    0x8(%rax),%eax
  2d:	39 45 dc             	cmp    %eax,-0x24(%rbp)
  30:	76 0a                	jbe    3c <Ssd1306::Text(char const*, unsigned int)+0x3c>
  32:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  36:	8b 40 08             	mov    0x8(%rax),%eax
  39:	89 45 dc             	mov    %eax,-0x24(%rbp)
  3c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  43:	eb 22                	jmp    67 <Ssd1306::Text(char const*, unsigned int)+0x67>
  45:	8b 55 f4             	mov    -0xc(%rbp),%edx
  48:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4c:	48 01 d0             	add    %rdx,%rax
  4f:	0f b6 00             	movzbl (%rax),%eax
  52:	0f be d0             	movsbl %al,%edx
  55:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  59:	89 d6                	mov    %edx,%esi
  5b:	48 89 c7             	mov    %rax,%rdi
  5e:	e8 00 00 00 00       	call   63 <Ssd1306::Text(char const*, unsigned int)+0x63>
  63:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  67:	8b 45 f4             	mov    -0xc(%rbp),%eax
  6a:	3b 45 dc             	cmp    -0x24(%rbp),%eax
  6d:	72 d6                	jb     45 <Ssd1306::Text(char const*, unsigned int)+0x45>
  6f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  73:	0f b6 40 10          	movzbl 0x10(%rax),%eax
  77:	84 c0                	test   %al,%al
  79:	74 2b                	je     a6 <Ssd1306::Text(char const*, unsigned int)+0xa6>
  7b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7f:	c6 40 10 00          	movb   $0x0,0x10(%rax)
  83:	eb 15                	jmp    9a <Ssd1306::Text(char const*, unsigned int)+0x9a>
  85:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  89:	be 20 00 00 00       	mov    $0x20,%esi
  8e:	48 89 c7             	mov    %rax,%rdi
  91:	e8 00 00 00 00       	call   96 <Ssd1306::Text(char const*, unsigned int)+0x96>
  96:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  9a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  9e:	8b 40 08             	mov    0x8(%rax),%eax
  a1:	39 45 f4             	cmp    %eax,-0xc(%rbp)
  a4:	72 df                	jb     85 <Ssd1306::Text(char const*, unsigned int)+0x85>
  a6:	90                   	nop
  a7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  ab:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  b2:	00 00 
  b4:	74 05                	je     bb <Ssd1306::Text(char const*, unsigned int)+0xbb>
  b6:	e8 00 00 00 00       	call   bb <Ssd1306::Text(char const*, unsigned int)+0xbb>
  bb:	c9                   	leave  
  bc:	c3                   	ret    

Disassembly of section .text._ZN7Ssd130612SetCursorPosEjj:

0000000000000000 <Ssd1306::SetCursorPos(unsigned int, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  13:	89 55 e0             	mov    %edx,-0x20(%rbp)
  16:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1d:	00 00 
  1f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  23:	31 c0                	xor    %eax,%eax
  25:	83 7d e4 14          	cmpl   $0x14,-0x1c(%rbp)
  29:	0f 97 c0             	seta   %al
  2c:	0f b6 c0             	movzbl %al,%eax
  2f:	48 85 c0             	test   %rax,%rax
  32:	75 15                	jne    49 <Ssd1306::SetCursorPos(unsigned int, unsigned int)+0x49>
  34:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  38:	8b 40 0c             	mov    0xc(%rax),%eax
  3b:	39 45 e0             	cmp    %eax,-0x20(%rbp)
  3e:	0f 93 c0             	setae  %al
  41:	0f b6 c0             	movzbl %al,%eax
  44:	48 85 c0             	test   %rax,%rax
  47:	74 07                	je     50 <Ssd1306::SetCursorPos(unsigned int, unsigned int)+0x50>
  49:	b8 01 00 00 00       	mov    $0x1,%eax
  4e:	eb 05                	jmp    55 <Ssd1306::SetCursorPos(unsigned int, unsigned int)+0x55>
  50:	b8 00 00 00 00       	mov    $0x0,%eax
  55:	0f b6 c0             	movzbl %al,%eax
  58:	48 85 c0             	test   %rax,%rax
  5b:	0f 85 f3 00 00 00    	jne    154 <Ssd1306::SetCursorPos(unsigned int, unsigned int)+0x154>
  61:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  64:	89 c2                	mov    %eax,%edx
  66:	89 d0                	mov    %edx,%eax
  68:	01 c0                	add    %eax,%eax
  6a:	01 d0                	add    %edx,%eax
  6c:	01 c0                	add    %eax,%eax
  6e:	0f b6 c0             	movzbl %al,%eax
  71:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  74:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  78:	0f b6 40 20          	movzbl 0x20(%rax),%eax
  7c:	84 c0                	test   %al,%al
  7e:	74 0c                	je     8c <Ssd1306::SetCursorPos(unsigned int, unsigned int)+0x8c>
  80:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  83:	83 c0 04             	add    $0x4,%eax
  86:	0f b6 c0             	movzbl %al,%eax
  89:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  8c:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8f:	0f b6 c0             	movzbl %al,%eax
  92:	83 e0 0f             	and    $0xf,%eax
  95:	89 c2                	mov    %eax,%edx
  97:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  9b:	89 d6                	mov    %edx,%esi
  9d:	48 89 c7             	mov    %rax,%rdi
  a0:	e8 00 00 00 00       	call   a5 <Ssd1306::SetCursorPos(unsigned int, unsigned int)+0xa5>
  a5:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  a8:	c1 e8 04             	shr    $0x4,%eax
  ab:	83 c8 10             	or     $0x10,%eax
  ae:	0f b6 d0             	movzbl %al,%edx
  b1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  b5:	89 d6                	mov    %edx,%esi
  b7:	48 89 c7             	mov    %rax,%rdi
  ba:	e8 00 00 00 00       	call   bf <Ssd1306::SetCursorPos(unsigned int, unsigned int)+0xbf>
  bf:	8b 45 e0             	mov    -0x20(%rbp),%eax
  c2:	83 c8 b0             	or     $0xffffffb0,%eax
  c5:	0f b6 d0             	movzbl %al,%edx
  c8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  cc:	89 d6                	mov    %edx,%esi
  ce:	48 89 c7             	mov    %rax,%rdi
  d1:	e8 00 00 00 00       	call   d6 <Ssd1306::SetCursorPos(unsigned int, unsigned int)+0xd6>
  d6:	8b 45 e0             	mov    -0x20(%rbp),%eax
  d9:	89 c2                	mov    %eax,%edx
  db:	89 d0                	mov    %edx,%eax
  dd:	c1 e0 02             	shl    $0x2,%eax
  e0:	01 d0                	add    %edx,%eax
  e2:	c1 e0 02             	shl    $0x2,%eax
  e5:	01 c2                	add    %eax,%edx
  e7:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  ea:	89 c1                	mov    %eax,%ecx
  ec:	b8 ab aa aa aa       	mov    $0xaaaaaaab,%eax
  f1:	48 0f af c1          	imul   %rcx,%rax
  f5:	48 c1 e8 20          	shr    $0x20,%rax
  f9:	c1 e8 02             	shr    $0x2,%eax
  fc:	01 d0                	add    %edx,%eax
  fe:	0f b7 d0             	movzwl %ax,%edx
 101:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 105:	89 50 30             	mov    %edx,0x30(%rax)
 108:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 10c:	8b 40 34             	mov    0x34(%rax),%eax
 10f:	83 f8 01             	cmp    $0x1,%eax
 112:	75 1a                	jne    12e <Ssd1306::SetCursorPos(unsigned int, unsigned int)+0x12e>
 114:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 118:	48 89 c7             	mov    %rax,%rdi
 11b:	e8 00 00 00 00       	call   120 <Ssd1306::SetCursorPos(unsigned int, unsigned int)+0x120>
 120:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 124:	48 89 c7             	mov    %rax,%rdi
 127:	e8 00 00 00 00       	call   12c <Ssd1306::SetCursorPos(unsigned int, unsigned int)+0x12c>
 12c:	eb 27                	jmp    155 <Ssd1306::SetCursorPos(unsigned int, unsigned int)+0x155>
 12e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 132:	8b 40 34             	mov    0x34(%rax),%eax
 135:	83 f8 03             	cmp    $0x3,%eax
 138:	75 1b                	jne    155 <Ssd1306::SetCursorPos(unsigned int, unsigned int)+0x155>
 13a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 13e:	48 89 c7             	mov    %rax,%rdi
 141:	e8 00 00 00 00       	call   146 <Ssd1306::SetCursorPos(unsigned int, unsigned int)+0x146>
 146:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 14a:	48 89 c7             	mov    %rax,%rdi
 14d:	e8 00 00 00 00       	call   152 <Ssd1306::SetCursorPos(unsigned int, unsigned int)+0x152>
 152:	eb 01                	jmp    155 <Ssd1306::SetCursorPos(unsigned int, unsigned int)+0x155>
 154:	90                   	nop
 155:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 159:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 160:	00 00 
 162:	74 05                	je     169 <Ssd1306::SetCursorPos(unsigned int, unsigned int)+0x169>
 164:	e8 00 00 00 00       	call   169 <Ssd1306::SetCursorPos(unsigned int, unsigned int)+0x169>
 169:	c9                   	leave  
 16a:	c3                   	ret    

Disassembly of section .text._ZN7Ssd13068SetSleepEb:

0000000000000000 <Ssd1306::SetSleep(bool)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	88 45 e4             	mov    %al,-0x1c(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	80 7d e4 00          	cmpb   $0x0,-0x1c(%rbp)
  28:	74 13                	je     3d <Ssd1306::SetSleep(bool)+0x3d>
  2a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2e:	be ae 00 00 00       	mov    $0xae,%esi
  33:	48 89 c7             	mov    %rax,%rdi
  36:	e8 00 00 00 00       	call   3b <Ssd1306::SetSleep(bool)+0x3b>
  3b:	eb 11                	jmp    4e <Ssd1306::SetSleep(bool)+0x4e>
  3d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  41:	be af 00 00 00       	mov    $0xaf,%esi
  46:	48 89 c7             	mov    %rax,%rdi
  49:	e8 00 00 00 00       	call   4e <Ssd1306::SetSleep(bool)+0x4e>
  4e:	90                   	nop
  4f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  53:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  5a:	00 00 
  5c:	74 05                	je     63 <Ssd1306::SetSleep(bool)+0x63>
  5e:	e8 00 00 00 00       	call   63 <Ssd1306::SetSleep(bool)+0x63>
  63:	c9                   	leave  
  64:	c3                   	ret    

Disassembly of section .text._ZN7Ssd130611SetContrastEh:

0000000000000000 <Ssd1306::SetContrast(unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	88 45 e4             	mov    %al,-0x1c(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  28:	be 81 00 00 00       	mov    $0x81,%esi
  2d:	48 89 c7             	mov    %rax,%rdi
  30:	e8 00 00 00 00       	call   35 <Ssd1306::SetContrast(unsigned char)+0x35>
  35:	0f b6 55 e4          	movzbl -0x1c(%rbp),%edx
  39:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3d:	89 d6                	mov    %edx,%esi
  3f:	48 89 c7             	mov    %rax,%rdi
  42:	e8 00 00 00 00       	call   47 <Ssd1306::SetContrast(unsigned char)+0x47>
  47:	90                   	nop
  48:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4c:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  53:	00 00 
  55:	74 05                	je     5c <Ssd1306::SetContrast(unsigned char)+0x5c>
  57:	e8 00 00 00 00       	call   5c <Ssd1306::SetContrast(unsigned char)+0x5c>
  5c:	c9                   	leave  
  5d:	c3                   	ret    

Disassembly of section .text._ZN7Ssd130617SetFlipVerticallyEb:

0000000000000000 <Ssd1306::SetFlipVertically(bool)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	88 45 e4             	mov    %al,-0x1c(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	80 7d e4 00          	cmpb   $0x0,-0x1c(%rbp)
  28:	74 24                	je     4e <Ssd1306::SetFlipVertically(bool)+0x4e>
  2a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2e:	be a0 00 00 00       	mov    $0xa0,%esi
  33:	48 89 c7             	mov    %rax,%rdi
  36:	e8 00 00 00 00       	call   3b <Ssd1306::SetFlipVertically(bool)+0x3b>
  3b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3f:	be c0 00 00 00       	mov    $0xc0,%esi
  44:	48 89 c7             	mov    %rax,%rdi
  47:	e8 00 00 00 00       	call   4c <Ssd1306::SetFlipVertically(bool)+0x4c>
  4c:	eb 22                	jmp    70 <Ssd1306::SetFlipVertically(bool)+0x70>
  4e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  52:	be a1 00 00 00       	mov    $0xa1,%esi
  57:	48 89 c7             	mov    %rax,%rdi
  5a:	e8 00 00 00 00       	call   5f <Ssd1306::SetFlipVertically(bool)+0x5f>
  5f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  63:	be c8 00 00 00       	mov    $0xc8,%esi
  68:	48 89 c7             	mov    %rax,%rdi
  6b:	e8 00 00 00 00       	call   70 <Ssd1306::SetFlipVertically(bool)+0x70>
  70:	90                   	nop
  71:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  75:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  7c:	00 00 
  7e:	74 05                	je     85 <Ssd1306::SetFlipVertically(bool)+0x85>
  80:	e8 00 00 00 00       	call   85 <Ssd1306::SetFlipVertically(bool)+0x85>
  85:	c9                   	leave  
  86:	c3                   	ret    

Disassembly of section .text._ZN7Ssd130611InitMembersEv:

0000000000000000 <Ssd1306::InitMembers()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	c7 40 08 15 00 00 00 	movl   $0x15,0x8(%rax)
  2a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2e:	8b 40 1c             	mov    0x1c(%rax),%eax
  31:	85 c0                	test   %eax,%eax
  33:	74 0e                	je     43 <Ssd1306::InitMembers()+0x43>
  35:	85 c0                	test   %eax,%eax
  37:	78 24                	js     5d <Ssd1306::InitMembers()+0x5d>
  39:	83 e8 01             	sub    $0x1,%eax
  3c:	83 f8 01             	cmp    $0x1,%eax
  3f:	77 1c                	ja     5d <Ssd1306::InitMembers()+0x5d>
  41:	eb 0d                	jmp    50 <Ssd1306::InitMembers()+0x50>
  43:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  47:	c7 40 0c 08 00 00 00 	movl   $0x8,0xc(%rax)
  4e:	eb 19                	jmp    69 <Ssd1306::InitMembers()+0x69>
  50:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  54:	c7 40 0c 04 00 00 00 	movl   $0x4,0xc(%rax)
  5b:	eb 0c                	jmp    69 <Ssd1306::InitMembers()+0x69>
  5d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  61:	c7 40 0c 08 00 00 00 	movl   $0x8,0xc(%rax)
  68:	90                   	nop
  69:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  6d:	8b 40 1c             	mov    0x1c(%rax),%eax
  70:	85 c0                	test   %eax,%eax
  72:	75 07                	jne    7b <Ssd1306::InitMembers()+0x7b>
  74:	ba 08 00 00 00       	mov    $0x8,%edx
  79:	eb 05                	jmp    80 <Ssd1306::InitMembers()+0x80>
  7b:	ba 04 00 00 00       	mov    $0x4,%edx
  80:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  84:	89 50 24             	mov    %edx,0x24(%rax)
  87:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8b:	8b 50 0c             	mov    0xc(%rax),%edx
  8e:	89 d0                	mov    %edx,%eax
  90:	c1 e0 02             	shl    $0x2,%eax
  93:	01 d0                	add    %edx,%eax
  95:	c1 e0 02             	shl    $0x2,%eax
  98:	01 d0                	add    %edx,%eax
  9a:	89 c0                	mov    %eax,%eax
  9c:	48 89 c7             	mov    %rax,%rdi
  9f:	e8 00 00 00 00       	call   a4 <Ssd1306::InitMembers()+0xa4>
  a4:	48 89 c2             	mov    %rax,%rdx
  a7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  ab:	48 89 50 28          	mov    %rdx,0x28(%rax)
  af:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  b3:	8b 50 0c             	mov    0xc(%rax),%edx
  b6:	89 d0                	mov    %edx,%eax
  b8:	c1 e0 02             	shl    $0x2,%eax
  bb:	01 d0                	add    %edx,%eax
  bd:	c1 e0 02             	shl    $0x2,%eax
  c0:	01 d0                	add    %edx,%eax
  c2:	89 c2                	mov    %eax,%edx
  c4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  c8:	48 8b 40 28          	mov    0x28(%rax),%rax
  cc:	be 20 00 00 00       	mov    $0x20,%esi
  d1:	48 89 c7             	mov    %rax,%rdi
  d4:	e8 00 00 00 00       	call   d9 <Ssd1306::InitMembers()+0xd9>
  d9:	90                   	nop
  da:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  de:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  e5:	00 00 
  e7:	74 05                	je     ee <Ssd1306::InitMembers()+0xee>
  e9:	e8 00 00 00 00       	call   ee <Ssd1306::InitMembers()+0xee>
  ee:	c9                   	leave  
  ef:	c3                   	ret    

Disassembly of section .text._ZN7Ssd130611SendCommandEh:

0000000000000000 <Ssd1306::SendCommand(unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	88 45 e4             	mov    %al,-0x1c(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  28:	48 8d 48 14          	lea    0x14(%rax),%rcx
  2c:	0f b6 45 e4          	movzbl -0x1c(%rbp),%eax
  30:	89 c2                	mov    %eax,%edx
  32:	be 00 00 00 00       	mov    $0x0,%esi
  37:	48 89 cf             	mov    %rcx,%rdi
  3a:	e8 00 00 00 00       	call   3f <Ssd1306::SendCommand(unsigned char)+0x3f>
  3f:	90                   	nop
  40:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  44:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  4b:	00 00 
  4d:	74 05                	je     54 <Ssd1306::SendCommand(unsigned char)+0x54>
  4f:	e8 00 00 00 00       	call   54 <Ssd1306::SendCommand(unsigned char)+0x54>
  54:	c9                   	leave  
  55:	c3                   	ret    

Disassembly of section .text._ZN7Ssd13068SendDataEPKhj:

0000000000000000 <Ssd1306::SendData(unsigned char const*, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  14:	89 55 dc             	mov    %edx,-0x24(%rbp)
  17:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1e:	00 00 
  20:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  24:	31 c0                	xor    %eax,%eax
  26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2a:	48 8d 48 14          	lea    0x14(%rax),%rcx
  2e:	8b 55 dc             	mov    -0x24(%rbp),%edx
  31:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  35:	48 89 c6             	mov    %rax,%rsi
  38:	48 89 cf             	mov    %rcx,%rdi
  3b:	e8 00 00 00 00       	call   40 <Ssd1306::SendData(unsigned char const*, unsigned int)+0x40>
  40:	90                   	nop
  41:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  45:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  4c:	00 00 
  4e:	74 05                	je     55 <Ssd1306::SendData(unsigned char const*, unsigned int)+0x55>
  50:	e8 00 00 00 00       	call   55 <Ssd1306::SendData(unsigned char const*, unsigned int)+0x55>
  55:	c9                   	leave  
  56:	c3                   	ret    

Disassembly of section .text._ZN7Ssd13069SetCursorEj:

0000000000000000 <Ssd1306::SetCursor(unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  13:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1a:	00 00 
  1c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  20:	31 c0                	xor    %eax,%eax
  22:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  26:	8b 40 34             	mov    0x34(%rax),%eax
  29:	39 45 e4             	cmp    %eax,-0x1c(%rbp)
  2c:	74 4e                	je     7c <Ssd1306::SetCursor(unsigned int)+0x7c>
  2e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  32:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  35:	89 50 34             	mov    %edx,0x34(%rax)
  38:	83 7d e4 03          	cmpl   $0x3,-0x1c(%rbp)
  3c:	74 30                	je     6e <Ssd1306::SetCursor(unsigned int)+0x6e>
  3e:	83 7d e4 03          	cmpl   $0x3,-0x1c(%rbp)
  42:	77 3b                	ja     7f <Ssd1306::SetCursor(unsigned int)+0x7f>
  44:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  48:	74 08                	je     52 <Ssd1306::SetCursor(unsigned int)+0x52>
  4a:	83 7d e4 01          	cmpl   $0x1,-0x1c(%rbp)
  4e:	74 10                	je     60 <Ssd1306::SetCursor(unsigned int)+0x60>
  50:	eb 2d                	jmp    7f <Ssd1306::SetCursor(unsigned int)+0x7f>
  52:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  56:	48 89 c7             	mov    %rax,%rdi
  59:	e8 00 00 00 00       	call   5e <Ssd1306::SetCursor(unsigned int)+0x5e>
  5e:	eb 20                	jmp    80 <Ssd1306::SetCursor(unsigned int)+0x80>
  60:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  64:	48 89 c7             	mov    %rax,%rdi
  67:	e8 00 00 00 00       	call   6c <Ssd1306::SetCursor(unsigned int)+0x6c>
  6c:	eb 12                	jmp    80 <Ssd1306::SetCursor(unsigned int)+0x80>
  6e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  72:	48 89 c7             	mov    %rax,%rdi
  75:	e8 00 00 00 00       	call   7a <Ssd1306::SetCursor(unsigned int)+0x7a>
  7a:	eb 04                	jmp    80 <Ssd1306::SetCursor(unsigned int)+0x80>
  7c:	90                   	nop
  7d:	eb 01                	jmp    80 <Ssd1306::SetCursor(unsigned int)+0x80>
  7f:	90                   	nop
  80:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  84:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  8b:	00 00 
  8d:	74 05                	je     94 <Ssd1306::SetCursor(unsigned int)+0x94>
  8f:	e8 00 00 00 00       	call   94 <Ssd1306::SetCursor(unsigned int)+0x94>
  94:	c9                   	leave  
  95:	c3                   	ret    

Disassembly of section .text._ZN7Ssd130611SetCursorOnEv:

0000000000000000 <Ssd1306::SetCursorOn()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  23:	8b 48 30             	mov    0x30(%rax),%ecx
  26:	89 ca                	mov    %ecx,%edx
  28:	b8 87 61 18 86       	mov    $0x86186187,%eax
  2d:	48 0f af c2          	imul   %rdx,%rax
  31:	48 c1 e8 20          	shr    $0x20,%rax
  35:	48 89 c2             	mov    %rax,%rdx
  38:	89 c8                	mov    %ecx,%eax
  3a:	29 d0                	sub    %edx,%eax
  3c:	d1 e8                	shr    %eax
  3e:	01 d0                	add    %edx,%eax
  40:	c1 e8 04             	shr    $0x4,%eax
  43:	89 c2                	mov    %eax,%edx
  45:	89 d0                	mov    %edx,%eax
  47:	c1 e0 02             	shl    $0x2,%eax
  4a:	01 d0                	add    %edx,%eax
  4c:	c1 e0 02             	shl    $0x2,%eax
  4f:	01 d0                	add    %edx,%eax
  51:	29 c1                	sub    %eax,%ecx
  53:	89 ca                	mov    %ecx,%edx
  55:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  59:	88 50 39             	mov    %dl,0x39(%rax)
  5c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  60:	8b 40 30             	mov    0x30(%rax),%eax
  63:	89 c1                	mov    %eax,%ecx
  65:	ba 87 61 18 86       	mov    $0x86186187,%edx
  6a:	48 0f af d1          	imul   %rcx,%rdx
  6e:	48 c1 ea 20          	shr    $0x20,%rdx
  72:	29 d0                	sub    %edx,%eax
  74:	d1 e8                	shr    %eax
  76:	01 d0                	add    %edx,%eax
  78:	c1 e8 04             	shr    $0x4,%eax
  7b:	89 c2                	mov    %eax,%edx
  7d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  81:	88 50 3a             	mov    %dl,0x3a(%rax)
  84:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  88:	48 8b 50 28          	mov    0x28(%rax),%rdx
  8c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  90:	8b 40 30             	mov    0x30(%rax),%eax
  93:	89 c0                	mov    %eax,%eax
  95:	48 01 d0             	add    %rdx,%rax
  98:	0f b6 00             	movzbl (%rax),%eax
  9b:	8d 50 e0             	lea    -0x20(%rax),%edx
  9e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  a2:	88 50 38             	mov    %dl,0x38(%rax)
  a5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  a9:	0f b6 40 38          	movzbl 0x38(%rax),%eax
  ad:	0f b6 d0             	movzbl %al,%edx
  b0:	89 d0                	mov    %edx,%eax
  b2:	c1 e0 03             	shl    $0x3,%eax
  b5:	29 d0                	sub    %edx,%eax
  b7:	48 98                	cltq   
  b9:	48 8d 50 01          	lea    0x1(%rax),%rdx
  bd:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # c4 <Ssd1306::SetCursorOn()+0xc4>
  c4:	48 01 d0             	add    %rdx,%rax
  c7:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  cb:	c6 45 f1 40          	movb   $0x40,-0xf(%rbp)
  cf:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%rbp)
  d6:	eb 1c                	jmp    f4 <Ssd1306::SetCursorOn()+0xf4>
  d8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  dc:	0f b6 00             	movzbl (%rax),%eax
  df:	83 c8 80             	or     $0xffffff80,%eax
  e2:	89 c2                	mov    %eax,%edx
  e4:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  e7:	88 54 05 f1          	mov    %dl,-0xf(%rbp,%rax,1)
  eb:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
  f0:	83 45 e4 01          	addl   $0x1,-0x1c(%rbp)
  f4:	83 7d e4 06          	cmpl   $0x6,-0x1c(%rbp)
  f8:	76 de                	jbe    d8 <Ssd1306::SetCursorOn()+0xd8>
  fa:	48 8d 4d f1          	lea    -0xf(%rbp),%rcx
  fe:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 102:	ba 07 00 00 00       	mov    $0x7,%edx
 107:	48 89 ce             	mov    %rcx,%rsi
 10a:	48 89 c7             	mov    %rax,%rdi
 10d:	e8 00 00 00 00       	call   112 <Ssd1306::SetCursorOn()+0x112>
 112:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 116:	0f b6 40 3a          	movzbl 0x3a(%rax),%eax
 11a:	0f b6 d0             	movzbl %al,%edx
 11d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 121:	0f b6 40 39          	movzbl 0x39(%rax),%eax
 125:	0f b6 c8             	movzbl %al,%ecx
 128:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 12c:	89 ce                	mov    %ecx,%esi
 12e:	48 89 c7             	mov    %rax,%rdi
 131:	e8 00 00 00 00       	call   136 <Ssd1306::SetCursorOn()+0x136>
 136:	90                   	nop
 137:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 13b:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 142:	00 00 
 144:	74 05                	je     14b <Ssd1306::SetCursorOn()+0x14b>
 146:	e8 00 00 00 00       	call   14b <Ssd1306::SetCursorOn()+0x14b>
 14b:	c9                   	leave  
 14c:	c3                   	ret    

Disassembly of section .text._ZN7Ssd130616SetCursorBlinkOnEv:

0000000000000000 <Ssd1306::SetCursorBlinkOn()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  23:	8b 48 30             	mov    0x30(%rax),%ecx
  26:	89 ca                	mov    %ecx,%edx
  28:	b8 87 61 18 86       	mov    $0x86186187,%eax
  2d:	48 0f af c2          	imul   %rdx,%rax
  31:	48 c1 e8 20          	shr    $0x20,%rax
  35:	48 89 c2             	mov    %rax,%rdx
  38:	89 c8                	mov    %ecx,%eax
  3a:	29 d0                	sub    %edx,%eax
  3c:	d1 e8                	shr    %eax
  3e:	01 d0                	add    %edx,%eax
  40:	c1 e8 04             	shr    $0x4,%eax
  43:	89 c2                	mov    %eax,%edx
  45:	89 d0                	mov    %edx,%eax
  47:	c1 e0 02             	shl    $0x2,%eax
  4a:	01 d0                	add    %edx,%eax
  4c:	c1 e0 02             	shl    $0x2,%eax
  4f:	01 d0                	add    %edx,%eax
  51:	29 c1                	sub    %eax,%ecx
  53:	89 ca                	mov    %ecx,%edx
  55:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  59:	88 50 39             	mov    %dl,0x39(%rax)
  5c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  60:	8b 40 30             	mov    0x30(%rax),%eax
  63:	89 c1                	mov    %eax,%ecx
  65:	ba 87 61 18 86       	mov    $0x86186187,%edx
  6a:	48 0f af d1          	imul   %rcx,%rdx
  6e:	48 c1 ea 20          	shr    $0x20,%rdx
  72:	29 d0                	sub    %edx,%eax
  74:	d1 e8                	shr    %eax
  76:	01 d0                	add    %edx,%eax
  78:	c1 e8 04             	shr    $0x4,%eax
  7b:	89 c2                	mov    %eax,%edx
  7d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  81:	88 50 3a             	mov    %dl,0x3a(%rax)
  84:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  88:	48 8b 50 28          	mov    0x28(%rax),%rdx
  8c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  90:	8b 40 30             	mov    0x30(%rax),%eax
  93:	89 c0                	mov    %eax,%eax
  95:	48 01 d0             	add    %rdx,%rax
  98:	0f b6 00             	movzbl (%rax),%eax
  9b:	8d 50 e0             	lea    -0x20(%rax),%edx
  9e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  a2:	88 50 38             	mov    %dl,0x38(%rax)
  a5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  a9:	0f b6 40 38          	movzbl 0x38(%rax),%eax
  ad:	0f b6 d0             	movzbl %al,%edx
  b0:	89 d0                	mov    %edx,%eax
  b2:	c1 e0 03             	shl    $0x3,%eax
  b5:	29 d0                	sub    %edx,%eax
  b7:	48 98                	cltq   
  b9:	48 8d 50 01          	lea    0x1(%rax),%rdx
  bd:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # c4 <Ssd1306::SetCursorBlinkOn()+0xc4>
  c4:	48 01 d0             	add    %rdx,%rax
  c7:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  cb:	c6 45 f1 40          	movb   $0x40,-0xf(%rbp)
  cf:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%rbp)
  d6:	eb 1b                	jmp    f3 <Ssd1306::SetCursorBlinkOn()+0xf3>
  d8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  dc:	0f b6 00             	movzbl (%rax),%eax
  df:	f7 d0                	not    %eax
  e1:	89 c2                	mov    %eax,%edx
  e3:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  e6:	88 54 05 f1          	mov    %dl,-0xf(%rbp,%rax,1)
  ea:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
  ef:	83 45 e4 01          	addl   $0x1,-0x1c(%rbp)
  f3:	83 7d e4 06          	cmpl   $0x6,-0x1c(%rbp)
  f7:	76 df                	jbe    d8 <Ssd1306::SetCursorBlinkOn()+0xd8>
  f9:	48 8d 4d f1          	lea    -0xf(%rbp),%rcx
  fd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 101:	ba 07 00 00 00       	mov    $0x7,%edx
 106:	48 89 ce             	mov    %rcx,%rsi
 109:	48 89 c7             	mov    %rax,%rdi
 10c:	e8 00 00 00 00       	call   111 <Ssd1306::SetCursorBlinkOn()+0x111>
 111:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 115:	0f b6 40 3a          	movzbl 0x3a(%rax),%eax
 119:	0f b6 d0             	movzbl %al,%edx
 11c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 120:	0f b6 40 39          	movzbl 0x39(%rax),%eax
 124:	0f b6 c8             	movzbl %al,%ecx
 127:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 12b:	89 ce                	mov    %ecx,%esi
 12d:	48 89 c7             	mov    %rax,%rdi
 130:	e8 00 00 00 00       	call   135 <Ssd1306::SetCursorBlinkOn()+0x135>
 135:	90                   	nop
 136:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 13a:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 141:	00 00 
 143:	74 05                	je     14a <Ssd1306::SetCursorBlinkOn()+0x14a>
 145:	e8 00 00 00 00       	call   14a <Ssd1306::SetCursorBlinkOn()+0x14a>
 14a:	c9                   	leave  
 14b:	c3                   	ret    

Disassembly of section .text._ZN7Ssd130612SetCursorOffEv:

0000000000000000 <Ssd1306::SetCursorOff()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  23:	8b 48 30             	mov    0x30(%rax),%ecx
  26:	89 ca                	mov    %ecx,%edx
  28:	b8 87 61 18 86       	mov    $0x86186187,%eax
  2d:	48 0f af c2          	imul   %rdx,%rax
  31:	48 c1 e8 20          	shr    $0x20,%rax
  35:	48 89 c2             	mov    %rax,%rdx
  38:	89 c8                	mov    %ecx,%eax
  3a:	29 d0                	sub    %edx,%eax
  3c:	d1 e8                	shr    %eax
  3e:	01 d0                	add    %edx,%eax
  40:	c1 e8 04             	shr    $0x4,%eax
  43:	89 c2                	mov    %eax,%edx
  45:	89 d0                	mov    %edx,%eax
  47:	c1 e0 02             	shl    $0x2,%eax
  4a:	01 d0                	add    %edx,%eax
  4c:	c1 e0 02             	shl    $0x2,%eax
  4f:	01 d0                	add    %edx,%eax
  51:	29 c1                	sub    %eax,%ecx
  53:	89 ca                	mov    %ecx,%edx
  55:	88 55 ee             	mov    %dl,-0x12(%rbp)
  58:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  5c:	8b 40 30             	mov    0x30(%rax),%eax
  5f:	89 c1                	mov    %eax,%ecx
  61:	ba 87 61 18 86       	mov    $0x86186187,%edx
  66:	48 0f af d1          	imul   %rcx,%rdx
  6a:	48 c1 ea 20          	shr    $0x20,%rdx
  6e:	29 d0                	sub    %edx,%eax
  70:	d1 e8                	shr    %eax
  72:	01 d0                	add    %edx,%eax
  74:	c1 e8 04             	shr    $0x4,%eax
  77:	88 45 ef             	mov    %al,-0x11(%rbp)
  7a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  7e:	0f b6 40 3a          	movzbl 0x3a(%rax),%eax
  82:	0f b6 d0             	movzbl %al,%edx
  85:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  89:	0f b6 40 39          	movzbl 0x39(%rax),%eax
  8d:	0f b6 c8             	movzbl %al,%ecx
  90:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  94:	89 ce                	mov    %ecx,%esi
  96:	48 89 c7             	mov    %rax,%rdi
  99:	e8 00 00 00 00       	call   9e <Ssd1306::SetCursorOff()+0x9e>
  9e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  a2:	0f b6 40 38          	movzbl 0x38(%rax),%eax
  a6:	0f b6 d0             	movzbl %al,%edx
  a9:	89 d0                	mov    %edx,%eax
  ab:	c1 e0 03             	shl    $0x3,%eax
  ae:	29 d0                	sub    %edx,%eax
  b0:	48 98                	cltq   
  b2:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # b9 <Ssd1306::SetCursorOff()+0xb9>
  b9:	48 01 d0             	add    %rdx,%rax
  bc:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  c0:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  c4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  c8:	ba 07 00 00 00       	mov    $0x7,%edx
  cd:	48 89 ce             	mov    %rcx,%rsi
  d0:	48 89 c7             	mov    %rax,%rdi
  d3:	e8 00 00 00 00       	call   d8 <Ssd1306::SetCursorOff()+0xd8>
  d8:	0f b6 55 ef          	movzbl -0x11(%rbp),%edx
  dc:	0f b6 4d ee          	movzbl -0x12(%rbp),%ecx
  e0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  e4:	89 ce                	mov    %ecx,%esi
  e6:	48 89 c7             	mov    %rax,%rdi
  e9:	e8 00 00 00 00       	call   ee <Ssd1306::SetCursorOff()+0xee>
  ee:	90                   	nop
  ef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  f3:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  fa:	00 00 
  fc:	74 05                	je     103 <Ssd1306::SetCursorOff()+0x103>
  fe:	e8 00 00 00 00       	call   103 <Ssd1306::SetCursorOff()+0x103>
 103:	c9                   	leave  
 104:	c3                   	ret    

Disassembly of section .text._ZN7Ssd130612SetColumnRowEhh:

0000000000000000 <Ssd1306::SetColumnRow(unsigned char, unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f1                	mov    %esi,%ecx
  12:	89 d0                	mov    %edx,%eax
  14:	89 ca                	mov    %ecx,%edx
  16:	88 55 e4             	mov    %dl,-0x1c(%rbp)
  19:	88 45 e0             	mov    %al,-0x20(%rbp)
  1c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  23:	00 00 
  25:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  29:	31 c0                	xor    %eax,%eax
  2b:	0f b6 55 e4          	movzbl -0x1c(%rbp),%edx
  2f:	89 d0                	mov    %edx,%eax
  31:	01 c0                	add    %eax,%eax
  33:	01 d0                	add    %edx,%eax
  35:	01 c0                	add    %eax,%eax
  37:	88 45 f7             	mov    %al,-0x9(%rbp)
  3a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3e:	0f b6 40 20          	movzbl 0x20(%rax),%eax
  42:	84 c0                	test   %al,%al
  44:	74 04                	je     4a <Ssd1306::SetColumnRow(unsigned char, unsigned char)+0x4a>
  46:	80 45 f7 04          	addb   $0x4,-0x9(%rbp)
  4a:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
  4e:	83 e0 0f             	and    $0xf,%eax
  51:	89 c2                	mov    %eax,%edx
  53:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  57:	89 d6                	mov    %edx,%esi
  59:	48 89 c7             	mov    %rax,%rdi
  5c:	e8 00 00 00 00       	call   61 <Ssd1306::SetColumnRow(unsigned char, unsigned char)+0x61>
  61:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
  65:	c0 e8 04             	shr    $0x4,%al
  68:	83 c8 10             	or     $0x10,%eax
  6b:	0f b6 d0             	movzbl %al,%edx
  6e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  72:	89 d6                	mov    %edx,%esi
  74:	48 89 c7             	mov    %rax,%rdi
  77:	e8 00 00 00 00       	call   7c <Ssd1306::SetColumnRow(unsigned char, unsigned char)+0x7c>
  7c:	0f b6 45 e0          	movzbl -0x20(%rbp),%eax
  80:	83 c8 b0             	or     $0xffffffb0,%eax
  83:	0f b6 d0             	movzbl %al,%edx
  86:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8a:	89 d6                	mov    %edx,%esi
  8c:	48 89 c7             	mov    %rax,%rdi
  8f:	e8 00 00 00 00       	call   94 <Ssd1306::SetColumnRow(unsigned char, unsigned char)+0x94>
  94:	90                   	nop
  95:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  99:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  a0:	00 00 
  a2:	74 05                	je     a9 <Ssd1306::SetColumnRow(unsigned char, unsigned char)+0xa9>
  a4:	e8 00 00 00 00       	call   a9 <Ssd1306::SetColumnRow(unsigned char, unsigned char)+0xa9>
  a9:	c9                   	leave  
  aa:	c3                   	ret    

Disassembly of section .text._ZN7Ssd130613DumpShadowRamEv:

0000000000000000 <Ssd1306::DumpShadowRam()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	90                   	nop
  20:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  24:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  2b:	00 00 
  2d:	74 05                	je     34 <Ssd1306::DumpShadowRam()+0x34>
  2f:	e8 00 00 00 00       	call   34 <Ssd1306::DumpShadowRam()+0x34>
  34:	c9                   	leave  
  35:	c3                   	ret    

ssd1311.o:     file format elf64-x86-64


Disassembly of section .text._ZN10DisplaySetD2Ev:

0000000000000000 <DisplaySet::~DisplaySet()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 26 <DisplaySet::~DisplaySet()+0x26>
  26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2a:	48 89 10             	mov    %rdx,(%rax)
  2d:	90                   	nop
  2e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  32:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  39:	00 00 
  3b:	74 05                	je     42 <DisplaySet::~DisplaySet()+0x42>
  3d:	e8 00 00 00 00       	call   42 <DisplaySet::~DisplaySet()+0x42>
  42:	c9                   	leave  
  43:	c3                   	ret    

Disassembly of section .text._ZN10DisplaySetD0Ev:

0000000000000000 <DisplaySet::~DisplaySet()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	call   2b <DisplaySet::~DisplaySet()+0x2b>
  2b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	call   37 <DisplaySet::~DisplaySet()+0x37>
  37:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3b:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  42:	00 00 
  44:	74 05                	je     4b <DisplaySet::~DisplaySet()+0x4b>
  46:	e8 00 00 00 00       	call   4b <DisplaySet::~DisplaySet()+0x4b>
  4b:	c9                   	leave  
  4c:	c3                   	ret    

Disassembly of section .text._ZN10DisplaySet8SetSleepEb:

0000000000000000 <DisplaySet::SetSleep(bool)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	88 45 e4             	mov    %al,-0x1c(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	90                   	nop
  25:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  29:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  30:	00 00 
  32:	74 05                	je     39 <DisplaySet::SetSleep(bool)+0x39>
  34:	e8 00 00 00 00       	call   39 <DisplaySet::SetSleep(bool)+0x39>
  39:	c9                   	leave  
  3a:	c3                   	ret    

Disassembly of section .text._ZN10DisplaySet11SetContrastEh:

0000000000000000 <DisplaySet::SetContrast(unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	88 45 e4             	mov    %al,-0x1c(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	90                   	nop
  25:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  29:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  30:	00 00 
  32:	74 05                	je     39 <DisplaySet::SetContrast(unsigned char)+0x39>
  34:	e8 00 00 00 00       	call   39 <DisplaySet::SetContrast(unsigned char)+0x39>
  39:	c9                   	leave  
  3a:	c3                   	ret    

Disassembly of section .text._ZN10DisplaySet17SetFlipVerticallyEb:

0000000000000000 <DisplaySet::SetFlipVertically(bool)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	88 45 e4             	mov    %al,-0x1c(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	90                   	nop
  25:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  29:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  30:	00 00 
  32:	74 05                	je     39 <DisplaySet::SetFlipVertically(bool)+0x39>
  34:	e8 00 00 00 00       	call   39 <DisplaySet::SetFlipVertically(bool)+0x39>
  39:	c9                   	leave  
  3a:	c3                   	ret    

Disassembly of section .text._ZN10DisplaySet9PrintInfoEv:

0000000000000000 <DisplaySet::PrintInfo()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	90                   	nop
  20:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  24:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  2b:	00 00 
  2d:	74 05                	je     34 <DisplaySet::PrintInfo()+0x34>
  2f:	e8 00 00 00 00       	call   34 <DisplaySet::PrintInfo()+0x34>
  34:	c9                   	leave  
  35:	c3                   	ret    

Disassembly of section .text._ZL16i2c_set_baudratej:

0000000000000000 <i2c_set_baudrate(unsigned int)>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	89 7d ec             	mov    %edi,-0x14(%rbp)
   b:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  12:	00 00 
  14:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  18:	31 c0                	xor    %eax,%eax
  1a:	90                   	nop
  1b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1f:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  26:	00 00 
  28:	74 05                	je     2f <i2c_set_baudrate(unsigned int)+0x2f>
  2a:	e8 00 00 00 00       	call   2f <i2c_set_baudrate(unsigned int)+0x2f>
  2f:	c9                   	leave  
  30:	c3                   	ret    

Disassembly of section .text._ZL15i2c_set_addressh:

0000000000000000 <i2c_set_address(unsigned char)>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	89 f8                	mov    %edi,%eax
   a:	88 45 ec             	mov    %al,-0x14(%rbp)
   d:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  14:	00 00 
  16:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1a:	31 c0                	xor    %eax,%eax
  1c:	90                   	nop
  1d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  21:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  28:	00 00 
  2a:	74 05                	je     31 <i2c_set_address(unsigned char)+0x31>
  2c:	e8 00 00 00 00       	call   31 <i2c_set_address(unsigned char)+0x31>
  31:	c9                   	leave  
  32:	c3                   	ret    

Disassembly of section .text._ZL9i2c_writePKcj:

0000000000000000 <i2c_write(char const*, unsigned int)>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	89 75 e4             	mov    %esi,-0x1c(%rbp)
   f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  16:	00 00 
  18:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1c:	31 c0                	xor    %eax,%eax
  1e:	b8 01 00 00 00       	mov    $0x1,%eax
  23:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  27:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  2e:	00 00 
  30:	74 05                	je     37 <i2c_write(char const*, unsigned int)+0x37>
  32:	e8 00 00 00 00       	call   37 <i2c_write(char const*, unsigned int)+0x37>
  37:	c9                   	leave  
  38:	c3                   	ret    

Disassembly of section .text._ZL8i2c_readPcj:

0000000000000000 <i2c_read(char*, unsigned int)>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	89 75 e4             	mov    %esi,-0x1c(%rbp)
   f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  16:	00 00 
  18:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1c:	31 c0                	xor    %eax,%eax
  1e:	b8 01 00 00 00       	mov    $0x1,%eax
  23:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  27:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  2e:	00 00 
  30:	74 05                	je     37 <i2c_read(char*, unsigned int)+0x37>
  32:	e8 00 00 00 00       	call   37 <i2c_read(char*, unsigned int)+0x37>
  37:	c9                   	leave  
  38:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2CC2Ehj:

0000000000000000 <HAL_I2C::HAL_I2C(unsigned char, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	89 55 e0             	mov    %edx,-0x20(%rbp)
  15:	88 45 e4             	mov    %al,-0x1c(%rbp)
  18:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1f:	00 00 
  21:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  25:	31 c0                	xor    %eax,%eax
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2b:	0f b6 55 e4          	movzbl -0x1c(%rbp),%edx
  2f:	88 10                	mov    %dl,(%rax)
  31:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  35:	8b 55 e0             	mov    -0x20(%rbp),%edx
  38:	89 50 04             	mov    %edx,0x4(%rax)
  3b:	90                   	nop
  3c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  47:	00 00 
  49:	74 05                	je     50 <HAL_I2C::HAL_I2C(unsigned char, unsigned int)+0x50>
  4b:	e8 00 00 00 00       	call   50 <HAL_I2C::HAL_I2C(unsigned char, unsigned int)+0x50>
  50:	c9                   	leave  
  51:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2C11IsConnectedEv:

0000000000000000 <HAL_I2C::IsConnected()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	8b 50 04             	mov    0x4(%rax),%edx
  26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2a:	0f b6 00             	movzbl (%rax),%eax
  2d:	0f b6 c0             	movzbl %al,%eax
  30:	89 d6                	mov    %edx,%esi
  32:	89 c7                	mov    %eax,%edi
  34:	e8 00 00 00 00       	call   39 <HAL_I2C::IsConnected()+0x39>
  39:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  3d:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  44:	00 00 
  46:	74 05                	je     4d <HAL_I2C::IsConnected()+0x4d>
  48:	e8 00 00 00 00       	call   4d <HAL_I2C::IsConnected()+0x4d>
  4d:	c9                   	leave  
  4e:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2C5WriteEh:

0000000000000000 <HAL_I2C::Write(unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	88 45 e4             	mov    %al,-0x1c(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  28:	48 89 c7             	mov    %rax,%rdi
  2b:	e8 00 00 00 00       	call   30 <HAL_I2C::Write(unsigned char)+0x30>
  30:	0f b6 45 e4          	movzbl -0x1c(%rbp),%eax
  34:	88 45 f7             	mov    %al,-0x9(%rbp)
  37:	48 8d 45 f7          	lea    -0x9(%rbp),%rax
  3b:	be 01 00 00 00       	mov    $0x1,%esi
  40:	48 89 c7             	mov    %rax,%rdi
  43:	e8 00 00 00 00       	call   48 <HAL_I2C::Write(unsigned char)+0x48>
  48:	90                   	nop
  49:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4d:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  54:	00 00 
  56:	74 05                	je     5d <HAL_I2C::Write(unsigned char)+0x5d>
  58:	e8 00 00 00 00       	call   5d <HAL_I2C::Write(unsigned char)+0x5d>
  5d:	c9                   	leave  
  5e:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2C5WriteEPKcj:

0000000000000000 <HAL_I2C::Write(char const*, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  14:	89 55 dc             	mov    %edx,-0x24(%rbp)
  17:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1e:	00 00 
  20:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  24:	31 c0                	xor    %eax,%eax
  26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2a:	48 89 c7             	mov    %rax,%rdi
  2d:	e8 00 00 00 00       	call   32 <HAL_I2C::Write(char const*, unsigned int)+0x32>
  32:	8b 55 dc             	mov    -0x24(%rbp),%edx
  35:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  39:	89 d6                	mov    %edx,%esi
  3b:	48 89 c7             	mov    %rax,%rdi
  3e:	e8 00 00 00 00       	call   43 <HAL_I2C::Write(char const*, unsigned int)+0x43>
  43:	90                   	nop
  44:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  48:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  4f:	00 00 
  51:	74 05                	je     58 <HAL_I2C::Write(char const*, unsigned int)+0x58>
  53:	e8 00 00 00 00       	call   58 <HAL_I2C::Write(char const*, unsigned int)+0x58>
  58:	c9                   	leave  
  59:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2C13WriteRegisterEhh:

0000000000000000 <HAL_I2C::WriteRegister(unsigned char, unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f1                	mov    %esi,%ecx
  12:	89 d0                	mov    %edx,%eax
  14:	89 ca                	mov    %ecx,%edx
  16:	88 55 e4             	mov    %dl,-0x1c(%rbp)
  19:	88 45 e0             	mov    %al,-0x20(%rbp)
  1c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  23:	00 00 
  25:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  29:	31 c0                	xor    %eax,%eax
  2b:	0f b6 45 e4          	movzbl -0x1c(%rbp),%eax
  2f:	88 45 f6             	mov    %al,-0xa(%rbp)
  32:	0f b6 45 e0          	movzbl -0x20(%rbp),%eax
  36:	88 45 f7             	mov    %al,-0x9(%rbp)
  39:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3d:	48 89 c7             	mov    %rax,%rdi
  40:	e8 00 00 00 00       	call   45 <HAL_I2C::WriteRegister(unsigned char, unsigned char)+0x45>
  45:	48 8d 45 f6          	lea    -0xa(%rbp),%rax
  49:	be 02 00 00 00       	mov    $0x2,%esi
  4e:	48 89 c7             	mov    %rax,%rdi
  51:	e8 00 00 00 00       	call   56 <HAL_I2C::WriteRegister(unsigned char, unsigned char)+0x56>
  56:	90                   	nop
  57:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  5b:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  62:	00 00 
  64:	74 05                	je     6b <HAL_I2C::WriteRegister(unsigned char, unsigned char)+0x6b>
  66:	e8 00 00 00 00       	call   6b <HAL_I2C::WriteRegister(unsigned char, unsigned char)+0x6b>
  6b:	c9                   	leave  
  6c:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2C4ReadEPcj:

0000000000000000 <HAL_I2C::Read(char*, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  14:	89 55 dc             	mov    %edx,-0x24(%rbp)
  17:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1e:	00 00 
  20:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  24:	31 c0                	xor    %eax,%eax
  26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2a:	48 89 c7             	mov    %rax,%rdi
  2d:	e8 00 00 00 00       	call   32 <HAL_I2C::Read(char*, unsigned int)+0x32>
  32:	8b 55 dc             	mov    -0x24(%rbp),%edx
  35:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  39:	89 d6                	mov    %edx,%esi
  3b:	48 89 c7             	mov    %rax,%rdi
  3e:	e8 00 00 00 00       	call   43 <HAL_I2C::Read(char*, unsigned int)+0x43>
  43:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  47:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  4e:	00 00 
  50:	74 05                	je     57 <HAL_I2C::Read(char*, unsigned int)+0x57>
  52:	e8 00 00 00 00       	call   57 <HAL_I2C::Read(char*, unsigned int)+0x57>
  57:	c9                   	leave  
  58:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2C5SetupEv:

0000000000000000 <HAL_I2C::Setup()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	0f b6 00             	movzbl (%rax),%eax
  26:	0f b6 c0             	movzbl %al,%eax
  29:	89 c7                	mov    %eax,%edi
  2b:	e8 00 00 00 00       	call   30 <HAL_I2C::Setup()+0x30>
  30:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  34:	8b 40 04             	mov    0x4(%rax),%eax
  37:	89 c7                	mov    %eax,%edi
  39:	e8 00 00 00 00       	call   3e <HAL_I2C::Setup()+0x3e>
  3e:	90                   	nop
  3f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  4a:	00 00 
  4c:	74 05                	je     53 <HAL_I2C::Setup()+0x53>
  4e:	e8 00 00 00 00       	call   53 <HAL_I2C::Setup()+0x53>
  53:	c9                   	leave  
  54:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2C12IsConnected_Ehj:

0000000000000000 <HAL_I2C::IsConnected_(unsigned char, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	89 f8                	mov    %edi,%eax
   e:	89 75 e8             	mov    %esi,-0x18(%rbp)
  11:	88 45 ec             	mov    %al,-0x14(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	0f b6 45 ec          	movzbl -0x14(%rbp),%eax
  27:	89 c7                	mov    %eax,%edi
  29:	e8 00 00 00 00       	call   2e <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x2e>
  2e:	8b 45 e8             	mov    -0x18(%rbp),%eax
  31:	89 c7                	mov    %eax,%edi
  33:	e8 00 00 00 00       	call   38 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x38>
  38:	80 7d ec 2f          	cmpb   $0x2f,-0x14(%rbp)
  3c:	76 06                	jbe    44 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x44>
  3e:	80 7d ec 37          	cmpb   $0x37,-0x14(%rbp)
  42:	76 0c                	jbe    50 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x50>
  44:	80 7d ec 4f          	cmpb   $0x4f,-0x14(%rbp)
  48:	76 1e                	jbe    68 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x68>
  4a:	80 7d ec 5f          	cmpb   $0x5f,-0x14(%rbp)
  4e:	77 18                	ja     68 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x68>
  50:	48 8d 45 f7          	lea    -0x9(%rbp),%rax
  54:	be 01 00 00 00       	mov    $0x1,%esi
  59:	48 89 c7             	mov    %rax,%rdi
  5c:	e8 00 00 00 00       	call   61 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x61>
  61:	84 c0                	test   %al,%al
  63:	0f 94 c0             	sete   %al
  66:	eb 14                	jmp    7c <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x7c>
  68:	be 00 00 00 00       	mov    $0x0,%esi
  6d:	bf 00 00 00 00       	mov    $0x0,%edi
  72:	e8 00 00 00 00       	call   77 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x77>
  77:	84 c0                	test   %al,%al
  79:	0f 94 c0             	sete   %al
  7c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  87:	00 00 
  89:	74 05                	je     90 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x90>
  8b:	e8 00 00 00 00       	call   90 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x90>
  90:	c9                   	leave  
  91:	c3                   	ret    

Disassembly of section .text._ZN7Ssd1311D2Ev:

0000000000000000 <Ssd1311::~Ssd1311()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 26 <Ssd1311::~Ssd1311()+0x26>
  26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2a:	48 89 10             	mov    %rdx,(%rax)
  2d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  31:	48 89 c7             	mov    %rax,%rdi
  34:	e8 00 00 00 00       	call   39 <Ssd1311::~Ssd1311()+0x39>
  39:	90                   	nop
  3a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3e:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  45:	00 00 
  47:	74 05                	je     4e <Ssd1311::~Ssd1311()+0x4e>
  49:	e8 00 00 00 00       	call   4e <Ssd1311::~Ssd1311()+0x4e>
  4e:	c9                   	leave  
  4f:	c3                   	ret    

Disassembly of section .text._ZN7Ssd1311D0Ev:

0000000000000000 <Ssd1311::~Ssd1311()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	call   2b <Ssd1311::~Ssd1311()+0x2b>
  2b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	call   37 <Ssd1311::~Ssd1311()+0x37>
  37:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3b:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  42:	00 00 
  44:	74 05                	je     4b <Ssd1311::~Ssd1311()+0x4b>
  46:	e8 00 00 00 00       	call   4b <Ssd1311::~Ssd1311()+0x4b>
  4b:	c9                   	leave  
  4c:	c3                   	ret    

Disassembly of section .text._ZN10DisplaySetC2Ev:

0000000000000000 <DisplaySet::DisplaySet()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 26 <DisplaySet::DisplaySet()+0x26>
  26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2a:	48 89 10             	mov    %rdx,(%rax)
  2d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  31:	c6 40 10 00          	movb   $0x0,0x10(%rax)
  35:	90                   	nop
  36:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3a:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  41:	00 00 
  43:	74 05                	je     4a <DisplaySet::DisplaySet()+0x4a>
  45:	e8 00 00 00 00       	call   4a <DisplaySet::DisplaySet()+0x4a>
  4a:	c9                   	leave  
  4b:	c3                   	ret    

Disassembly of section .text._ZN7Ssd1311C2Ev:

0000000000000000 <Ssd1311::Ssd1311()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	call   2b <Ssd1311::Ssd1311()+0x2b>
  2b:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 32 <Ssd1311::Ssd1311()+0x32>
  32:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  36:	48 89 10             	mov    %rdx,(%rax)
  39:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3d:	48 83 c0 14          	add    $0x14,%rax
  41:	ba 80 1a 06 00       	mov    $0x61a80,%edx
  46:	be 3c 00 00 00       	mov    $0x3c,%esi
  4b:	48 89 c7             	mov    %rax,%rdi
  4e:	e8 00 00 00 00       	call   53 <Ssd1311::Ssd1311()+0x53>
  53:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  57:	c6 40 1c 08          	movb   $0x8,0x1c(%rax)
  5b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5f:	48 89 05 00 00 00 00 	mov    %rax,0x0(%rip)        # 66 <Ssd1311::Ssd1311()+0x66>
  66:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  6a:	c7 40 0c 04 00 00 00 	movl   $0x4,0xc(%rax)
  71:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  75:	c7 40 08 14 00 00 00 	movl   $0x14,0x8(%rax)
  7c:	90                   	nop
  7d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  81:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  88:	00 00 
  8a:	74 05                	je     91 <Ssd1311::Ssd1311()+0x91>
  8c:	e8 00 00 00 00       	call   91 <Ssd1311::Ssd1311()+0x91>
  91:	c9                   	leave  
  92:	c3                   	ret    

Disassembly of section .text._ZN7Ssd13115StartEv:

0000000000000000 <Ssd1311::Start()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	48 83 c0 14          	add    $0x14,%rax
  27:	48 89 c7             	mov    %rax,%rdi
  2a:	e8 00 00 00 00       	call   2f <Ssd1311::Start()+0x2f>
  2f:	83 f0 01             	xor    $0x1,%eax
  32:	84 c0                	test   %al,%al
  34:	74 0a                	je     40 <Ssd1311::Start()+0x40>
  36:	b8 00 00 00 00       	mov    $0x0,%eax
  3b:	e9 22 01 00 00       	jmp    162 <Ssd1311::Start()+0x162>
  40:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  44:	48 89 c7             	mov    %rax,%rdi
  47:	e8 00 00 00 00       	call   4c <Ssd1311::Start()+0x4c>
  4c:	83 f0 01             	xor    $0x1,%eax
  4f:	84 c0                	test   %al,%al
  51:	74 0a                	je     5d <Ssd1311::Start()+0x5d>
  53:	b8 00 00 00 00       	mov    $0x0,%eax
  58:	e9 05 01 00 00       	jmp    162 <Ssd1311::Start()+0x162>
  5d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  64:	eb 12                	jmp    78 <Ssd1311::Start()+0x78>
  66:	8b 45 f4             	mov    -0xc(%rbp),%eax
  69:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 70 <Ssd1311::Start()+0x70>
  70:	c6 04 10 20          	movb   $0x20,(%rax,%rdx,1)
  74:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  78:	83 7d f4 14          	cmpl   $0x14,-0xc(%rbp)
  7c:	76 e8                	jbe    66 <Ssd1311::Start()+0x66>
  7e:	c6 05 00 00 00 00 40 	movb   $0x40,0x0(%rip)        # 85 <Ssd1311::Start()+0x85>
  85:	c6 05 00 00 00 00 40 	movb   $0x40,0x0(%rip)        # 8c <Ssd1311::Start()+0x8c>
  8c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  90:	be 3a 00 00 00       	mov    $0x3a,%esi
  95:	48 89 c7             	mov    %rax,%rdi
  98:	e8 00 00 00 00       	call   9d <Ssd1311::Start()+0x9d>
  9d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  a1:	be 09 00 00 00       	mov    $0x9,%esi
  a6:	48 89 c7             	mov    %rax,%rdi
  a9:	e8 00 00 00 00       	call   ae <Ssd1311::Start()+0xae>
  ae:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  b2:	be 05 00 00 00       	mov    $0x5,%esi
  b7:	48 89 c7             	mov    %rax,%rdi
  ba:	e8 00 00 00 00       	call   bf <Ssd1311::Start()+0xbf>
  bf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  c3:	be 1c 00 00 00       	mov    $0x1c,%esi
  c8:	48 89 c7             	mov    %rax,%rdi
  cb:	e8 00 00 00 00       	call   d0 <Ssd1311::Start()+0xd0>
  d0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  d4:	be 3c 00 00 00       	mov    $0x3c,%esi
  d9:	48 89 c7             	mov    %rax,%rdi
  dc:	e8 00 00 00 00       	call   e1 <Ssd1311::Start()+0xe1>
  e1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  e5:	be 3a 00 00 00       	mov    $0x3a,%esi
  ea:	48 89 c7             	mov    %rax,%rdi
  ed:	e8 00 00 00 00       	call   f2 <Ssd1311::Start()+0xf2>
  f2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  f6:	be 72 00 00 00       	mov    $0x72,%esi
  fb:	48 89 c7             	mov    %rax,%rdi
  fe:	e8 00 00 00 00       	call   103 <Ssd1311::Start()+0x103>
 103:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 107:	be 00 00 00 00       	mov    $0x0,%esi
 10c:	48 89 c7             	mov    %rax,%rdi
 10f:	e8 00 00 00 00       	call   114 <Ssd1311::Start()+0x114>
 114:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 118:	be 3c 00 00 00       	mov    $0x3c,%esi
 11d:	48 89 c7             	mov    %rax,%rdi
 120:	e8 00 00 00 00       	call   125 <Ssd1311::Start()+0x125>
 125:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 129:	be 0c 00 00 00       	mov    $0xc,%esi
 12e:	48 89 c7             	mov    %rax,%rdi
 131:	e8 00 00 00 00       	call   136 <Ssd1311::Start()+0x136>
 136:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 13a:	be 01 00 00 00       	mov    $0x1,%esi
 13f:	48 89 c7             	mov    %rax,%rdi
 142:	e8 00 00 00 00       	call   147 <Ssd1311::Start()+0x147>
 147:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 14b:	ba 00 00 00 00       	mov    $0x0,%edx
 150:	be 00 00 00 00       	mov    $0x0,%esi
 155:	48 89 c7             	mov    %rax,%rdi
 158:	e8 00 00 00 00       	call   15d <Ssd1311::Start()+0x15d>
 15d:	b8 01 00 00 00       	mov    $0x1,%eax
 162:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
 166:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
 16d:	00 00 
 16f:	74 05                	je     176 <Ssd1311::Start()+0x176>
 171:	e8 00 00 00 00       	call   176 <Ssd1311::Start()+0x176>
 176:	c9                   	leave  
 177:	c3                   	ret    

Disassembly of section .text._ZN7Ssd13119PrintInfoEv:

0000000000000000 <Ssd1311::PrintInfo()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	8b 50 08             	mov    0x8(%rax),%edx
  26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2a:	8b 40 0c             	mov    0xc(%rax),%eax
  2d:	89 c6                	mov    %eax,%esi
  2f:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 36 <Ssd1311::PrintInfo()+0x36>
  36:	48 89 c7             	mov    %rax,%rdi
  39:	b8 00 00 00 00       	mov    $0x0,%eax
  3e:	e8 00 00 00 00       	call   43 <Ssd1311::PrintInfo()+0x43>
  43:	90                   	nop
  44:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  48:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  4f:	00 00 
  51:	74 05                	je     58 <Ssd1311::PrintInfo()+0x58>
  53:	e8 00 00 00 00       	call   58 <Ssd1311::PrintInfo()+0x58>
  58:	c9                   	leave  
  59:	c3                   	ret    

Disassembly of section .text._ZN7Ssd13113ClsEv:

0000000000000000 <Ssd1311::Cls()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	be 01 00 00 00       	mov    $0x1,%esi
  28:	48 89 c7             	mov    %rax,%rdi
  2b:	e8 00 00 00 00       	call   30 <Ssd1311::Cls()+0x30>
  30:	90                   	nop
  31:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  35:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  3c:	00 00 
  3e:	74 05                	je     45 <Ssd1311::Cls()+0x45>
  40:	e8 00 00 00 00       	call   45 <Ssd1311::Cls()+0x45>
  45:	c9                   	leave  
  46:	c3                   	ret    

Disassembly of section .text._ZN7Ssd13117PutCharEi:

0000000000000000 <Ssd1311::PutChar(int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  13:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1a:	00 00 
  1c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  20:	31 c0                	xor    %eax,%eax
  22:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  25:	0f b6 c0             	movzbl %al,%eax
  28:	83 e0 7f             	and    $0x7f,%eax
  2b:	89 c2                	mov    %eax,%edx
  2d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  31:	89 d6                	mov    %edx,%esi
  33:	48 89 c7             	mov    %rax,%rdi
  36:	e8 00 00 00 00       	call   3b <Ssd1311::PutChar(int)+0x3b>
  3b:	90                   	nop
  3c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  47:	00 00 
  49:	74 05                	je     50 <Ssd1311::PutChar(int)+0x50>
  4b:	e8 00 00 00 00       	call   50 <Ssd1311::PutChar(int)+0x50>
  50:	c9                   	leave  
  51:	c3                   	ret    

Disassembly of section .text._ZN7Ssd13119PutStringEPKc:

0000000000000000 <Ssd1311::PutString(char const*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	c7 45 e0 14 00 00 00 	movl   $0x14,-0x20(%rbp)
  2a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  2e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  32:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 39 <Ssd1311::PutString(char const*)+0x39>
  39:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  3d:	eb 21                	jmp    60 <Ssd1311::PutString(char const*)+0x60>
  3f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  43:	48 8d 42 01          	lea    0x1(%rdx),%rax
  47:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  4b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4f:	48 8d 48 01          	lea    0x1(%rax),%rcx
  53:	48 89 4d f0          	mov    %rcx,-0x10(%rbp)
  57:	0f b6 12             	movzbl (%rdx),%edx
  5a:	88 10                	mov    %dl,(%rax)
  5c:	83 6d e0 01          	subl   $0x1,-0x20(%rbp)
  60:	83 7d e0 00          	cmpl   $0x0,-0x20(%rbp)
  64:	74 0b                	je     71 <Ssd1311::PutString(char const*)+0x71>
  66:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  6a:	0f b6 00             	movzbl (%rax),%eax
  6d:	84 c0                	test   %al,%al
  6f:	75 ce                	jne    3f <Ssd1311::PutString(char const*)+0x3f>
  71:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  75:	0f b6 40 10          	movzbl 0x10(%rax),%eax
  79:	84 c0                	test   %al,%al
  7b:	74 4b                	je     c8 <Ssd1311::PutString(char const*)+0xc8>
  7d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  81:	c6 40 10 00          	movb   $0x0,0x10(%rax)
  85:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  89:	48 2b 45 d0          	sub    -0x30(%rbp),%rax
  8d:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  90:	eb 13                	jmp    a5 <Ssd1311::PutString(char const*)+0xa5>
  92:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  96:	48 8d 50 01          	lea    0x1(%rax),%rdx
  9a:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
  9e:	c6 00 20             	movb   $0x20,(%rax)
  a1:	83 45 e4 01          	addl   $0x1,-0x1c(%rbp)
  a5:	83 7d e4 13          	cmpl   $0x13,-0x1c(%rbp)
  a9:	76 e7                	jbe    92 <Ssd1311::PutString(char const*)+0x92>
  ab:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  af:	ba 15 00 00 00       	mov    $0x15,%edx
  b4:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # bb <Ssd1311::PutString(char const*)+0xbb>
  bb:	48 89 ce             	mov    %rcx,%rsi
  be:	48 89 c7             	mov    %rax,%rdi
  c1:	e8 00 00 00 00       	call   c6 <Ssd1311::PutString(char const*)+0xc6>
  c6:	eb 20                	jmp    e8 <Ssd1311::PutString(char const*)+0xe8>
  c8:	b8 15 00 00 00       	mov    $0x15,%eax
  cd:	2b 45 e0             	sub    -0x20(%rbp),%eax
  d0:	89 c2                	mov    %eax,%edx
  d2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  d6:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # dd <Ssd1311::PutString(char const*)+0xdd>
  dd:	48 89 ce             	mov    %rcx,%rsi
  e0:	48 89 c7             	mov    %rax,%rdi
  e3:	e8 00 00 00 00       	call   e8 <Ssd1311::PutString(char const*)+0xe8>
  e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  ec:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  f3:	00 00 
  f5:	74 05                	je     fc <Ssd1311::PutString(char const*)+0xfc>
  f7:	e8 00 00 00 00       	call   fc <Ssd1311::PutString(char const*)+0xfc>
  fc:	c9                   	leave  
  fd:	c3                   	ret    

Disassembly of section .text._ZN7Ssd13119ClearLineEj:

0000000000000000 <Ssd1311::ClearLine(unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  13:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1a:	00 00 
  1c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  20:	31 c0                	xor    %eax,%eax
  22:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  26:	0f 94 c0             	sete   %al
  29:	0f b6 c0             	movzbl %al,%eax
  2c:	48 85 c0             	test   %rax,%rax
  2f:	75 0f                	jne    40 <Ssd1311::ClearLine(unsigned int)+0x40>
  31:	83 7d e4 04          	cmpl   $0x4,-0x1c(%rbp)
  35:	0f 97 c0             	seta   %al
  38:	0f b6 c0             	movzbl %al,%eax
  3b:	48 85 c0             	test   %rax,%rax
  3e:	74 07                	je     47 <Ssd1311::ClearLine(unsigned int)+0x47>
  40:	b8 01 00 00 00       	mov    $0x1,%eax
  45:	eb 05                	jmp    4c <Ssd1311::ClearLine(unsigned int)+0x4c>
  47:	b8 00 00 00 00       	mov    $0x0,%eax
  4c:	0f b6 c0             	movzbl %al,%eax
  4f:	48 85 c0             	test   %rax,%rax
  52:	75 51                	jne    a5 <Ssd1311::ClearLine(unsigned int)+0xa5>
  54:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  57:	83 e8 01             	sub    $0x1,%eax
  5a:	0f b6 d0             	movzbl %al,%edx
  5d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  61:	be 00 00 00 00       	mov    $0x0,%esi
  66:	48 89 c7             	mov    %rax,%rdi
  69:	e8 00 00 00 00       	call   6e <Ssd1311::ClearLine(unsigned int)+0x6e>
  6e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  72:	ba 15 00 00 00       	mov    $0x15,%edx
  77:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 7e <Ssd1311::ClearLine(unsigned int)+0x7e>
  7e:	48 89 ce             	mov    %rcx,%rsi
  81:	48 89 c7             	mov    %rax,%rdi
  84:	e8 00 00 00 00       	call   89 <Ssd1311::ClearLine(unsigned int)+0x89>
  89:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8c:	83 e8 01             	sub    $0x1,%eax
  8f:	0f b6 d0             	movzbl %al,%edx
  92:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  96:	be 00 00 00 00       	mov    $0x0,%esi
  9b:	48 89 c7             	mov    %rax,%rdi
  9e:	e8 00 00 00 00       	call   a3 <Ssd1311::ClearLine(unsigned int)+0xa3>
  a3:	eb 01                	jmp    a6 <Ssd1311::ClearLine(unsigned int)+0xa6>
  a5:	90                   	nop
  a6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  aa:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  b1:	00 00 
  b3:	74 05                	je     ba <Ssd1311::ClearLine(unsigned int)+0xba>
  b5:	e8 00 00 00 00       	call   ba <Ssd1311::ClearLine(unsigned int)+0xba>
  ba:	c9                   	leave  
  bb:	c3                   	ret    

Disassembly of section .text._ZN7Ssd13118TextLineEjPKcj:

0000000000000000 <Ssd1311::TextLine(unsigned int, char const*, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  13:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  17:	89 4d e0             	mov    %ecx,-0x20(%rbp)
  1a:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  21:	00 00 
  23:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  27:	31 c0                	xor    %eax,%eax
  29:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  2d:	0f 94 c0             	sete   %al
  30:	0f b6 c0             	movzbl %al,%eax
  33:	48 85 c0             	test   %rax,%rax
  36:	75 0f                	jne    47 <Ssd1311::TextLine(unsigned int, char const*, unsigned int)+0x47>
  38:	83 7d e4 04          	cmpl   $0x4,-0x1c(%rbp)
  3c:	0f 97 c0             	seta   %al
  3f:	0f b6 c0             	movzbl %al,%eax
  42:	48 85 c0             	test   %rax,%rax
  45:	74 07                	je     4e <Ssd1311::TextLine(unsigned int, char const*, unsigned int)+0x4e>
  47:	b8 01 00 00 00       	mov    $0x1,%eax
  4c:	eb 05                	jmp    53 <Ssd1311::TextLine(unsigned int, char const*, unsigned int)+0x53>
  4e:	b8 00 00 00 00       	mov    $0x0,%eax
  53:	0f b6 c0             	movzbl %al,%eax
  56:	48 85 c0             	test   %rax,%rax
  59:	75 32                	jne    8d <Ssd1311::TextLine(unsigned int, char const*, unsigned int)+0x8d>
  5b:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  5e:	83 e8 01             	sub    $0x1,%eax
  61:	0f b6 d0             	movzbl %al,%edx
  64:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  68:	be 00 00 00 00       	mov    $0x0,%esi
  6d:	48 89 c7             	mov    %rax,%rdi
  70:	e8 00 00 00 00       	call   75 <Ssd1311::TextLine(unsigned int, char const*, unsigned int)+0x75>
  75:	8b 55 e0             	mov    -0x20(%rbp),%edx
  78:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  7c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80:	48 89 ce             	mov    %rcx,%rsi
  83:	48 89 c7             	mov    %rax,%rdi
  86:	e8 00 00 00 00       	call   8b <Ssd1311::TextLine(unsigned int, char const*, unsigned int)+0x8b>
  8b:	eb 01                	jmp    8e <Ssd1311::TextLine(unsigned int, char const*, unsigned int)+0x8e>
  8d:	90                   	nop
  8e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  92:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  99:	00 00 
  9b:	74 05                	je     a2 <Ssd1311::TextLine(unsigned int, char const*, unsigned int)+0xa2>
  9d:	e8 00 00 00 00       	call   a2 <Ssd1311::TextLine(unsigned int, char const*, unsigned int)+0xa2>
  a2:	c9                   	leave  
  a3:	c3                   	ret    

Disassembly of section .text._ZN7Ssd13114TextEPKcj:

0000000000000000 <Ssd1311::Text(char const*, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  14:	89 55 dc             	mov    %edx,-0x24(%rbp)
  17:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1e:	00 00 
  20:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  24:	31 c0                	xor    %eax,%eax
  26:	83 7d dc 14          	cmpl   $0x14,-0x24(%rbp)
  2a:	76 07                	jbe    33 <Ssd1311::Text(char const*, unsigned int)+0x33>
  2c:	c7 45 dc 14 00 00 00 	movl   $0x14,-0x24(%rbp)
  33:	8b 55 dc             	mov    -0x24(%rbp),%edx
  36:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  3a:	48 89 c6             	mov    %rax,%rsi
  3d:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 44 <Ssd1311::Text(char const*, unsigned int)+0x44>
  44:	48 89 c7             	mov    %rax,%rdi
  47:	e8 00 00 00 00       	call   4c <Ssd1311::Text(char const*, unsigned int)+0x4c>
  4c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  50:	0f b6 40 10          	movzbl 0x10(%rax),%eax
  54:	84 c0                	test   %al,%al
  56:	74 4e                	je     a6 <Ssd1311::Text(char const*, unsigned int)+0xa6>
  58:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5c:	c6 40 10 00          	movb   $0x0,0x10(%rax)
  60:	b8 14 00 00 00       	mov    $0x14,%eax
  65:	2b 45 dc             	sub    -0x24(%rbp),%eax
  68:	89 c2                	mov    %eax,%edx
  6a:	8b 45 dc             	mov    -0x24(%rbp),%eax
  6d:	83 c0 01             	add    $0x1,%eax
  70:	89 c1                	mov    %eax,%ecx
  72:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 79 <Ssd1311::Text(char const*, unsigned int)+0x79>
  79:	48 01 c8             	add    %rcx,%rax
  7c:	be 20 00 00 00       	mov    $0x20,%esi
  81:	48 89 c7             	mov    %rax,%rdi
  84:	e8 00 00 00 00       	call   89 <Ssd1311::Text(char const*, unsigned int)+0x89>
  89:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8d:	ba 15 00 00 00       	mov    $0x15,%edx
  92:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 99 <Ssd1311::Text(char const*, unsigned int)+0x99>
  99:	48 89 ce             	mov    %rcx,%rsi
  9c:	48 89 c7             	mov    %rax,%rdi
  9f:	e8 00 00 00 00       	call   a4 <Ssd1311::Text(char const*, unsigned int)+0xa4>
  a4:	eb 1c                	jmp    c2 <Ssd1311::Text(char const*, unsigned int)+0xc2>
  a6:	8b 45 dc             	mov    -0x24(%rbp),%eax
  a9:	8d 50 01             	lea    0x1(%rax),%edx
  ac:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  b0:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # b7 <Ssd1311::Text(char const*, unsigned int)+0xb7>
  b7:	48 89 ce             	mov    %rcx,%rsi
  ba:	48 89 c7             	mov    %rax,%rdi
  bd:	e8 00 00 00 00       	call   c2 <Ssd1311::Text(char const*, unsigned int)+0xc2>
  c2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  c6:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  cd:	00 00 
  cf:	74 05                	je     d6 <Ssd1311::Text(char const*, unsigned int)+0xd6>
  d1:	e8 00 00 00 00       	call   d6 <Ssd1311::Text(char const*, unsigned int)+0xd6>
  d6:	c9                   	leave  
  d7:	c3                   	ret    

Disassembly of section .text._ZN7Ssd131112SetCursorPosEjj:

0000000000000000 <Ssd1311::SetCursorPos(unsigned int, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  13:	89 55 e0             	mov    %edx,-0x20(%rbp)
  16:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1d:	00 00 
  1f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  23:	31 c0                	xor    %eax,%eax
  25:	83 7d e4 13          	cmpl   $0x13,-0x1c(%rbp)
  29:	0f 97 c0             	seta   %al
  2c:	0f b6 c0             	movzbl %al,%eax
  2f:	48 85 c0             	test   %rax,%rax
  32:	75 0f                	jne    43 <Ssd1311::SetCursorPos(unsigned int, unsigned int)+0x43>
  34:	83 7d e0 03          	cmpl   $0x3,-0x20(%rbp)
  38:	0f 97 c0             	seta   %al
  3b:	0f b6 c0             	movzbl %al,%eax
  3e:	48 85 c0             	test   %rax,%rax
  41:	74 07                	je     4a <Ssd1311::SetCursorPos(unsigned int, unsigned int)+0x4a>
  43:	b8 01 00 00 00       	mov    $0x1,%eax
  48:	eb 05                	jmp    4f <Ssd1311::SetCursorPos(unsigned int, unsigned int)+0x4f>
  4a:	b8 00 00 00 00       	mov    $0x0,%eax
  4f:	0f b6 c0             	movzbl %al,%eax
  52:	48 85 c0             	test   %rax,%rax
  55:	75 20                	jne    77 <Ssd1311::SetCursorPos(unsigned int, unsigned int)+0x77>
  57:	8b 45 e0             	mov    -0x20(%rbp),%eax
  5a:	c1 e0 05             	shl    $0x5,%eax
  5d:	89 c2                	mov    %eax,%edx
  5f:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  62:	01 d0                	add    %edx,%eax
  64:	0f b6 d0             	movzbl %al,%edx
  67:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  6b:	89 d6                	mov    %edx,%esi
  6d:	48 89 c7             	mov    %rax,%rdi
  70:	e8 00 00 00 00       	call   75 <Ssd1311::SetCursorPos(unsigned int, unsigned int)+0x75>
  75:	eb 01                	jmp    78 <Ssd1311::SetCursorPos(unsigned int, unsigned int)+0x78>
  77:	90                   	nop
  78:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  7c:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  83:	00 00 
  85:	74 05                	je     8c <Ssd1311::SetCursorPos(unsigned int, unsigned int)+0x8c>
  87:	e8 00 00 00 00       	call   8c <Ssd1311::SetCursorPos(unsigned int, unsigned int)+0x8c>
  8c:	c9                   	leave  
  8d:	c3                   	ret    

Disassembly of section .text._ZN7Ssd131112SelectRamRomEjj:

0000000000000000 <Ssd1311::SelectRamRom(unsigned int, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  13:	89 55 e0             	mov    %edx,-0x20(%rbp)
  16:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1d:	00 00 
  1f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  23:	31 c0                	xor    %eax,%eax
  25:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  29:	be 01 00 00 00       	mov    $0x1,%esi
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	call   36 <Ssd1311::SelectRamRom(unsigned int, unsigned int)+0x36>
  36:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3a:	be 02 00 00 00       	mov    $0x2,%esi
  3f:	48 89 c7             	mov    %rax,%rdi
  42:	e8 00 00 00 00       	call   47 <Ssd1311::SelectRamRom(unsigned int, unsigned int)+0x47>
  47:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4b:	be 72 00 00 00       	mov    $0x72,%esi
  50:	48 89 c7             	mov    %rax,%rdi
  53:	e8 00 00 00 00       	call   58 <Ssd1311::SelectRamRom(unsigned int, unsigned int)+0x58>
  58:	8b 45 e0             	mov    -0x20(%rbp),%eax
  5b:	c1 e0 02             	shl    $0x2,%eax
  5e:	83 e0 0c             	and    $0xc,%eax
  61:	89 c2                	mov    %eax,%edx
  63:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  66:	83 e0 03             	and    $0x3,%eax
  69:	09 d0                	or     %edx,%eax
  6b:	0f b6 d0             	movzbl %al,%edx
  6e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  72:	89 d6                	mov    %edx,%esi
  74:	48 89 c7             	mov    %rax,%rdi
  77:	e8 00 00 00 00       	call   7c <Ssd1311::SelectRamRom(unsigned int, unsigned int)+0x7c>
  7c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80:	be 00 00 00 00       	mov    $0x0,%esi
  85:	48 89 c7             	mov    %rax,%rdi
  88:	e8 00 00 00 00       	call   8d <Ssd1311::SelectRamRom(unsigned int, unsigned int)+0x8d>
  8d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  91:	be 00 00 00 00       	mov    $0x0,%esi
  96:	48 89 c7             	mov    %rax,%rdi
  99:	e8 00 00 00 00       	call   9e <Ssd1311::SelectRamRom(unsigned int, unsigned int)+0x9e>
  9e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  a2:	48 89 c7             	mov    %rax,%rdi
  a5:	e8 00 00 00 00       	call   aa <Ssd1311::SelectRamRom(unsigned int, unsigned int)+0xaa>
  aa:	90                   	nop
  ab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  af:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  b6:	00 00 
  b8:	74 05                	je     bf <Ssd1311::SelectRamRom(unsigned int, unsigned int)+0xbf>
  ba:	e8 00 00 00 00       	call   bf <Ssd1311::SelectRamRom(unsigned int, unsigned int)+0xbf>
  bf:	c9                   	leave  
  c0:	c3                   	ret    

Disassembly of section .text._ZN7Ssd13118SetDDRAMEh:

0000000000000000 <Ssd1311::SetDDRAM(unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	88 45 e4             	mov    %al,-0x1c(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	0f b6 45 e4          	movzbl -0x1c(%rbp),%eax
  28:	83 c8 80             	or     $0xffffff80,%eax
  2b:	0f b6 d0             	movzbl %al,%edx
  2e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  32:	89 d6                	mov    %edx,%esi
  34:	48 89 c7             	mov    %rax,%rdi
  37:	e8 00 00 00 00       	call   3c <Ssd1311::SetDDRAM(unsigned char)+0x3c>
  3c:	90                   	nop
  3d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  48:	00 00 
  4a:	74 05                	je     51 <Ssd1311::SetDDRAM(unsigned char)+0x51>
  4c:	e8 00 00 00 00       	call   51 <Ssd1311::SetDDRAM(unsigned char)+0x51>
  51:	c9                   	leave  
  52:	c3                   	ret    

Disassembly of section .text._ZN7Ssd13118SetCGRAMEh:

0000000000000000 <Ssd1311::SetCGRAM(unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	88 45 e4             	mov    %al,-0x1c(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	0f b6 45 e4          	movzbl -0x1c(%rbp),%eax
  28:	83 e0 3f             	and    $0x3f,%eax
  2b:	83 c8 40             	or     $0x40,%eax
  2e:	0f b6 d0             	movzbl %al,%edx
  31:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  35:	89 d6                	mov    %edx,%esi
  37:	48 89 c7             	mov    %rax,%rdi
  3a:	e8 00 00 00 00       	call   3f <Ssd1311::SetCGRAM(unsigned char)+0x3f>
  3f:	90                   	nop
  40:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  44:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  4b:	00 00 
  4d:	74 05                	je     54 <Ssd1311::SetCGRAM(unsigned char)+0x54>
  4f:	e8 00 00 00 00       	call   54 <Ssd1311::SetCGRAM(unsigned char)+0x54>
  54:	c9                   	leave  
  55:	c3                   	ret    

Disassembly of section .text._ZN7Ssd13115SetREENS_11FunctionSetE:

0000000000000000 <Ssd1311::SetRE(Ssd1311::FunctionSet)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10:	89 75 d4             	mov    %esi,-0x2c(%rbp)
  13:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1a:	00 00 
  1c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  20:	31 c0                	xor    %eax,%eax
  22:	c6 45 e3 20          	movb   $0x20,-0x1d(%rbp)
  26:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%rbp)
  2d:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%rbp)
  34:	83 7d d4 00          	cmpl   $0x0,-0x2c(%rbp)
  38:	75 0d                	jne    47 <Ssd1311::SetRE(Ssd1311::FunctionSet)+0x47>
  3a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  41:	80 4d e3 08          	orb    $0x8,-0x1d(%rbp)
  45:	eb 16                	jmp    5d <Ssd1311::SetRE(Ssd1311::FunctionSet)+0x5d>
  47:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  4e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
  55:	80 4d e3 08          	orb    $0x8,-0x1d(%rbp)
  59:	80 4d e3 02          	orb    $0x2,-0x1d(%rbp)
  5d:	0f b6 55 e3          	movzbl -0x1d(%rbp),%edx
  61:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  65:	89 d6                	mov    %edx,%esi
  67:	48 89 c7             	mov    %rax,%rdi
  6a:	e8 00 00 00 00       	call   6f <Ssd1311::SetRE(Ssd1311::FunctionSet)+0x6f>
  6f:	90                   	nop
  70:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  74:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  7b:	00 00 
  7d:	74 05                	je     84 <Ssd1311::SetRE(Ssd1311::FunctionSet)+0x84>
  7f:	e8 00 00 00 00       	call   84 <Ssd1311::SetRE(Ssd1311::FunctionSet)+0x84>
  84:	c9                   	leave  
  85:	c3                   	ret    

Disassembly of section .text._ZN7Ssd13115SetSDENS_10CommandSetE:

0000000000000000 <Ssd1311::SetSD(Ssd1311::CommandSet)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  13:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1a:	00 00 
  1c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  20:	31 c0                	xor    %eax,%eax
  22:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  26:	be 02 00 00 00       	mov    $0x2,%esi
  2b:	48 89 c7             	mov    %rax,%rdi
  2e:	e8 00 00 00 00       	call   33 <Ssd1311::SetSD(Ssd1311::CommandSet)+0x33>
  33:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  37:	75 07                	jne    40 <Ssd1311::SetSD(Ssd1311::CommandSet)+0x40>
  39:	ba 78 00 00 00       	mov    $0x78,%edx
  3e:	eb 05                	jmp    45 <Ssd1311::SetSD(Ssd1311::CommandSet)+0x45>
  40:	ba 79 00 00 00       	mov    $0x79,%edx
  45:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  49:	89 d6                	mov    %edx,%esi
  4b:	48 89 c7             	mov    %rax,%rdi
  4e:	e8 00 00 00 00       	call   53 <Ssd1311::SetSD(Ssd1311::CommandSet)+0x53>
  53:	90                   	nop
  54:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  58:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  5f:	00 00 
  61:	74 05                	je     68 <Ssd1311::SetSD(Ssd1311::CommandSet)+0x68>
  63:	e8 00 00 00 00       	call   68 <Ssd1311::SetSD(Ssd1311::CommandSet)+0x68>
  68:	c9                   	leave  
  69:	c3                   	ret    

Disassembly of section .text._ZN7Ssd131111SendCommandEh:

0000000000000000 <Ssd1311::SendCommand(unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	88 45 e4             	mov    %al,-0x1c(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  28:	48 8d 48 14          	lea    0x14(%rax),%rcx
  2c:	0f b6 45 e4          	movzbl -0x1c(%rbp),%eax
  30:	89 c2                	mov    %eax,%edx
  32:	be 80 00 00 00       	mov    $0x80,%esi
  37:	48 89 cf             	mov    %rcx,%rdi
  3a:	e8 00 00 00 00       	call   3f <Ssd1311::SendCommand(unsigned char)+0x3f>
  3f:	90                   	nop
  40:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  44:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  4b:	00 00 
  4d:	74 05                	je     54 <Ssd1311::SendCommand(unsigned char)+0x54>
  4f:	e8 00 00 00 00       	call   54 <Ssd1311::SendCommand(unsigned char)+0x54>
  54:	c9                   	leave  
  55:	c3                   	ret    

Disassembly of section .text._ZN7Ssd13118SendDataEh:

0000000000000000 <Ssd1311::SendData(unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	88 45 e4             	mov    %al,-0x1c(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  28:	48 8d 48 14          	lea    0x14(%rax),%rcx
  2c:	0f b6 45 e4          	movzbl -0x1c(%rbp),%eax
  30:	89 c2                	mov    %eax,%edx
  32:	be 40 00 00 00       	mov    $0x40,%esi
  37:	48 89 cf             	mov    %rcx,%rdi
  3a:	e8 00 00 00 00       	call   3f <Ssd1311::SendData(unsigned char)+0x3f>
  3f:	90                   	nop
  40:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  44:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  4b:	00 00 
  4d:	74 05                	je     54 <Ssd1311::SendData(unsigned char)+0x54>
  4f:	e8 00 00 00 00       	call   54 <Ssd1311::SendData(unsigned char)+0x54>
  54:	c9                   	leave  
  55:	c3                   	ret    

Disassembly of section .text._ZN7Ssd13118SendDataEPKhj:

0000000000000000 <Ssd1311::SendData(unsigned char const*, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  14:	89 55 dc             	mov    %edx,-0x24(%rbp)
  17:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1e:	00 00 
  20:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  24:	31 c0                	xor    %eax,%eax
  26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2a:	48 8d 48 14          	lea    0x14(%rax),%rcx
  2e:	8b 55 dc             	mov    -0x24(%rbp),%edx
  31:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  35:	48 89 c6             	mov    %rax,%rsi
  38:	48 89 cf             	mov    %rcx,%rdi
  3b:	e8 00 00 00 00       	call   40 <Ssd1311::SendData(unsigned char const*, unsigned int)+0x40>
  40:	90                   	nop
  41:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  45:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  4c:	00 00 
  4e:	74 05                	je     55 <Ssd1311::SendData(unsigned char const*, unsigned int)+0x55>
  50:	e8 00 00 00 00       	call   55 <Ssd1311::SendData(unsigned char const*, unsigned int)+0x55>
  55:	c9                   	leave  
  56:	c3                   	ret    

Disassembly of section .text._ZN7Ssd131112CheckSSD1311Ev:

0000000000000000 <Ssd1311::CheckSSD1311()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  23:	be 00 00 00 00       	mov    $0x0,%esi
  28:	48 89 c7             	mov    %rax,%rdi
  2b:	e8 00 00 00 00       	call   30 <Ssd1311::CheckSSD1311()+0x30>
  30:	c7 45 ed 40 aa 55 aa 	movl   $0xaa55aa40,-0x13(%rbp)
  37:	c6 45 f1 55          	movb   $0x55,-0xf(%rbp)
  3b:	48 8d 4d ed          	lea    -0x13(%rbp),%rcx
  3f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  43:	ba 05 00 00 00       	mov    $0x5,%edx
  48:	48 89 ce             	mov    %rcx,%rsi
  4b:	48 89 c7             	mov    %rax,%rdi
  4e:	e8 00 00 00 00       	call   53 <Ssd1311::CheckSSD1311()+0x53>
  53:	c7 45 f2 00 00 00 00 	movl   $0x0,-0xe(%rbp)
  5a:	66 c7 45 f6 00 00    	movw   $0x0,-0xa(%rbp)
  60:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  64:	be 00 00 00 00       	mov    $0x0,%esi
  69:	48 89 c7             	mov    %rax,%rdi
  6c:	e8 00 00 00 00       	call   71 <Ssd1311::CheckSSD1311()+0x71>
  71:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  75:	48 83 c0 14          	add    $0x14,%rax
  79:	be 40 00 00 00       	mov    $0x40,%esi
  7e:	48 89 c7             	mov    %rax,%rdi
  81:	e8 00 00 00 00       	call   86 <Ssd1311::CheckSSD1311()+0x86>
  86:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8a:	48 8d 48 14          	lea    0x14(%rax),%rcx
  8e:	48 8d 45 f2          	lea    -0xe(%rbp),%rax
  92:	ba 06 00 00 00       	mov    $0x6,%edx
  97:	48 89 c6             	mov    %rax,%rsi
  9a:	48 89 cf             	mov    %rcx,%rdi
  9d:	e8 00 00 00 00       	call   a2 <Ssd1311::CheckSSD1311()+0xa2>
  a2:	48 8d 45 f2          	lea    -0xe(%rbp),%rax
  a6:	48 8d 48 01          	lea    0x1(%rax),%rcx
  aa:	48 8d 45 ed          	lea    -0x13(%rbp),%rax
  ae:	48 83 c0 01          	add    $0x1,%rax
  b2:	ba 04 00 00 00       	mov    $0x4,%edx
  b7:	48 89 ce             	mov    %rcx,%rsi
  ba:	48 89 c7             	mov    %rax,%rdi
  bd:	e8 00 00 00 00       	call   c2 <Ssd1311::CheckSSD1311()+0xc2>
  c2:	85 c0                	test   %eax,%eax
  c4:	0f 94 c0             	sete   %al
  c7:	88 45 ec             	mov    %al,-0x14(%rbp)
  ca:	0f b6 45 ec          	movzbl -0x14(%rbp),%eax
  ce:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  d2:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  d9:	00 00 
  db:	74 05                	je     e2 <Ssd1311::CheckSSD1311()+0xe2>
  dd:	e8 00 00 00 00       	call   e2 <Ssd1311::CheckSSD1311()+0xe2>
  e2:	c9                   	leave  
  e3:	c3                   	ret    

Disassembly of section .text._ZN7Ssd13118SetSleepEb:

0000000000000000 <Ssd1311::SetSleep(bool)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	88 45 e4             	mov    %al,-0x1c(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	80 7d e4 00          	cmpb   $0x0,-0x1c(%rbp)
  28:	74 16                	je     40 <Ssd1311::SetSleep(bool)+0x40>
  2a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2e:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
  32:	83 e0 fb             	and    $0xfffffffb,%eax
  35:	89 c2                	mov    %eax,%edx
  37:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3b:	88 50 1c             	mov    %dl,0x1c(%rax)
  3e:	eb 14                	jmp    54 <Ssd1311::SetSleep(bool)+0x54>
  40:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  44:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
  48:	83 c8 04             	or     $0x4,%eax
  4b:	89 c2                	mov    %eax,%edx
  4d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  51:	88 50 1c             	mov    %dl,0x1c(%rax)
  54:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  58:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
  5c:	0f b6 d0             	movzbl %al,%edx
  5f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  63:	89 d6                	mov    %edx,%esi
  65:	48 89 c7             	mov    %rax,%rdi
  68:	e8 00 00 00 00       	call   6d <Ssd1311::SetSleep(bool)+0x6d>
  6d:	90                   	nop
  6e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  72:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  79:	00 00 
  7b:	74 05                	je     82 <Ssd1311::SetSleep(bool)+0x82>
  7d:	e8 00 00 00 00       	call   82 <Ssd1311::SetSleep(bool)+0x82>
  82:	c9                   	leave  
  83:	c3                   	ret    

Disassembly of section .text._ZN7Ssd131111SetContrastEh:

0000000000000000 <Ssd1311::SetContrast(unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	88 45 e4             	mov    %al,-0x1c(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  28:	be 02 00 00 00       	mov    $0x2,%esi
  2d:	48 89 c7             	mov    %rax,%rdi
  30:	e8 00 00 00 00       	call   35 <Ssd1311::SetContrast(unsigned char)+0x35>
  35:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  39:	be 01 00 00 00       	mov    $0x1,%esi
  3e:	48 89 c7             	mov    %rax,%rdi
  41:	e8 00 00 00 00       	call   46 <Ssd1311::SetContrast(unsigned char)+0x46>
  46:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4a:	be 81 00 00 00       	mov    $0x81,%esi
  4f:	48 89 c7             	mov    %rax,%rdi
  52:	e8 00 00 00 00       	call   57 <Ssd1311::SetContrast(unsigned char)+0x57>
  57:	0f b6 55 e4          	movzbl -0x1c(%rbp),%edx
  5b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5f:	89 d6                	mov    %edx,%esi
  61:	48 89 c7             	mov    %rax,%rdi
  64:	e8 00 00 00 00       	call   69 <Ssd1311::SetContrast(unsigned char)+0x69>
  69:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  6d:	be 00 00 00 00       	mov    $0x0,%esi
  72:	48 89 c7             	mov    %rax,%rdi
  75:	e8 00 00 00 00       	call   7a <Ssd1311::SetContrast(unsigned char)+0x7a>
  7a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7e:	be 00 00 00 00       	mov    $0x0,%esi
  83:	48 89 c7             	mov    %rax,%rdi
  86:	e8 00 00 00 00       	call   8b <Ssd1311::SetContrast(unsigned char)+0x8b>
  8b:	90                   	nop
  8c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  90:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  97:	00 00 
  99:	74 05                	je     a0 <Ssd1311::SetContrast(unsigned char)+0xa0>
  9b:	e8 00 00 00 00       	call   a0 <Ssd1311::SetContrast(unsigned char)+0xa0>
  a0:	c9                   	leave  
  a1:	c3                   	ret    

Disassembly of section .text._ZN7Ssd13119SetCursorEj:

0000000000000000 <Ssd1311::SetCursor(unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  13:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1a:	00 00 
  1c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  20:	31 c0                	xor    %eax,%eax
  22:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  25:	83 f8 03             	cmp    $0x3,%eax
  28:	74 50                	je     7a <Ssd1311::SetCursor(unsigned int)+0x7a>
  2a:	83 f8 03             	cmp    $0x3,%eax
  2d:	7f 75                	jg     a4 <Ssd1311::SetCursor(unsigned int)+0xa4>
  2f:	85 c0                	test   %eax,%eax
  31:	74 07                	je     3a <Ssd1311::SetCursor(unsigned int)+0x3a>
  33:	83 f8 01             	cmp    $0x1,%eax
  36:	74 18                	je     50 <Ssd1311::SetCursor(unsigned int)+0x50>
  38:	eb 6a                	jmp    a4 <Ssd1311::SetCursor(unsigned int)+0xa4>
  3a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3e:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
  42:	83 e0 fd             	and    $0xfffffffd,%eax
  45:	89 c2                	mov    %eax,%edx
  47:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4b:	88 50 1c             	mov    %dl,0x1c(%rax)
  4e:	eb 55                	jmp    a5 <Ssd1311::SetCursor(unsigned int)+0xa5>
  50:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  54:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
  58:	83 c8 02             	or     $0x2,%eax
  5b:	89 c2                	mov    %eax,%edx
  5d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  61:	88 50 1c             	mov    %dl,0x1c(%rax)
  64:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  68:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
  6c:	83 e0 fe             	and    $0xfffffffe,%eax
  6f:	89 c2                	mov    %eax,%edx
  71:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  75:	88 50 1c             	mov    %dl,0x1c(%rax)
  78:	eb 2b                	jmp    a5 <Ssd1311::SetCursor(unsigned int)+0xa5>
  7a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7e:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
  82:	83 c8 02             	or     $0x2,%eax
  85:	89 c2                	mov    %eax,%edx
  87:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8b:	88 50 1c             	mov    %dl,0x1c(%rax)
  8e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  92:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
  96:	83 c8 01             	or     $0x1,%eax
  99:	89 c2                	mov    %eax,%edx
  9b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  9f:	88 50 1c             	mov    %dl,0x1c(%rax)
  a2:	eb 01                	jmp    a5 <Ssd1311::SetCursor(unsigned int)+0xa5>
  a4:	90                   	nop
  a5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  a9:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
  ad:	0f b6 d0             	movzbl %al,%edx
  b0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  b4:	89 d6                	mov    %edx,%esi
  b6:	48 89 c7             	mov    %rax,%rdi
  b9:	e8 00 00 00 00       	call   be <Ssd1311::SetCursor(unsigned int)+0xbe>
  be:	90                   	nop
  bf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  c3:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  ca:	00 00 
  cc:	74 05                	je     d3 <Ssd1311::SetCursor(unsigned int)+0xd3>
  ce:	e8 00 00 00 00       	call   d3 <Ssd1311::SetCursor(unsigned int)+0xd3>
  d3:	c9                   	leave  
  d4:	c3                   	ret    
